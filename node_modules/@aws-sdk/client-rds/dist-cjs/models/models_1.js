"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidExportSourceStateFault = exports.InvalidExportOnlyFault = exports.IamRoleNotFoundFault = exports.IamRoleMissingPermissionsFault = exports.ExportTaskAlreadyExistsFault = exports.PointInTimeRestoreNotEnabledFault = exports.InvalidRestoreFault = exports.InsufficientDBClusterCapacityFault = exports.InvalidS3BucketFault = exports.DBInstanceRoleNotFoundFault = exports.DBClusterRoleNotFoundFault = exports.InsufficientAvailableIPsInSubnetFault = exports.DBProxyTargetAlreadyRegisteredFault = exports.ReservedDBInstanceQuotaExceededFault = exports.ReservedDBInstanceAlreadyExistsFault = exports.SubnetAlreadyInUse = exports.DBUpgradeDependencyFailureFault = exports.SharedSnapshotQuotaExceededFault = exports.StorageTypeNotAvailableFault = exports.CustomEngineVersionStatus = exports.InvalidDBClusterCapacityFault = exports.AuditPolicyState = exports.DBLogFileNotFoundFault = exports.ReservedDBInstancesOfferingNotFoundFault = exports.ReservedDBInstanceNotFoundFault = exports.SourceType = exports.TargetType = exports.TargetState = exports.TargetHealthReason = exports.TargetRole = void 0;
const RDSServiceException_1 = require("./RDSServiceException");
exports.TargetRole = {
    READ_ONLY: "READ_ONLY",
    READ_WRITE: "READ_WRITE",
    UNKNOWN: "UNKNOWN",
};
exports.TargetHealthReason = {
    AUTH_FAILURE: "AUTH_FAILURE",
    CONNECTION_FAILED: "CONNECTION_FAILED",
    INVALID_REPLICATION_STATE: "INVALID_REPLICATION_STATE",
    PENDING_PROXY_CAPACITY: "PENDING_PROXY_CAPACITY",
    UNREACHABLE: "UNREACHABLE",
};
exports.TargetState = {
    available: "AVAILABLE",
    registering: "REGISTERING",
    unavailable: "UNAVAILABLE",
};
exports.TargetType = {
    RDS_INSTANCE: "RDS_INSTANCE",
    RDS_SERVERLESS_ENDPOINT: "RDS_SERVERLESS_ENDPOINT",
    TRACKED_CLUSTER: "TRACKED_CLUSTER",
};
exports.SourceType = {
    blue_green_deployment: "blue-green-deployment",
    custom_engine_version: "custom-engine-version",
    db_cluster: "db-cluster",
    db_cluster_snapshot: "db-cluster-snapshot",
    db_instance: "db-instance",
    db_parameter_group: "db-parameter-group",
    db_proxy: "db-proxy",
    db_security_group: "db-security-group",
    db_snapshot: "db-snapshot",
};
class ReservedDBInstanceNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ReservedDBInstanceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstanceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceNotFoundFault.prototype);
    }
}
exports.ReservedDBInstanceNotFoundFault = ReservedDBInstanceNotFoundFault;
class ReservedDBInstancesOfferingNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ReservedDBInstancesOfferingNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstancesOfferingNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstancesOfferingNotFoundFault.prototype);
    }
}
exports.ReservedDBInstancesOfferingNotFoundFault = ReservedDBInstancesOfferingNotFoundFault;
class DBLogFileNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBLogFileNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBLogFileNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBLogFileNotFoundFault.prototype);
    }
}
exports.DBLogFileNotFoundFault = DBLogFileNotFoundFault;
exports.AuditPolicyState = {
    LOCKED_POLICY: "locked",
    UNLOCKED_POLICY: "unlocked",
};
class InvalidDBClusterCapacityFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterCapacityFault.prototype);
    }
}
exports.InvalidDBClusterCapacityFault = InvalidDBClusterCapacityFault;
exports.CustomEngineVersionStatus = {
    available: "available",
    inactive: "inactive",
    inactive_except_restore: "inactive-except-restore",
};
class StorageTypeNotAvailableFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "StorageTypeNotAvailableFault",
            $fault: "client",
            ...opts,
        });
        this.name = "StorageTypeNotAvailableFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageTypeNotAvailableFault.prototype);
    }
}
exports.StorageTypeNotAvailableFault = StorageTypeNotAvailableFault;
class SharedSnapshotQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SharedSnapshotQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SharedSnapshotQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SharedSnapshotQuotaExceededFault.prototype);
    }
}
exports.SharedSnapshotQuotaExceededFault = SharedSnapshotQuotaExceededFault;
class DBUpgradeDependencyFailureFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBUpgradeDependencyFailureFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBUpgradeDependencyFailureFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBUpgradeDependencyFailureFault.prototype);
    }
}
exports.DBUpgradeDependencyFailureFault = DBUpgradeDependencyFailureFault;
class SubnetAlreadyInUse extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SubnetAlreadyInUse",
            $fault: "client",
            ...opts,
        });
        this.name = "SubnetAlreadyInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubnetAlreadyInUse.prototype);
    }
}
exports.SubnetAlreadyInUse = SubnetAlreadyInUse;
class ReservedDBInstanceAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ReservedDBInstanceAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstanceAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceAlreadyExistsFault.prototype);
    }
}
exports.ReservedDBInstanceAlreadyExistsFault = ReservedDBInstanceAlreadyExistsFault;
class ReservedDBInstanceQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ReservedDBInstanceQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstanceQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceQuotaExceededFault.prototype);
    }
}
exports.ReservedDBInstanceQuotaExceededFault = ReservedDBInstanceQuotaExceededFault;
class DBProxyTargetAlreadyRegisteredFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyTargetAlreadyRegisteredFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyTargetAlreadyRegisteredFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetAlreadyRegisteredFault.prototype);
    }
}
exports.DBProxyTargetAlreadyRegisteredFault = DBProxyTargetAlreadyRegisteredFault;
class InsufficientAvailableIPsInSubnetFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InsufficientAvailableIPsInSubnetFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientAvailableIPsInSubnetFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientAvailableIPsInSubnetFault.prototype);
    }
}
exports.InsufficientAvailableIPsInSubnetFault = InsufficientAvailableIPsInSubnetFault;
class DBClusterRoleNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterRoleNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleNotFoundFault.prototype);
    }
}
exports.DBClusterRoleNotFoundFault = DBClusterRoleNotFoundFault;
class DBInstanceRoleNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceRoleNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleNotFoundFault.prototype);
    }
}
exports.DBInstanceRoleNotFoundFault = DBInstanceRoleNotFoundFault;
class InvalidS3BucketFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3BucketFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3BucketFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3BucketFault.prototype);
    }
}
exports.InvalidS3BucketFault = InvalidS3BucketFault;
class InsufficientDBClusterCapacityFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InsufficientDBClusterCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientDBClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientDBClusterCapacityFault.prototype);
    }
}
exports.InsufficientDBClusterCapacityFault = InsufficientDBClusterCapacityFault;
class InvalidRestoreFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidRestoreFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRestoreFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRestoreFault.prototype);
    }
}
exports.InvalidRestoreFault = InvalidRestoreFault;
class PointInTimeRestoreNotEnabledFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "PointInTimeRestoreNotEnabledFault",
            $fault: "client",
            ...opts,
        });
        this.name = "PointInTimeRestoreNotEnabledFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, PointInTimeRestoreNotEnabledFault.prototype);
    }
}
exports.PointInTimeRestoreNotEnabledFault = PointInTimeRestoreNotEnabledFault;
class ExportTaskAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ExportTaskAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ExportTaskAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportTaskAlreadyExistsFault.prototype);
    }
}
exports.ExportTaskAlreadyExistsFault = ExportTaskAlreadyExistsFault;
class IamRoleMissingPermissionsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "IamRoleMissingPermissionsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "IamRoleMissingPermissionsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamRoleMissingPermissionsFault.prototype);
    }
}
exports.IamRoleMissingPermissionsFault = IamRoleMissingPermissionsFault;
class IamRoleNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "IamRoleNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "IamRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamRoleNotFoundFault.prototype);
    }
}
exports.IamRoleNotFoundFault = IamRoleNotFoundFault;
class InvalidExportOnlyFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidExportOnlyFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportOnlyFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportOnlyFault.prototype);
    }
}
exports.InvalidExportOnlyFault = InvalidExportOnlyFault;
class InvalidExportSourceStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidExportSourceStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportSourceStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportSourceStateFault.prototype);
    }
}
exports.InvalidExportSourceStateFault = InvalidExportSourceStateFault;
