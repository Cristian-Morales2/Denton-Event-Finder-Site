"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteForwardingStatus = exports.Ec2ImagePropertiesNotSupportedFault = exports.CustomDBEngineVersionQuotaExceededFault = exports.CustomDBEngineVersionAlreadyExistsFault = exports.CreateCustomDBEngineVersionFault = exports.SourceDatabaseNotSupportedFault = exports.SourceClusterNotSupportedFault = exports.InstanceQuotaExceededFault = exports.DBClusterQuotaExceededFault = exports.DBClusterParameterGroupNotFoundFault = exports.BlueGreenDeploymentAlreadyExistsFault = exports.OptionGroupQuotaExceededFault = exports.OptionGroupNotFoundFault = exports.OptionGroupAlreadyExistsFault = exports.InvalidDBSnapshotStateFault = exports.DBSnapshotAlreadyExistsFault = exports.CustomAvailabilityZoneNotFoundFault = exports.SnapshotQuotaExceededFault = exports.KMSKeyNotAccessibleFault = exports.InvalidDBClusterSnapshotStateFault = exports.DBClusterSnapshotNotFoundFault = exports.DBClusterSnapshotAlreadyExistsFault = exports.DBParameterGroupQuotaExceededFault = exports.DBParameterGroupNotFoundFault = exports.DBParameterGroupAlreadyExistsFault = exports.InvalidExportTaskStateFault = exports.ExportTaskNotFoundFault = exports.ExportSourceType = exports.InvalidDBSecurityGroupStateFault = exports.DBSecurityGroupNotFoundFault = exports.AuthorizationQuotaExceededFault = exports.AuthorizationAlreadyExistsFault = exports.ResourceNotFoundFault = exports.DBSnapshotNotFoundFault = exports.DBProxyTargetGroupNotFoundFault = exports.DBProxyNotFoundFault = exports.BlueGreenDeploymentNotFoundFault = exports.SubscriptionNotFoundFault = exports.SourceNotFoundFault = exports.InvalidDBInstanceStateFault = exports.DBInstanceRoleQuotaExceededFault = exports.DBInstanceRoleAlreadyExistsFault = exports.DBInstanceNotFoundFault = exports.InvalidDBClusterStateFault = exports.DBClusterRoleQuotaExceededFault = exports.DBClusterRoleAlreadyExistsFault = exports.DBClusterNotFoundFault = exports.ActivityStreamStatus = exports.ActivityStreamPolicyStatus = exports.ActivityStreamMode = void 0;
exports.FailoverStatus = exports.SubscriptionCategoryNotFoundFault = exports.SubscriptionAlreadyExistFault = exports.SNSTopicArnNotFoundFault = exports.SNSNoAuthorizationFault = exports.SNSInvalidTopicFault = exports.EventSubscriptionQuotaExceededFault = exports.DBSubnetQuotaExceededFault = exports.DBSubnetGroupQuotaExceededFault = exports.DBSubnetGroupAlreadyExistsFault = exports.DBSecurityGroupQuotaExceededFault = exports.DBSecurityGroupNotSupportedFault = exports.DBSecurityGroupAlreadyExistsFault = exports.InvalidDBProxyStateFault = exports.DBProxyEndpointQuotaExceededFault = exports.DBProxyEndpointAlreadyExistsFault = exports.DBProxyEndpointStatus = exports.DBProxyEndpointTargetRole = exports.DBProxyQuotaExceededFault = exports.DBProxyAlreadyExistsFault = exports.DBProxyStatus = exports.EngineFamily = exports.IAMAuthMode = exports.ClientPasswordAuthType = exports.AuthScheme = exports.InvalidDBSubnetGroupFault = exports.DBSubnetGroupNotAllowedFault = exports.StorageTypeNotSupportedFault = exports.ProvisionedIopsNotAvailableInAZFault = exports.NetworkTypeNotSupported = exports.InsufficientDBInstanceCapacityFault = exports.DBInstanceAlreadyExistsFault = exports.ReplicaMode = exports.AutomationMode = exports.CertificateNotFoundFault = exports.BackupPolicyNotFoundFault = exports.AuthorizationNotFoundFault = exports.DBClusterEndpointQuotaExceededFault = exports.DBClusterEndpointAlreadyExistsFault = exports.StorageQuotaExceededFault = exports.InvalidVPCNetworkStateFault = exports.InvalidSubnet = exports.InvalidGlobalClusterStateFault = exports.InvalidDBSubnetGroupStateFault = exports.InsufficientStorageClusterCapacityFault = exports.GlobalClusterNotFoundFault = exports.DomainNotFoundFault = exports.DBSubnetGroupNotFoundFault = exports.DBSubnetGroupDoesNotCoverEnoughAZs = exports.DBClusterAlreadyExistsFault = void 0;
exports.ApplyMethod = exports.DBClusterBacktrackNotFoundFault = exports.DBProxyTargetNotFoundFault = exports.InvalidOptionGroupStateFault = exports.InvalidEventSubscriptionStateFault = exports.InvalidDBSubnetStateFault = exports.InvalidDBProxyEndpointStateFault = exports.DBProxyEndpointNotFoundFault = exports.InvalidDBInstanceAutomatedBackupStateFault = exports.DBInstanceAutomatedBackupNotFoundFault = exports.DBInstanceAutomatedBackupQuotaExceededFault = exports.InvalidDBParameterGroupStateFault = exports.InvalidDBClusterEndpointStateFault = exports.DBClusterEndpointNotFoundFault = exports.InvalidCustomDBEngineVersionStateFault = exports.CustomDBEngineVersionNotFoundFault = exports.InvalidBlueGreenDeploymentStateFault = exports.GlobalClusterQuotaExceededFault = exports.GlobalClusterAlreadyExistsFault = void 0;
const RDSServiceException_1 = require("./RDSServiceException");
exports.ActivityStreamMode = {
    async: "async",
    sync: "sync",
};
exports.ActivityStreamPolicyStatus = {
    locked: "locked",
    locking_policy: "locking-policy",
    unlocked: "unlocked",
    unlocking_policy: "unlocking-policy",
};
exports.ActivityStreamStatus = {
    started: "started",
    starting: "starting",
    stopped: "stopped",
    stopping: "stopping",
};
class DBClusterNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterNotFoundFault.prototype);
    }
}
exports.DBClusterNotFoundFault = DBClusterNotFoundFault;
class DBClusterRoleAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterRoleAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterRoleAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleAlreadyExistsFault.prototype);
    }
}
exports.DBClusterRoleAlreadyExistsFault = DBClusterRoleAlreadyExistsFault;
class DBClusterRoleQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterRoleQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterRoleQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleQuotaExceededFault.prototype);
    }
}
exports.DBClusterRoleQuotaExceededFault = DBClusterRoleQuotaExceededFault;
class InvalidDBClusterStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterStateFault.prototype);
    }
}
exports.InvalidDBClusterStateFault = InvalidDBClusterStateFault;
class DBInstanceNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceNotFoundFault.prototype);
    }
}
exports.DBInstanceNotFoundFault = DBInstanceNotFoundFault;
class DBInstanceRoleAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceRoleAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceRoleAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleAlreadyExistsFault.prototype);
    }
}
exports.DBInstanceRoleAlreadyExistsFault = DBInstanceRoleAlreadyExistsFault;
class DBInstanceRoleQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceRoleQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceRoleQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleQuotaExceededFault.prototype);
    }
}
exports.DBInstanceRoleQuotaExceededFault = DBInstanceRoleQuotaExceededFault;
class InvalidDBInstanceStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBInstanceStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBInstanceStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBInstanceStateFault.prototype);
    }
}
exports.InvalidDBInstanceStateFault = InvalidDBInstanceStateFault;
class SourceNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SourceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceNotFoundFault.prototype);
    }
}
exports.SourceNotFoundFault = SourceNotFoundFault;
class SubscriptionNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SubscriptionNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SubscriptionNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionNotFoundFault.prototype);
    }
}
exports.SubscriptionNotFoundFault = SubscriptionNotFoundFault;
class BlueGreenDeploymentNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "BlueGreenDeploymentNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "BlueGreenDeploymentNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, BlueGreenDeploymentNotFoundFault.prototype);
    }
}
exports.BlueGreenDeploymentNotFoundFault = BlueGreenDeploymentNotFoundFault;
class DBProxyNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyNotFoundFault.prototype);
    }
}
exports.DBProxyNotFoundFault = DBProxyNotFoundFault;
class DBProxyTargetGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyTargetGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyTargetGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetGroupNotFoundFault.prototype);
    }
}
exports.DBProxyTargetGroupNotFoundFault = DBProxyTargetGroupNotFoundFault;
class DBSnapshotNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSnapshotNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSnapshotNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSnapshotNotFoundFault.prototype);
    }
}
exports.DBSnapshotNotFoundFault = DBSnapshotNotFoundFault;
class ResourceNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundFault.prototype);
    }
}
exports.ResourceNotFoundFault = ResourceNotFoundFault;
class AuthorizationAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "AuthorizationAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorizationAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationAlreadyExistsFault.prototype);
    }
}
exports.AuthorizationAlreadyExistsFault = AuthorizationAlreadyExistsFault;
class AuthorizationQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "AuthorizationQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorizationQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationQuotaExceededFault.prototype);
    }
}
exports.AuthorizationQuotaExceededFault = AuthorizationQuotaExceededFault;
class DBSecurityGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupNotFoundFault.prototype);
    }
}
exports.DBSecurityGroupNotFoundFault = DBSecurityGroupNotFoundFault;
class InvalidDBSecurityGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSecurityGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSecurityGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSecurityGroupStateFault.prototype);
    }
}
exports.InvalidDBSecurityGroupStateFault = InvalidDBSecurityGroupStateFault;
exports.ExportSourceType = {
    CLUSTER: "CLUSTER",
    SNAPSHOT: "SNAPSHOT",
};
class ExportTaskNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ExportTaskNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ExportTaskNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportTaskNotFoundFault.prototype);
    }
}
exports.ExportTaskNotFoundFault = ExportTaskNotFoundFault;
class InvalidExportTaskStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidExportTaskStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportTaskStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportTaskStateFault.prototype);
    }
}
exports.InvalidExportTaskStateFault = InvalidExportTaskStateFault;
class DBParameterGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBParameterGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBParameterGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupAlreadyExistsFault.prototype);
    }
}
exports.DBParameterGroupAlreadyExistsFault = DBParameterGroupAlreadyExistsFault;
class DBParameterGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBParameterGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBParameterGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupNotFoundFault.prototype);
    }
}
exports.DBParameterGroupNotFoundFault = DBParameterGroupNotFoundFault;
class DBParameterGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBParameterGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBParameterGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupQuotaExceededFault.prototype);
    }
}
exports.DBParameterGroupQuotaExceededFault = DBParameterGroupQuotaExceededFault;
class DBClusterSnapshotAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterSnapshotAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterSnapshotAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterSnapshotAlreadyExistsFault.prototype);
    }
}
exports.DBClusterSnapshotAlreadyExistsFault = DBClusterSnapshotAlreadyExistsFault;
class DBClusterSnapshotNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterSnapshotNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterSnapshotNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterSnapshotNotFoundFault.prototype);
    }
}
exports.DBClusterSnapshotNotFoundFault = DBClusterSnapshotNotFoundFault;
class InvalidDBClusterSnapshotStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterSnapshotStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterSnapshotStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterSnapshotStateFault.prototype);
    }
}
exports.InvalidDBClusterSnapshotStateFault = InvalidDBClusterSnapshotStateFault;
class KMSKeyNotAccessibleFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "KMSKeyNotAccessibleFault",
            $fault: "client",
            ...opts,
        });
        this.name = "KMSKeyNotAccessibleFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, KMSKeyNotAccessibleFault.prototype);
    }
}
exports.KMSKeyNotAccessibleFault = KMSKeyNotAccessibleFault;
class SnapshotQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SnapshotQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SnapshotQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SnapshotQuotaExceededFault.prototype);
    }
}
exports.SnapshotQuotaExceededFault = SnapshotQuotaExceededFault;
class CustomAvailabilityZoneNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomAvailabilityZoneNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomAvailabilityZoneNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomAvailabilityZoneNotFoundFault.prototype);
    }
}
exports.CustomAvailabilityZoneNotFoundFault = CustomAvailabilityZoneNotFoundFault;
class DBSnapshotAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSnapshotAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSnapshotAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSnapshotAlreadyExistsFault.prototype);
    }
}
exports.DBSnapshotAlreadyExistsFault = DBSnapshotAlreadyExistsFault;
class InvalidDBSnapshotStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSnapshotStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSnapshotStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSnapshotStateFault.prototype);
    }
}
exports.InvalidDBSnapshotStateFault = InvalidDBSnapshotStateFault;
class OptionGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "OptionGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "OptionGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupAlreadyExistsFault.prototype);
    }
}
exports.OptionGroupAlreadyExistsFault = OptionGroupAlreadyExistsFault;
class OptionGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "OptionGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "OptionGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupNotFoundFault.prototype);
    }
}
exports.OptionGroupNotFoundFault = OptionGroupNotFoundFault;
class OptionGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "OptionGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "OptionGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupQuotaExceededFault.prototype);
    }
}
exports.OptionGroupQuotaExceededFault = OptionGroupQuotaExceededFault;
class BlueGreenDeploymentAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "BlueGreenDeploymentAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "BlueGreenDeploymentAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, BlueGreenDeploymentAlreadyExistsFault.prototype);
    }
}
exports.BlueGreenDeploymentAlreadyExistsFault = BlueGreenDeploymentAlreadyExistsFault;
class DBClusterParameterGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterParameterGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterParameterGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterParameterGroupNotFoundFault.prototype);
    }
}
exports.DBClusterParameterGroupNotFoundFault = DBClusterParameterGroupNotFoundFault;
class DBClusterQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterQuotaExceededFault.prototype);
    }
}
exports.DBClusterQuotaExceededFault = DBClusterQuotaExceededFault;
class InstanceQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InstanceQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceQuotaExceededFault.prototype);
    }
}
exports.InstanceQuotaExceededFault = InstanceQuotaExceededFault;
class SourceClusterNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SourceClusterNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceClusterNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceClusterNotSupportedFault.prototype);
    }
}
exports.SourceClusterNotSupportedFault = SourceClusterNotSupportedFault;
class SourceDatabaseNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SourceDatabaseNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceDatabaseNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceDatabaseNotSupportedFault.prototype);
    }
}
exports.SourceDatabaseNotSupportedFault = SourceDatabaseNotSupportedFault;
class CreateCustomDBEngineVersionFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CreateCustomDBEngineVersionFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CreateCustomDBEngineVersionFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CreateCustomDBEngineVersionFault.prototype);
    }
}
exports.CreateCustomDBEngineVersionFault = CreateCustomDBEngineVersionFault;
class CustomDBEngineVersionAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomDBEngineVersionAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomDBEngineVersionAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionAlreadyExistsFault.prototype);
    }
}
exports.CustomDBEngineVersionAlreadyExistsFault = CustomDBEngineVersionAlreadyExistsFault;
class CustomDBEngineVersionQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomDBEngineVersionQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomDBEngineVersionQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionQuotaExceededFault.prototype);
    }
}
exports.CustomDBEngineVersionQuotaExceededFault = CustomDBEngineVersionQuotaExceededFault;
class Ec2ImagePropertiesNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "Ec2ImagePropertiesNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "Ec2ImagePropertiesNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, Ec2ImagePropertiesNotSupportedFault.prototype);
    }
}
exports.Ec2ImagePropertiesNotSupportedFault = Ec2ImagePropertiesNotSupportedFault;
exports.WriteForwardingStatus = {
    DISABLED: "disabled",
    DISABLING: "disabling",
    ENABLED: "enabled",
    ENABLING: "enabling",
    UNKNOWN: "unknown",
};
class DBClusterAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterAlreadyExistsFault.prototype);
    }
}
exports.DBClusterAlreadyExistsFault = DBClusterAlreadyExistsFault;
class DBSubnetGroupDoesNotCoverEnoughAZs extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupDoesNotCoverEnoughAZs",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupDoesNotCoverEnoughAZs";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupDoesNotCoverEnoughAZs.prototype);
    }
}
exports.DBSubnetGroupDoesNotCoverEnoughAZs = DBSubnetGroupDoesNotCoverEnoughAZs;
class DBSubnetGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupNotFoundFault.prototype);
    }
}
exports.DBSubnetGroupNotFoundFault = DBSubnetGroupNotFoundFault;
class DomainNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DomainNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DomainNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DomainNotFoundFault.prototype);
    }
}
exports.DomainNotFoundFault = DomainNotFoundFault;
class GlobalClusterNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "GlobalClusterNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalClusterNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterNotFoundFault.prototype);
    }
}
exports.GlobalClusterNotFoundFault = GlobalClusterNotFoundFault;
class InsufficientStorageClusterCapacityFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InsufficientStorageClusterCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientStorageClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientStorageClusterCapacityFault.prototype);
    }
}
exports.InsufficientStorageClusterCapacityFault = InsufficientStorageClusterCapacityFault;
class InvalidDBSubnetGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSubnetGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSubnetGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetGroupStateFault.prototype);
    }
}
exports.InvalidDBSubnetGroupStateFault = InvalidDBSubnetGroupStateFault;
class InvalidGlobalClusterStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidGlobalClusterStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidGlobalClusterStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGlobalClusterStateFault.prototype);
    }
}
exports.InvalidGlobalClusterStateFault = InvalidGlobalClusterStateFault;
class InvalidSubnet extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidSubnet",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSubnet";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSubnet.prototype);
    }
}
exports.InvalidSubnet = InvalidSubnet;
class InvalidVPCNetworkStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidVPCNetworkStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidVPCNetworkStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidVPCNetworkStateFault.prototype);
    }
}
exports.InvalidVPCNetworkStateFault = InvalidVPCNetworkStateFault;
class StorageQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "StorageQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "StorageQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageQuotaExceededFault.prototype);
    }
}
exports.StorageQuotaExceededFault = StorageQuotaExceededFault;
class DBClusterEndpointAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterEndpointAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterEndpointAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointAlreadyExistsFault.prototype);
    }
}
exports.DBClusterEndpointAlreadyExistsFault = DBClusterEndpointAlreadyExistsFault;
class DBClusterEndpointQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterEndpointQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterEndpointQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointQuotaExceededFault.prototype);
    }
}
exports.DBClusterEndpointQuotaExceededFault = DBClusterEndpointQuotaExceededFault;
class AuthorizationNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "AuthorizationNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorizationNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationNotFoundFault.prototype);
    }
}
exports.AuthorizationNotFoundFault = AuthorizationNotFoundFault;
class BackupPolicyNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "BackupPolicyNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupPolicyNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupPolicyNotFoundFault.prototype);
    }
}
exports.BackupPolicyNotFoundFault = BackupPolicyNotFoundFault;
class CertificateNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CertificateNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CertificateNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CertificateNotFoundFault.prototype);
    }
}
exports.CertificateNotFoundFault = CertificateNotFoundFault;
exports.AutomationMode = {
    ALL_PAUSED: "all-paused",
    FULL: "full",
};
exports.ReplicaMode = {
    MOUNTED: "mounted",
    OPEN_READ_ONLY: "open-read-only",
};
class DBInstanceAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAlreadyExistsFault.prototype);
    }
}
exports.DBInstanceAlreadyExistsFault = DBInstanceAlreadyExistsFault;
class InsufficientDBInstanceCapacityFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InsufficientDBInstanceCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientDBInstanceCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientDBInstanceCapacityFault.prototype);
    }
}
exports.InsufficientDBInstanceCapacityFault = InsufficientDBInstanceCapacityFault;
class NetworkTypeNotSupported extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "NetworkTypeNotSupported",
            $fault: "client",
            ...opts,
        });
        this.name = "NetworkTypeNotSupported";
        this.$fault = "client";
        Object.setPrototypeOf(this, NetworkTypeNotSupported.prototype);
    }
}
exports.NetworkTypeNotSupported = NetworkTypeNotSupported;
class ProvisionedIopsNotAvailableInAZFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ProvisionedIopsNotAvailableInAZFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedIopsNotAvailableInAZFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedIopsNotAvailableInAZFault.prototype);
    }
}
exports.ProvisionedIopsNotAvailableInAZFault = ProvisionedIopsNotAvailableInAZFault;
class StorageTypeNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "StorageTypeNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "StorageTypeNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageTypeNotSupportedFault.prototype);
    }
}
exports.StorageTypeNotSupportedFault = StorageTypeNotSupportedFault;
class DBSubnetGroupNotAllowedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupNotAllowedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupNotAllowedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupNotAllowedFault.prototype);
    }
}
exports.DBSubnetGroupNotAllowedFault = DBSubnetGroupNotAllowedFault;
class InvalidDBSubnetGroupFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSubnetGroupFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSubnetGroupFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetGroupFault.prototype);
    }
}
exports.InvalidDBSubnetGroupFault = InvalidDBSubnetGroupFault;
exports.AuthScheme = {
    SECRETS: "SECRETS",
};
exports.ClientPasswordAuthType = {
    MYSQL_NATIVE_PASSWORD: "MYSQL_NATIVE_PASSWORD",
    POSTGRES_MD5: "POSTGRES_MD5",
    POSTGRES_SCRAM_SHA_256: "POSTGRES_SCRAM_SHA_256",
    SQL_SERVER_AUTHENTICATION: "SQL_SERVER_AUTHENTICATION",
};
exports.IAMAuthMode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    REQUIRED: "REQUIRED",
};
exports.EngineFamily = {
    MYSQL: "MYSQL",
    POSTGRESQL: "POSTGRESQL",
    SQLSERVER: "SQLSERVER",
};
exports.DBProxyStatus = {
    AVAILABLE: "available",
    CREATING: "creating",
    DELETING: "deleting",
    INCOMPATIBLE_NETWORK: "incompatible-network",
    INSUFFICIENT_RESOURCE_LIMITS: "insufficient-resource-limits",
    MODIFYING: "modifying",
    REACTIVATING: "reactivating",
    SUSPENDED: "suspended",
    SUSPENDING: "suspending",
};
class DBProxyAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyAlreadyExistsFault.prototype);
    }
}
exports.DBProxyAlreadyExistsFault = DBProxyAlreadyExistsFault;
class DBProxyQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyQuotaExceededFault.prototype);
    }
}
exports.DBProxyQuotaExceededFault = DBProxyQuotaExceededFault;
exports.DBProxyEndpointTargetRole = {
    READ_ONLY: "READ_ONLY",
    READ_WRITE: "READ_WRITE",
};
exports.DBProxyEndpointStatus = {
    AVAILABLE: "available",
    CREATING: "creating",
    DELETING: "deleting",
    INCOMPATIBLE_NETWORK: "incompatible-network",
    INSUFFICIENT_RESOURCE_LIMITS: "insufficient-resource-limits",
    MODIFYING: "modifying",
};
class DBProxyEndpointAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyEndpointAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyEndpointAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointAlreadyExistsFault.prototype);
    }
}
exports.DBProxyEndpointAlreadyExistsFault = DBProxyEndpointAlreadyExistsFault;
class DBProxyEndpointQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyEndpointQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyEndpointQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointQuotaExceededFault.prototype);
    }
}
exports.DBProxyEndpointQuotaExceededFault = DBProxyEndpointQuotaExceededFault;
class InvalidDBProxyStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBProxyStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBProxyStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBProxyStateFault.prototype);
    }
}
exports.InvalidDBProxyStateFault = InvalidDBProxyStateFault;
class DBSecurityGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupAlreadyExistsFault.prototype);
    }
}
exports.DBSecurityGroupAlreadyExistsFault = DBSecurityGroupAlreadyExistsFault;
class DBSecurityGroupNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupNotSupportedFault.prototype);
    }
}
exports.DBSecurityGroupNotSupportedFault = DBSecurityGroupNotSupportedFault;
class DBSecurityGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupQuotaExceededFault.prototype);
    }
}
exports.DBSecurityGroupQuotaExceededFault = DBSecurityGroupQuotaExceededFault;
class DBSubnetGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupAlreadyExistsFault.prototype);
    }
}
exports.DBSubnetGroupAlreadyExistsFault = DBSubnetGroupAlreadyExistsFault;
class DBSubnetGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupQuotaExceededFault.prototype);
    }
}
exports.DBSubnetGroupQuotaExceededFault = DBSubnetGroupQuotaExceededFault;
class DBSubnetQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetQuotaExceededFault.prototype);
    }
}
exports.DBSubnetQuotaExceededFault = DBSubnetQuotaExceededFault;
class EventSubscriptionQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "EventSubscriptionQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "EventSubscriptionQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, EventSubscriptionQuotaExceededFault.prototype);
    }
}
exports.EventSubscriptionQuotaExceededFault = EventSubscriptionQuotaExceededFault;
class SNSInvalidTopicFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SNSInvalidTopicFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SNSInvalidTopicFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSInvalidTopicFault.prototype);
    }
}
exports.SNSInvalidTopicFault = SNSInvalidTopicFault;
class SNSNoAuthorizationFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SNSNoAuthorizationFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SNSNoAuthorizationFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSNoAuthorizationFault.prototype);
    }
}
exports.SNSNoAuthorizationFault = SNSNoAuthorizationFault;
class SNSTopicArnNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SNSTopicArnNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SNSTopicArnNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSTopicArnNotFoundFault.prototype);
    }
}
exports.SNSTopicArnNotFoundFault = SNSTopicArnNotFoundFault;
class SubscriptionAlreadyExistFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SubscriptionAlreadyExistFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SubscriptionAlreadyExistFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionAlreadyExistFault.prototype);
    }
}
exports.SubscriptionAlreadyExistFault = SubscriptionAlreadyExistFault;
class SubscriptionCategoryNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SubscriptionCategoryNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SubscriptionCategoryNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionCategoryNotFoundFault.prototype);
    }
}
exports.SubscriptionCategoryNotFoundFault = SubscriptionCategoryNotFoundFault;
exports.FailoverStatus = {
    CANCELLING: "cancelling",
    FAILING_OVER: "failing-over",
    PENDING: "pending",
};
class GlobalClusterAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "GlobalClusterAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalClusterAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterAlreadyExistsFault.prototype);
    }
}
exports.GlobalClusterAlreadyExistsFault = GlobalClusterAlreadyExistsFault;
class GlobalClusterQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "GlobalClusterQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalClusterQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterQuotaExceededFault.prototype);
    }
}
exports.GlobalClusterQuotaExceededFault = GlobalClusterQuotaExceededFault;
class InvalidBlueGreenDeploymentStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidBlueGreenDeploymentStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidBlueGreenDeploymentStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBlueGreenDeploymentStateFault.prototype);
    }
}
exports.InvalidBlueGreenDeploymentStateFault = InvalidBlueGreenDeploymentStateFault;
class CustomDBEngineVersionNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomDBEngineVersionNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomDBEngineVersionNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionNotFoundFault.prototype);
    }
}
exports.CustomDBEngineVersionNotFoundFault = CustomDBEngineVersionNotFoundFault;
class InvalidCustomDBEngineVersionStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidCustomDBEngineVersionStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidCustomDBEngineVersionStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCustomDBEngineVersionStateFault.prototype);
    }
}
exports.InvalidCustomDBEngineVersionStateFault = InvalidCustomDBEngineVersionStateFault;
class DBClusterEndpointNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterEndpointNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterEndpointNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointNotFoundFault.prototype);
    }
}
exports.DBClusterEndpointNotFoundFault = DBClusterEndpointNotFoundFault;
class InvalidDBClusterEndpointStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterEndpointStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterEndpointStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterEndpointStateFault.prototype);
    }
}
exports.InvalidDBClusterEndpointStateFault = InvalidDBClusterEndpointStateFault;
class InvalidDBParameterGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBParameterGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBParameterGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBParameterGroupStateFault.prototype);
    }
}
exports.InvalidDBParameterGroupStateFault = InvalidDBParameterGroupStateFault;
class DBInstanceAutomatedBackupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceAutomatedBackupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceAutomatedBackupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAutomatedBackupQuotaExceededFault.prototype);
    }
}
exports.DBInstanceAutomatedBackupQuotaExceededFault = DBInstanceAutomatedBackupQuotaExceededFault;
class DBInstanceAutomatedBackupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceAutomatedBackupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceAutomatedBackupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAutomatedBackupNotFoundFault.prototype);
    }
}
exports.DBInstanceAutomatedBackupNotFoundFault = DBInstanceAutomatedBackupNotFoundFault;
class InvalidDBInstanceAutomatedBackupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBInstanceAutomatedBackupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBInstanceAutomatedBackupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBInstanceAutomatedBackupStateFault.prototype);
    }
}
exports.InvalidDBInstanceAutomatedBackupStateFault = InvalidDBInstanceAutomatedBackupStateFault;
class DBProxyEndpointNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyEndpointNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyEndpointNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointNotFoundFault.prototype);
    }
}
exports.DBProxyEndpointNotFoundFault = DBProxyEndpointNotFoundFault;
class InvalidDBProxyEndpointStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBProxyEndpointStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBProxyEndpointStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBProxyEndpointStateFault.prototype);
    }
}
exports.InvalidDBProxyEndpointStateFault = InvalidDBProxyEndpointStateFault;
class InvalidDBSubnetStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSubnetStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSubnetStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetStateFault.prototype);
    }
}
exports.InvalidDBSubnetStateFault = InvalidDBSubnetStateFault;
class InvalidEventSubscriptionStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidEventSubscriptionStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEventSubscriptionStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEventSubscriptionStateFault.prototype);
    }
}
exports.InvalidEventSubscriptionStateFault = InvalidEventSubscriptionStateFault;
class InvalidOptionGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidOptionGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOptionGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOptionGroupStateFault.prototype);
    }
}
exports.InvalidOptionGroupStateFault = InvalidOptionGroupStateFault;
class DBProxyTargetNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyTargetNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyTargetNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetNotFoundFault.prototype);
    }
}
exports.DBProxyTargetNotFoundFault = DBProxyTargetNotFoundFault;
class DBClusterBacktrackNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterBacktrackNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterBacktrackNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterBacktrackNotFoundFault.prototype);
    }
}
exports.DBClusterBacktrackNotFoundFault = DBClusterBacktrackNotFoundFault;
exports.ApplyMethod = {
    immediate: "immediate",
    pending_reboot: "pending-reboot",
};
