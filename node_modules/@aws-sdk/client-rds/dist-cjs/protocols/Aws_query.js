"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_DescribeBlueGreenDeploymentsCommand = exports.se_DescribeAccountAttributesCommand = exports.se_DeregisterDBProxyTargetsCommand = exports.se_DeleteOptionGroupCommand = exports.se_DeleteGlobalClusterCommand = exports.se_DeleteEventSubscriptionCommand = exports.se_DeleteDBSubnetGroupCommand = exports.se_DeleteDBSnapshotCommand = exports.se_DeleteDBSecurityGroupCommand = exports.se_DeleteDBProxyEndpointCommand = exports.se_DeleteDBProxyCommand = exports.se_DeleteDBParameterGroupCommand = exports.se_DeleteDBInstanceAutomatedBackupCommand = exports.se_DeleteDBInstanceCommand = exports.se_DeleteDBClusterSnapshotCommand = exports.se_DeleteDBClusterParameterGroupCommand = exports.se_DeleteDBClusterEndpointCommand = exports.se_DeleteDBClusterCommand = exports.se_DeleteCustomDBEngineVersionCommand = exports.se_DeleteBlueGreenDeploymentCommand = exports.se_CreateOptionGroupCommand = exports.se_CreateGlobalClusterCommand = exports.se_CreateEventSubscriptionCommand = exports.se_CreateDBSubnetGroupCommand = exports.se_CreateDBSnapshotCommand = exports.se_CreateDBSecurityGroupCommand = exports.se_CreateDBProxyEndpointCommand = exports.se_CreateDBProxyCommand = exports.se_CreateDBParameterGroupCommand = exports.se_CreateDBInstanceReadReplicaCommand = exports.se_CreateDBInstanceCommand = exports.se_CreateDBClusterSnapshotCommand = exports.se_CreateDBClusterParameterGroupCommand = exports.se_CreateDBClusterEndpointCommand = exports.se_CreateDBClusterCommand = exports.se_CreateCustomDBEngineVersionCommand = exports.se_CreateBlueGreenDeploymentCommand = exports.se_CopyOptionGroupCommand = exports.se_CopyDBSnapshotCommand = exports.se_CopyDBParameterGroupCommand = exports.se_CopyDBClusterSnapshotCommand = exports.se_CopyDBClusterParameterGroupCommand = exports.se_CancelExportTaskCommand = exports.se_BacktrackDBClusterCommand = exports.se_AuthorizeDBSecurityGroupIngressCommand = exports.se_ApplyPendingMaintenanceActionCommand = exports.se_AddTagsToResourceCommand = exports.se_AddSourceIdentifierToSubscriptionCommand = exports.se_AddRoleToDBInstanceCommand = exports.se_AddRoleToDBClusterCommand = void 0;
exports.se_ModifyDBInstanceCommand = exports.se_ModifyDBClusterSnapshotAttributeCommand = exports.se_ModifyDBClusterParameterGroupCommand = exports.se_ModifyDBClusterEndpointCommand = exports.se_ModifyDBClusterCommand = exports.se_ModifyCustomDBEngineVersionCommand = exports.se_ModifyCurrentDBClusterCapacityCommand = exports.se_ModifyCertificatesCommand = exports.se_ModifyActivityStreamCommand = exports.se_ListTagsForResourceCommand = exports.se_FailoverGlobalClusterCommand = exports.se_FailoverDBClusterCommand = exports.se_DownloadDBLogFilePortionCommand = exports.se_DescribeValidDBInstanceModificationsCommand = exports.se_DescribeSourceRegionsCommand = exports.se_DescribeReservedDBInstancesOfferingsCommand = exports.se_DescribeReservedDBInstancesCommand = exports.se_DescribePendingMaintenanceActionsCommand = exports.se_DescribeOrderableDBInstanceOptionsCommand = exports.se_DescribeOptionGroupsCommand = exports.se_DescribeOptionGroupOptionsCommand = exports.se_DescribeGlobalClustersCommand = exports.se_DescribeExportTasksCommand = exports.se_DescribeEventSubscriptionsCommand = exports.se_DescribeEventsCommand = exports.se_DescribeEventCategoriesCommand = exports.se_DescribeEngineDefaultParametersCommand = exports.se_DescribeEngineDefaultClusterParametersCommand = exports.se_DescribeDBSubnetGroupsCommand = exports.se_DescribeDBSnapshotsCommand = exports.se_DescribeDBSnapshotAttributesCommand = exports.se_DescribeDBSecurityGroupsCommand = exports.se_DescribeDBProxyTargetsCommand = exports.se_DescribeDBProxyTargetGroupsCommand = exports.se_DescribeDBProxyEndpointsCommand = exports.se_DescribeDBProxiesCommand = exports.se_DescribeDBParametersCommand = exports.se_DescribeDBParameterGroupsCommand = exports.se_DescribeDBLogFilesCommand = exports.se_DescribeDBInstancesCommand = exports.se_DescribeDBInstanceAutomatedBackupsCommand = exports.se_DescribeDBEngineVersionsCommand = exports.se_DescribeDBClusterSnapshotsCommand = exports.se_DescribeDBClusterSnapshotAttributesCommand = exports.se_DescribeDBClustersCommand = exports.se_DescribeDBClusterParametersCommand = exports.se_DescribeDBClusterParameterGroupsCommand = exports.se_DescribeDBClusterEndpointsCommand = exports.se_DescribeDBClusterBacktracksCommand = exports.se_DescribeCertificatesCommand = void 0;
exports.de_CopyDBClusterParameterGroupCommand = exports.de_CancelExportTaskCommand = exports.de_BacktrackDBClusterCommand = exports.de_AuthorizeDBSecurityGroupIngressCommand = exports.de_ApplyPendingMaintenanceActionCommand = exports.de_AddTagsToResourceCommand = exports.de_AddSourceIdentifierToSubscriptionCommand = exports.de_AddRoleToDBInstanceCommand = exports.de_AddRoleToDBClusterCommand = exports.se_SwitchoverReadReplicaCommand = exports.se_SwitchoverBlueGreenDeploymentCommand = exports.se_StopDBInstanceAutomatedBackupsReplicationCommand = exports.se_StopDBInstanceCommand = exports.se_StopDBClusterCommand = exports.se_StopActivityStreamCommand = exports.se_StartExportTaskCommand = exports.se_StartDBInstanceAutomatedBackupsReplicationCommand = exports.se_StartDBInstanceCommand = exports.se_StartDBClusterCommand = exports.se_StartActivityStreamCommand = exports.se_RevokeDBSecurityGroupIngressCommand = exports.se_RestoreDBInstanceToPointInTimeCommand = exports.se_RestoreDBInstanceFromS3Command = exports.se_RestoreDBInstanceFromDBSnapshotCommand = exports.se_RestoreDBClusterToPointInTimeCommand = exports.se_RestoreDBClusterFromSnapshotCommand = exports.se_RestoreDBClusterFromS3Command = exports.se_ResetDBParameterGroupCommand = exports.se_ResetDBClusterParameterGroupCommand = exports.se_RemoveTagsFromResourceCommand = exports.se_RemoveSourceIdentifierFromSubscriptionCommand = exports.se_RemoveRoleFromDBInstanceCommand = exports.se_RemoveRoleFromDBClusterCommand = exports.se_RemoveFromGlobalClusterCommand = exports.se_RegisterDBProxyTargetsCommand = exports.se_RebootDBInstanceCommand = exports.se_RebootDBClusterCommand = exports.se_PurchaseReservedDBInstancesOfferingCommand = exports.se_PromoteReadReplicaDBClusterCommand = exports.se_PromoteReadReplicaCommand = exports.se_ModifyOptionGroupCommand = exports.se_ModifyGlobalClusterCommand = exports.se_ModifyEventSubscriptionCommand = exports.se_ModifyDBSubnetGroupCommand = exports.se_ModifyDBSnapshotAttributeCommand = exports.se_ModifyDBSnapshotCommand = exports.se_ModifyDBProxyTargetGroupCommand = exports.se_ModifyDBProxyEndpointCommand = exports.se_ModifyDBProxyCommand = exports.se_ModifyDBParameterGroupCommand = void 0;
exports.de_DescribeDBEngineVersionsCommand = exports.de_DescribeDBClusterSnapshotsCommand = exports.de_DescribeDBClusterSnapshotAttributesCommand = exports.de_DescribeDBClustersCommand = exports.de_DescribeDBClusterParametersCommand = exports.de_DescribeDBClusterParameterGroupsCommand = exports.de_DescribeDBClusterEndpointsCommand = exports.de_DescribeDBClusterBacktracksCommand = exports.de_DescribeCertificatesCommand = exports.de_DescribeBlueGreenDeploymentsCommand = exports.de_DescribeAccountAttributesCommand = exports.de_DeregisterDBProxyTargetsCommand = exports.de_DeleteOptionGroupCommand = exports.de_DeleteGlobalClusterCommand = exports.de_DeleteEventSubscriptionCommand = exports.de_DeleteDBSubnetGroupCommand = exports.de_DeleteDBSnapshotCommand = exports.de_DeleteDBSecurityGroupCommand = exports.de_DeleteDBProxyEndpointCommand = exports.de_DeleteDBProxyCommand = exports.de_DeleteDBParameterGroupCommand = exports.de_DeleteDBInstanceAutomatedBackupCommand = exports.de_DeleteDBInstanceCommand = exports.de_DeleteDBClusterSnapshotCommand = exports.de_DeleteDBClusterParameterGroupCommand = exports.de_DeleteDBClusterEndpointCommand = exports.de_DeleteDBClusterCommand = exports.de_DeleteCustomDBEngineVersionCommand = exports.de_DeleteBlueGreenDeploymentCommand = exports.de_CreateOptionGroupCommand = exports.de_CreateGlobalClusterCommand = exports.de_CreateEventSubscriptionCommand = exports.de_CreateDBSubnetGroupCommand = exports.de_CreateDBSnapshotCommand = exports.de_CreateDBSecurityGroupCommand = exports.de_CreateDBProxyEndpointCommand = exports.de_CreateDBProxyCommand = exports.de_CreateDBParameterGroupCommand = exports.de_CreateDBInstanceReadReplicaCommand = exports.de_CreateDBInstanceCommand = exports.de_CreateDBClusterSnapshotCommand = exports.de_CreateDBClusterParameterGroupCommand = exports.de_CreateDBClusterEndpointCommand = exports.de_CreateDBClusterCommand = exports.de_CreateCustomDBEngineVersionCommand = exports.de_CreateBlueGreenDeploymentCommand = exports.de_CopyOptionGroupCommand = exports.de_CopyDBSnapshotCommand = exports.de_CopyDBParameterGroupCommand = exports.de_CopyDBClusterSnapshotCommand = void 0;
exports.de_ModifyGlobalClusterCommand = exports.de_ModifyEventSubscriptionCommand = exports.de_ModifyDBSubnetGroupCommand = exports.de_ModifyDBSnapshotAttributeCommand = exports.de_ModifyDBSnapshotCommand = exports.de_ModifyDBProxyTargetGroupCommand = exports.de_ModifyDBProxyEndpointCommand = exports.de_ModifyDBProxyCommand = exports.de_ModifyDBParameterGroupCommand = exports.de_ModifyDBInstanceCommand = exports.de_ModifyDBClusterSnapshotAttributeCommand = exports.de_ModifyDBClusterParameterGroupCommand = exports.de_ModifyDBClusterEndpointCommand = exports.de_ModifyDBClusterCommand = exports.de_ModifyCustomDBEngineVersionCommand = exports.de_ModifyCurrentDBClusterCapacityCommand = exports.de_ModifyCertificatesCommand = exports.de_ModifyActivityStreamCommand = exports.de_ListTagsForResourceCommand = exports.de_FailoverGlobalClusterCommand = exports.de_FailoverDBClusterCommand = exports.de_DownloadDBLogFilePortionCommand = exports.de_DescribeValidDBInstanceModificationsCommand = exports.de_DescribeSourceRegionsCommand = exports.de_DescribeReservedDBInstancesOfferingsCommand = exports.de_DescribeReservedDBInstancesCommand = exports.de_DescribePendingMaintenanceActionsCommand = exports.de_DescribeOrderableDBInstanceOptionsCommand = exports.de_DescribeOptionGroupsCommand = exports.de_DescribeOptionGroupOptionsCommand = exports.de_DescribeGlobalClustersCommand = exports.de_DescribeExportTasksCommand = exports.de_DescribeEventSubscriptionsCommand = exports.de_DescribeEventsCommand = exports.de_DescribeEventCategoriesCommand = exports.de_DescribeEngineDefaultParametersCommand = exports.de_DescribeEngineDefaultClusterParametersCommand = exports.de_DescribeDBSubnetGroupsCommand = exports.de_DescribeDBSnapshotsCommand = exports.de_DescribeDBSnapshotAttributesCommand = exports.de_DescribeDBSecurityGroupsCommand = exports.de_DescribeDBProxyTargetsCommand = exports.de_DescribeDBProxyTargetGroupsCommand = exports.de_DescribeDBProxyEndpointsCommand = exports.de_DescribeDBProxiesCommand = exports.de_DescribeDBParametersCommand = exports.de_DescribeDBParameterGroupsCommand = exports.de_DescribeDBLogFilesCommand = exports.de_DescribeDBInstancesCommand = exports.de_DescribeDBInstanceAutomatedBackupsCommand = void 0;
exports.de_SwitchoverReadReplicaCommand = exports.de_SwitchoverBlueGreenDeploymentCommand = exports.de_StopDBInstanceAutomatedBackupsReplicationCommand = exports.de_StopDBInstanceCommand = exports.de_StopDBClusterCommand = exports.de_StopActivityStreamCommand = exports.de_StartExportTaskCommand = exports.de_StartDBInstanceAutomatedBackupsReplicationCommand = exports.de_StartDBInstanceCommand = exports.de_StartDBClusterCommand = exports.de_StartActivityStreamCommand = exports.de_RevokeDBSecurityGroupIngressCommand = exports.de_RestoreDBInstanceToPointInTimeCommand = exports.de_RestoreDBInstanceFromS3Command = exports.de_RestoreDBInstanceFromDBSnapshotCommand = exports.de_RestoreDBClusterToPointInTimeCommand = exports.de_RestoreDBClusterFromSnapshotCommand = exports.de_RestoreDBClusterFromS3Command = exports.de_ResetDBParameterGroupCommand = exports.de_ResetDBClusterParameterGroupCommand = exports.de_RemoveTagsFromResourceCommand = exports.de_RemoveSourceIdentifierFromSubscriptionCommand = exports.de_RemoveRoleFromDBInstanceCommand = exports.de_RemoveRoleFromDBClusterCommand = exports.de_RemoveFromGlobalClusterCommand = exports.de_RegisterDBProxyTargetsCommand = exports.de_RebootDBInstanceCommand = exports.de_RebootDBClusterCommand = exports.de_PurchaseReservedDBInstancesOfferingCommand = exports.de_PromoteReadReplicaDBClusterCommand = exports.de_PromoteReadReplicaCommand = exports.de_ModifyOptionGroupCommand = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const protocol_http_1 = require("@smithy/protocol-http");
const fast_xml_parser_1 = require("fast-xml-parser");
const models_0_1 = require("../models/models_0");
const models_1_1 = require("../models/models_1");
const RDSServiceException_1 = require("../models/RDSServiceException");
const se_AddRoleToDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddRoleToDBClusterMessage(input, context),
        Action: "AddRoleToDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AddRoleToDBClusterCommand = se_AddRoleToDBClusterCommand;
const se_AddRoleToDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddRoleToDBInstanceMessage(input, context),
        Action: "AddRoleToDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AddRoleToDBInstanceCommand = se_AddRoleToDBInstanceCommand;
const se_AddSourceIdentifierToSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddSourceIdentifierToSubscriptionMessage(input, context),
        Action: "AddSourceIdentifierToSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AddSourceIdentifierToSubscriptionCommand = se_AddSourceIdentifierToSubscriptionCommand;
const se_AddTagsToResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddTagsToResourceMessage(input, context),
        Action: "AddTagsToResource",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AddTagsToResourceCommand = se_AddTagsToResourceCommand;
const se_ApplyPendingMaintenanceActionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ApplyPendingMaintenanceActionMessage(input, context),
        Action: "ApplyPendingMaintenanceAction",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ApplyPendingMaintenanceActionCommand = se_ApplyPendingMaintenanceActionCommand;
const se_AuthorizeDBSecurityGroupIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AuthorizeDBSecurityGroupIngressMessage(input, context),
        Action: "AuthorizeDBSecurityGroupIngress",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AuthorizeDBSecurityGroupIngressCommand = se_AuthorizeDBSecurityGroupIngressCommand;
const se_BacktrackDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_BacktrackDBClusterMessage(input, context),
        Action: "BacktrackDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BacktrackDBClusterCommand = se_BacktrackDBClusterCommand;
const se_CancelExportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelExportTaskMessage(input, context),
        Action: "CancelExportTask",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelExportTaskCommand = se_CancelExportTaskCommand;
const se_CopyDBClusterParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyDBClusterParameterGroupMessage(input, context),
        Action: "CopyDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CopyDBClusterParameterGroupCommand = se_CopyDBClusterParameterGroupCommand;
const se_CopyDBClusterSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyDBClusterSnapshotMessage(input, context),
        Action: "CopyDBClusterSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CopyDBClusterSnapshotCommand = se_CopyDBClusterSnapshotCommand;
const se_CopyDBParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyDBParameterGroupMessage(input, context),
        Action: "CopyDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CopyDBParameterGroupCommand = se_CopyDBParameterGroupCommand;
const se_CopyDBSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyDBSnapshotMessage(input, context),
        Action: "CopyDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CopyDBSnapshotCommand = se_CopyDBSnapshotCommand;
const se_CopyOptionGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyOptionGroupMessage(input, context),
        Action: "CopyOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CopyOptionGroupCommand = se_CopyOptionGroupCommand;
const se_CreateBlueGreenDeploymentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateBlueGreenDeploymentRequest(input, context),
        Action: "CreateBlueGreenDeployment",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateBlueGreenDeploymentCommand = se_CreateBlueGreenDeploymentCommand;
const se_CreateCustomDBEngineVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCustomDBEngineVersionMessage(input, context),
        Action: "CreateCustomDBEngineVersion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCustomDBEngineVersionCommand = se_CreateCustomDBEngineVersionCommand;
const se_CreateDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBClusterMessage(input, context),
        Action: "CreateDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBClusterCommand = se_CreateDBClusterCommand;
const se_CreateDBClusterEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBClusterEndpointMessage(input, context),
        Action: "CreateDBClusterEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBClusterEndpointCommand = se_CreateDBClusterEndpointCommand;
const se_CreateDBClusterParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBClusterParameterGroupMessage(input, context),
        Action: "CreateDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBClusterParameterGroupCommand = se_CreateDBClusterParameterGroupCommand;
const se_CreateDBClusterSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBClusterSnapshotMessage(input, context),
        Action: "CreateDBClusterSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBClusterSnapshotCommand = se_CreateDBClusterSnapshotCommand;
const se_CreateDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBInstanceMessage(input, context),
        Action: "CreateDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBInstanceCommand = se_CreateDBInstanceCommand;
const se_CreateDBInstanceReadReplicaCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBInstanceReadReplicaMessage(input, context),
        Action: "CreateDBInstanceReadReplica",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBInstanceReadReplicaCommand = se_CreateDBInstanceReadReplicaCommand;
const se_CreateDBParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBParameterGroupMessage(input, context),
        Action: "CreateDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBParameterGroupCommand = se_CreateDBParameterGroupCommand;
const se_CreateDBProxyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBProxyRequest(input, context),
        Action: "CreateDBProxy",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBProxyCommand = se_CreateDBProxyCommand;
const se_CreateDBProxyEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBProxyEndpointRequest(input, context),
        Action: "CreateDBProxyEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBProxyEndpointCommand = se_CreateDBProxyEndpointCommand;
const se_CreateDBSecurityGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBSecurityGroupMessage(input, context),
        Action: "CreateDBSecurityGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBSecurityGroupCommand = se_CreateDBSecurityGroupCommand;
const se_CreateDBSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBSnapshotMessage(input, context),
        Action: "CreateDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBSnapshotCommand = se_CreateDBSnapshotCommand;
const se_CreateDBSubnetGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDBSubnetGroupMessage(input, context),
        Action: "CreateDBSubnetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDBSubnetGroupCommand = se_CreateDBSubnetGroupCommand;
const se_CreateEventSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateEventSubscriptionMessage(input, context),
        Action: "CreateEventSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateEventSubscriptionCommand = se_CreateEventSubscriptionCommand;
const se_CreateGlobalClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateGlobalClusterMessage(input, context),
        Action: "CreateGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateGlobalClusterCommand = se_CreateGlobalClusterCommand;
const se_CreateOptionGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateOptionGroupMessage(input, context),
        Action: "CreateOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateOptionGroupCommand = se_CreateOptionGroupCommand;
const se_DeleteBlueGreenDeploymentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteBlueGreenDeploymentRequest(input, context),
        Action: "DeleteBlueGreenDeployment",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteBlueGreenDeploymentCommand = se_DeleteBlueGreenDeploymentCommand;
const se_DeleteCustomDBEngineVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCustomDBEngineVersionMessage(input, context),
        Action: "DeleteCustomDBEngineVersion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCustomDBEngineVersionCommand = se_DeleteCustomDBEngineVersionCommand;
const se_DeleteDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBClusterMessage(input, context),
        Action: "DeleteDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBClusterCommand = se_DeleteDBClusterCommand;
const se_DeleteDBClusterEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBClusterEndpointMessage(input, context),
        Action: "DeleteDBClusterEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBClusterEndpointCommand = se_DeleteDBClusterEndpointCommand;
const se_DeleteDBClusterParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBClusterParameterGroupMessage(input, context),
        Action: "DeleteDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBClusterParameterGroupCommand = se_DeleteDBClusterParameterGroupCommand;
const se_DeleteDBClusterSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBClusterSnapshotMessage(input, context),
        Action: "DeleteDBClusterSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBClusterSnapshotCommand = se_DeleteDBClusterSnapshotCommand;
const se_DeleteDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBInstanceMessage(input, context),
        Action: "DeleteDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBInstanceCommand = se_DeleteDBInstanceCommand;
const se_DeleteDBInstanceAutomatedBackupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBInstanceAutomatedBackupMessage(input, context),
        Action: "DeleteDBInstanceAutomatedBackup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBInstanceAutomatedBackupCommand = se_DeleteDBInstanceAutomatedBackupCommand;
const se_DeleteDBParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBParameterGroupMessage(input, context),
        Action: "DeleteDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBParameterGroupCommand = se_DeleteDBParameterGroupCommand;
const se_DeleteDBProxyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBProxyRequest(input, context),
        Action: "DeleteDBProxy",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBProxyCommand = se_DeleteDBProxyCommand;
const se_DeleteDBProxyEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBProxyEndpointRequest(input, context),
        Action: "DeleteDBProxyEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBProxyEndpointCommand = se_DeleteDBProxyEndpointCommand;
const se_DeleteDBSecurityGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBSecurityGroupMessage(input, context),
        Action: "DeleteDBSecurityGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBSecurityGroupCommand = se_DeleteDBSecurityGroupCommand;
const se_DeleteDBSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBSnapshotMessage(input, context),
        Action: "DeleteDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBSnapshotCommand = se_DeleteDBSnapshotCommand;
const se_DeleteDBSubnetGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDBSubnetGroupMessage(input, context),
        Action: "DeleteDBSubnetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDBSubnetGroupCommand = se_DeleteDBSubnetGroupCommand;
const se_DeleteEventSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteEventSubscriptionMessage(input, context),
        Action: "DeleteEventSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteEventSubscriptionCommand = se_DeleteEventSubscriptionCommand;
const se_DeleteGlobalClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteGlobalClusterMessage(input, context),
        Action: "DeleteGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteGlobalClusterCommand = se_DeleteGlobalClusterCommand;
const se_DeleteOptionGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteOptionGroupMessage(input, context),
        Action: "DeleteOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOptionGroupCommand = se_DeleteOptionGroupCommand;
const se_DeregisterDBProxyTargetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterDBProxyTargetsRequest(input, context),
        Action: "DeregisterDBProxyTargets",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterDBProxyTargetsCommand = se_DeregisterDBProxyTargetsCommand;
const se_DescribeAccountAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAccountAttributesMessage(input, context),
        Action: "DescribeAccountAttributes",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAccountAttributesCommand = se_DescribeAccountAttributesCommand;
const se_DescribeBlueGreenDeploymentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeBlueGreenDeploymentsRequest(input, context),
        Action: "DescribeBlueGreenDeployments",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeBlueGreenDeploymentsCommand = se_DescribeBlueGreenDeploymentsCommand;
const se_DescribeCertificatesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCertificatesMessage(input, context),
        Action: "DescribeCertificates",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeCertificatesCommand = se_DescribeCertificatesCommand;
const se_DescribeDBClusterBacktracksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBClusterBacktracksMessage(input, context),
        Action: "DescribeDBClusterBacktracks",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBClusterBacktracksCommand = se_DescribeDBClusterBacktracksCommand;
const se_DescribeDBClusterEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBClusterEndpointsMessage(input, context),
        Action: "DescribeDBClusterEndpoints",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBClusterEndpointsCommand = se_DescribeDBClusterEndpointsCommand;
const se_DescribeDBClusterParameterGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBClusterParameterGroupsMessage(input, context),
        Action: "DescribeDBClusterParameterGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBClusterParameterGroupsCommand = se_DescribeDBClusterParameterGroupsCommand;
const se_DescribeDBClusterParametersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBClusterParametersMessage(input, context),
        Action: "DescribeDBClusterParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBClusterParametersCommand = se_DescribeDBClusterParametersCommand;
const se_DescribeDBClustersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBClustersMessage(input, context),
        Action: "DescribeDBClusters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBClustersCommand = se_DescribeDBClustersCommand;
const se_DescribeDBClusterSnapshotAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBClusterSnapshotAttributesMessage(input, context),
        Action: "DescribeDBClusterSnapshotAttributes",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBClusterSnapshotAttributesCommand = se_DescribeDBClusterSnapshotAttributesCommand;
const se_DescribeDBClusterSnapshotsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBClusterSnapshotsMessage(input, context),
        Action: "DescribeDBClusterSnapshots",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBClusterSnapshotsCommand = se_DescribeDBClusterSnapshotsCommand;
const se_DescribeDBEngineVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBEngineVersionsMessage(input, context),
        Action: "DescribeDBEngineVersions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBEngineVersionsCommand = se_DescribeDBEngineVersionsCommand;
const se_DescribeDBInstanceAutomatedBackupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBInstanceAutomatedBackupsMessage(input, context),
        Action: "DescribeDBInstanceAutomatedBackups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBInstanceAutomatedBackupsCommand = se_DescribeDBInstanceAutomatedBackupsCommand;
const se_DescribeDBInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBInstancesMessage(input, context),
        Action: "DescribeDBInstances",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBInstancesCommand = se_DescribeDBInstancesCommand;
const se_DescribeDBLogFilesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBLogFilesMessage(input, context),
        Action: "DescribeDBLogFiles",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBLogFilesCommand = se_DescribeDBLogFilesCommand;
const se_DescribeDBParameterGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBParameterGroupsMessage(input, context),
        Action: "DescribeDBParameterGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBParameterGroupsCommand = se_DescribeDBParameterGroupsCommand;
const se_DescribeDBParametersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBParametersMessage(input, context),
        Action: "DescribeDBParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBParametersCommand = se_DescribeDBParametersCommand;
const se_DescribeDBProxiesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBProxiesRequest(input, context),
        Action: "DescribeDBProxies",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBProxiesCommand = se_DescribeDBProxiesCommand;
const se_DescribeDBProxyEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBProxyEndpointsRequest(input, context),
        Action: "DescribeDBProxyEndpoints",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBProxyEndpointsCommand = se_DescribeDBProxyEndpointsCommand;
const se_DescribeDBProxyTargetGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBProxyTargetGroupsRequest(input, context),
        Action: "DescribeDBProxyTargetGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBProxyTargetGroupsCommand = se_DescribeDBProxyTargetGroupsCommand;
const se_DescribeDBProxyTargetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBProxyTargetsRequest(input, context),
        Action: "DescribeDBProxyTargets",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBProxyTargetsCommand = se_DescribeDBProxyTargetsCommand;
const se_DescribeDBSecurityGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBSecurityGroupsMessage(input, context),
        Action: "DescribeDBSecurityGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBSecurityGroupsCommand = se_DescribeDBSecurityGroupsCommand;
const se_DescribeDBSnapshotAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBSnapshotAttributesMessage(input, context),
        Action: "DescribeDBSnapshotAttributes",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBSnapshotAttributesCommand = se_DescribeDBSnapshotAttributesCommand;
const se_DescribeDBSnapshotsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBSnapshotsMessage(input, context),
        Action: "DescribeDBSnapshots",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBSnapshotsCommand = se_DescribeDBSnapshotsCommand;
const se_DescribeDBSubnetGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDBSubnetGroupsMessage(input, context),
        Action: "DescribeDBSubnetGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDBSubnetGroupsCommand = se_DescribeDBSubnetGroupsCommand;
const se_DescribeEngineDefaultClusterParametersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEngineDefaultClusterParametersMessage(input, context),
        Action: "DescribeEngineDefaultClusterParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEngineDefaultClusterParametersCommand = se_DescribeEngineDefaultClusterParametersCommand;
const se_DescribeEngineDefaultParametersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEngineDefaultParametersMessage(input, context),
        Action: "DescribeEngineDefaultParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEngineDefaultParametersCommand = se_DescribeEngineDefaultParametersCommand;
const se_DescribeEventCategoriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEventCategoriesMessage(input, context),
        Action: "DescribeEventCategories",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEventCategoriesCommand = se_DescribeEventCategoriesCommand;
const se_DescribeEventsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEventsMessage(input, context),
        Action: "DescribeEvents",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEventsCommand = se_DescribeEventsCommand;
const se_DescribeEventSubscriptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEventSubscriptionsMessage(input, context),
        Action: "DescribeEventSubscriptions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEventSubscriptionsCommand = se_DescribeEventSubscriptionsCommand;
const se_DescribeExportTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeExportTasksMessage(input, context),
        Action: "DescribeExportTasks",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeExportTasksCommand = se_DescribeExportTasksCommand;
const se_DescribeGlobalClustersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeGlobalClustersMessage(input, context),
        Action: "DescribeGlobalClusters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeGlobalClustersCommand = se_DescribeGlobalClustersCommand;
const se_DescribeOptionGroupOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeOptionGroupOptionsMessage(input, context),
        Action: "DescribeOptionGroupOptions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOptionGroupOptionsCommand = se_DescribeOptionGroupOptionsCommand;
const se_DescribeOptionGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeOptionGroupsMessage(input, context),
        Action: "DescribeOptionGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOptionGroupsCommand = se_DescribeOptionGroupsCommand;
const se_DescribeOrderableDBInstanceOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeOrderableDBInstanceOptionsMessage(input, context),
        Action: "DescribeOrderableDBInstanceOptions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrderableDBInstanceOptionsCommand = se_DescribeOrderableDBInstanceOptionsCommand;
const se_DescribePendingMaintenanceActionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePendingMaintenanceActionsMessage(input, context),
        Action: "DescribePendingMaintenanceActions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePendingMaintenanceActionsCommand = se_DescribePendingMaintenanceActionsCommand;
const se_DescribeReservedDBInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedDBInstancesMessage(input, context),
        Action: "DescribeReservedDBInstances",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeReservedDBInstancesCommand = se_DescribeReservedDBInstancesCommand;
const se_DescribeReservedDBInstancesOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedDBInstancesOfferingsMessage(input, context),
        Action: "DescribeReservedDBInstancesOfferings",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeReservedDBInstancesOfferingsCommand = se_DescribeReservedDBInstancesOfferingsCommand;
const se_DescribeSourceRegionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSourceRegionsMessage(input, context),
        Action: "DescribeSourceRegions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeSourceRegionsCommand = se_DescribeSourceRegionsCommand;
const se_DescribeValidDBInstanceModificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeValidDBInstanceModificationsMessage(input, context),
        Action: "DescribeValidDBInstanceModifications",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeValidDBInstanceModificationsCommand = se_DescribeValidDBInstanceModificationsCommand;
const se_DownloadDBLogFilePortionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DownloadDBLogFilePortionMessage(input, context),
        Action: "DownloadDBLogFilePortion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DownloadDBLogFilePortionCommand = se_DownloadDBLogFilePortionCommand;
const se_FailoverDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_FailoverDBClusterMessage(input, context),
        Action: "FailoverDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_FailoverDBClusterCommand = se_FailoverDBClusterCommand;
const se_FailoverGlobalClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_FailoverGlobalClusterMessage(input, context),
        Action: "FailoverGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_FailoverGlobalClusterCommand = se_FailoverGlobalClusterCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTagsForResourceMessage(input, context),
        Action: "ListTagsForResource",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ModifyActivityStreamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyActivityStreamRequest(input, context),
        Action: "ModifyActivityStream",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyActivityStreamCommand = se_ModifyActivityStreamCommand;
const se_ModifyCertificatesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyCertificatesMessage(input, context),
        Action: "ModifyCertificates",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyCertificatesCommand = se_ModifyCertificatesCommand;
const se_ModifyCurrentDBClusterCapacityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyCurrentDBClusterCapacityMessage(input, context),
        Action: "ModifyCurrentDBClusterCapacity",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyCurrentDBClusterCapacityCommand = se_ModifyCurrentDBClusterCapacityCommand;
const se_ModifyCustomDBEngineVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyCustomDBEngineVersionMessage(input, context),
        Action: "ModifyCustomDBEngineVersion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyCustomDBEngineVersionCommand = se_ModifyCustomDBEngineVersionCommand;
const se_ModifyDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBClusterMessage(input, context),
        Action: "ModifyDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBClusterCommand = se_ModifyDBClusterCommand;
const se_ModifyDBClusterEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBClusterEndpointMessage(input, context),
        Action: "ModifyDBClusterEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBClusterEndpointCommand = se_ModifyDBClusterEndpointCommand;
const se_ModifyDBClusterParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBClusterParameterGroupMessage(input, context),
        Action: "ModifyDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBClusterParameterGroupCommand = se_ModifyDBClusterParameterGroupCommand;
const se_ModifyDBClusterSnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBClusterSnapshotAttributeMessage(input, context),
        Action: "ModifyDBClusterSnapshotAttribute",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBClusterSnapshotAttributeCommand = se_ModifyDBClusterSnapshotAttributeCommand;
const se_ModifyDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBInstanceMessage(input, context),
        Action: "ModifyDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBInstanceCommand = se_ModifyDBInstanceCommand;
const se_ModifyDBParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBParameterGroupMessage(input, context),
        Action: "ModifyDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBParameterGroupCommand = se_ModifyDBParameterGroupCommand;
const se_ModifyDBProxyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBProxyRequest(input, context),
        Action: "ModifyDBProxy",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBProxyCommand = se_ModifyDBProxyCommand;
const se_ModifyDBProxyEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBProxyEndpointRequest(input, context),
        Action: "ModifyDBProxyEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBProxyEndpointCommand = se_ModifyDBProxyEndpointCommand;
const se_ModifyDBProxyTargetGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBProxyTargetGroupRequest(input, context),
        Action: "ModifyDBProxyTargetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBProxyTargetGroupCommand = se_ModifyDBProxyTargetGroupCommand;
const se_ModifyDBSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBSnapshotMessage(input, context),
        Action: "ModifyDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBSnapshotCommand = se_ModifyDBSnapshotCommand;
const se_ModifyDBSnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBSnapshotAttributeMessage(input, context),
        Action: "ModifyDBSnapshotAttribute",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBSnapshotAttributeCommand = se_ModifyDBSnapshotAttributeCommand;
const se_ModifyDBSubnetGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDBSubnetGroupMessage(input, context),
        Action: "ModifyDBSubnetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyDBSubnetGroupCommand = se_ModifyDBSubnetGroupCommand;
const se_ModifyEventSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyEventSubscriptionMessage(input, context),
        Action: "ModifyEventSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyEventSubscriptionCommand = se_ModifyEventSubscriptionCommand;
const se_ModifyGlobalClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyGlobalClusterMessage(input, context),
        Action: "ModifyGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyGlobalClusterCommand = se_ModifyGlobalClusterCommand;
const se_ModifyOptionGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyOptionGroupMessage(input, context),
        Action: "ModifyOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ModifyOptionGroupCommand = se_ModifyOptionGroupCommand;
const se_PromoteReadReplicaCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PromoteReadReplicaMessage(input, context),
        Action: "PromoteReadReplica",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PromoteReadReplicaCommand = se_PromoteReadReplicaCommand;
const se_PromoteReadReplicaDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PromoteReadReplicaDBClusterMessage(input, context),
        Action: "PromoteReadReplicaDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PromoteReadReplicaDBClusterCommand = se_PromoteReadReplicaDBClusterCommand;
const se_PurchaseReservedDBInstancesOfferingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseReservedDBInstancesOfferingMessage(input, context),
        Action: "PurchaseReservedDBInstancesOffering",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PurchaseReservedDBInstancesOfferingCommand = se_PurchaseReservedDBInstancesOfferingCommand;
const se_RebootDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RebootDBClusterMessage(input, context),
        Action: "RebootDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RebootDBClusterCommand = se_RebootDBClusterCommand;
const se_RebootDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RebootDBInstanceMessage(input, context),
        Action: "RebootDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RebootDBInstanceCommand = se_RebootDBInstanceCommand;
const se_RegisterDBProxyTargetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterDBProxyTargetsRequest(input, context),
        Action: "RegisterDBProxyTargets",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterDBProxyTargetsCommand = se_RegisterDBProxyTargetsCommand;
const se_RemoveFromGlobalClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveFromGlobalClusterMessage(input, context),
        Action: "RemoveFromGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveFromGlobalClusterCommand = se_RemoveFromGlobalClusterCommand;
const se_RemoveRoleFromDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveRoleFromDBClusterMessage(input, context),
        Action: "RemoveRoleFromDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveRoleFromDBClusterCommand = se_RemoveRoleFromDBClusterCommand;
const se_RemoveRoleFromDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveRoleFromDBInstanceMessage(input, context),
        Action: "RemoveRoleFromDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveRoleFromDBInstanceCommand = se_RemoveRoleFromDBInstanceCommand;
const se_RemoveSourceIdentifierFromSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveSourceIdentifierFromSubscriptionMessage(input, context),
        Action: "RemoveSourceIdentifierFromSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveSourceIdentifierFromSubscriptionCommand = se_RemoveSourceIdentifierFromSubscriptionCommand;
const se_RemoveTagsFromResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveTagsFromResourceMessage(input, context),
        Action: "RemoveTagsFromResource",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveTagsFromResourceCommand = se_RemoveTagsFromResourceCommand;
const se_ResetDBClusterParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetDBClusterParameterGroupMessage(input, context),
        Action: "ResetDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResetDBClusterParameterGroupCommand = se_ResetDBClusterParameterGroupCommand;
const se_ResetDBParameterGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetDBParameterGroupMessage(input, context),
        Action: "ResetDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResetDBParameterGroupCommand = se_ResetDBParameterGroupCommand;
const se_RestoreDBClusterFromS3Command = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreDBClusterFromS3Message(input, context),
        Action: "RestoreDBClusterFromS3",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RestoreDBClusterFromS3Command = se_RestoreDBClusterFromS3Command;
const se_RestoreDBClusterFromSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreDBClusterFromSnapshotMessage(input, context),
        Action: "RestoreDBClusterFromSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RestoreDBClusterFromSnapshotCommand = se_RestoreDBClusterFromSnapshotCommand;
const se_RestoreDBClusterToPointInTimeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreDBClusterToPointInTimeMessage(input, context),
        Action: "RestoreDBClusterToPointInTime",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RestoreDBClusterToPointInTimeCommand = se_RestoreDBClusterToPointInTimeCommand;
const se_RestoreDBInstanceFromDBSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreDBInstanceFromDBSnapshotMessage(input, context),
        Action: "RestoreDBInstanceFromDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RestoreDBInstanceFromDBSnapshotCommand = se_RestoreDBInstanceFromDBSnapshotCommand;
const se_RestoreDBInstanceFromS3Command = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreDBInstanceFromS3Message(input, context),
        Action: "RestoreDBInstanceFromS3",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RestoreDBInstanceFromS3Command = se_RestoreDBInstanceFromS3Command;
const se_RestoreDBInstanceToPointInTimeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreDBInstanceToPointInTimeMessage(input, context),
        Action: "RestoreDBInstanceToPointInTime",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RestoreDBInstanceToPointInTimeCommand = se_RestoreDBInstanceToPointInTimeCommand;
const se_RevokeDBSecurityGroupIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RevokeDBSecurityGroupIngressMessage(input, context),
        Action: "RevokeDBSecurityGroupIngress",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RevokeDBSecurityGroupIngressCommand = se_RevokeDBSecurityGroupIngressCommand;
const se_StartActivityStreamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartActivityStreamRequest(input, context),
        Action: "StartActivityStream",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartActivityStreamCommand = se_StartActivityStreamCommand;
const se_StartDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartDBClusterMessage(input, context),
        Action: "StartDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartDBClusterCommand = se_StartDBClusterCommand;
const se_StartDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartDBInstanceMessage(input, context),
        Action: "StartDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartDBInstanceCommand = se_StartDBInstanceCommand;
const se_StartDBInstanceAutomatedBackupsReplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartDBInstanceAutomatedBackupsReplicationMessage(input, context),
        Action: "StartDBInstanceAutomatedBackupsReplication",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartDBInstanceAutomatedBackupsReplicationCommand = se_StartDBInstanceAutomatedBackupsReplicationCommand;
const se_StartExportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartExportTaskMessage(input, context),
        Action: "StartExportTask",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartExportTaskCommand = se_StartExportTaskCommand;
const se_StopActivityStreamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopActivityStreamRequest(input, context),
        Action: "StopActivityStream",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopActivityStreamCommand = se_StopActivityStreamCommand;
const se_StopDBClusterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopDBClusterMessage(input, context),
        Action: "StopDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopDBClusterCommand = se_StopDBClusterCommand;
const se_StopDBInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopDBInstanceMessage(input, context),
        Action: "StopDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopDBInstanceCommand = se_StopDBInstanceCommand;
const se_StopDBInstanceAutomatedBackupsReplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopDBInstanceAutomatedBackupsReplicationMessage(input, context),
        Action: "StopDBInstanceAutomatedBackupsReplication",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopDBInstanceAutomatedBackupsReplicationCommand = se_StopDBInstanceAutomatedBackupsReplicationCommand;
const se_SwitchoverBlueGreenDeploymentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SwitchoverBlueGreenDeploymentRequest(input, context),
        Action: "SwitchoverBlueGreenDeployment",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SwitchoverBlueGreenDeploymentCommand = se_SwitchoverBlueGreenDeploymentCommand;
const se_SwitchoverReadReplicaCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SwitchoverReadReplicaMessage(input, context),
        Action: "SwitchoverReadReplica",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SwitchoverReadReplicaCommand = se_SwitchoverReadReplicaCommand;
const de_AddRoleToDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AddRoleToDBClusterCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_AddRoleToDBClusterCommand = de_AddRoleToDBClusterCommand;
const de_AddRoleToDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterRoleAlreadyExists":
        case "com.amazonaws.rds#DBClusterRoleAlreadyExistsFault":
            throw await de_DBClusterRoleAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterRoleQuotaExceeded":
        case "com.amazonaws.rds#DBClusterRoleQuotaExceededFault":
            throw await de_DBClusterRoleQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AddRoleToDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AddRoleToDBInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_AddRoleToDBInstanceCommand = de_AddRoleToDBInstanceCommand;
const de_AddRoleToDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceRoleAlreadyExists":
        case "com.amazonaws.rds#DBInstanceRoleAlreadyExistsFault":
            throw await de_DBInstanceRoleAlreadyExistsFaultRes(parsedOutput, context);
        case "DBInstanceRoleQuotaExceeded":
        case "com.amazonaws.rds#DBInstanceRoleQuotaExceededFault":
            throw await de_DBInstanceRoleQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AddSourceIdentifierToSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AddSourceIdentifierToSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AddSourceIdentifierToSubscriptionResult(data.AddSourceIdentifierToSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AddSourceIdentifierToSubscriptionCommand = de_AddSourceIdentifierToSubscriptionCommand;
const de_AddSourceIdentifierToSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "SourceNotFound":
        case "com.amazonaws.rds#SourceNotFoundFault":
            throw await de_SourceNotFoundFaultRes(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await de_SubscriptionNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AddTagsToResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AddTagsToResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_AddTagsToResourceCommand = de_AddTagsToResourceCommand;
const de_AddTagsToResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await de_BlueGreenDeploymentNotFoundFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ApplyPendingMaintenanceActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ApplyPendingMaintenanceActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplyPendingMaintenanceActionResult(data.ApplyPendingMaintenanceActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ApplyPendingMaintenanceActionCommand = de_ApplyPendingMaintenanceActionCommand;
const de_ApplyPendingMaintenanceActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await de_ResourceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AuthorizeDBSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AuthorizeDBSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AuthorizeDBSecurityGroupIngressResult(data.AuthorizeDBSecurityGroupIngressResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AuthorizeDBSecurityGroupIngressCommand = de_AuthorizeDBSecurityGroupIngressCommand;
const de_AuthorizeDBSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationAlreadyExists":
        case "com.amazonaws.rds#AuthorizationAlreadyExistsFault":
            throw await de_AuthorizationAlreadyExistsFaultRes(parsedOutput, context);
        case "AuthorizationQuotaExceeded":
        case "com.amazonaws.rds#AuthorizationQuotaExceededFault":
            throw await de_AuthorizationQuotaExceededFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await de_InvalidDBSecurityGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_BacktrackDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BacktrackDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterBacktrack(data.BacktrackDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BacktrackDBClusterCommand = de_BacktrackDBClusterCommand;
const de_BacktrackDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CancelExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelExportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportTask(data.CancelExportTaskResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CancelExportTaskCommand = de_CancelExportTaskCommand;
const de_CancelExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExportTaskNotFound":
        case "com.amazonaws.rds#ExportTaskNotFoundFault":
            throw await de_ExportTaskNotFoundFaultRes(parsedOutput, context);
        case "InvalidExportTaskStateFault":
        case "com.amazonaws.rds#InvalidExportTaskStateFault":
            throw await de_InvalidExportTaskStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CopyDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopyDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopyDBClusterParameterGroupResult(data.CopyDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CopyDBClusterParameterGroupCommand = de_CopyDBClusterParameterGroupCommand;
const de_CopyDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await de_DBParameterGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await de_DBParameterGroupQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CopyDBClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopyDBClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopyDBClusterSnapshotResult(data.CopyDBClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CopyDBClusterSnapshotCommand = de_CopyDBClusterSnapshotCommand;
const de_CopyDBClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
            throw await de_DBClusterSnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CopyDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopyDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopyDBParameterGroupResult(data.CopyDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CopyDBParameterGroupCommand = de_CopyDBParameterGroupCommand;
const de_CopyDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await de_DBParameterGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await de_DBParameterGroupQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CopyDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopyDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopyDBSnapshotResult(data.CopyDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CopyDBSnapshotCommand = de_CopyDBSnapshotCommand;
const de_CopyDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomAvailabilityZoneNotFound":
        case "com.amazonaws.rds#CustomAvailabilityZoneNotFoundFault":
            throw await de_CustomAvailabilityZoneNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await de_DBSnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await de_InvalidDBSnapshotStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CopyOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopyOptionGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopyOptionGroupResult(data.CopyOptionGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CopyOptionGroupCommand = de_CopyOptionGroupCommand;
const de_CopyOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OptionGroupAlreadyExistsFault":
        case "com.amazonaws.rds#OptionGroupAlreadyExistsFault":
            throw await de_OptionGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "OptionGroupQuotaExceededFault":
        case "com.amazonaws.rds#OptionGroupQuotaExceededFault":
            throw await de_OptionGroupQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateBlueGreenDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateBlueGreenDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBlueGreenDeploymentResponse(data.CreateBlueGreenDeploymentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateBlueGreenDeploymentCommand = de_CreateBlueGreenDeploymentCommand;
const de_CreateBlueGreenDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentAlreadyExistsFault":
        case "com.amazonaws.rds#BlueGreenDeploymentAlreadyExistsFault":
            throw await de_BlueGreenDeploymentAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await de_DBClusterParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await de_DBClusterQuotaExceededFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await de_InstanceQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "SourceClusterNotSupportedFault":
        case "com.amazonaws.rds#SourceClusterNotSupportedFault":
            throw await de_SourceClusterNotSupportedFaultRes(parsedOutput, context);
        case "SourceDatabaseNotSupportedFault":
        case "com.amazonaws.rds#SourceDatabaseNotSupportedFault":
            throw await de_SourceDatabaseNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateCustomDBEngineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCustomDBEngineVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBEngineVersion(data.CreateCustomDBEngineVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateCustomDBEngineVersionCommand = de_CreateCustomDBEngineVersionCommand;
const de_CreateCustomDBEngineVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CreateCustomDBEngineVersionFault":
        case "com.amazonaws.rds#CreateCustomDBEngineVersionFault":
            throw await de_CreateCustomDBEngineVersionFaultRes(parsedOutput, context);
        case "CustomDBEngineVersionAlreadyExistsFault":
        case "com.amazonaws.rds#CustomDBEngineVersionAlreadyExistsFault":
            throw await de_CustomDBEngineVersionAlreadyExistsFaultRes(parsedOutput, context);
        case "CustomDBEngineVersionQuotaExceededFault":
        case "com.amazonaws.rds#CustomDBEngineVersionQuotaExceededFault":
            throw await de_CustomDBEngineVersionQuotaExceededFaultRes(parsedOutput, context);
        case "Ec2ImagePropertiesNotSupportedFault":
        case "com.amazonaws.rds#Ec2ImagePropertiesNotSupportedFault":
            throw await de_Ec2ImagePropertiesNotSupportedFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBClusterResult(data.CreateDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBClusterCommand = de_CreateDBClusterCommand;
const de_CreateDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await de_DBClusterAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await de_DBClusterParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await de_DBClusterQuotaExceededFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await de_GlobalClusterNotFoundFaultRes(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await de_InsufficientStorageClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await de_InvalidDBSubnetGroupStateFaultRes(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await de_InvalidGlobalClusterStateFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBClusterEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBClusterEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterEndpoint(data.CreateDBClusterEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBClusterEndpointCommand = de_CreateDBClusterEndpointCommand;
const de_CreateDBClusterEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterEndpointAlreadyExistsFault":
            throw await de_DBClusterEndpointAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterEndpointQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterEndpointQuotaExceededFault":
            throw await de_DBClusterEndpointQuotaExceededFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBClusterParameterGroupResult(data.CreateDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBClusterParameterGroupCommand = de_CreateDBClusterParameterGroupCommand;
const de_CreateDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await de_DBParameterGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await de_DBParameterGroupQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBClusterSnapshotResult(data.CreateDBClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBClusterSnapshotCommand = de_CreateDBClusterSnapshotCommand;
const de_CreateDBClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
            throw await de_DBClusterSnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBInstanceResult(data.CreateDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBInstanceCommand = de_CreateDBInstanceCommand;
const de_CreateDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await de_BackupPolicyNotFoundFaultRes(parsedOutput, context);
        case "CertificateNotFound":
        case "com.amazonaws.rds#CertificateNotFoundFault":
            throw await de_CertificateNotFoundFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await de_InstanceQuotaExceededFaultRes(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await de_NetworkTypeNotSupportedRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await de_ProvisionedIopsNotAvailableInAZFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBInstanceReadReplicaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBInstanceReadReplicaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBInstanceReadReplicaResult(data.CreateDBInstanceReadReplicaResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBInstanceReadReplicaCommand = de_CreateDBInstanceReadReplicaCommand;
const de_CreateDBInstanceReadReplicaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotAllowedFault":
        case "com.amazonaws.rds#DBSubnetGroupNotAllowedFault":
            throw await de_DBSubnetGroupNotAllowedFaultRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await de_InstanceQuotaExceededFaultRes(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidDBSubnetGroupFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupFault":
            throw await de_InvalidDBSubnetGroupFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await de_NetworkTypeNotSupportedRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await de_ProvisionedIopsNotAvailableInAZFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBParameterGroupResult(data.CreateDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBParameterGroupCommand = de_CreateDBParameterGroupCommand;
const de_CreateDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await de_DBParameterGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await de_DBParameterGroupQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBProxyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBProxyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBProxyResponse(data.CreateDBProxyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBProxyCommand = de_CreateDBProxyCommand;
const de_CreateDBProxyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyAlreadyExistsFault":
            throw await de_DBProxyAlreadyExistsFaultRes(parsedOutput, context);
        case "DBProxyQuotaExceededFault":
        case "com.amazonaws.rds#DBProxyQuotaExceededFault":
            throw await de_DBProxyQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBProxyEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBProxyEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBProxyEndpointResponse(data.CreateDBProxyEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBProxyEndpointCommand = de_CreateDBProxyEndpointCommand;
const de_CreateDBProxyEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault":
            throw await de_DBProxyEndpointAlreadyExistsFaultRes(parsedOutput, context);
        case "DBProxyEndpointQuotaExceededFault":
        case "com.amazonaws.rds#DBProxyEndpointQuotaExceededFault":
            throw await de_DBProxyEndpointQuotaExceededFaultRes(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBSecurityGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBSecurityGroupResult(data.CreateDBSecurityGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBSecurityGroupCommand = de_CreateDBSecurityGroupCommand;
const de_CreateDBSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSecurityGroupAlreadyExists":
        case "com.amazonaws.rds#DBSecurityGroupAlreadyExistsFault":
            throw await de_DBSecurityGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotSupported":
        case "com.amazonaws.rds#DBSecurityGroupNotSupportedFault":
            throw await de_DBSecurityGroupNotSupportedFaultRes(parsedOutput, context);
        case "QuotaExceeded.DBSecurityGroup":
        case "com.amazonaws.rds#DBSecurityGroupQuotaExceededFault":
            throw await de_DBSecurityGroupQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBSnapshotResult(data.CreateDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBSnapshotCommand = de_CreateDBSnapshotCommand;
const de_CreateDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await de_DBSnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateDBSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDBSubnetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDBSubnetGroupResult(data.CreateDBSubnetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDBSubnetGroupCommand = de_CreateDBSubnetGroupCommand;
const de_CreateDBSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupAlreadyExists":
        case "com.amazonaws.rds#DBSubnetGroupAlreadyExistsFault":
            throw await de_DBSubnetGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupQuotaExceeded":
        case "com.amazonaws.rds#DBSubnetGroupQuotaExceededFault":
            throw await de_DBSubnetGroupQuotaExceededFaultRes(parsedOutput, context);
        case "DBSubnetQuotaExceededFault":
        case "com.amazonaws.rds#DBSubnetQuotaExceededFault":
            throw await de_DBSubnetQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEventSubscriptionResult(data.CreateEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateEventSubscriptionCommand = de_CreateEventSubscriptionCommand;
const de_CreateEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EventSubscriptionQuotaExceeded":
        case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault":
            throw await de_EventSubscriptionQuotaExceededFaultRes(parsedOutput, context);
        case "SNSInvalidTopic":
        case "com.amazonaws.rds#SNSInvalidTopicFault":
            throw await de_SNSInvalidTopicFaultRes(parsedOutput, context);
        case "SNSNoAuthorization":
        case "com.amazonaws.rds#SNSNoAuthorizationFault":
            throw await de_SNSNoAuthorizationFaultRes(parsedOutput, context);
        case "SNSTopicArnNotFound":
        case "com.amazonaws.rds#SNSTopicArnNotFoundFault":
            throw await de_SNSTopicArnNotFoundFaultRes(parsedOutput, context);
        case "SourceNotFound":
        case "com.amazonaws.rds#SourceNotFoundFault":
            throw await de_SourceNotFoundFaultRes(parsedOutput, context);
        case "SubscriptionAlreadyExist":
        case "com.amazonaws.rds#SubscriptionAlreadyExistFault":
            throw await de_SubscriptionAlreadyExistFaultRes(parsedOutput, context);
        case "SubscriptionCategoryNotFound":
        case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault":
            throw await de_SubscriptionCategoryNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateGlobalClusterResult(data.CreateGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateGlobalClusterCommand = de_CreateGlobalClusterCommand;
const de_CreateGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "GlobalClusterAlreadyExistsFault":
        case "com.amazonaws.rds#GlobalClusterAlreadyExistsFault":
            throw await de_GlobalClusterAlreadyExistsFaultRes(parsedOutput, context);
        case "GlobalClusterQuotaExceededFault":
        case "com.amazonaws.rds#GlobalClusterQuotaExceededFault":
            throw await de_GlobalClusterQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateOptionGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateOptionGroupResult(data.CreateOptionGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateOptionGroupCommand = de_CreateOptionGroupCommand;
const de_CreateOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OptionGroupAlreadyExistsFault":
        case "com.amazonaws.rds#OptionGroupAlreadyExistsFault":
            throw await de_OptionGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "OptionGroupQuotaExceededFault":
        case "com.amazonaws.rds#OptionGroupQuotaExceededFault":
            throw await de_OptionGroupQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteBlueGreenDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteBlueGreenDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBlueGreenDeploymentResponse(data.DeleteBlueGreenDeploymentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteBlueGreenDeploymentCommand = de_DeleteBlueGreenDeploymentCommand;
const de_DeleteBlueGreenDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await de_BlueGreenDeploymentNotFoundFaultRes(parsedOutput, context);
        case "InvalidBlueGreenDeploymentStateFault":
        case "com.amazonaws.rds#InvalidBlueGreenDeploymentStateFault":
            throw await de_InvalidBlueGreenDeploymentStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteCustomDBEngineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCustomDBEngineVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBEngineVersion(data.DeleteCustomDBEngineVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteCustomDBEngineVersionCommand = de_DeleteCustomDBEngineVersionCommand;
const de_DeleteCustomDBEngineVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomDBEngineVersionNotFoundFault":
        case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault":
            throw await de_CustomDBEngineVersionNotFoundFaultRes(parsedOutput, context);
        case "InvalidCustomDBEngineVersionStateFault":
        case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault":
            throw await de_InvalidCustomDBEngineVersionStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDBClusterResult(data.DeleteDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBClusterCommand = de_DeleteDBClusterCommand;
const de_DeleteDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
            throw await de_DBClusterSnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBClusterEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBClusterEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterEndpoint(data.DeleteDBClusterEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBClusterEndpointCommand = de_DeleteDBClusterEndpointCommand;
const de_DeleteDBClusterEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterEndpointNotFoundFault":
        case "com.amazonaws.rds#DBClusterEndpointNotFoundFault":
            throw await de_DBClusterEndpointNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault":
            throw await de_InvalidDBClusterEndpointStateFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBClusterParameterGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteDBClusterParameterGroupCommand = de_DeleteDBClusterParameterGroupCommand;
const de_DeleteDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await de_InvalidDBParameterGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDBClusterSnapshotResult(data.DeleteDBClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBClusterSnapshotCommand = de_DeleteDBClusterSnapshotCommand;
const de_DeleteDBClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDBInstanceResult(data.DeleteDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBInstanceCommand = de_DeleteDBInstanceCommand;
const de_DeleteDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupQuotaExceeded":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault":
            throw await de_DBInstanceAutomatedBackupQuotaExceededFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await de_DBSnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBInstanceAutomatedBackupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBInstanceAutomatedBackupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDBInstanceAutomatedBackupResult(data.DeleteDBInstanceAutomatedBackupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBInstanceAutomatedBackupCommand = de_DeleteDBInstanceAutomatedBackupCommand;
const de_DeleteDBInstanceAutomatedBackupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupNotFound":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
            throw await de_DBInstanceAutomatedBackupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceAutomatedBackupState":
        case "com.amazonaws.rds#InvalidDBInstanceAutomatedBackupStateFault":
            throw await de_InvalidDBInstanceAutomatedBackupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBParameterGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteDBParameterGroupCommand = de_DeleteDBParameterGroupCommand;
const de_DeleteDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await de_InvalidDBParameterGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBProxyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBProxyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDBProxyResponse(data.DeleteDBProxyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBProxyCommand = de_DeleteDBProxyCommand;
const de_DeleteDBProxyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBProxyEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBProxyEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDBProxyEndpointResponse(data.DeleteDBProxyEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBProxyEndpointCommand = de_DeleteDBProxyEndpointCommand;
const de_DeleteDBProxyEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
            throw await de_DBProxyEndpointNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault":
            throw await de_InvalidDBProxyEndpointStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBSecurityGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteDBSecurityGroupCommand = de_DeleteDBSecurityGroupCommand;
const de_DeleteDBSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await de_InvalidDBSecurityGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDBSnapshotResult(data.DeleteDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDBSnapshotCommand = de_DeleteDBSnapshotCommand;
const de_DeleteDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await de_InvalidDBSnapshotStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteDBSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDBSubnetGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteDBSubnetGroupCommand = de_DeleteDBSubnetGroupCommand;
const de_DeleteDBSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await de_InvalidDBSubnetGroupStateFaultRes(parsedOutput, context);
        case "InvalidDBSubnetStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetStateFault":
            throw await de_InvalidDBSubnetStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteEventSubscriptionResult(data.DeleteEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteEventSubscriptionCommand = de_DeleteEventSubscriptionCommand;
const de_DeleteEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidEventSubscriptionState":
        case "com.amazonaws.rds#InvalidEventSubscriptionStateFault":
            throw await de_InvalidEventSubscriptionStateFaultRes(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await de_SubscriptionNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteGlobalClusterResult(data.DeleteGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteGlobalClusterCommand = de_DeleteGlobalClusterCommand;
const de_DeleteGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await de_GlobalClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await de_InvalidGlobalClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteOptionGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteOptionGroupCommand = de_DeleteOptionGroupCommand;
const de_DeleteOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOptionGroupStateFault":
        case "com.amazonaws.rds#InvalidOptionGroupStateFault":
            throw await de_InvalidOptionGroupStateFaultRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeregisterDBProxyTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterDBProxyTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeregisterDBProxyTargetsResponse(data.DeregisterDBProxyTargetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeregisterDBProxyTargetsCommand = de_DeregisterDBProxyTargetsCommand;
const de_DeregisterDBProxyTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetNotFoundFault":
            throw await de_DBProxyTargetNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAccountAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AccountAttributesMessage(data.DescribeAccountAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeAccountAttributesCommand = de_DescribeAccountAttributesCommand;
const de_DescribeAccountAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeBlueGreenDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeBlueGreenDeploymentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBlueGreenDeploymentsResponse(data.DescribeBlueGreenDeploymentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeBlueGreenDeploymentsCommand = de_DescribeBlueGreenDeploymentsCommand;
const de_DescribeBlueGreenDeploymentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await de_BlueGreenDeploymentNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CertificateMessage(data.DescribeCertificatesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeCertificatesCommand = de_DescribeCertificatesCommand;
const de_DescribeCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CertificateNotFound":
        case "com.amazonaws.rds#CertificateNotFoundFault":
            throw await de_CertificateNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBClusterBacktracksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBClusterBacktracksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterBacktrackMessage(data.DescribeDBClusterBacktracksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBClusterBacktracksCommand = de_DescribeDBClusterBacktracksCommand;
const de_DescribeDBClusterBacktracksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterBacktrackNotFoundFault":
        case "com.amazonaws.rds#DBClusterBacktrackNotFoundFault":
            throw await de_DBClusterBacktrackNotFoundFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBClusterEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBClusterEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterEndpointMessage(data.DescribeDBClusterEndpointsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBClusterEndpointsCommand = de_DescribeDBClusterEndpointsCommand;
const de_DescribeDBClusterEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBClusterParameterGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBClusterParameterGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterParameterGroupsMessage(data.DescribeDBClusterParameterGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBClusterParameterGroupsCommand = de_DescribeDBClusterParameterGroupsCommand;
const de_DescribeDBClusterParameterGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBClusterParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBClusterParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterParameterGroupDetails(data.DescribeDBClusterParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBClusterParametersCommand = de_DescribeDBClusterParametersCommand;
const de_DescribeDBClusterParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBClustersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterMessage(data.DescribeDBClustersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBClustersCommand = de_DescribeDBClustersCommand;
const de_DescribeDBClustersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBClusterSnapshotAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBClusterSnapshotAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDBClusterSnapshotAttributesResult(data.DescribeDBClusterSnapshotAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBClusterSnapshotAttributesCommand = de_DescribeDBClusterSnapshotAttributesCommand;
const de_DescribeDBClusterSnapshotAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBClusterSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBClusterSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterSnapshotMessage(data.DescribeDBClusterSnapshotsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBClusterSnapshotsCommand = de_DescribeDBClusterSnapshotsCommand;
const de_DescribeDBClusterSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBEngineVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBEngineVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBEngineVersionMessage(data.DescribeDBEngineVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBEngineVersionsCommand = de_DescribeDBEngineVersionsCommand;
const de_DescribeDBEngineVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeDBInstanceAutomatedBackupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBInstanceAutomatedBackupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBInstanceAutomatedBackupMessage(data.DescribeDBInstanceAutomatedBackupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBInstanceAutomatedBackupsCommand = de_DescribeDBInstanceAutomatedBackupsCommand;
const de_DescribeDBInstanceAutomatedBackupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupNotFound":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
            throw await de_DBInstanceAutomatedBackupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBInstanceMessage(data.DescribeDBInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBInstancesCommand = de_DescribeDBInstancesCommand;
const de_DescribeDBInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBLogFilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBLogFilesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDBLogFilesResponse(data.DescribeDBLogFilesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBLogFilesCommand = de_DescribeDBLogFilesCommand;
const de_DescribeDBLogFilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBParameterGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBParameterGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBParameterGroupsMessage(data.DescribeDBParameterGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBParameterGroupsCommand = de_DescribeDBParameterGroupsCommand;
const de_DescribeDBParameterGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBParameterGroupDetails(data.DescribeDBParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBParametersCommand = de_DescribeDBParametersCommand;
const de_DescribeDBParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBProxiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBProxiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDBProxiesResponse(data.DescribeDBProxiesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBProxiesCommand = de_DescribeDBProxiesCommand;
const de_DescribeDBProxiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBProxyEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBProxyEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDBProxyEndpointsResponse(data.DescribeDBProxyEndpointsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBProxyEndpointsCommand = de_DescribeDBProxyEndpointsCommand;
const de_DescribeDBProxyEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
            throw await de_DBProxyEndpointNotFoundFaultRes(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBProxyTargetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBProxyTargetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDBProxyTargetGroupsResponse(data.DescribeDBProxyTargetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBProxyTargetGroupsCommand = de_DescribeDBProxyTargetGroupsCommand;
const de_DescribeDBProxyTargetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBProxyTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBProxyTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDBProxyTargetsResponse(data.DescribeDBProxyTargetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBProxyTargetsCommand = de_DescribeDBProxyTargetsCommand;
const de_DescribeDBProxyTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetNotFoundFault":
            throw await de_DBProxyTargetNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBSecurityGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBSecurityGroupMessage(data.DescribeDBSecurityGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBSecurityGroupsCommand = de_DescribeDBSecurityGroupsCommand;
const de_DescribeDBSecurityGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBSnapshotAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBSnapshotAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDBSnapshotAttributesResult(data.DescribeDBSnapshotAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBSnapshotAttributesCommand = de_DescribeDBSnapshotAttributesCommand;
const de_DescribeDBSnapshotAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBSnapshotMessage(data.DescribeDBSnapshotsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBSnapshotsCommand = de_DescribeDBSnapshotsCommand;
const de_DescribeDBSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeDBSubnetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDBSubnetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBSubnetGroupMessage(data.DescribeDBSubnetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDBSubnetGroupsCommand = de_DescribeDBSubnetGroupsCommand;
const de_DescribeDBSubnetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeEngineDefaultClusterParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEngineDefaultClusterParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEngineDefaultClusterParametersResult(data.DescribeEngineDefaultClusterParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeEngineDefaultClusterParametersCommand = de_DescribeEngineDefaultClusterParametersCommand;
const de_DescribeEngineDefaultClusterParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeEngineDefaultParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEngineDefaultParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEngineDefaultParametersResult(data.DescribeEngineDefaultParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeEngineDefaultParametersCommand = de_DescribeEngineDefaultParametersCommand;
const de_DescribeEngineDefaultParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeEventCategoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEventCategoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EventCategoriesMessage(data.DescribeEventCategoriesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeEventCategoriesCommand = de_DescribeEventCategoriesCommand;
const de_DescribeEventCategoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EventsMessage(data.DescribeEventsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeEventsCommand = de_DescribeEventsCommand;
const de_DescribeEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeEventSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEventSubscriptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EventSubscriptionsMessage(data.DescribeEventSubscriptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeEventSubscriptionsCommand = de_DescribeEventSubscriptionsCommand;
const de_DescribeEventSubscriptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await de_SubscriptionNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeExportTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeExportTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportTasksMessage(data.DescribeExportTasksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeExportTasksCommand = de_DescribeExportTasksCommand;
const de_DescribeExportTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExportTaskNotFound":
        case "com.amazonaws.rds#ExportTaskNotFoundFault":
            throw await de_ExportTaskNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeGlobalClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeGlobalClustersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GlobalClustersMessage(data.DescribeGlobalClustersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeGlobalClustersCommand = de_DescribeGlobalClustersCommand;
const de_DescribeGlobalClustersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await de_GlobalClusterNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeOptionGroupOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOptionGroupOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_OptionGroupOptionsMessage(data.DescribeOptionGroupOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOptionGroupOptionsCommand = de_DescribeOptionGroupOptionsCommand;
const de_DescribeOptionGroupOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeOptionGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOptionGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_OptionGroups(data.DescribeOptionGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOptionGroupsCommand = de_DescribeOptionGroupsCommand;
const de_DescribeOptionGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeOrderableDBInstanceOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrderableDBInstanceOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_OrderableDBInstanceOptionsMessage(data.DescribeOrderableDBInstanceOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOrderableDBInstanceOptionsCommand = de_DescribeOrderableDBInstanceOptionsCommand;
const de_DescribeOrderableDBInstanceOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribePendingMaintenanceActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePendingMaintenanceActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PendingMaintenanceActionsMessage(data.DescribePendingMaintenanceActionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribePendingMaintenanceActionsCommand = de_DescribePendingMaintenanceActionsCommand;
const de_DescribePendingMaintenanceActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await de_ResourceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeReservedDBInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeReservedDBInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReservedDBInstanceMessage(data.DescribeReservedDBInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeReservedDBInstancesCommand = de_DescribeReservedDBInstancesCommand;
const de_DescribeReservedDBInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedDBInstanceNotFound":
        case "com.amazonaws.rds#ReservedDBInstanceNotFoundFault":
            throw await de_ReservedDBInstanceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeReservedDBInstancesOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeReservedDBInstancesOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReservedDBInstancesOfferingMessage(data.DescribeReservedDBInstancesOfferingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeReservedDBInstancesOfferingsCommand = de_DescribeReservedDBInstancesOfferingsCommand;
const de_DescribeReservedDBInstancesOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedDBInstancesOfferingNotFound":
        case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault":
            throw await de_ReservedDBInstancesOfferingNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DescribeSourceRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSourceRegionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SourceRegionMessage(data.DescribeSourceRegionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeSourceRegionsCommand = de_DescribeSourceRegionsCommand;
const de_DescribeSourceRegionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_DescribeValidDBInstanceModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeValidDBInstanceModificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeValidDBInstanceModificationsResult(data.DescribeValidDBInstanceModificationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeValidDBInstanceModificationsCommand = de_DescribeValidDBInstanceModificationsCommand;
const de_DescribeValidDBInstanceModificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DownloadDBLogFilePortionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DownloadDBLogFilePortionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DownloadDBLogFilePortionDetails(data.DownloadDBLogFilePortionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DownloadDBLogFilePortionCommand = de_DownloadDBLogFilePortionCommand;
const de_DownloadDBLogFilePortionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBLogFileNotFoundFault":
        case "com.amazonaws.rds#DBLogFileNotFoundFault":
            throw await de_DBLogFileNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_FailoverDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_FailoverDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_FailoverDBClusterResult(data.FailoverDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_FailoverDBClusterCommand = de_FailoverDBClusterCommand;
const de_FailoverDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_FailoverGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_FailoverGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_FailoverGlobalClusterResult(data.FailoverGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_FailoverGlobalClusterCommand = de_FailoverGlobalClusterCommand;
const de_FailoverGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await de_GlobalClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await de_InvalidGlobalClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TagListMessage(data.ListTagsForResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await de_BlueGreenDeploymentNotFoundFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyActivityStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyActivityStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyActivityStreamResponse(data.ModifyActivityStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyActivityStreamCommand = de_ModifyActivityStreamCommand;
const de_ModifyActivityStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await de_ResourceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyCertificatesResult(data.ModifyCertificatesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyCertificatesCommand = de_ModifyCertificatesCommand;
const de_ModifyCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CertificateNotFound":
        case "com.amazonaws.rds#CertificateNotFoundFault":
            throw await de_CertificateNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyCurrentDBClusterCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyCurrentDBClusterCapacityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterCapacityInfo(data.ModifyCurrentDBClusterCapacityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyCurrentDBClusterCapacityCommand = de_ModifyCurrentDBClusterCapacityCommand;
const de_ModifyCurrentDBClusterCapacityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterCapacityFault":
        case "com.amazonaws.rds#InvalidDBClusterCapacityFault":
            throw await de_InvalidDBClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyCustomDBEngineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyCustomDBEngineVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBEngineVersion(data.ModifyCustomDBEngineVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyCustomDBEngineVersionCommand = de_ModifyCustomDBEngineVersionCommand;
const de_ModifyCustomDBEngineVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomDBEngineVersionNotFoundFault":
        case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault":
            throw await de_CustomDBEngineVersionNotFoundFaultRes(parsedOutput, context);
        case "InvalidCustomDBEngineVersionStateFault":
        case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault":
            throw await de_InvalidCustomDBEngineVersionStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBClusterResult(data.ModifyDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBClusterCommand = de_ModifyDBClusterCommand;
const de_ModifyDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await de_DBClusterAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await de_DBClusterParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await de_InvalidDBSecurityGroupStateFaultRes(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await de_InvalidDBSubnetGroupStateFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotAvailableFault":
        case "com.amazonaws.rds#StorageTypeNotAvailableFault":
            throw await de_StorageTypeNotAvailableFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBClusterEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBClusterEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterEndpoint(data.ModifyDBClusterEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBClusterEndpointCommand = de_ModifyDBClusterEndpointCommand;
const de_ModifyDBClusterEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterEndpointNotFoundFault":
        case "com.amazonaws.rds#DBClusterEndpointNotFoundFault":
            throw await de_DBClusterEndpointNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault":
            throw await de_InvalidDBClusterEndpointStateFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterParameterGroupNameMessage(data.ModifyDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBClusterParameterGroupCommand = de_ModifyDBClusterParameterGroupCommand;
const de_ModifyDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await de_InvalidDBParameterGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBClusterSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBClusterSnapshotAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBClusterSnapshotAttributeResult(data.ModifyDBClusterSnapshotAttributeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBClusterSnapshotAttributeCommand = de_ModifyDBClusterSnapshotAttributeCommand;
const de_ModifyDBClusterSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
        case "SharedSnapshotQuotaExceeded":
        case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault":
            throw await de_SharedSnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBInstanceResult(data.ModifyDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBInstanceCommand = de_ModifyDBInstanceCommand;
const de_ModifyDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await de_BackupPolicyNotFoundFaultRes(parsedOutput, context);
        case "CertificateNotFound":
        case "com.amazonaws.rds#CertificateNotFoundFault":
            throw await de_CertificateNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "DBUpgradeDependencyFailure":
        case "com.amazonaws.rds#DBUpgradeDependencyFailureFault":
            throw await de_DBUpgradeDependencyFailureFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await de_InvalidDBSecurityGroupStateFaultRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await de_NetworkTypeNotSupportedRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await de_ProvisionedIopsNotAvailableInAZFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBParameterGroupNameMessage(data.ModifyDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBParameterGroupCommand = de_ModifyDBParameterGroupCommand;
const de_ModifyDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await de_InvalidDBParameterGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBProxyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBProxyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBProxyResponse(data.ModifyDBProxyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBProxyCommand = de_ModifyDBProxyCommand;
const de_ModifyDBProxyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyAlreadyExistsFault":
            throw await de_DBProxyAlreadyExistsFaultRes(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBProxyEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBProxyEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBProxyEndpointResponse(data.ModifyDBProxyEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBProxyEndpointCommand = de_ModifyDBProxyEndpointCommand;
const de_ModifyDBProxyEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault":
            throw await de_DBProxyEndpointAlreadyExistsFaultRes(parsedOutput, context);
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
            throw await de_DBProxyEndpointNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault":
            throw await de_InvalidDBProxyEndpointStateFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBProxyTargetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBProxyTargetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBProxyTargetGroupResponse(data.ModifyDBProxyTargetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBProxyTargetGroupCommand = de_ModifyDBProxyTargetGroupCommand;
const de_ModifyDBProxyTargetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBSnapshotResult(data.ModifyDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBSnapshotCommand = de_ModifyDBSnapshotCommand;
const de_ModifyDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBSnapshotAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBSnapshotAttributeResult(data.ModifyDBSnapshotAttributeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBSnapshotAttributeCommand = de_ModifyDBSnapshotAttributeCommand;
const de_ModifyDBSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await de_InvalidDBSnapshotStateFaultRes(parsedOutput, context);
        case "SharedSnapshotQuotaExceeded":
        case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault":
            throw await de_SharedSnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyDBSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDBSubnetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDBSubnetGroupResult(data.ModifyDBSubnetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyDBSubnetGroupCommand = de_ModifyDBSubnetGroupCommand;
const de_ModifyDBSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetQuotaExceededFault":
        case "com.amazonaws.rds#DBSubnetQuotaExceededFault":
            throw await de_DBSubnetQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "SubnetAlreadyInUse":
        case "com.amazonaws.rds#SubnetAlreadyInUse":
            throw await de_SubnetAlreadyInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyEventSubscriptionResult(data.ModifyEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyEventSubscriptionCommand = de_ModifyEventSubscriptionCommand;
const de_ModifyEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EventSubscriptionQuotaExceeded":
        case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault":
            throw await de_EventSubscriptionQuotaExceededFaultRes(parsedOutput, context);
        case "SNSInvalidTopic":
        case "com.amazonaws.rds#SNSInvalidTopicFault":
            throw await de_SNSInvalidTopicFaultRes(parsedOutput, context);
        case "SNSNoAuthorization":
        case "com.amazonaws.rds#SNSNoAuthorizationFault":
            throw await de_SNSNoAuthorizationFaultRes(parsedOutput, context);
        case "SNSTopicArnNotFound":
        case "com.amazonaws.rds#SNSTopicArnNotFoundFault":
            throw await de_SNSTopicArnNotFoundFaultRes(parsedOutput, context);
        case "SubscriptionCategoryNotFound":
        case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault":
            throw await de_SubscriptionCategoryNotFoundFaultRes(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await de_SubscriptionNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyGlobalClusterResult(data.ModifyGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyGlobalClusterCommand = de_ModifyGlobalClusterCommand;
const de_ModifyGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await de_GlobalClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await de_InvalidGlobalClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ModifyOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyOptionGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyOptionGroupResult(data.ModifyOptionGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ModifyOptionGroupCommand = de_ModifyOptionGroupCommand;
const de_ModifyOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOptionGroupStateFault":
        case "com.amazonaws.rds#InvalidOptionGroupStateFault":
            throw await de_InvalidOptionGroupStateFaultRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_PromoteReadReplicaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PromoteReadReplicaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PromoteReadReplicaResult(data.PromoteReadReplicaResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PromoteReadReplicaCommand = de_PromoteReadReplicaCommand;
const de_PromoteReadReplicaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_PromoteReadReplicaDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PromoteReadReplicaDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PromoteReadReplicaDBClusterResult(data.PromoteReadReplicaDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PromoteReadReplicaDBClusterCommand = de_PromoteReadReplicaDBClusterCommand;
const de_PromoteReadReplicaDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_PurchaseReservedDBInstancesOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PurchaseReservedDBInstancesOfferingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PurchaseReservedDBInstancesOfferingResult(data.PurchaseReservedDBInstancesOfferingResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PurchaseReservedDBInstancesOfferingCommand = de_PurchaseReservedDBInstancesOfferingCommand;
const de_PurchaseReservedDBInstancesOfferingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedDBInstanceAlreadyExists":
        case "com.amazonaws.rds#ReservedDBInstanceAlreadyExistsFault":
            throw await de_ReservedDBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "ReservedDBInstanceQuotaExceeded":
        case "com.amazonaws.rds#ReservedDBInstanceQuotaExceededFault":
            throw await de_ReservedDBInstanceQuotaExceededFaultRes(parsedOutput, context);
        case "ReservedDBInstancesOfferingNotFound":
        case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault":
            throw await de_ReservedDBInstancesOfferingNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RebootDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebootDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootDBClusterResult(data.RebootDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RebootDBClusterCommand = de_RebootDBClusterCommand;
const de_RebootDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RebootDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebootDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootDBInstanceResult(data.RebootDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RebootDBInstanceCommand = de_RebootDBInstanceCommand;
const de_RebootDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RegisterDBProxyTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterDBProxyTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterDBProxyTargetsResponse(data.RegisterDBProxyTargetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RegisterDBProxyTargetsCommand = de_RegisterDBProxyTargetsCommand;
const de_RegisterDBProxyTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetAlreadyRegisteredFault":
        case "com.amazonaws.rds#DBProxyTargetAlreadyRegisteredFault":
            throw await de_DBProxyTargetAlreadyRegisteredFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "InsufficientAvailableIPsInSubnetFault":
        case "com.amazonaws.rds#InsufficientAvailableIPsInSubnetFault":
            throw await de_InsufficientAvailableIPsInSubnetFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await de_InvalidDBProxyStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RemoveFromGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveFromGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RemoveFromGlobalClusterResult(data.RemoveFromGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RemoveFromGlobalClusterCommand = de_RemoveFromGlobalClusterCommand;
const de_RemoveFromGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await de_GlobalClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await de_InvalidGlobalClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RemoveRoleFromDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveRoleFromDBClusterCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_RemoveRoleFromDBClusterCommand = de_RemoveRoleFromDBClusterCommand;
const de_RemoveRoleFromDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterRoleNotFound":
        case "com.amazonaws.rds#DBClusterRoleNotFoundFault":
            throw await de_DBClusterRoleNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RemoveRoleFromDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveRoleFromDBInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_RemoveRoleFromDBInstanceCommand = de_RemoveRoleFromDBInstanceCommand;
const de_RemoveRoleFromDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceRoleNotFound":
        case "com.amazonaws.rds#DBInstanceRoleNotFoundFault":
            throw await de_DBInstanceRoleNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RemoveSourceIdentifierFromSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveSourceIdentifierFromSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RemoveSourceIdentifierFromSubscriptionResult(data.RemoveSourceIdentifierFromSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RemoveSourceIdentifierFromSubscriptionCommand = de_RemoveSourceIdentifierFromSubscriptionCommand;
const de_RemoveSourceIdentifierFromSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "SourceNotFound":
        case "com.amazonaws.rds#SourceNotFoundFault":
            throw await de_SourceNotFoundFaultRes(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await de_SubscriptionNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RemoveTagsFromResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveTagsFromResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_RemoveTagsFromResourceCommand = de_RemoveTagsFromResourceCommand;
const de_RemoveTagsFromResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await de_BlueGreenDeploymentNotFoundFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await de_DBProxyNotFoundFaultRes(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await de_DBProxyTargetGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ResetDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBClusterParameterGroupNameMessage(data.ResetDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ResetDBClusterParameterGroupCommand = de_ResetDBClusterParameterGroupCommand;
const de_ResetDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await de_InvalidDBParameterGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ResetDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DBParameterGroupNameMessage(data.ResetDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ResetDBParameterGroupCommand = de_ResetDBParameterGroupCommand;
const de_ResetDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await de_InvalidDBParameterGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RestoreDBClusterFromS3Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreDBClusterFromS3CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreDBClusterFromS3Result(data.RestoreDBClusterFromS3Result, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RestoreDBClusterFromS3Command = de_RestoreDBClusterFromS3Command;
const de_RestoreDBClusterFromS3CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await de_DBClusterAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await de_DBClusterParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await de_DBClusterQuotaExceededFaultRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await de_InsufficientStorageClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await de_InvalidDBSubnetGroupStateFaultRes(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
            throw await de_InvalidS3BucketFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RestoreDBClusterFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreDBClusterFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreDBClusterFromSnapshotResult(data.RestoreDBClusterFromSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RestoreDBClusterFromSnapshotCommand = de_RestoreDBClusterFromSnapshotCommand;
const de_RestoreDBClusterFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await de_DBClusterAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await de_DBClusterParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await de_DBClusterQuotaExceededFaultRes(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InsufficientDBClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientDBClusterCapacityFault":
            throw await de_InsufficientDBClusterCapacityFaultRes(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await de_InsufficientStorageClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await de_InvalidDBSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await de_InvalidRestoreFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RestoreDBClusterToPointInTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreDBClusterToPointInTimeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreDBClusterToPointInTimeResult(data.RestoreDBClusterToPointInTimeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RestoreDBClusterToPointInTimeCommand = de_RestoreDBClusterToPointInTimeCommand;
const de_RestoreDBClusterToPointInTimeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await de_DBClusterAlreadyExistsFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await de_DBClusterParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await de_DBClusterQuotaExceededFaultRes(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InsufficientDBClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientDBClusterCapacityFault":
            throw await de_InsufficientDBClusterCapacityFaultRes(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await de_InsufficientStorageClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await de_InvalidDBClusterSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await de_InvalidDBSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await de_InvalidRestoreFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RestoreDBInstanceFromDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreDBInstanceFromDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreDBInstanceFromDBSnapshotResult(data.RestoreDBInstanceFromDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RestoreDBInstanceFromDBSnapshotCommand = de_RestoreDBInstanceFromDBSnapshotCommand;
const de_RestoreDBInstanceFromDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await de_BackupPolicyNotFoundFaultRes(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await de_InstanceQuotaExceededFaultRes(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await de_InvalidDBSnapshotStateFaultRes(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await de_InvalidRestoreFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await de_NetworkTypeNotSupportedRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await de_ProvisionedIopsNotAvailableInAZFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RestoreDBInstanceFromS3Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreDBInstanceFromS3CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreDBInstanceFromS3Result(data.RestoreDBInstanceFromS3Result, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RestoreDBInstanceFromS3Command = de_RestoreDBInstanceFromS3Command;
const de_RestoreDBInstanceFromS3CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await de_BackupPolicyNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await de_InstanceQuotaExceededFaultRes(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
            throw await de_InvalidS3BucketFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await de_NetworkTypeNotSupportedRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await de_ProvisionedIopsNotAvailableInAZFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RestoreDBInstanceToPointInTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreDBInstanceToPointInTimeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreDBInstanceToPointInTimeResult(data.RestoreDBInstanceToPointInTimeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RestoreDBInstanceToPointInTimeCommand = de_RestoreDBInstanceToPointInTimeCommand;
const de_RestoreDBInstanceToPointInTimeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await de_BackupPolicyNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await de_DBInstanceAlreadyExistsFaultRes(parsedOutput, context);
        case "DBInstanceAutomatedBackupNotFound":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
            throw await de_DBInstanceAutomatedBackupNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await de_DBParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await de_DomainNotFoundFaultRes(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await de_InstanceQuotaExceededFaultRes(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await de_InvalidRestoreFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await de_NetworkTypeNotSupportedRes(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await de_OptionGroupNotFoundFaultRes(parsedOutput, context);
        case "PointInTimeRestoreNotEnabled":
        case "com.amazonaws.rds#PointInTimeRestoreNotEnabledFault":
            throw await de_PointInTimeRestoreNotEnabledFaultRes(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await de_ProvisionedIopsNotAvailableInAZFaultRes(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await de_StorageQuotaExceededFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_RevokeDBSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RevokeDBSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RevokeDBSecurityGroupIngressResult(data.RevokeDBSecurityGroupIngressResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RevokeDBSecurityGroupIngressCommand = de_RevokeDBSecurityGroupIngressCommand;
const de_RevokeDBSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await de_DBSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await de_InvalidDBSecurityGroupStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StartActivityStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartActivityStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartActivityStreamResponse(data.StartActivityStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartActivityStreamCommand = de_StartActivityStreamCommand;
const de_StartActivityStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await de_ResourceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StartDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartDBClusterResult(data.StartDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartDBClusterCommand = de_StartDBClusterCommand;
const de_StartDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StartDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartDBInstanceResult(data.StartDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartDBInstanceCommand = de_StartDBInstanceCommand;
const de_StartDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await de_DBSubnetGroupDoesNotCoverEnoughAZsRes(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await de_DBSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await de_InsufficientDBInstanceCapacityFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await de_InvalidSubnetRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StartDBInstanceAutomatedBackupsReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartDBInstanceAutomatedBackupsReplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartDBInstanceAutomatedBackupsReplicationResult(data.StartDBInstanceAutomatedBackupsReplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartDBInstanceAutomatedBackupsReplicationCommand = de_StartDBInstanceAutomatedBackupsReplicationCommand;
const de_StartDBInstanceAutomatedBackupsReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupQuotaExceeded":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault":
            throw await de_DBInstanceAutomatedBackupQuotaExceededFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await de_StorageTypeNotSupportedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StartExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartExportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportTask(data.StartExportTaskResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartExportTaskCommand = de_StartExportTaskCommand;
const de_StartExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await de_DBClusterSnapshotNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await de_DBSnapshotNotFoundFaultRes(parsedOutput, context);
        case "ExportTaskAlreadyExists":
        case "com.amazonaws.rds#ExportTaskAlreadyExistsFault":
            throw await de_ExportTaskAlreadyExistsFaultRes(parsedOutput, context);
        case "IamRoleMissingPermissions":
        case "com.amazonaws.rds#IamRoleMissingPermissionsFault":
            throw await de_IamRoleMissingPermissionsFaultRes(parsedOutput, context);
        case "IamRoleNotFound":
        case "com.amazonaws.rds#IamRoleNotFoundFault":
            throw await de_IamRoleNotFoundFaultRes(parsedOutput, context);
        case "InvalidExportOnly":
        case "com.amazonaws.rds#InvalidExportOnlyFault":
            throw await de_InvalidExportOnlyFaultRes(parsedOutput, context);
        case "InvalidExportSourceState":
        case "com.amazonaws.rds#InvalidExportSourceStateFault":
            throw await de_InvalidExportSourceStateFaultRes(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
            throw await de_InvalidS3BucketFaultRes(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await de_KMSKeyNotAccessibleFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StopActivityStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopActivityStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopActivityStreamResponse(data.StopActivityStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopActivityStreamCommand = de_StopActivityStreamCommand;
const de_StopActivityStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await de_ResourceNotFoundFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StopDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopDBClusterResult(data.StopDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopDBClusterCommand = de_StopDBClusterCommand;
const de_StopDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await de_DBClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StopDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopDBInstanceResult(data.StopDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopDBInstanceCommand = de_StopDBInstanceCommand;
const de_StopDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await de_DBSnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await de_InvalidDBClusterStateFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_StopDBInstanceAutomatedBackupsReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopDBInstanceAutomatedBackupsReplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopDBInstanceAutomatedBackupsReplicationResult(data.StopDBInstanceAutomatedBackupsReplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopDBInstanceAutomatedBackupsReplicationCommand = de_StopDBInstanceAutomatedBackupsReplicationCommand;
const de_StopDBInstanceAutomatedBackupsReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_SwitchoverBlueGreenDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SwitchoverBlueGreenDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SwitchoverBlueGreenDeploymentResponse(data.SwitchoverBlueGreenDeploymentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SwitchoverBlueGreenDeploymentCommand = de_SwitchoverBlueGreenDeploymentCommand;
const de_SwitchoverBlueGreenDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await de_BlueGreenDeploymentNotFoundFaultRes(parsedOutput, context);
        case "InvalidBlueGreenDeploymentStateFault":
        case "com.amazonaws.rds#InvalidBlueGreenDeploymentStateFault":
            throw await de_InvalidBlueGreenDeploymentStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_SwitchoverReadReplicaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SwitchoverReadReplicaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SwitchoverReadReplicaResult(data.SwitchoverReadReplicaResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SwitchoverReadReplicaCommand = de_SwitchoverReadReplicaCommand;
const de_SwitchoverReadReplicaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await de_DBInstanceNotFoundFaultRes(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await de_InvalidDBInstanceStateFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AuthorizationAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AuthorizationAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.AuthorizationAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AuthorizationNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AuthorizationNotFoundFault(body.Error, context);
    const exception = new models_0_1.AuthorizationNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AuthorizationQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AuthorizationQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.AuthorizationQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_BackupPolicyNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_BackupPolicyNotFoundFault(body.Error, context);
    const exception = new models_0_1.BackupPolicyNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_BlueGreenDeploymentAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_BlueGreenDeploymentAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.BlueGreenDeploymentAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_BlueGreenDeploymentNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_BlueGreenDeploymentNotFoundFault(body.Error, context);
    const exception = new models_0_1.BlueGreenDeploymentNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CertificateNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CertificateNotFoundFault(body.Error, context);
    const exception = new models_0_1.CertificateNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CreateCustomDBEngineVersionFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CreateCustomDBEngineVersionFault(body.Error, context);
    const exception = new models_0_1.CreateCustomDBEngineVersionFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CustomAvailabilityZoneNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CustomAvailabilityZoneNotFoundFault(body.Error, context);
    const exception = new models_0_1.CustomAvailabilityZoneNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CustomDBEngineVersionAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CustomDBEngineVersionAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.CustomDBEngineVersionAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CustomDBEngineVersionNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CustomDBEngineVersionNotFoundFault(body.Error, context);
    const exception = new models_0_1.CustomDBEngineVersionNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CustomDBEngineVersionQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CustomDBEngineVersionQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.CustomDBEngineVersionQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBClusterAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterBacktrackNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterBacktrackNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBClusterBacktrackNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterEndpointAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterEndpointAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBClusterEndpointAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterEndpointNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterEndpointNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBClusterEndpointNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterEndpointQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterEndpointQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBClusterEndpointQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBClusterNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterParameterGroupNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterParameterGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBClusterParameterGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBClusterQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterRoleAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterRoleAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBClusterRoleAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterRoleNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterRoleNotFoundFault(body.Error, context);
    const exception = new models_1_1.DBClusterRoleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterRoleQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterRoleQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBClusterRoleQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterSnapshotAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterSnapshotAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBClusterSnapshotAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBClusterSnapshotNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBClusterSnapshotNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBClusterSnapshotNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBInstanceAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBInstanceAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBInstanceAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBInstanceAutomatedBackupNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBInstanceAutomatedBackupNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBInstanceAutomatedBackupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBInstanceAutomatedBackupQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBInstanceAutomatedBackupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBInstanceAutomatedBackupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBInstanceNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBInstanceNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBInstanceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBInstanceRoleAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBInstanceRoleAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBInstanceRoleAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBInstanceRoleNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBInstanceRoleNotFoundFault(body.Error, context);
    const exception = new models_1_1.DBInstanceRoleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBInstanceRoleQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBInstanceRoleQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBInstanceRoleQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBLogFileNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBLogFileNotFoundFault(body.Error, context);
    const exception = new models_1_1.DBLogFileNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBParameterGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBParameterGroupAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBParameterGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBParameterGroupNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBParameterGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBParameterGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBParameterGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBParameterGroupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBParameterGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBProxyAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyEndpointAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyEndpointAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBProxyEndpointAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyEndpointNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyEndpointNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBProxyEndpointNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyEndpointQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyEndpointQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBProxyEndpointQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBProxyNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBProxyQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyTargetAlreadyRegisteredFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyTargetAlreadyRegisteredFault(body.Error, context);
    const exception = new models_1_1.DBProxyTargetAlreadyRegisteredFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyTargetGroupNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyTargetGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBProxyTargetGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBProxyTargetNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBProxyTargetNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBProxyTargetNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSecurityGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSecurityGroupAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBSecurityGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSecurityGroupNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSecurityGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBSecurityGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSecurityGroupNotSupportedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSecurityGroupNotSupportedFault(body.Error, context);
    const exception = new models_0_1.DBSecurityGroupNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSecurityGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSecurityGroupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBSecurityGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSnapshotAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSnapshotAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBSnapshotAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSnapshotNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSnapshotNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBSnapshotNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSubnetGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSubnetGroupAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.DBSubnetGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSubnetGroupDoesNotCoverEnoughAZsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSubnetGroupDoesNotCoverEnoughAZs(body.Error, context);
    const exception = new models_0_1.DBSubnetGroupDoesNotCoverEnoughAZs({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSubnetGroupNotAllowedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSubnetGroupNotAllowedFault(body.Error, context);
    const exception = new models_0_1.DBSubnetGroupNotAllowedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSubnetGroupNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSubnetGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.DBSubnetGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSubnetGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSubnetGroupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBSubnetGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBSubnetQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBSubnetQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.DBSubnetQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DBUpgradeDependencyFailureFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DBUpgradeDependencyFailureFault(body.Error, context);
    const exception = new models_1_1.DBUpgradeDependencyFailureFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DomainNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DomainNotFoundFault(body.Error, context);
    const exception = new models_0_1.DomainNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_Ec2ImagePropertiesNotSupportedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_Ec2ImagePropertiesNotSupportedFault(body.Error, context);
    const exception = new models_0_1.Ec2ImagePropertiesNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_EventSubscriptionQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EventSubscriptionQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.EventSubscriptionQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ExportTaskAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ExportTaskAlreadyExistsFault(body.Error, context);
    const exception = new models_1_1.ExportTaskAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ExportTaskNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ExportTaskNotFoundFault(body.Error, context);
    const exception = new models_0_1.ExportTaskNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_GlobalClusterAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_GlobalClusterAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.GlobalClusterAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_GlobalClusterNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_GlobalClusterNotFoundFault(body.Error, context);
    const exception = new models_0_1.GlobalClusterNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_GlobalClusterQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_GlobalClusterQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.GlobalClusterQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IamRoleMissingPermissionsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IamRoleMissingPermissionsFault(body.Error, context);
    const exception = new models_1_1.IamRoleMissingPermissionsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IamRoleNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IamRoleNotFoundFault(body.Error, context);
    const exception = new models_1_1.IamRoleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InstanceQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InstanceQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.InstanceQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientAvailableIPsInSubnetFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientAvailableIPsInSubnetFault(body.Error, context);
    const exception = new models_1_1.InsufficientAvailableIPsInSubnetFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientDBClusterCapacityFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientDBClusterCapacityFault(body.Error, context);
    const exception = new models_1_1.InsufficientDBClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientDBInstanceCapacityFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientDBInstanceCapacityFault(body.Error, context);
    const exception = new models_0_1.InsufficientDBInstanceCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientStorageClusterCapacityFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientStorageClusterCapacityFault(body.Error, context);
    const exception = new models_0_1.InsufficientStorageClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidBlueGreenDeploymentStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidBlueGreenDeploymentStateFault(body.Error, context);
    const exception = new models_0_1.InvalidBlueGreenDeploymentStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidCustomDBEngineVersionStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidCustomDBEngineVersionStateFault(body.Error, context);
    const exception = new models_0_1.InvalidCustomDBEngineVersionStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBClusterCapacityFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBClusterCapacityFault(body.Error, context);
    const exception = new models_1_1.InvalidDBClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBClusterEndpointStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBClusterEndpointStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBClusterEndpointStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBClusterSnapshotStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBClusterSnapshotStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBClusterSnapshotStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBClusterStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBClusterStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBClusterStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBInstanceAutomatedBackupStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBInstanceAutomatedBackupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBInstanceAutomatedBackupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBInstanceStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBInstanceStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBInstanceStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBParameterGroupStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBParameterGroupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBParameterGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBProxyEndpointStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBProxyEndpointStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBProxyEndpointStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBProxyStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBProxyStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBProxyStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBSecurityGroupStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBSecurityGroupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBSecurityGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBSnapshotStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBSnapshotStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBSnapshotStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBSubnetGroupFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBSubnetGroupFault(body.Error, context);
    const exception = new models_0_1.InvalidDBSubnetGroupFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBSubnetGroupStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBSubnetGroupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBSubnetGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDBSubnetStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDBSubnetStateFault(body.Error, context);
    const exception = new models_0_1.InvalidDBSubnetStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidEventSubscriptionStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidEventSubscriptionStateFault(body.Error, context);
    const exception = new models_0_1.InvalidEventSubscriptionStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidExportOnlyFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidExportOnlyFault(body.Error, context);
    const exception = new models_1_1.InvalidExportOnlyFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidExportSourceStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidExportSourceStateFault(body.Error, context);
    const exception = new models_1_1.InvalidExportSourceStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidExportTaskStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidExportTaskStateFault(body.Error, context);
    const exception = new models_0_1.InvalidExportTaskStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidGlobalClusterStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidGlobalClusterStateFault(body.Error, context);
    const exception = new models_0_1.InvalidGlobalClusterStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidOptionGroupStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidOptionGroupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidOptionGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidRestoreFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidRestoreFault(body.Error, context);
    const exception = new models_1_1.InvalidRestoreFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidS3BucketFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidS3BucketFault(body.Error, context);
    const exception = new models_1_1.InvalidS3BucketFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidSubnetRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidSubnet(body.Error, context);
    const exception = new models_0_1.InvalidSubnet({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidVPCNetworkStateFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidVPCNetworkStateFault(body.Error, context);
    const exception = new models_0_1.InvalidVPCNetworkStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_KMSKeyNotAccessibleFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KMSKeyNotAccessibleFault(body.Error, context);
    const exception = new models_0_1.KMSKeyNotAccessibleFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NetworkTypeNotSupportedRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NetworkTypeNotSupported(body.Error, context);
    const exception = new models_0_1.NetworkTypeNotSupported({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OptionGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OptionGroupAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.OptionGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OptionGroupNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OptionGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.OptionGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OptionGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OptionGroupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.OptionGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PointInTimeRestoreNotEnabledFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PointInTimeRestoreNotEnabledFault(body.Error, context);
    const exception = new models_1_1.PointInTimeRestoreNotEnabledFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ProvisionedIopsNotAvailableInAZFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ProvisionedIopsNotAvailableInAZFault(body.Error, context);
    const exception = new models_0_1.ProvisionedIopsNotAvailableInAZFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ReservedDBInstanceAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ReservedDBInstanceAlreadyExistsFault(body.Error, context);
    const exception = new models_1_1.ReservedDBInstanceAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ReservedDBInstanceNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ReservedDBInstanceNotFoundFault(body.Error, context);
    const exception = new models_1_1.ReservedDBInstanceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ReservedDBInstanceQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ReservedDBInstanceQuotaExceededFault(body.Error, context);
    const exception = new models_1_1.ReservedDBInstanceQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ReservedDBInstancesOfferingNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ReservedDBInstancesOfferingNotFoundFault(body.Error, context);
    const exception = new models_1_1.ReservedDBInstancesOfferingNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundFault(body.Error, context);
    const exception = new models_0_1.ResourceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SharedSnapshotQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SharedSnapshotQuotaExceededFault(body.Error, context);
    const exception = new models_1_1.SharedSnapshotQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SnapshotQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SnapshotQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.SnapshotQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SNSInvalidTopicFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SNSInvalidTopicFault(body.Error, context);
    const exception = new models_0_1.SNSInvalidTopicFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SNSNoAuthorizationFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SNSNoAuthorizationFault(body.Error, context);
    const exception = new models_0_1.SNSNoAuthorizationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SNSTopicArnNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SNSTopicArnNotFoundFault(body.Error, context);
    const exception = new models_0_1.SNSTopicArnNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SourceClusterNotSupportedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SourceClusterNotSupportedFault(body.Error, context);
    const exception = new models_0_1.SourceClusterNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SourceDatabaseNotSupportedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SourceDatabaseNotSupportedFault(body.Error, context);
    const exception = new models_0_1.SourceDatabaseNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SourceNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SourceNotFoundFault(body.Error, context);
    const exception = new models_0_1.SourceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_StorageQuotaExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StorageQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.StorageQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_StorageTypeNotAvailableFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StorageTypeNotAvailableFault(body.Error, context);
    const exception = new models_1_1.StorageTypeNotAvailableFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_StorageTypeNotSupportedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StorageTypeNotSupportedFault(body.Error, context);
    const exception = new models_0_1.StorageTypeNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SubnetAlreadyInUseRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SubnetAlreadyInUse(body.Error, context);
    const exception = new models_1_1.SubnetAlreadyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SubscriptionAlreadyExistFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SubscriptionAlreadyExistFault(body.Error, context);
    const exception = new models_0_1.SubscriptionAlreadyExistFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SubscriptionCategoryNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SubscriptionCategoryNotFoundFault(body.Error, context);
    const exception = new models_0_1.SubscriptionCategoryNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SubscriptionNotFoundFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SubscriptionNotFoundFault(body.Error, context);
    const exception = new models_0_1.SubscriptionNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_AddRoleToDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const se_AddRoleToDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const se_AddSourceIdentifierToSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    return entries;
};
const se_AddTagsToResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ApplyPendingMaintenanceActionMessage = (input, context) => {
    const entries = {};
    if (input.ResourceIdentifier != null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
    }
    if (input.ApplyAction != null) {
        entries["ApplyAction"] = input.ApplyAction;
    }
    if (input.OptInType != null) {
        entries["OptInType"] = input.OptInType;
    }
    return entries;
};
const se_AttributeValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AttributeValue.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AuthorizeDBSecurityGroupIngressMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.CIDRIP != null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupId != null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
    }
    if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
const se_AvailabilityZones = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AvailabilityZone.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_BacktrackDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.BacktrackTo != null) {
        entries["BacktrackTo"] = input.BacktrackTo.toISOString().split(".")[0] + "Z";
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    if (input.UseEarliestTimeOnPointInTimeUnavailable != null) {
        entries["UseEarliestTimeOnPointInTimeUnavailable"] = input.UseEarliestTimeOnPointInTimeUnavailable;
    }
    return entries;
};
const se_CancelExportTaskMessage = (input, context) => {
    const entries = {};
    if (input.ExportTaskIdentifier != null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    return entries;
};
const se_CloudwatchLogsExportConfiguration = (input, context) => {
    const entries = {};
    if (input.EnableLogTypes != null) {
        const memberEntries = se_LogTypeList(input.EnableLogTypes, context);
        if (input.EnableLogTypes?.length === 0) {
            entries.EnableLogTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableLogTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableLogTypes != null) {
        const memberEntries = se_LogTypeList(input.DisableLogTypes, context);
        if (input.DisableLogTypes?.length === 0) {
            entries.DisableLogTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableLogTypes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ConnectionPoolConfiguration = (input, context) => {
    const entries = {};
    if (input.MaxConnectionsPercent != null) {
        entries["MaxConnectionsPercent"] = input.MaxConnectionsPercent;
    }
    if (input.MaxIdleConnectionsPercent != null) {
        entries["MaxIdleConnectionsPercent"] = input.MaxIdleConnectionsPercent;
    }
    if (input.ConnectionBorrowTimeout != null) {
        entries["ConnectionBorrowTimeout"] = input.ConnectionBorrowTimeout;
    }
    if (input.SessionPinningFilters != null) {
        const memberEntries = se_StringList(input.SessionPinningFilters, context);
        if (input.SessionPinningFilters?.length === 0) {
            entries.SessionPinningFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SessionPinningFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InitQuery != null) {
        entries["InitQuery"] = input.InitQuery;
    }
    return entries;
};
const se_CopyDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBClusterParameterGroupIdentifier != null) {
        entries["SourceDBClusterParameterGroupIdentifier"] = input.SourceDBClusterParameterGroupIdentifier;
    }
    if (input.TargetDBClusterParameterGroupIdentifier != null) {
        entries["TargetDBClusterParameterGroupIdentifier"] = input.TargetDBClusterParameterGroupIdentifier;
    }
    if (input.TargetDBClusterParameterGroupDescription != null) {
        entries["TargetDBClusterParameterGroupDescription"] = input.TargetDBClusterParameterGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CopyDBClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBClusterSnapshotIdentifier != null) {
        entries["SourceDBClusterSnapshotIdentifier"] = input.SourceDBClusterSnapshotIdentifier;
    }
    if (input.TargetDBClusterSnapshotIdentifier != null) {
        entries["TargetDBClusterSnapshotIdentifier"] = input.TargetDBClusterSnapshotIdentifier;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.CopyTags != null) {
        entries["CopyTags"] = input.CopyTags;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CopyDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBParameterGroupIdentifier != null) {
        entries["SourceDBParameterGroupIdentifier"] = input.SourceDBParameterGroupIdentifier;
    }
    if (input.TargetDBParameterGroupIdentifier != null) {
        entries["TargetDBParameterGroupIdentifier"] = input.TargetDBParameterGroupIdentifier;
    }
    if (input.TargetDBParameterGroupDescription != null) {
        entries["TargetDBParameterGroupDescription"] = input.TargetDBParameterGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CopyDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBSnapshotIdentifier != null) {
        entries["SourceDBSnapshotIdentifier"] = input.SourceDBSnapshotIdentifier;
    }
    if (input.TargetDBSnapshotIdentifier != null) {
        entries["TargetDBSnapshotIdentifier"] = input.TargetDBSnapshotIdentifier;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CopyTags != null) {
        entries["CopyTags"] = input.CopyTags;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.TargetCustomAvailabilityZone != null) {
        entries["TargetCustomAvailabilityZone"] = input.TargetCustomAvailabilityZone;
    }
    if (input.CopyOptionGroup != null) {
        entries["CopyOptionGroup"] = input.CopyOptionGroup;
    }
    return entries;
};
const se_CopyOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.SourceOptionGroupIdentifier != null) {
        entries["SourceOptionGroupIdentifier"] = input.SourceOptionGroupIdentifier;
    }
    if (input.TargetOptionGroupIdentifier != null) {
        entries["TargetOptionGroupIdentifier"] = input.TargetOptionGroupIdentifier;
    }
    if (input.TargetOptionGroupDescription != null) {
        entries["TargetOptionGroupDescription"] = input.TargetOptionGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateBlueGreenDeploymentRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentName != null) {
        entries["BlueGreenDeploymentName"] = input.BlueGreenDeploymentName;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.TargetEngineVersion != null) {
        entries["TargetEngineVersion"] = input.TargetEngineVersion;
    }
    if (input.TargetDBParameterGroupName != null) {
        entries["TargetDBParameterGroupName"] = input.TargetDBParameterGroupName;
    }
    if (input.TargetDBClusterParameterGroupName != null) {
        entries["TargetDBClusterParameterGroupName"] = input.TargetDBClusterParameterGroupName;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateCustomDBEngineVersionMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DatabaseInstallationFilesS3BucketName != null) {
        entries["DatabaseInstallationFilesS3BucketName"] = input.DatabaseInstallationFilesS3BucketName;
    }
    if (input.DatabaseInstallationFilesS3Prefix != null) {
        entries["DatabaseInstallationFilesS3Prefix"] = input.DatabaseInstallationFilesS3Prefix;
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.KMSKeyId != null) {
        entries["KMSKeyId"] = input.KMSKeyId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Manifest != null) {
        entries["Manifest"] = input.Manifest;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBClusterEndpointMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.EndpointType != null) {
        entries["EndpointType"] = input.EndpointType;
    }
    if (input.StaticMembers != null) {
        const memberEntries = se_StringList(input.StaticMembers, context);
        if (input.StaticMembers?.length === 0) {
            entries.StaticMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StaticMembers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedMembers != null) {
        const memberEntries = se_StringList(input.ExcludedMembers, context);
        if (input.ExcludedMembers?.length === 0) {
            entries.ExcludedMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedMembers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = se_AvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.CharacterSetName != null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.ReplicationSourceIdentifier != null) {
        entries["ReplicationSourceIdentifier"] = input.ReplicationSourceIdentifier;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineMode != null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = se_ScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.EnableHttpEndpoint != null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableGlobalWriteForwarding != null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = se_ServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.DBSystemId != null) {
        entries["DBSystemId"] = input.DBSystemId;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const se_CreateDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBSecurityGroups != null) {
        const memberEntries = se_DBSecurityGroupNameList(input.DBSecurityGroups, context);
        if (input.DBSecurityGroups?.length === 0) {
            entries.DBSecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.CharacterSetName != null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.NcharCharacterSetName != null) {
        entries["NcharCharacterSetName"] = input.NcharCharacterSetName;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.PromotionTier != null) {
        entries["PromotionTier"] = input.PromotionTier;
    }
    if (input.Timezone != null) {
        entries["Timezone"] = input.Timezone;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = se_ProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget != null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    if (input.CACertificateIdentifier != null) {
        entries["CACertificateIdentifier"] = input.CACertificateIdentifier;
    }
    return entries;
};
const se_CreateDBInstanceReadReplicaMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.SourceDBInstanceIdentifier != null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = se_ProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ReplicaMode != null) {
        entries["ReplicaMode"] = input.ReplicaMode;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.SourceDBClusterIdentifier != null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
    }
    return entries;
};
const se_CreateDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBProxyEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.VpcSubnetIds != null) {
        const memberEntries = se_StringList(input.VpcSubnetIds, context);
        if (input.VpcSubnetIds?.length === 0) {
            entries.VpcSubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_StringList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TargetRole != null) {
        entries["TargetRole"] = input.TargetRole;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBProxyRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.EngineFamily != null) {
        entries["EngineFamily"] = input.EngineFamily;
    }
    if (input.Auth != null) {
        const memberEntries = se_UserAuthConfigList(input.Auth, context);
        if (input.Auth?.length === 0) {
            entries.Auth = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Auth.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.VpcSubnetIds != null) {
        const memberEntries = se_StringList(input.VpcSubnetIds, context);
        if (input.VpcSubnetIds?.length === 0) {
            entries.VpcSubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_StringList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RequireTLS != null) {
        entries["RequireTLS"] = input.RequireTLS;
    }
    if (input.IdleClientTimeout != null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
    }
    if (input.DebugLogging != null) {
        entries["DebugLogging"] = input.DebugLogging;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBSecurityGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.DBSecurityGroupDescription != null) {
        entries["DBSecurityGroupDescription"] = input.DBSecurityGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDBSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSubnetGroupDescription != null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_SubnetIdentifierList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn != null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.EventCategories != null) {
        const memberEntries = se_EventCategoriesList(input.EventCategories, context);
        if (input.EventCategories?.length === 0) {
            entries.EventCategories = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourceIds != null) {
        const memberEntries = se_SourceIdsList(input.SourceIds, context);
        if (input.SourceIds?.length === 0) {
            entries.SourceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.SourceDBClusterIdentifier != null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    return entries;
};
const se_CreateOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.EngineName != null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion != null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    if (input.OptionGroupDescription != null) {
        entries["OptionGroupDescription"] = input.OptionGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DBSecurityGroupNameList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`DBSecurityGroupName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteBlueGreenDeploymentRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentIdentifier != null) {
        entries["BlueGreenDeploymentIdentifier"] = input.BlueGreenDeploymentIdentifier;
    }
    if (input.DeleteTarget != null) {
        entries["DeleteTarget"] = input.DeleteTarget;
    }
    return entries;
};
const se_DeleteCustomDBEngineVersionMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    return entries;
};
const se_DeleteDBClusterEndpointMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    return entries;
};
const se_DeleteDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.SkipFinalSnapshot != null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
    }
    if (input.FinalDBSnapshotIdentifier != null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
    }
    return entries;
};
const se_DeleteDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    return entries;
};
const se_DeleteDBClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    return entries;
};
const se_DeleteDBInstanceAutomatedBackupMessage = (input, context) => {
    const entries = {};
    if (input.DbiResourceId != null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    if (input.DBInstanceAutomatedBackupsArn != null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
    }
    return entries;
};
const se_DeleteDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.SkipFinalSnapshot != null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
    }
    if (input.FinalDBSnapshotIdentifier != null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
    }
    if (input.DeleteAutomatedBackups != null) {
        entries["DeleteAutomatedBackups"] = input.DeleteAutomatedBackups;
    }
    return entries;
};
const se_DeleteDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    return entries;
};
const se_DeleteDBProxyEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    return entries;
};
const se_DeleteDBProxyRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    return entries;
};
const se_DeleteDBSecurityGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    return entries;
};
const se_DeleteDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
const se_DeleteDBSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    return entries;
};
const se_DeleteEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    return entries;
};
const se_DeleteGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    return entries;
};
const se_DeleteOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    return entries;
};
const se_DeregisterDBProxyTargetsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBInstanceIdentifiers != null) {
        const memberEntries = se_StringList(input.DBInstanceIdentifiers, context);
        if (input.DBInstanceIdentifiers?.length === 0) {
            entries.DBInstanceIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBInstanceIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifiers != null) {
        const memberEntries = se_StringList(input.DBClusterIdentifiers, context);
        if (input.DBClusterIdentifiers?.length === 0) {
            entries.DBClusterIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBClusterIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeAccountAttributesMessage = (input, context) => {
    const entries = {};
    return entries;
};
const se_DescribeBlueGreenDeploymentsRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentIdentifier != null) {
        entries["BlueGreenDeploymentIdentifier"] = input.BlueGreenDeploymentIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const se_DescribeCertificatesMessage = (input, context) => {
    const entries = {};
    if (input.CertificateIdentifier != null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBClusterBacktracksMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.BacktrackIdentifier != null) {
        entries["BacktrackIdentifier"] = input.BacktrackIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBClusterEndpointsMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBClusterParameterGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBClusterParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBClustersMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared != null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    return entries;
};
const se_DescribeDBClusterSnapshotAttributesMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    return entries;
};
const se_DescribeDBClusterSnapshotsMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.SnapshotType != null) {
        entries["SnapshotType"] = input.SnapshotType;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared != null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    if (input.IncludePublic != null) {
        entries["IncludePublic"] = input.IncludePublic;
    }
    return entries;
};
const se_DescribeDBEngineVersionsMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.DefaultOnly != null) {
        entries["DefaultOnly"] = input.DefaultOnly;
    }
    if (input.ListSupportedCharacterSets != null) {
        entries["ListSupportedCharacterSets"] = input.ListSupportedCharacterSets;
    }
    if (input.ListSupportedTimezones != null) {
        entries["ListSupportedTimezones"] = input.ListSupportedTimezones;
    }
    if (input.IncludeAll != null) {
        entries["IncludeAll"] = input.IncludeAll;
    }
    return entries;
};
const se_DescribeDBInstanceAutomatedBackupsMessage = (input, context) => {
    const entries = {};
    if (input.DbiResourceId != null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.DBInstanceAutomatedBackupsArn != null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
    }
    return entries;
};
const se_DescribeDBInstancesMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBLogFilesMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.FilenameContains != null) {
        entries["FilenameContains"] = input.FilenameContains;
    }
    if (input.FileLastWritten != null) {
        entries["FileLastWritten"] = input.FileLastWritten;
    }
    if (input.FileSize != null) {
        entries["FileSize"] = input.FileSize;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBParameterGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBProxiesRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const se_DescribeDBProxyEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const se_DescribeDBProxyTargetGroupsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const se_DescribeDBProxyTargetsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const se_DescribeDBSecurityGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeDBSnapshotAttributesMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
const se_DescribeDBSnapshotsMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.SnapshotType != null) {
        entries["SnapshotType"] = input.SnapshotType;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared != null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    if (input.IncludePublic != null) {
        entries["IncludePublic"] = input.IncludePublic;
    }
    if (input.DbiResourceId != null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    return entries;
};
const se_DescribeDBSubnetGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeEngineDefaultClusterParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeEngineDefaultParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeEventCategoriesMessage = (input, context) => {
    const entries = {};
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeEventsMessage = (input, context) => {
    const entries = {};
    if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Duration != null) {
        entries["Duration"] = input.Duration;
    }
    if (input.EventCategories != null) {
        const memberEntries = se_EventCategoriesList(input.EventCategories, context);
        if (input.EventCategories?.length === 0) {
            entries.EventCategories = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeEventSubscriptionsMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeExportTasksMessage = (input, context) => {
    const entries = {};
    if (input.ExportTaskIdentifier != null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    return entries;
};
const se_DescribeGlobalClustersMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeOptionGroupOptionsMessage = (input, context) => {
    const entries = {};
    if (input.EngineName != null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion != null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeOptionGroupsMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.EngineName != null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion != null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    return entries;
};
const se_DescribeOrderableDBInstanceOptionsMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.AvailabilityZoneGroup != null) {
        entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
    }
    if (input.Vpc != null) {
        entries["Vpc"] = input.Vpc;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribePendingMaintenanceActionsMessage = (input, context) => {
    const entries = {};
    if (input.ResourceIdentifier != null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const se_DescribeReservedDBInstancesMessage = (input, context) => {
    const entries = {};
    if (input.ReservedDBInstanceId != null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
    }
    if (input.ReservedDBInstancesOfferingId != null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Duration != null) {
        entries["Duration"] = input.Duration;
    }
    if (input.ProductDescription != null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.LeaseId != null) {
        entries["LeaseId"] = input.LeaseId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeReservedDBInstancesOfferingsMessage = (input, context) => {
    const entries = {};
    if (input.ReservedDBInstancesOfferingId != null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Duration != null) {
        entries["Duration"] = input.Duration;
    }
    if (input.ProductDescription != null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const se_DescribeSourceRegionsMessage = (input, context) => {
    const entries = {};
    if (input.RegionName != null) {
        entries["RegionName"] = input.RegionName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeValidDBInstanceModificationsMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
const se_DownloadDBLogFilePortionMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.LogFileName != null) {
        entries["LogFileName"] = input.LogFileName;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.NumberOfLines != null) {
        entries["NumberOfLines"] = input.NumberOfLines;
    }
    return entries;
};
const se_EngineModeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EventCategoriesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`EventCategory.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FailoverDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.TargetDBInstanceIdentifier != null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
    }
    return entries;
};
const se_FailoverGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.TargetDbClusterIdentifier != null) {
        entries["TargetDbClusterIdentifier"] = input.TargetDbClusterIdentifier;
    }
    return entries;
};
const se_Filter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Values != null) {
        const memberEntries = se_FilterValueList(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_FilterList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Filter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Filter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FilterValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Value.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_KeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ListTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LogTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ModifyActivityStreamRequest = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.AuditPolicyState != null) {
        entries["AuditPolicyState"] = input.AuditPolicyState;
    }
    return entries;
};
const se_ModifyCertificatesMessage = (input, context) => {
    const entries = {};
    if (input.CertificateIdentifier != null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
    }
    if (input.RemoveCustomerOverride != null) {
        entries["RemoveCustomerOverride"] = input.RemoveCustomerOverride;
    }
    return entries;
};
const se_ModifyCurrentDBClusterCapacityMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Capacity != null) {
        entries["Capacity"] = input.Capacity;
    }
    if (input.SecondsBeforeTimeout != null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
    }
    if (input.TimeoutAction != null) {
        entries["TimeoutAction"] = input.TimeoutAction;
    }
    return entries;
};
const se_ModifyCustomDBEngineVersionMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
const se_ModifyDBClusterEndpointMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.EndpointType != null) {
        entries["EndpointType"] = input.EndpointType;
    }
    if (input.StaticMembers != null) {
        const memberEntries = se_StringList(input.StaticMembers, context);
        if (input.StaticMembers?.length === 0) {
            entries.StaticMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StaticMembers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedMembers != null) {
        const memberEntries = se_StringList(input.ExcludedMembers, context);
        if (input.ExcludedMembers?.length === 0) {
            entries.ExcludedMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedMembers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.NewDBClusterIdentifier != null) {
        entries["NewDBClusterIdentifier"] = input.NewDBClusterIdentifier;
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.CloudwatchLogsExportConfiguration != null) {
        const memberEntries = se_CloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudwatchLogsExportConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade != null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    if (input.DBInstanceParameterGroupName != null) {
        entries["DBInstanceParameterGroupName"] = input.DBInstanceParameterGroupName;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = se_ScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EnableHttpEndpoint != null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.EnableGlobalWriteForwarding != null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = se_ServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.RotateMasterUserPassword != null) {
        entries["RotateMasterUserPassword"] = input.RotateMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    if (input.EngineMode != null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.AllowEngineModeChange != null) {
        entries["AllowEngineModeChange"] = input.AllowEngineModeChange;
    }
    return entries;
};
const se_ModifyDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Parameters != null) {
        const memberEntries = se_ParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDBClusterSnapshotAttributeMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.AttributeName != null) {
        entries["AttributeName"] = input.AttributeName;
    }
    if (input.ValuesToAdd != null) {
        const memberEntries = se_AttributeValueList(input.ValuesToAdd, context);
        if (input.ValuesToAdd?.length === 0) {
            entries.ValuesToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToAdd.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ValuesToRemove != null) {
        const memberEntries = se_AttributeValueList(input.ValuesToRemove, context);
        if (input.ValuesToRemove?.length === 0) {
            entries.ValuesToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSecurityGroups != null) {
        const memberEntries = se_DBSecurityGroupNameList(input.DBSecurityGroups, context);
        if (input.DBSecurityGroups?.length === 0) {
            entries.DBSecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade != null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.NewDBInstanceIdentifier != null) {
        entries["NewDBInstanceIdentifier"] = input.NewDBInstanceIdentifier;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.CACertificateIdentifier != null) {
        entries["CACertificateIdentifier"] = input.CACertificateIdentifier;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.DBPortNumber != null) {
        entries["DBPortNumber"] = input.DBPortNumber;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.PromotionTier != null) {
        entries["PromotionTier"] = input.PromotionTier;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.CloudwatchLogsExportConfiguration != null) {
        const memberEntries = se_CloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudwatchLogsExportConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = se_ProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.CertificateRotationRestart != null) {
        entries["CertificateRotationRestart"] = input.CertificateRotationRestart;
    }
    if (input.ReplicaMode != null) {
        entries["ReplicaMode"] = input.ReplicaMode;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.AwsBackupRecoveryPointArn != null) {
        entries["AwsBackupRecoveryPointArn"] = input.AwsBackupRecoveryPointArn;
    }
    if (input.AutomationMode != null) {
        entries["AutomationMode"] = input.AutomationMode;
    }
    if (input.ResumeFullAutomationModeMinutes != null) {
        entries["ResumeFullAutomationModeMinutes"] = input.ResumeFullAutomationModeMinutes;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.RotateMasterUserPassword != null) {
        entries["RotateMasterUserPassword"] = input.RotateMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const se_ModifyDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Parameters != null) {
        const memberEntries = se_ParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDBProxyEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.NewDBProxyEndpointName != null) {
        entries["NewDBProxyEndpointName"] = input.NewDBProxyEndpointName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_StringList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDBProxyRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.NewDBProxyName != null) {
        entries["NewDBProxyName"] = input.NewDBProxyName;
    }
    if (input.Auth != null) {
        const memberEntries = se_UserAuthConfigList(input.Auth, context);
        if (input.Auth?.length === 0) {
            entries.Auth = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Auth.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RequireTLS != null) {
        entries["RequireTLS"] = input.RequireTLS;
    }
    if (input.IdleClientTimeout != null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
    }
    if (input.DebugLogging != null) {
        entries["DebugLogging"] = input.DebugLogging;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.SecurityGroups != null) {
        const memberEntries = se_StringList(input.SecurityGroups, context);
        if (input.SecurityGroups?.length === 0) {
            entries.SecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDBProxyTargetGroupRequest = (input, context) => {
    const entries = {};
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.ConnectionPoolConfig != null) {
        const memberEntries = se_ConnectionPoolConfiguration(input.ConnectionPoolConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionPoolConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NewName != null) {
        entries["NewName"] = input.NewName;
    }
    return entries;
};
const se_ModifyDBSnapshotAttributeMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.AttributeName != null) {
        entries["AttributeName"] = input.AttributeName;
    }
    if (input.ValuesToAdd != null) {
        const memberEntries = se_AttributeValueList(input.ValuesToAdd, context);
        if (input.ValuesToAdd?.length === 0) {
            entries.ValuesToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToAdd.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ValuesToRemove != null) {
        const memberEntries = se_AttributeValueList(input.ValuesToRemove, context);
        if (input.ValuesToRemove?.length === 0) {
            entries.ValuesToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    return entries;
};
const se_ModifyDBSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSubnetGroupDescription != null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_SubnetIdentifierList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn != null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.EventCategories != null) {
        const memberEntries = se_EventCategoriesList(input.EventCategories, context);
        if (input.EventCategories?.length === 0) {
            entries.EventCategories = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_ModifyGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.NewGlobalClusterIdentifier != null) {
        entries["NewGlobalClusterIdentifier"] = input.NewGlobalClusterIdentifier;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade != null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    return entries;
};
const se_ModifyOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.OptionsToInclude != null) {
        const memberEntries = se_OptionConfigurationList(input.OptionsToInclude, context);
        if (input.OptionsToInclude?.length === 0) {
            entries.OptionsToInclude = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToInclude.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = se_OptionNamesList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    return entries;
};
const se_OptionConfiguration = (input, context) => {
    const entries = {};
    if (input.OptionName != null) {
        entries["OptionName"] = input.OptionName;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.OptionVersion != null) {
        entries["OptionVersion"] = input.OptionVersion;
    }
    if (input.DBSecurityGroupMemberships != null) {
        const memberEntries = se_DBSecurityGroupNameList(input.DBSecurityGroupMemberships, context);
        if (input.DBSecurityGroupMemberships?.length === 0) {
            entries.DBSecurityGroupMemberships = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroupMemberships.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupMemberships != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupMemberships, context);
        if (input.VpcSecurityGroupMemberships?.length === 0) {
            entries.VpcSecurityGroupMemberships = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupMemberships.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionSettings != null) {
        const memberEntries = se_OptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_OptionConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_OptionConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`OptionConfiguration.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_OptionNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OptionSetting = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    if (input.DefaultValue != null) {
        entries["DefaultValue"] = input.DefaultValue;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ApplyType != null) {
        entries["ApplyType"] = input.ApplyType;
    }
    if (input.DataType != null) {
        entries["DataType"] = input.DataType;
    }
    if (input.AllowedValues != null) {
        entries["AllowedValues"] = input.AllowedValues;
    }
    if (input.IsModifiable != null) {
        entries["IsModifiable"] = input.IsModifiable;
    }
    if (input.IsCollection != null) {
        entries["IsCollection"] = input.IsCollection;
    }
    return entries;
};
const se_OptionSettingsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_OptionSetting(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`OptionSetting.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Parameter = (input, context) => {
    const entries = {};
    if (input.ParameterName != null) {
        entries["ParameterName"] = input.ParameterName;
    }
    if (input.ParameterValue != null) {
        entries["ParameterValue"] = input.ParameterValue;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.ApplyType != null) {
        entries["ApplyType"] = input.ApplyType;
    }
    if (input.DataType != null) {
        entries["DataType"] = input.DataType;
    }
    if (input.AllowedValues != null) {
        entries["AllowedValues"] = input.AllowedValues;
    }
    if (input.IsModifiable != null) {
        entries["IsModifiable"] = input.IsModifiable;
    }
    if (input.MinimumEngineVersion != null) {
        entries["MinimumEngineVersion"] = input.MinimumEngineVersion;
    }
    if (input.ApplyMethod != null) {
        entries["ApplyMethod"] = input.ApplyMethod;
    }
    if (input.SupportedEngineModes != null) {
        const memberEntries = se_EngineModeList(input.SupportedEngineModes, context);
        if (input.SupportedEngineModes?.length === 0) {
            entries.SupportedEngineModes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SupportedEngineModes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ParametersList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Parameter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Parameter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ProcessorFeature = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_ProcessorFeatureList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ProcessorFeature(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`ProcessorFeature.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PromoteReadReplicaDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const se_PromoteReadReplicaMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    return entries;
};
const se_PurchaseReservedDBInstancesOfferingMessage = (input, context) => {
    const entries = {};
    if (input.ReservedDBInstancesOfferingId != null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.ReservedDBInstanceId != null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
    }
    if (input.DBInstanceCount != null) {
        entries["DBInstanceCount"] = input.DBInstanceCount;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RebootDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const se_RebootDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.ForceFailover != null) {
        entries["ForceFailover"] = input.ForceFailover;
    }
    return entries;
};
const se_RegisterDBProxyTargetsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBInstanceIdentifiers != null) {
        const memberEntries = se_StringList(input.DBInstanceIdentifiers, context);
        if (input.DBInstanceIdentifiers?.length === 0) {
            entries.DBInstanceIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBInstanceIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifiers != null) {
        const memberEntries = se_StringList(input.DBClusterIdentifiers, context);
        if (input.DBClusterIdentifiers?.length === 0) {
            entries.DBClusterIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBClusterIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RemoveFromGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.DbClusterIdentifier != null) {
        entries["DbClusterIdentifier"] = input.DbClusterIdentifier;
    }
    return entries;
};
const se_RemoveRoleFromDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const se_RemoveRoleFromDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const se_RemoveSourceIdentifierFromSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    return entries;
};
const se_RemoveTagsFromResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.TagKeys != null) {
        const memberEntries = se_KeyList(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResetDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.ResetAllParameters != null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
    }
    if (input.Parameters != null) {
        const memberEntries = se_ParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResetDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.ResetAllParameters != null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
    }
    if (input.Parameters != null) {
        const memberEntries = se_ParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RestoreDBClusterFromS3Message = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = se_AvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.CharacterSetName != null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.SourceEngine != null) {
        entries["SourceEngine"] = input.SourceEngine;
    }
    if (input.SourceEngineVersion != null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
    }
    if (input.S3BucketName != null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.S3IngestionRoleArn != null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = se_ServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    return entries;
};
const se_RestoreDBClusterFromSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = se_AvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineMode != null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = se_ScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = se_ServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    return entries;
};
const se_RestoreDBClusterToPointInTimeMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RestoreType != null) {
        entries["RestoreType"] = input.RestoreType;
    }
    if (input.SourceDBClusterIdentifier != null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
    }
    if (input.RestoreToTime != null) {
        entries["RestoreToTime"] = input.RestoreToTime.toISOString().split(".")[0] + "Z";
    }
    if (input.UseLatestRestorableTime != null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = se_ScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineMode != null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = se_ServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    return entries;
};
const se_RestoreDBInstanceFromDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = se_ProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget != null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    return entries;
};
const se_RestoreDBInstanceFromS3Message = (input, context) => {
    const entries = {};
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBSecurityGroups != null) {
        const memberEntries = se_DBSecurityGroupNameList(input.DBSecurityGroups, context);
        if (input.DBSecurityGroups?.length === 0) {
            entries.DBSecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.SourceEngine != null) {
        entries["SourceEngine"] = input.SourceEngine;
    }
    if (input.SourceEngineVersion != null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
    }
    if (input.S3BucketName != null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.S3IngestionRoleArn != null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = se_ProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const se_RestoreDBInstanceToPointInTimeMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBInstanceIdentifier != null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
    }
    if (input.TargetDBInstanceIdentifier != null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
    }
    if (input.RestoreTime != null) {
        entries["RestoreTime"] = input.RestoreTime.toISOString().split(".")[0] + "Z";
    }
    if (input.UseLatestRestorableTime != null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = se_VpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = se_LogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = se_ProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.SourceDbiResourceId != null) {
        entries["SourceDbiResourceId"] = input.SourceDbiResourceId;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.SourceDBInstanceAutomatedBackupsArn != null) {
        entries["SourceDBInstanceAutomatedBackupsArn"] = input.SourceDBInstanceAutomatedBackupsArn;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget != null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    return entries;
};
const se_RevokeDBSecurityGroupIngressMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.CIDRIP != null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupId != null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
    }
    if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
const se_ScalingConfiguration = (input, context) => {
    const entries = {};
    if (input.MinCapacity != null) {
        entries["MinCapacity"] = input.MinCapacity;
    }
    if (input.MaxCapacity != null) {
        entries["MaxCapacity"] = input.MaxCapacity;
    }
    if (input.AutoPause != null) {
        entries["AutoPause"] = input.AutoPause;
    }
    if (input.SecondsUntilAutoPause != null) {
        entries["SecondsUntilAutoPause"] = input.SecondsUntilAutoPause;
    }
    if (input.TimeoutAction != null) {
        entries["TimeoutAction"] = input.TimeoutAction;
    }
    if (input.SecondsBeforeTimeout != null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
    }
    return entries;
};
const se_ServerlessV2ScalingConfiguration = (input, context) => {
    const entries = {};
    if (input.MinCapacity != null) {
        entries["MinCapacity"] = (0, smithy_client_1.serializeFloat)(input.MinCapacity);
    }
    if (input.MaxCapacity != null) {
        entries["MaxCapacity"] = (0, smithy_client_1.serializeFloat)(input.MaxCapacity);
    }
    return entries;
};
const se_SourceIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SourceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_StartActivityStreamRequest = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.Mode != null) {
        entries["Mode"] = input.Mode;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.EngineNativeAuditFieldsIncluded != null) {
        entries["EngineNativeAuditFieldsIncluded"] = input.EngineNativeAuditFieldsIncluded;
    }
    return entries;
};
const se_StartDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const se_StartDBInstanceAutomatedBackupsReplicationMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBInstanceArn != null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    return entries;
};
const se_StartDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
const se_StartExportTaskMessage = (input, context) => {
    const entries = {};
    if (input.ExportTaskIdentifier != null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.S3BucketName != null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.IamRoleArn != null) {
        entries["IamRoleArn"] = input.IamRoleArn;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.ExportOnly != null) {
        const memberEntries = se_StringList(input.ExportOnly, context);
        if (input.ExportOnly?.length === 0) {
            entries.ExportOnly = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportOnly.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_StopActivityStreamRequest = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    return entries;
};
const se_StopDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const se_StopDBInstanceAutomatedBackupsReplicationMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBInstanceArn != null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
    }
    return entries;
};
const se_StopDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
const se_StringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SubnetIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SubnetIdentifier.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SwitchoverBlueGreenDeploymentRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentIdentifier != null) {
        entries["BlueGreenDeploymentIdentifier"] = input.BlueGreenDeploymentIdentifier;
    }
    if (input.SwitchoverTimeout != null) {
        entries["SwitchoverTimeout"] = input.SwitchoverTimeout;
    }
    return entries;
};
const se_SwitchoverReadReplicaMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Tag.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_UserAuthConfig = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.UserName != null) {
        entries["UserName"] = input.UserName;
    }
    if (input.AuthScheme != null) {
        entries["AuthScheme"] = input.AuthScheme;
    }
    if (input.SecretArn != null) {
        entries["SecretArn"] = input.SecretArn;
    }
    if (input.IAMAuth != null) {
        entries["IAMAuth"] = input.IAMAuth;
    }
    if (input.ClientPasswordAuthType != null) {
        entries["ClientPasswordAuthType"] = input.ClientPasswordAuthType;
    }
    return entries;
};
const se_UserAuthConfigList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_UserAuthConfig(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_VpcSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcSecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const de_AccountAttributesMessage = (output, context) => {
    const contents = {};
    if (output.AccountQuotas === "") {
        contents.AccountQuotas = [];
    }
    else if (output["AccountQuotas"] !== undefined && output["AccountQuotas"]["AccountQuota"] !== undefined) {
        contents.AccountQuotas = de_AccountQuotaList((0, smithy_client_1.getArrayIfSingleItem)(output["AccountQuotas"]["AccountQuota"]), context);
    }
    return contents;
};
const de_AccountQuota = (output, context) => {
    const contents = {};
    if (output["AccountQuotaName"] !== undefined) {
        contents.AccountQuotaName = (0, smithy_client_1.expectString)(output["AccountQuotaName"]);
    }
    if (output["Used"] !== undefined) {
        contents.Used = (0, smithy_client_1.strictParseLong)(output["Used"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseLong)(output["Max"]);
    }
    return contents;
};
const de_AccountQuotaList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountQuota(entry, context);
    });
};
const de_ActivityStreamModeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_AddSourceIdentifierToSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = de_EventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const de_ApplyPendingMaintenanceActionResult = (output, context) => {
    const contents = {};
    if (output["ResourcePendingMaintenanceActions"] !== undefined) {
        contents.ResourcePendingMaintenanceActions = de_ResourcePendingMaintenanceActions(output["ResourcePendingMaintenanceActions"], context);
    }
    return contents;
};
const de_AttributeValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_AuthorizationAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_AuthorizationNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_AuthorizationQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_AuthorizeDBSecurityGroupIngressResult = (output, context) => {
    const contents = {};
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = de_DBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
const de_AvailabilityZone = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const de_AvailabilityZoneList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailabilityZone(entry, context);
    });
};
const de_AvailabilityZones = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_AvailableProcessorFeature = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
    }
    return contents;
};
const de_AvailableProcessorFeatureList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailableProcessorFeature(entry, context);
    });
};
const de_BackupPolicyNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_BlueGreenDeployment = (output, context) => {
    const contents = {};
    if (output["BlueGreenDeploymentIdentifier"] !== undefined) {
        contents.BlueGreenDeploymentIdentifier = (0, smithy_client_1.expectString)(output["BlueGreenDeploymentIdentifier"]);
    }
    if (output["BlueGreenDeploymentName"] !== undefined) {
        contents.BlueGreenDeploymentName = (0, smithy_client_1.expectString)(output["BlueGreenDeploymentName"]);
    }
    if (output["Source"] !== undefined) {
        contents.Source = (0, smithy_client_1.expectString)(output["Source"]);
    }
    if (output["Target"] !== undefined) {
        contents.Target = (0, smithy_client_1.expectString)(output["Target"]);
    }
    if (output.SwitchoverDetails === "") {
        contents.SwitchoverDetails = [];
    }
    else if (output["SwitchoverDetails"] !== undefined && output["SwitchoverDetails"]["member"] !== undefined) {
        contents.SwitchoverDetails = de_SwitchoverDetailList((0, smithy_client_1.getArrayIfSingleItem)(output["SwitchoverDetails"]["member"]), context);
    }
    if (output.Tasks === "") {
        contents.Tasks = [];
    }
    else if (output["Tasks"] !== undefined && output["Tasks"]["member"] !== undefined) {
        contents.Tasks = de_BlueGreenDeploymentTaskList((0, smithy_client_1.getArrayIfSingleItem)(output["Tasks"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["StatusDetails"] !== undefined) {
        contents.StatusDetails = (0, smithy_client_1.expectString)(output["StatusDetails"]);
    }
    if (output["CreateTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateTime"]));
    }
    if (output["DeleteTime"] !== undefined) {
        contents.DeleteTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["DeleteTime"]));
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
    }
    return contents;
};
const de_BlueGreenDeploymentAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_BlueGreenDeploymentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlueGreenDeployment(entry, context);
    });
};
const de_BlueGreenDeploymentNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_BlueGreenDeploymentTask = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_BlueGreenDeploymentTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlueGreenDeploymentTask(entry, context);
    });
};
const de_CACertificateIdentifiersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_Certificate = (output, context) => {
    const contents = {};
    if (output["CertificateIdentifier"] !== undefined) {
        contents.CertificateIdentifier = (0, smithy_client_1.expectString)(output["CertificateIdentifier"]);
    }
    if (output["CertificateType"] !== undefined) {
        contents.CertificateType = (0, smithy_client_1.expectString)(output["CertificateType"]);
    }
    if (output["Thumbprint"] !== undefined) {
        contents.Thumbprint = (0, smithy_client_1.expectString)(output["Thumbprint"]);
    }
    if (output["ValidFrom"] !== undefined) {
        contents.ValidFrom = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ValidFrom"]));
    }
    if (output["ValidTill"] !== undefined) {
        contents.ValidTill = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ValidTill"]));
    }
    if (output["CertificateArn"] !== undefined) {
        contents.CertificateArn = (0, smithy_client_1.expectString)(output["CertificateArn"]);
    }
    if (output["CustomerOverride"] !== undefined) {
        contents.CustomerOverride = (0, smithy_client_1.parseBoolean)(output["CustomerOverride"]);
    }
    if (output["CustomerOverrideValidTill"] !== undefined) {
        contents.CustomerOverrideValidTill = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CustomerOverrideValidTill"]));
    }
    return contents;
};
const de_CertificateDetails = (output, context) => {
    const contents = {};
    if (output["CAIdentifier"] !== undefined) {
        contents.CAIdentifier = (0, smithy_client_1.expectString)(output["CAIdentifier"]);
    }
    if (output["ValidTill"] !== undefined) {
        contents.ValidTill = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ValidTill"]));
    }
    return contents;
};
const de_CertificateList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Certificate(entry, context);
    });
};
const de_CertificateMessage = (output, context) => {
    const contents = {};
    if (output.Certificates === "") {
        contents.Certificates = [];
    }
    else if (output["Certificates"] !== undefined && output["Certificates"]["Certificate"] !== undefined) {
        contents.Certificates = de_CertificateList((0, smithy_client_1.getArrayIfSingleItem)(output["Certificates"]["Certificate"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_CertificateNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_CharacterSet = (output, context) => {
    const contents = {};
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = (0, smithy_client_1.expectString)(output["CharacterSetName"]);
    }
    if (output["CharacterSetDescription"] !== undefined) {
        contents.CharacterSetDescription = (0, smithy_client_1.expectString)(output["CharacterSetDescription"]);
    }
    return contents;
};
const de_ClusterPendingModifiedValues = (output, context) => {
    const contents = {};
    if (output["PendingCloudwatchLogsExports"] !== undefined) {
        contents.PendingCloudwatchLogsExports = de_PendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
    }
    if (output["MasterUserPassword"] !== undefined) {
        contents.MasterUserPassword = (0, smithy_client_1.expectString)(output["MasterUserPassword"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    return contents;
};
const de_ConnectionPoolConfigurationInfo = (output, context) => {
    const contents = {};
    if (output["MaxConnectionsPercent"] !== undefined) {
        contents.MaxConnectionsPercent = (0, smithy_client_1.strictParseInt32)(output["MaxConnectionsPercent"]);
    }
    if (output["MaxIdleConnectionsPercent"] !== undefined) {
        contents.MaxIdleConnectionsPercent = (0, smithy_client_1.strictParseInt32)(output["MaxIdleConnectionsPercent"]);
    }
    if (output["ConnectionBorrowTimeout"] !== undefined) {
        contents.ConnectionBorrowTimeout = (0, smithy_client_1.strictParseInt32)(output["ConnectionBorrowTimeout"]);
    }
    if (output.SessionPinningFilters === "") {
        contents.SessionPinningFilters = [];
    }
    else if (output["SessionPinningFilters"] !== undefined && output["SessionPinningFilters"]["member"] !== undefined) {
        contents.SessionPinningFilters = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["SessionPinningFilters"]["member"]), context);
    }
    if (output["InitQuery"] !== undefined) {
        contents.InitQuery = (0, smithy_client_1.expectString)(output["InitQuery"]);
    }
    return contents;
};
const de_CopyDBClusterParameterGroupResult = (output, context) => {
    const contents = {};
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = de_DBClusterParameterGroup(output["DBClusterParameterGroup"], context);
    }
    return contents;
};
const de_CopyDBClusterSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = de_DBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
const de_CopyDBParameterGroupResult = (output, context) => {
    const contents = {};
    if (output["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroup = de_DBParameterGroup(output["DBParameterGroup"], context);
    }
    return contents;
};
const de_CopyDBSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = de_DBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const de_CopyOptionGroupResult = (output, context) => {
    const contents = {};
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = de_OptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
const de_CreateBlueGreenDeploymentResponse = (output, context) => {
    const contents = {};
    if (output["BlueGreenDeployment"] !== undefined) {
        contents.BlueGreenDeployment = de_BlueGreenDeployment(output["BlueGreenDeployment"], context);
    }
    return contents;
};
const de_CreateCustomDBEngineVersionFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_CreateDBClusterParameterGroupResult = (output, context) => {
    const contents = {};
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = de_DBClusterParameterGroup(output["DBClusterParameterGroup"], context);
    }
    return contents;
};
const de_CreateDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_CreateDBClusterSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = de_DBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
const de_CreateDBInstanceReadReplicaResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_CreateDBInstanceResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_CreateDBParameterGroupResult = (output, context) => {
    const contents = {};
    if (output["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroup = de_DBParameterGroup(output["DBParameterGroup"], context);
    }
    return contents;
};
const de_CreateDBProxyEndpointResponse = (output, context) => {
    const contents = {};
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = de_DBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
const de_CreateDBProxyResponse = (output, context) => {
    const contents = {};
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = de_DBProxy(output["DBProxy"], context);
    }
    return contents;
};
const de_CreateDBSecurityGroupResult = (output, context) => {
    const contents = {};
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = de_DBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
const de_CreateDBSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = de_DBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const de_CreateDBSubnetGroupResult = (output, context) => {
    const contents = {};
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = de_DBSubnetGroup(output["DBSubnetGroup"], context);
    }
    return contents;
};
const de_CreateEventSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = de_EventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const de_CreateGlobalClusterResult = (output, context) => {
    const contents = {};
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = de_GlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const de_CreateOptionGroupResult = (output, context) => {
    const contents = {};
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = de_OptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
const de_CustomAvailabilityZoneNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_CustomDBEngineVersionAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_CustomDBEngineVersionAMI = (output, context) => {
    const contents = {};
    if (output["ImageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["ImageId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_CustomDBEngineVersionNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_CustomDBEngineVersionQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBCluster = (output, context) => {
    const contents = {};
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined &&
        output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = de_AvailabilityZones((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
    }
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = (0, smithy_client_1.expectString)(output["CharacterSetName"]);
    }
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = (0, smithy_client_1.expectString)(output["DatabaseName"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
    }
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = (0, smithy_client_1.expectString)(output["DBClusterParameterGroup"]);
    }
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = (0, smithy_client_1.expectString)(output["DBSubnetGroup"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["AutomaticRestartTime"] !== undefined) {
        contents.AutomaticRestartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["AutomaticRestartTime"]));
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = (0, smithy_client_1.expectString)(output["PercentProgress"]);
    }
    if (output["EarliestRestorableTime"] !== undefined) {
        contents.EarliestRestorableTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["EarliestRestorableTime"]));
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
    }
    if (output["ReaderEndpoint"] !== undefined) {
        contents.ReaderEndpoint = (0, smithy_client_1.expectString)(output["ReaderEndpoint"]);
    }
    if (output.CustomEndpoints === "") {
        contents.CustomEndpoints = [];
    }
    else if (output["CustomEndpoints"] !== undefined && output["CustomEndpoints"]["member"] !== undefined) {
        contents.CustomEndpoints = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["CustomEndpoints"]["member"]), context);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["LatestRestorableTime"] !== undefined) {
        contents.LatestRestorableTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LatestRestorableTime"]));
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
    }
    if (output.DBClusterOptionGroupMemberships === "") {
        contents.DBClusterOptionGroupMemberships = [];
    }
    else if (output["DBClusterOptionGroupMemberships"] !== undefined &&
        output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"] !== undefined) {
        contents.DBClusterOptionGroupMemberships = de_DBClusterOptionGroupMemberships((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"]), context);
    }
    if (output["PreferredBackupWindow"] !== undefined) {
        contents.PreferredBackupWindow = (0, smithy_client_1.expectString)(output["PreferredBackupWindow"]);
    }
    if (output["PreferredMaintenanceWindow"] !== undefined) {
        contents.PreferredMaintenanceWindow = (0, smithy_client_1.expectString)(output["PreferredMaintenanceWindow"]);
    }
    if (output["ReplicationSourceIdentifier"] !== undefined) {
        contents.ReplicationSourceIdentifier = (0, smithy_client_1.expectString)(output["ReplicationSourceIdentifier"]);
    }
    if (output.ReadReplicaIdentifiers === "") {
        contents.ReadReplicaIdentifiers = [];
    }
    else if (output["ReadReplicaIdentifiers"] !== undefined &&
        output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"] !== undefined) {
        contents.ReadReplicaIdentifiers = de_ReadReplicaIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"]), context);
    }
    if (output.DBClusterMembers === "") {
        contents.DBClusterMembers = [];
    }
    else if (output["DBClusterMembers"] !== undefined && output["DBClusterMembers"]["DBClusterMember"] !== undefined) {
        contents.DBClusterMembers = de_DBClusterMemberList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterMembers"]["DBClusterMember"]), context);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    else if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroups = de_VpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["DbClusterResourceId"] !== undefined) {
        contents.DbClusterResourceId = (0, smithy_client_1.expectString)(output["DbClusterResourceId"]);
    }
    if (output["DBClusterArn"] !== undefined) {
        contents.DBClusterArn = (0, smithy_client_1.expectString)(output["DBClusterArn"]);
    }
    if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
    }
    else if (output["AssociatedRoles"] !== undefined && output["AssociatedRoles"]["DBClusterRole"] !== undefined) {
        contents.AssociatedRoles = de_DBClusterRoles((0, smithy_client_1.getArrayIfSingleItem)(output["AssociatedRoles"]["DBClusterRole"]), context);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["CloneGroupId"] !== undefined) {
        contents.CloneGroupId = (0, smithy_client_1.expectString)(output["CloneGroupId"]);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ClusterCreateTime"]));
    }
    if (output["EarliestBacktrackTime"] !== undefined) {
        contents.EarliestBacktrackTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["EarliestBacktrackTime"]));
    }
    if (output["BacktrackWindow"] !== undefined) {
        contents.BacktrackWindow = (0, smithy_client_1.strictParseLong)(output["BacktrackWindow"]);
    }
    if (output["BacktrackConsumedChangeRecords"] !== undefined) {
        contents.BacktrackConsumedChangeRecords = (0, smithy_client_1.strictParseLong)(output["BacktrackConsumedChangeRecords"]);
    }
    if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
    }
    else if (output["EnabledCloudwatchLogsExports"] !== undefined &&
        output["EnabledCloudwatchLogsExports"]["member"] !== undefined) {
        contents.EnabledCloudwatchLogsExports = de_LogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["EnabledCloudwatchLogsExports"]["member"]), context);
    }
    if (output["Capacity"] !== undefined) {
        contents.Capacity = (0, smithy_client_1.strictParseInt32)(output["Capacity"]);
    }
    if (output["EngineMode"] !== undefined) {
        contents.EngineMode = (0, smithy_client_1.expectString)(output["EngineMode"]);
    }
    if (output["ScalingConfigurationInfo"] !== undefined) {
        contents.ScalingConfigurationInfo = de_ScalingConfigurationInfo(output["ScalingConfigurationInfo"], context);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = (0, smithy_client_1.parseBoolean)(output["DeletionProtection"]);
    }
    if (output["HttpEndpointEnabled"] !== undefined) {
        contents.HttpEndpointEnabled = (0, smithy_client_1.parseBoolean)(output["HttpEndpointEnabled"]);
    }
    if (output["ActivityStreamMode"] !== undefined) {
        contents.ActivityStreamMode = (0, smithy_client_1.expectString)(output["ActivityStreamMode"]);
    }
    if (output["ActivityStreamStatus"] !== undefined) {
        contents.ActivityStreamStatus = (0, smithy_client_1.expectString)(output["ActivityStreamStatus"]);
    }
    if (output["ActivityStreamKmsKeyId"] !== undefined) {
        contents.ActivityStreamKmsKeyId = (0, smithy_client_1.expectString)(output["ActivityStreamKmsKeyId"]);
    }
    if (output["ActivityStreamKinesisStreamName"] !== undefined) {
        contents.ActivityStreamKinesisStreamName = (0, smithy_client_1.expectString)(output["ActivityStreamKinesisStreamName"]);
    }
    if (output["CopyTagsToSnapshot"] !== undefined) {
        contents.CopyTagsToSnapshot = (0, smithy_client_1.parseBoolean)(output["CopyTagsToSnapshot"]);
    }
    if (output["CrossAccountClone"] !== undefined) {
        contents.CrossAccountClone = (0, smithy_client_1.parseBoolean)(output["CrossAccountClone"]);
    }
    if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
    }
    else if (output["DomainMemberships"] !== undefined &&
        output["DomainMemberships"]["DomainMembership"] !== undefined) {
        contents.DomainMemberships = de_DomainMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DomainMemberships"]["DomainMembership"]), context);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
    }
    if (output["GlobalWriteForwardingStatus"] !== undefined) {
        contents.GlobalWriteForwardingStatus = (0, smithy_client_1.expectString)(output["GlobalWriteForwardingStatus"]);
    }
    if (output["GlobalWriteForwardingRequested"] !== undefined) {
        contents.GlobalWriteForwardingRequested = (0, smithy_client_1.parseBoolean)(output["GlobalWriteForwardingRequested"]);
    }
    if (output["PendingModifiedValues"] !== undefined) {
        contents.PendingModifiedValues = de_ClusterPendingModifiedValues(output["PendingModifiedValues"], context);
    }
    if (output["DBClusterInstanceClass"] !== undefined) {
        contents.DBClusterInstanceClass = (0, smithy_client_1.expectString)(output["DBClusterInstanceClass"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = (0, smithy_client_1.parseBoolean)(output["PubliclyAccessible"]);
    }
    if (output["AutoMinorVersionUpgrade"] !== undefined) {
        contents.AutoMinorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoMinorVersionUpgrade"]);
    }
    if (output["MonitoringInterval"] !== undefined) {
        contents.MonitoringInterval = (0, smithy_client_1.strictParseInt32)(output["MonitoringInterval"]);
    }
    if (output["MonitoringRoleArn"] !== undefined) {
        contents.MonitoringRoleArn = (0, smithy_client_1.expectString)(output["MonitoringRoleArn"]);
    }
    if (output["PerformanceInsightsEnabled"] !== undefined) {
        contents.PerformanceInsightsEnabled = (0, smithy_client_1.parseBoolean)(output["PerformanceInsightsEnabled"]);
    }
    if (output["PerformanceInsightsKMSKeyId"] !== undefined) {
        contents.PerformanceInsightsKMSKeyId = (0, smithy_client_1.expectString)(output["PerformanceInsightsKMSKeyId"]);
    }
    if (output["PerformanceInsightsRetentionPeriod"] !== undefined) {
        contents.PerformanceInsightsRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["PerformanceInsightsRetentionPeriod"]);
    }
    if (output["ServerlessV2ScalingConfiguration"] !== undefined) {
        contents.ServerlessV2ScalingConfiguration = de_ServerlessV2ScalingConfigurationInfo(output["ServerlessV2ScalingConfiguration"], context);
    }
    if (output["NetworkType"] !== undefined) {
        contents.NetworkType = (0, smithy_client_1.expectString)(output["NetworkType"]);
    }
    if (output["DBSystemId"] !== undefined) {
        contents.DBSystemId = (0, smithy_client_1.expectString)(output["DBSystemId"]);
    }
    if (output["MasterUserSecret"] !== undefined) {
        contents.MasterUserSecret = de_MasterUserSecret(output["MasterUserSecret"], context);
    }
    if (output["IOOptimizedNextAllowedModificationTime"] !== undefined) {
        contents.IOOptimizedNextAllowedModificationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["IOOptimizedNextAllowedModificationTime"]));
    }
    return contents;
};
const de_DBClusterAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterBacktrack = (output, context) => {
    const contents = {};
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
    }
    if (output["BacktrackIdentifier"] !== undefined) {
        contents.BacktrackIdentifier = (0, smithy_client_1.expectString)(output["BacktrackIdentifier"]);
    }
    if (output["BacktrackTo"] !== undefined) {
        contents.BacktrackTo = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["BacktrackTo"]));
    }
    if (output["BacktrackedFrom"] !== undefined) {
        contents.BacktrackedFrom = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["BacktrackedFrom"]));
    }
    if (output["BacktrackRequestCreationTime"] !== undefined) {
        contents.BacktrackRequestCreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["BacktrackRequestCreationTime"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_DBClusterBacktrackList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterBacktrack(entry, context);
    });
};
const de_DBClusterBacktrackMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBClusterBacktracks === "") {
        contents.DBClusterBacktracks = [];
    }
    else if (output["DBClusterBacktracks"] !== undefined &&
        output["DBClusterBacktracks"]["DBClusterBacktrack"] !== undefined) {
        contents.DBClusterBacktracks = de_DBClusterBacktrackList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterBacktracks"]["DBClusterBacktrack"]), context);
    }
    return contents;
};
const de_DBClusterBacktrackNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterCapacityInfo = (output, context) => {
    const contents = {};
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
    }
    if (output["PendingCapacity"] !== undefined) {
        contents.PendingCapacity = (0, smithy_client_1.strictParseInt32)(output["PendingCapacity"]);
    }
    if (output["CurrentCapacity"] !== undefined) {
        contents.CurrentCapacity = (0, smithy_client_1.strictParseInt32)(output["CurrentCapacity"]);
    }
    if (output["SecondsBeforeTimeout"] !== undefined) {
        contents.SecondsBeforeTimeout = (0, smithy_client_1.strictParseInt32)(output["SecondsBeforeTimeout"]);
    }
    if (output["TimeoutAction"] !== undefined) {
        contents.TimeoutAction = (0, smithy_client_1.expectString)(output["TimeoutAction"]);
    }
    return contents;
};
const de_DBClusterEndpoint = (output, context) => {
    const contents = {};
    if (output["DBClusterEndpointIdentifier"] !== undefined) {
        contents.DBClusterEndpointIdentifier = (0, smithy_client_1.expectString)(output["DBClusterEndpointIdentifier"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
    }
    if (output["DBClusterEndpointResourceIdentifier"] !== undefined) {
        contents.DBClusterEndpointResourceIdentifier = (0, smithy_client_1.expectString)(output["DBClusterEndpointResourceIdentifier"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["EndpointType"] !== undefined) {
        contents.EndpointType = (0, smithy_client_1.expectString)(output["EndpointType"]);
    }
    if (output["CustomEndpointType"] !== undefined) {
        contents.CustomEndpointType = (0, smithy_client_1.expectString)(output["CustomEndpointType"]);
    }
    if (output.StaticMembers === "") {
        contents.StaticMembers = [];
    }
    else if (output["StaticMembers"] !== undefined && output["StaticMembers"]["member"] !== undefined) {
        contents.StaticMembers = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["StaticMembers"]["member"]), context);
    }
    if (output.ExcludedMembers === "") {
        contents.ExcludedMembers = [];
    }
    else if (output["ExcludedMembers"] !== undefined && output["ExcludedMembers"]["member"] !== undefined) {
        contents.ExcludedMembers = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["ExcludedMembers"]["member"]), context);
    }
    if (output["DBClusterEndpointArn"] !== undefined) {
        contents.DBClusterEndpointArn = (0, smithy_client_1.expectString)(output["DBClusterEndpointArn"]);
    }
    return contents;
};
const de_DBClusterEndpointAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterEndpointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterEndpoint(entry, context);
    });
};
const de_DBClusterEndpointMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBClusterEndpoints === "") {
        contents.DBClusterEndpoints = [];
    }
    else if (output["DBClusterEndpoints"] !== undefined &&
        output["DBClusterEndpoints"]["DBClusterEndpointList"] !== undefined) {
        contents.DBClusterEndpoints = de_DBClusterEndpointList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterEndpoints"]["DBClusterEndpointList"]), context);
    }
    return contents;
};
const de_DBClusterEndpointNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterEndpointQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBCluster(entry, context);
    });
};
const de_DBClusterMember = (output, context) => {
    const contents = {};
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
    }
    if (output["IsClusterWriter"] !== undefined) {
        contents.IsClusterWriter = (0, smithy_client_1.parseBoolean)(output["IsClusterWriter"]);
    }
    if (output["DBClusterParameterGroupStatus"] !== undefined) {
        contents.DBClusterParameterGroupStatus = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupStatus"]);
    }
    if (output["PromotionTier"] !== undefined) {
        contents.PromotionTier = (0, smithy_client_1.strictParseInt32)(output["PromotionTier"]);
    }
    return contents;
};
const de_DBClusterMemberList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterMember(entry, context);
    });
};
const de_DBClusterMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBClusters === "") {
        contents.DBClusters = [];
    }
    else if (output["DBClusters"] !== undefined && output["DBClusters"]["DBCluster"] !== undefined) {
        contents.DBClusters = de_DBClusterList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusters"]["DBCluster"]), context);
    }
    return contents;
};
const de_DBClusterNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterOptionGroupMemberships = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterOptionGroupStatus(entry, context);
    });
};
const de_DBClusterOptionGroupStatus = (output, context) => {
    const contents = {};
    if (output["DBClusterOptionGroupName"] !== undefined) {
        contents.DBClusterOptionGroupName = (0, smithy_client_1.expectString)(output["DBClusterOptionGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_DBClusterParameterGroup = (output, context) => {
    const contents = {};
    if (output["DBClusterParameterGroupName"] !== undefined) {
        contents.DBClusterParameterGroupName = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupName"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["DBClusterParameterGroupArn"] !== undefined) {
        contents.DBClusterParameterGroupArn = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupArn"]);
    }
    return contents;
};
const de_DBClusterParameterGroupDetails = (output, context) => {
    const contents = {};
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = de_ParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DBClusterParameterGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterParameterGroup(entry, context);
    });
};
const de_DBClusterParameterGroupNameMessage = (output, context) => {
    const contents = {};
    if (output["DBClusterParameterGroupName"] !== undefined) {
        contents.DBClusterParameterGroupName = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupName"]);
    }
    return contents;
};
const de_DBClusterParameterGroupNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterParameterGroupsMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBClusterParameterGroups === "") {
        contents.DBClusterParameterGroups = [];
    }
    else if (output["DBClusterParameterGroups"] !== undefined &&
        output["DBClusterParameterGroups"]["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroups = de_DBClusterParameterGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterParameterGroups"]["DBClusterParameterGroup"]), context);
    }
    return contents;
};
const de_DBClusterQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterRole = (output, context) => {
    const contents = {};
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = (0, smithy_client_1.expectString)(output["RoleArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["FeatureName"] !== undefined) {
        contents.FeatureName = (0, smithy_client_1.expectString)(output["FeatureName"]);
    }
    return contents;
};
const de_DBClusterRoleAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterRoleNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterRoleQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterRoles = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterRole(entry, context);
    });
};
const de_DBClusterSnapshot = (output, context) => {
    const contents = {};
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined &&
        output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = de_AvailabilityZones((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["DBClusterSnapshotIdentifier"] !== undefined) {
        contents.DBClusterSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBClusterSnapshotIdentifier"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
    }
    if (output["SnapshotCreateTime"] !== undefined) {
        contents.SnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["SnapshotCreateTime"]));
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["EngineMode"] !== undefined) {
        contents.EngineMode = (0, smithy_client_1.expectString)(output["EngineMode"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ClusterCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
    }
    if (output["SnapshotType"] !== undefined) {
        contents.SnapshotType = (0, smithy_client_1.expectString)(output["SnapshotType"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = (0, smithy_client_1.strictParseInt32)(output["PercentProgress"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["DBClusterSnapshotArn"] !== undefined) {
        contents.DBClusterSnapshotArn = (0, smithy_client_1.expectString)(output["DBClusterSnapshotArn"]);
    }
    if (output["SourceDBClusterSnapshotArn"] !== undefined) {
        contents.SourceDBClusterSnapshotArn = (0, smithy_client_1.expectString)(output["SourceDBClusterSnapshotArn"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
    }
    if (output["DBSystemId"] !== undefined) {
        contents.DBSystemId = (0, smithy_client_1.expectString)(output["DBSystemId"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    return contents;
};
const de_DBClusterSnapshotAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBClusterSnapshotAttribute = (output, context) => {
    const contents = {};
    if (output["AttributeName"] !== undefined) {
        contents.AttributeName = (0, smithy_client_1.expectString)(output["AttributeName"]);
    }
    if (output.AttributeValues === "") {
        contents.AttributeValues = [];
    }
    else if (output["AttributeValues"] !== undefined && output["AttributeValues"]["AttributeValue"] !== undefined) {
        contents.AttributeValues = de_AttributeValueList((0, smithy_client_1.getArrayIfSingleItem)(output["AttributeValues"]["AttributeValue"]), context);
    }
    return contents;
};
const de_DBClusterSnapshotAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterSnapshotAttribute(entry, context);
    });
};
const de_DBClusterSnapshotAttributesResult = (output, context) => {
    const contents = {};
    if (output["DBClusterSnapshotIdentifier"] !== undefined) {
        contents.DBClusterSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBClusterSnapshotIdentifier"]);
    }
    if (output.DBClusterSnapshotAttributes === "") {
        contents.DBClusterSnapshotAttributes = [];
    }
    else if (output["DBClusterSnapshotAttributes"] !== undefined &&
        output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"] !== undefined) {
        contents.DBClusterSnapshotAttributes = de_DBClusterSnapshotAttributeList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"]), context);
    }
    return contents;
};
const de_DBClusterSnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBClusterSnapshot(entry, context);
    });
};
const de_DBClusterSnapshotMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBClusterSnapshots === "") {
        contents.DBClusterSnapshots = [];
    }
    else if (output["DBClusterSnapshots"] !== undefined &&
        output["DBClusterSnapshots"]["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshots = de_DBClusterSnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterSnapshots"]["DBClusterSnapshot"]), context);
    }
    return contents;
};
const de_DBClusterSnapshotNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBEngineVersion = (output, context) => {
    const contents = {};
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
    }
    if (output["DBEngineDescription"] !== undefined) {
        contents.DBEngineDescription = (0, smithy_client_1.expectString)(output["DBEngineDescription"]);
    }
    if (output["DBEngineVersionDescription"] !== undefined) {
        contents.DBEngineVersionDescription = (0, smithy_client_1.expectString)(output["DBEngineVersionDescription"]);
    }
    if (output["DefaultCharacterSet"] !== undefined) {
        contents.DefaultCharacterSet = de_CharacterSet(output["DefaultCharacterSet"], context);
    }
    if (output["Image"] !== undefined) {
        contents.Image = de_CustomDBEngineVersionAMI(output["Image"], context);
    }
    if (output["DBEngineMediaType"] !== undefined) {
        contents.DBEngineMediaType = (0, smithy_client_1.expectString)(output["DBEngineMediaType"]);
    }
    if (output.SupportedCharacterSets === "") {
        contents.SupportedCharacterSets = [];
    }
    else if (output["SupportedCharacterSets"] !== undefined &&
        output["SupportedCharacterSets"]["CharacterSet"] !== undefined) {
        contents.SupportedCharacterSets = de_SupportedCharacterSetsList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedCharacterSets"]["CharacterSet"]), context);
    }
    if (output.SupportedNcharCharacterSets === "") {
        contents.SupportedNcharCharacterSets = [];
    }
    else if (output["SupportedNcharCharacterSets"] !== undefined &&
        output["SupportedNcharCharacterSets"]["CharacterSet"] !== undefined) {
        contents.SupportedNcharCharacterSets = de_SupportedCharacterSetsList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNcharCharacterSets"]["CharacterSet"]), context);
    }
    if (output.ValidUpgradeTarget === "") {
        contents.ValidUpgradeTarget = [];
    }
    else if (output["ValidUpgradeTarget"] !== undefined &&
        output["ValidUpgradeTarget"]["UpgradeTarget"] !== undefined) {
        contents.ValidUpgradeTarget = de_ValidUpgradeTargetList((0, smithy_client_1.getArrayIfSingleItem)(output["ValidUpgradeTarget"]["UpgradeTarget"]), context);
    }
    if (output.SupportedTimezones === "") {
        contents.SupportedTimezones = [];
    }
    else if (output["SupportedTimezones"] !== undefined && output["SupportedTimezones"]["Timezone"] !== undefined) {
        contents.SupportedTimezones = de_SupportedTimezonesList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedTimezones"]["Timezone"]), context);
    }
    if (output.ExportableLogTypes === "") {
        contents.ExportableLogTypes = [];
    }
    else if (output["ExportableLogTypes"] !== undefined && output["ExportableLogTypes"]["member"] !== undefined) {
        contents.ExportableLogTypes = de_LogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["ExportableLogTypes"]["member"]), context);
    }
    if (output["SupportsLogExportsToCloudwatchLogs"] !== undefined) {
        contents.SupportsLogExportsToCloudwatchLogs = (0, smithy_client_1.parseBoolean)(output["SupportsLogExportsToCloudwatchLogs"]);
    }
    if (output["SupportsReadReplica"] !== undefined) {
        contents.SupportsReadReplica = (0, smithy_client_1.parseBoolean)(output["SupportsReadReplica"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = de_EngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
    }
    if (output.SupportedFeatureNames === "") {
        contents.SupportedFeatureNames = [];
    }
    else if (output["SupportedFeatureNames"] !== undefined && output["SupportedFeatureNames"]["member"] !== undefined) {
        contents.SupportedFeatureNames = de_FeatureNameList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedFeatureNames"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["SupportsParallelQuery"] !== undefined) {
        contents.SupportsParallelQuery = (0, smithy_client_1.parseBoolean)(output["SupportsParallelQuery"]);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = (0, smithy_client_1.parseBoolean)(output["SupportsGlobalDatabases"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = (0, smithy_client_1.expectString)(output["MajorEngineVersion"]);
    }
    if (output["DatabaseInstallationFilesS3BucketName"] !== undefined) {
        contents.DatabaseInstallationFilesS3BucketName = (0, smithy_client_1.expectString)(output["DatabaseInstallationFilesS3BucketName"]);
    }
    if (output["DatabaseInstallationFilesS3Prefix"] !== undefined) {
        contents.DatabaseInstallationFilesS3Prefix = (0, smithy_client_1.expectString)(output["DatabaseInstallationFilesS3Prefix"]);
    }
    if (output["DBEngineVersionArn"] !== undefined) {
        contents.DBEngineVersionArn = (0, smithy_client_1.expectString)(output["DBEngineVersionArn"]);
    }
    if (output["KMSKeyId"] !== undefined) {
        contents.KMSKeyId = (0, smithy_client_1.expectString)(output["KMSKeyId"]);
    }
    if (output["CreateTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateTime"]));
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
    }
    if (output["SupportsBabelfish"] !== undefined) {
        contents.SupportsBabelfish = (0, smithy_client_1.parseBoolean)(output["SupportsBabelfish"]);
    }
    if (output["CustomDBEngineVersionManifest"] !== undefined) {
        contents.CustomDBEngineVersionManifest = (0, smithy_client_1.expectString)(output["CustomDBEngineVersionManifest"]);
    }
    if (output["SupportsCertificateRotationWithoutRestart"] !== undefined) {
        contents.SupportsCertificateRotationWithoutRestart = (0, smithy_client_1.parseBoolean)(output["SupportsCertificateRotationWithoutRestart"]);
    }
    if (output.SupportedCACertificateIdentifiers === "") {
        contents.SupportedCACertificateIdentifiers = [];
    }
    else if (output["SupportedCACertificateIdentifiers"] !== undefined &&
        output["SupportedCACertificateIdentifiers"]["member"] !== undefined) {
        contents.SupportedCACertificateIdentifiers = de_CACertificateIdentifiersList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedCACertificateIdentifiers"]["member"]), context);
    }
    return contents;
};
const de_DBEngineVersionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBEngineVersion(entry, context);
    });
};
const de_DBEngineVersionMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBEngineVersions === "") {
        contents.DBEngineVersions = [];
    }
    else if (output["DBEngineVersions"] !== undefined && output["DBEngineVersions"]["DBEngineVersion"] !== undefined) {
        contents.DBEngineVersions = de_DBEngineVersionList((0, smithy_client_1.getArrayIfSingleItem)(output["DBEngineVersions"]["DBEngineVersion"]), context);
    }
    return contents;
};
const de_DBInstance = (output, context) => {
    const contents = {};
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["DBInstanceStatus"] !== undefined) {
        contents.DBInstanceStatus = (0, smithy_client_1.expectString)(output["DBInstanceStatus"]);
    }
    if (output["AutomaticRestartTime"] !== undefined) {
        contents.AutomaticRestartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["AutomaticRestartTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
    }
    if (output["DBName"] !== undefined) {
        contents.DBName = (0, smithy_client_1.expectString)(output["DBName"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = de_Endpoint(output["Endpoint"], context);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["InstanceCreateTime"]));
    }
    if (output["PreferredBackupWindow"] !== undefined) {
        contents.PreferredBackupWindow = (0, smithy_client_1.expectString)(output["PreferredBackupWindow"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
    }
    if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
    }
    else if (output["DBSecurityGroups"] !== undefined && output["DBSecurityGroups"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroups = de_DBSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    else if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroups = de_VpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
    }
    if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
    }
    else if (output["DBParameterGroups"] !== undefined &&
        output["DBParameterGroups"]["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroups = de_DBParameterGroupStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["DBParameterGroups"]["DBParameterGroup"]), context);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = de_DBSubnetGroup(output["DBSubnetGroup"], context);
    }
    if (output["PreferredMaintenanceWindow"] !== undefined) {
        contents.PreferredMaintenanceWindow = (0, smithy_client_1.expectString)(output["PreferredMaintenanceWindow"]);
    }
    if (output["PendingModifiedValues"] !== undefined) {
        contents.PendingModifiedValues = de_PendingModifiedValues(output["PendingModifiedValues"], context);
    }
    if (output["LatestRestorableTime"] !== undefined) {
        contents.LatestRestorableTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LatestRestorableTime"]));
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["AutoMinorVersionUpgrade"] !== undefined) {
        contents.AutoMinorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoMinorVersionUpgrade"]);
    }
    if (output["ReadReplicaSourceDBInstanceIdentifier"] !== undefined) {
        contents.ReadReplicaSourceDBInstanceIdentifier = (0, smithy_client_1.expectString)(output["ReadReplicaSourceDBInstanceIdentifier"]);
    }
    if (output.ReadReplicaDBInstanceIdentifiers === "") {
        contents.ReadReplicaDBInstanceIdentifiers = [];
    }
    else if (output["ReadReplicaDBInstanceIdentifiers"] !== undefined &&
        output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"] !== undefined) {
        contents.ReadReplicaDBInstanceIdentifiers = de_ReadReplicaDBInstanceIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"]), context);
    }
    if (output.ReadReplicaDBClusterIdentifiers === "") {
        contents.ReadReplicaDBClusterIdentifiers = [];
    }
    else if (output["ReadReplicaDBClusterIdentifiers"] !== undefined &&
        output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"] !== undefined) {
        contents.ReadReplicaDBClusterIdentifiers = de_ReadReplicaDBClusterIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"]), context);
    }
    if (output["ReplicaMode"] !== undefined) {
        contents.ReplicaMode = (0, smithy_client_1.expectString)(output["ReplicaMode"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
    }
    if (output.OptionGroupMemberships === "") {
        contents.OptionGroupMemberships = [];
    }
    else if (output["OptionGroupMemberships"] !== undefined &&
        output["OptionGroupMemberships"]["OptionGroupMembership"] !== undefined) {
        contents.OptionGroupMemberships = de_OptionGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupMemberships"]["OptionGroupMembership"]), context);
    }
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = (0, smithy_client_1.expectString)(output["CharacterSetName"]);
    }
    if (output["NcharCharacterSetName"] !== undefined) {
        contents.NcharCharacterSetName = (0, smithy_client_1.expectString)(output["NcharCharacterSetName"]);
    }
    if (output["SecondaryAvailabilityZone"] !== undefined) {
        contents.SecondaryAvailabilityZone = (0, smithy_client_1.expectString)(output["SecondaryAvailabilityZone"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = (0, smithy_client_1.parseBoolean)(output["PubliclyAccessible"]);
    }
    if (output.StatusInfos === "") {
        contents.StatusInfos = [];
    }
    else if (output["StatusInfos"] !== undefined && output["StatusInfos"]["DBInstanceStatusInfo"] !== undefined) {
        contents.StatusInfos = de_DBInstanceStatusInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["StatusInfos"]["DBInstanceStatusInfo"]), context);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = (0, smithy_client_1.expectString)(output["TdeCredentialArn"]);
    }
    if (output["DbInstancePort"] !== undefined) {
        contents.DbInstancePort = (0, smithy_client_1.strictParseInt32)(output["DbInstancePort"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = (0, smithy_client_1.expectString)(output["DbiResourceId"]);
    }
    if (output["CACertificateIdentifier"] !== undefined) {
        contents.CACertificateIdentifier = (0, smithy_client_1.expectString)(output["CACertificateIdentifier"]);
    }
    if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
    }
    else if (output["DomainMemberships"] !== undefined &&
        output["DomainMemberships"]["DomainMembership"] !== undefined) {
        contents.DomainMemberships = de_DomainMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DomainMemberships"]["DomainMembership"]), context);
    }
    if (output["CopyTagsToSnapshot"] !== undefined) {
        contents.CopyTagsToSnapshot = (0, smithy_client_1.parseBoolean)(output["CopyTagsToSnapshot"]);
    }
    if (output["MonitoringInterval"] !== undefined) {
        contents.MonitoringInterval = (0, smithy_client_1.strictParseInt32)(output["MonitoringInterval"]);
    }
    if (output["EnhancedMonitoringResourceArn"] !== undefined) {
        contents.EnhancedMonitoringResourceArn = (0, smithy_client_1.expectString)(output["EnhancedMonitoringResourceArn"]);
    }
    if (output["MonitoringRoleArn"] !== undefined) {
        contents.MonitoringRoleArn = (0, smithy_client_1.expectString)(output["MonitoringRoleArn"]);
    }
    if (output["PromotionTier"] !== undefined) {
        contents.PromotionTier = (0, smithy_client_1.strictParseInt32)(output["PromotionTier"]);
    }
    if (output["DBInstanceArn"] !== undefined) {
        contents.DBInstanceArn = (0, smithy_client_1.expectString)(output["DBInstanceArn"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = (0, smithy_client_1.expectString)(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["PerformanceInsightsEnabled"] !== undefined) {
        contents.PerformanceInsightsEnabled = (0, smithy_client_1.parseBoolean)(output["PerformanceInsightsEnabled"]);
    }
    if (output["PerformanceInsightsKMSKeyId"] !== undefined) {
        contents.PerformanceInsightsKMSKeyId = (0, smithy_client_1.expectString)(output["PerformanceInsightsKMSKeyId"]);
    }
    if (output["PerformanceInsightsRetentionPeriod"] !== undefined) {
        contents.PerformanceInsightsRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["PerformanceInsightsRetentionPeriod"]);
    }
    if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
    }
    else if (output["EnabledCloudwatchLogsExports"] !== undefined &&
        output["EnabledCloudwatchLogsExports"]["member"] !== undefined) {
        contents.EnabledCloudwatchLogsExports = de_LogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["EnabledCloudwatchLogsExports"]["member"]), context);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    else if (output["ProcessorFeatures"] !== undefined &&
        output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = de_ProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = (0, smithy_client_1.parseBoolean)(output["DeletionProtection"]);
    }
    if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
    }
    else if (output["AssociatedRoles"] !== undefined && output["AssociatedRoles"]["DBInstanceRole"] !== undefined) {
        contents.AssociatedRoles = de_DBInstanceRoles((0, smithy_client_1.getArrayIfSingleItem)(output["AssociatedRoles"]["DBInstanceRole"]), context);
    }
    if (output["ListenerEndpoint"] !== undefined) {
        contents.ListenerEndpoint = de_Endpoint(output["ListenerEndpoint"], context);
    }
    if (output["MaxAllocatedStorage"] !== undefined) {
        contents.MaxAllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["MaxAllocatedStorage"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
    }
    if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
    }
    else if (output["DBInstanceAutomatedBackupsReplications"] !== undefined &&
        output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.DBInstanceAutomatedBackupsReplications = de_DBInstanceAutomatedBackupsReplicationList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
    }
    if (output["CustomerOwnedIpEnabled"] !== undefined) {
        contents.CustomerOwnedIpEnabled = (0, smithy_client_1.parseBoolean)(output["CustomerOwnedIpEnabled"]);
    }
    if (output["AwsBackupRecoveryPointArn"] !== undefined) {
        contents.AwsBackupRecoveryPointArn = (0, smithy_client_1.expectString)(output["AwsBackupRecoveryPointArn"]);
    }
    if (output["ActivityStreamStatus"] !== undefined) {
        contents.ActivityStreamStatus = (0, smithy_client_1.expectString)(output["ActivityStreamStatus"]);
    }
    if (output["ActivityStreamKmsKeyId"] !== undefined) {
        contents.ActivityStreamKmsKeyId = (0, smithy_client_1.expectString)(output["ActivityStreamKmsKeyId"]);
    }
    if (output["ActivityStreamKinesisStreamName"] !== undefined) {
        contents.ActivityStreamKinesisStreamName = (0, smithy_client_1.expectString)(output["ActivityStreamKinesisStreamName"]);
    }
    if (output["ActivityStreamMode"] !== undefined) {
        contents.ActivityStreamMode = (0, smithy_client_1.expectString)(output["ActivityStreamMode"]);
    }
    if (output["ActivityStreamEngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.ActivityStreamEngineNativeAuditFieldsIncluded = (0, smithy_client_1.parseBoolean)(output["ActivityStreamEngineNativeAuditFieldsIncluded"]);
    }
    if (output["AutomationMode"] !== undefined) {
        contents.AutomationMode = (0, smithy_client_1.expectString)(output["AutomationMode"]);
    }
    if (output["ResumeFullAutomationModeTime"] !== undefined) {
        contents.ResumeFullAutomationModeTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ResumeFullAutomationModeTime"]));
    }
    if (output["CustomIamInstanceProfile"] !== undefined) {
        contents.CustomIamInstanceProfile = (0, smithy_client_1.expectString)(output["CustomIamInstanceProfile"]);
    }
    if (output["BackupTarget"] !== undefined) {
        contents.BackupTarget = (0, smithy_client_1.expectString)(output["BackupTarget"]);
    }
    if (output["NetworkType"] !== undefined) {
        contents.NetworkType = (0, smithy_client_1.expectString)(output["NetworkType"]);
    }
    if (output["ActivityStreamPolicyStatus"] !== undefined) {
        contents.ActivityStreamPolicyStatus = (0, smithy_client_1.expectString)(output["ActivityStreamPolicyStatus"]);
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = (0, smithy_client_1.strictParseInt32)(output["StorageThroughput"]);
    }
    if (output["DBSystemId"] !== undefined) {
        contents.DBSystemId = (0, smithy_client_1.expectString)(output["DBSystemId"]);
    }
    if (output["MasterUserSecret"] !== undefined) {
        contents.MasterUserSecret = de_MasterUserSecret(output["MasterUserSecret"], context);
    }
    if (output["CertificateDetails"] !== undefined) {
        contents.CertificateDetails = de_CertificateDetails(output["CertificateDetails"], context);
    }
    if (output["ReadReplicaSourceDBClusterIdentifier"] !== undefined) {
        contents.ReadReplicaSourceDBClusterIdentifier = (0, smithy_client_1.expectString)(output["ReadReplicaSourceDBClusterIdentifier"]);
    }
    return contents;
};
const de_DBInstanceAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBInstanceAutomatedBackup = (output, context) => {
    const contents = {};
    if (output["DBInstanceArn"] !== undefined) {
        contents.DBInstanceArn = (0, smithy_client_1.expectString)(output["DBInstanceArn"]);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = (0, smithy_client_1.expectString)(output["DbiResourceId"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
    }
    if (output["RestoreWindow"] !== undefined) {
        contents.RestoreWindow = de_RestoreWindow(output["RestoreWindow"], context);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["InstanceCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
    }
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = (0, smithy_client_1.expectString)(output["TdeCredentialArn"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["Encrypted"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = (0, smithy_client_1.expectString)(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
    }
    if (output["DBInstanceAutomatedBackupsArn"] !== undefined) {
        contents.DBInstanceAutomatedBackupsArn = (0, smithy_client_1.expectString)(output["DBInstanceAutomatedBackupsArn"]);
    }
    if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
    }
    else if (output["DBInstanceAutomatedBackupsReplications"] !== undefined &&
        output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.DBInstanceAutomatedBackupsReplications = de_DBInstanceAutomatedBackupsReplicationList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
    }
    if (output["BackupTarget"] !== undefined) {
        contents.BackupTarget = (0, smithy_client_1.expectString)(output["BackupTarget"]);
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = (0, smithy_client_1.strictParseInt32)(output["StorageThroughput"]);
    }
    return contents;
};
const de_DBInstanceAutomatedBackupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBInstanceAutomatedBackup(entry, context);
    });
};
const de_DBInstanceAutomatedBackupMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBInstanceAutomatedBackups === "") {
        contents.DBInstanceAutomatedBackups = [];
    }
    else if (output["DBInstanceAutomatedBackups"] !== undefined &&
        output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackups = de_DBInstanceAutomatedBackupList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"]), context);
    }
    return contents;
};
const de_DBInstanceAutomatedBackupNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBInstanceAutomatedBackupQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBInstanceAutomatedBackupsReplication = (output, context) => {
    const contents = {};
    if (output["DBInstanceAutomatedBackupsArn"] !== undefined) {
        contents.DBInstanceAutomatedBackupsArn = (0, smithy_client_1.expectString)(output["DBInstanceAutomatedBackupsArn"]);
    }
    return contents;
};
const de_DBInstanceAutomatedBackupsReplicationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBInstanceAutomatedBackupsReplication(entry, context);
    });
};
const de_DBInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBInstance(entry, context);
    });
};
const de_DBInstanceMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBInstances === "") {
        contents.DBInstances = [];
    }
    else if (output["DBInstances"] !== undefined && output["DBInstances"]["DBInstance"] !== undefined) {
        contents.DBInstances = de_DBInstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstances"]["DBInstance"]), context);
    }
    return contents;
};
const de_DBInstanceNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBInstanceRole = (output, context) => {
    const contents = {};
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = (0, smithy_client_1.expectString)(output["RoleArn"]);
    }
    if (output["FeatureName"] !== undefined) {
        contents.FeatureName = (0, smithy_client_1.expectString)(output["FeatureName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_DBInstanceRoleAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBInstanceRoleNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBInstanceRoleQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBInstanceRoles = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBInstanceRole(entry, context);
    });
};
const de_DBInstanceStatusInfo = (output, context) => {
    const contents = {};
    if (output["StatusType"] !== undefined) {
        contents.StatusType = (0, smithy_client_1.expectString)(output["StatusType"]);
    }
    if (output["Normal"] !== undefined) {
        contents.Normal = (0, smithy_client_1.parseBoolean)(output["Normal"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    return contents;
};
const de_DBInstanceStatusInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBInstanceStatusInfo(entry, context);
    });
};
const de_DBLogFileNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBParameterGroup = (output, context) => {
    const contents = {};
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = (0, smithy_client_1.expectString)(output["DBParameterGroupName"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["DBParameterGroupArn"] !== undefined) {
        contents.DBParameterGroupArn = (0, smithy_client_1.expectString)(output["DBParameterGroupArn"]);
    }
    return contents;
};
const de_DBParameterGroupAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBParameterGroupDetails = (output, context) => {
    const contents = {};
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = de_ParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DBParameterGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBParameterGroup(entry, context);
    });
};
const de_DBParameterGroupNameMessage = (output, context) => {
    const contents = {};
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = (0, smithy_client_1.expectString)(output["DBParameterGroupName"]);
    }
    return contents;
};
const de_DBParameterGroupNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBParameterGroupQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBParameterGroupsMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
    }
    else if (output["DBParameterGroups"] !== undefined &&
        output["DBParameterGroups"]["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroups = de_DBParameterGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["DBParameterGroups"]["DBParameterGroup"]), context);
    }
    return contents;
};
const de_DBParameterGroupStatus = (output, context) => {
    const contents = {};
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = (0, smithy_client_1.expectString)(output["DBParameterGroupName"]);
    }
    if (output["ParameterApplyStatus"] !== undefined) {
        contents.ParameterApplyStatus = (0, smithy_client_1.expectString)(output["ParameterApplyStatus"]);
    }
    return contents;
};
const de_DBParameterGroupStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBParameterGroupStatus(entry, context);
    });
};
const de_DBProxy = (output, context) => {
    const contents = {};
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = (0, smithy_client_1.expectString)(output["DBProxyName"]);
    }
    if (output["DBProxyArn"] !== undefined) {
        contents.DBProxyArn = (0, smithy_client_1.expectString)(output["DBProxyArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["EngineFamily"] !== undefined) {
        contents.EngineFamily = (0, smithy_client_1.expectString)(output["EngineFamily"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
    }
    else if (output["VpcSecurityGroupIds"] !== undefined && output["VpcSecurityGroupIds"]["member"] !== undefined) {
        contents.VpcSecurityGroupIds = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroupIds"]["member"]), context);
    }
    if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
    }
    else if (output["VpcSubnetIds"] !== undefined && output["VpcSubnetIds"]["member"] !== undefined) {
        contents.VpcSubnetIds = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSubnetIds"]["member"]), context);
    }
    if (output.Auth === "") {
        contents.Auth = [];
    }
    else if (output["Auth"] !== undefined && output["Auth"]["member"] !== undefined) {
        contents.Auth = de_UserAuthConfigInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["Auth"]["member"]), context);
    }
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = (0, smithy_client_1.expectString)(output["RoleArn"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
    }
    if (output["RequireTLS"] !== undefined) {
        contents.RequireTLS = (0, smithy_client_1.parseBoolean)(output["RequireTLS"]);
    }
    if (output["IdleClientTimeout"] !== undefined) {
        contents.IdleClientTimeout = (0, smithy_client_1.strictParseInt32)(output["IdleClientTimeout"]);
    }
    if (output["DebugLogging"] !== undefined) {
        contents.DebugLogging = (0, smithy_client_1.parseBoolean)(output["DebugLogging"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreatedDate"]));
    }
    if (output["UpdatedDate"] !== undefined) {
        contents.UpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UpdatedDate"]));
    }
    return contents;
};
const de_DBProxyAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyEndpoint = (output, context) => {
    const contents = {};
    if (output["DBProxyEndpointName"] !== undefined) {
        contents.DBProxyEndpointName = (0, smithy_client_1.expectString)(output["DBProxyEndpointName"]);
    }
    if (output["DBProxyEndpointArn"] !== undefined) {
        contents.DBProxyEndpointArn = (0, smithy_client_1.expectString)(output["DBProxyEndpointArn"]);
    }
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = (0, smithy_client_1.expectString)(output["DBProxyName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
    }
    else if (output["VpcSecurityGroupIds"] !== undefined && output["VpcSecurityGroupIds"]["member"] !== undefined) {
        contents.VpcSecurityGroupIds = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroupIds"]["member"]), context);
    }
    if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
    }
    else if (output["VpcSubnetIds"] !== undefined && output["VpcSubnetIds"]["member"] !== undefined) {
        contents.VpcSubnetIds = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSubnetIds"]["member"]), context);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreatedDate"]));
    }
    if (output["TargetRole"] !== undefined) {
        contents.TargetRole = (0, smithy_client_1.expectString)(output["TargetRole"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["IsDefault"]);
    }
    return contents;
};
const de_DBProxyEndpointAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyEndpointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBProxyEndpoint(entry, context);
    });
};
const de_DBProxyEndpointNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyEndpointQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBProxy(entry, context);
    });
};
const de_DBProxyNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyTarget = (output, context) => {
    const contents = {};
    if (output["TargetArn"] !== undefined) {
        contents.TargetArn = (0, smithy_client_1.expectString)(output["TargetArn"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
    }
    if (output["TrackedClusterId"] !== undefined) {
        contents.TrackedClusterId = (0, smithy_client_1.expectString)(output["TrackedClusterId"]);
    }
    if (output["RdsResourceId"] !== undefined) {
        contents.RdsResourceId = (0, smithy_client_1.expectString)(output["RdsResourceId"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Role"] !== undefined) {
        contents.Role = (0, smithy_client_1.expectString)(output["Role"]);
    }
    if (output["TargetHealth"] !== undefined) {
        contents.TargetHealth = de_TargetHealth(output["TargetHealth"], context);
    }
    return contents;
};
const de_DBProxyTargetAlreadyRegisteredFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyTargetGroup = (output, context) => {
    const contents = {};
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = (0, smithy_client_1.expectString)(output["DBProxyName"]);
    }
    if (output["TargetGroupName"] !== undefined) {
        contents.TargetGroupName = (0, smithy_client_1.expectString)(output["TargetGroupName"]);
    }
    if (output["TargetGroupArn"] !== undefined) {
        contents.TargetGroupArn = (0, smithy_client_1.expectString)(output["TargetGroupArn"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["IsDefault"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["ConnectionPoolConfig"] !== undefined) {
        contents.ConnectionPoolConfig = de_ConnectionPoolConfigurationInfo(output["ConnectionPoolConfig"], context);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreatedDate"]));
    }
    if (output["UpdatedDate"] !== undefined) {
        contents.UpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UpdatedDate"]));
    }
    return contents;
};
const de_DBProxyTargetGroupNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBProxyTargetNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSecurityGroup = (output, context) => {
    const contents = {};
    if (output["OwnerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["OwnerId"]);
    }
    if (output["DBSecurityGroupName"] !== undefined) {
        contents.DBSecurityGroupName = (0, smithy_client_1.expectString)(output["DBSecurityGroupName"]);
    }
    if (output["DBSecurityGroupDescription"] !== undefined) {
        contents.DBSecurityGroupDescription = (0, smithy_client_1.expectString)(output["DBSecurityGroupDescription"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output.EC2SecurityGroups === "") {
        contents.EC2SecurityGroups = [];
    }
    else if (output["EC2SecurityGroups"] !== undefined &&
        output["EC2SecurityGroups"]["EC2SecurityGroup"] !== undefined) {
        contents.EC2SecurityGroups = de_EC2SecurityGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["EC2SecurityGroups"]["EC2SecurityGroup"]), context);
    }
    if (output.IPRanges === "") {
        contents.IPRanges = [];
    }
    else if (output["IPRanges"] !== undefined && output["IPRanges"]["IPRange"] !== undefined) {
        contents.IPRanges = de_IPRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["IPRanges"]["IPRange"]), context);
    }
    if (output["DBSecurityGroupArn"] !== undefined) {
        contents.DBSecurityGroupArn = (0, smithy_client_1.expectString)(output["DBSecurityGroupArn"]);
    }
    return contents;
};
const de_DBSecurityGroupAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSecurityGroupMembership = (output, context) => {
    const contents = {};
    if (output["DBSecurityGroupName"] !== undefined) {
        contents.DBSecurityGroupName = (0, smithy_client_1.expectString)(output["DBSecurityGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_DBSecurityGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBSecurityGroupMembership(entry, context);
    });
};
const de_DBSecurityGroupMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
    }
    else if (output["DBSecurityGroups"] !== undefined && output["DBSecurityGroups"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroups = de_DBSecurityGroups((0, smithy_client_1.getArrayIfSingleItem)(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
    }
    return contents;
};
const de_DBSecurityGroupNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSecurityGroupNotSupportedFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSecurityGroupQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSecurityGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBSecurityGroup(entry, context);
    });
};
const de_DBSnapshot = (output, context) => {
    const contents = {};
    if (output["DBSnapshotIdentifier"] !== undefined) {
        contents.DBSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBSnapshotIdentifier"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
    }
    if (output["SnapshotCreateTime"] !== undefined) {
        contents.SnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["SnapshotCreateTime"]));
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["InstanceCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
    }
    if (output["SnapshotType"] !== undefined) {
        contents.SnapshotType = (0, smithy_client_1.expectString)(output["SnapshotType"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
    }
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = (0, smithy_client_1.strictParseInt32)(output["PercentProgress"]);
    }
    if (output["SourceRegion"] !== undefined) {
        contents.SourceRegion = (0, smithy_client_1.expectString)(output["SourceRegion"]);
    }
    if (output["SourceDBSnapshotIdentifier"] !== undefined) {
        contents.SourceDBSnapshotIdentifier = (0, smithy_client_1.expectString)(output["SourceDBSnapshotIdentifier"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = (0, smithy_client_1.expectString)(output["TdeCredentialArn"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["Encrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["DBSnapshotArn"] !== undefined) {
        contents.DBSnapshotArn = (0, smithy_client_1.expectString)(output["DBSnapshotArn"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = (0, smithy_client_1.expectString)(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    else if (output["ProcessorFeatures"] !== undefined &&
        output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = de_ProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = (0, smithy_client_1.expectString)(output["DbiResourceId"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
    }
    if (output["OriginalSnapshotCreateTime"] !== undefined) {
        contents.OriginalSnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["OriginalSnapshotCreateTime"]));
    }
    if (output["SnapshotDatabaseTime"] !== undefined) {
        contents.SnapshotDatabaseTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["SnapshotDatabaseTime"]));
    }
    if (output["SnapshotTarget"] !== undefined) {
        contents.SnapshotTarget = (0, smithy_client_1.expectString)(output["SnapshotTarget"]);
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = (0, smithy_client_1.strictParseInt32)(output["StorageThroughput"]);
    }
    return contents;
};
const de_DBSnapshotAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSnapshotAttribute = (output, context) => {
    const contents = {};
    if (output["AttributeName"] !== undefined) {
        contents.AttributeName = (0, smithy_client_1.expectString)(output["AttributeName"]);
    }
    if (output.AttributeValues === "") {
        contents.AttributeValues = [];
    }
    else if (output["AttributeValues"] !== undefined && output["AttributeValues"]["AttributeValue"] !== undefined) {
        contents.AttributeValues = de_AttributeValueList((0, smithy_client_1.getArrayIfSingleItem)(output["AttributeValues"]["AttributeValue"]), context);
    }
    return contents;
};
const de_DBSnapshotAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBSnapshotAttribute(entry, context);
    });
};
const de_DBSnapshotAttributesResult = (output, context) => {
    const contents = {};
    if (output["DBSnapshotIdentifier"] !== undefined) {
        contents.DBSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBSnapshotIdentifier"]);
    }
    if (output.DBSnapshotAttributes === "") {
        contents.DBSnapshotAttributes = [];
    }
    else if (output["DBSnapshotAttributes"] !== undefined &&
        output["DBSnapshotAttributes"]["DBSnapshotAttribute"] !== undefined) {
        contents.DBSnapshotAttributes = de_DBSnapshotAttributeList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSnapshotAttributes"]["DBSnapshotAttribute"]), context);
    }
    return contents;
};
const de_DBSnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBSnapshot(entry, context);
    });
};
const de_DBSnapshotMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBSnapshots === "") {
        contents.DBSnapshots = [];
    }
    else if (output["DBSnapshots"] !== undefined && output["DBSnapshots"]["DBSnapshot"] !== undefined) {
        contents.DBSnapshots = de_DBSnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSnapshots"]["DBSnapshot"]), context);
    }
    return contents;
};
const de_DBSnapshotNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSubnetGroup = (output, context) => {
    const contents = {};
    if (output["DBSubnetGroupName"] !== undefined) {
        contents.DBSubnetGroupName = (0, smithy_client_1.expectString)(output["DBSubnetGroupName"]);
    }
    if (output["DBSubnetGroupDescription"] !== undefined) {
        contents.DBSubnetGroupDescription = (0, smithy_client_1.expectString)(output["DBSubnetGroupDescription"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["SubnetGroupStatus"] !== undefined) {
        contents.SubnetGroupStatus = (0, smithy_client_1.expectString)(output["SubnetGroupStatus"]);
    }
    if (output.Subnets === "") {
        contents.Subnets = [];
    }
    else if (output["Subnets"] !== undefined && output["Subnets"]["Subnet"] !== undefined) {
        contents.Subnets = de_SubnetList((0, smithy_client_1.getArrayIfSingleItem)(output["Subnets"]["Subnet"]), context);
    }
    if (output["DBSubnetGroupArn"] !== undefined) {
        contents.DBSubnetGroupArn = (0, smithy_client_1.expectString)(output["DBSubnetGroupArn"]);
    }
    if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
    }
    else if (output["SupportedNetworkTypes"] !== undefined && output["SupportedNetworkTypes"]["member"] !== undefined) {
        contents.SupportedNetworkTypes = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNetworkTypes"]["member"]), context);
    }
    return contents;
};
const de_DBSubnetGroupAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSubnetGroupDoesNotCoverEnoughAZs = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSubnetGroupMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.DBSubnetGroups === "") {
        contents.DBSubnetGroups = [];
    }
    else if (output["DBSubnetGroups"] !== undefined && output["DBSubnetGroups"]["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroups = de_DBSubnetGroups((0, smithy_client_1.getArrayIfSingleItem)(output["DBSubnetGroups"]["DBSubnetGroup"]), context);
    }
    return contents;
};
const de_DBSubnetGroupNotAllowedFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSubnetGroupNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSubnetGroupQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBSubnetGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBSubnetGroup(entry, context);
    });
};
const de_DBSubnetQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DBUpgradeDependencyFailureFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DeleteBlueGreenDeploymentResponse = (output, context) => {
    const contents = {};
    if (output["BlueGreenDeployment"] !== undefined) {
        contents.BlueGreenDeployment = de_BlueGreenDeployment(output["BlueGreenDeployment"], context);
    }
    return contents;
};
const de_DeleteDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_DeleteDBClusterSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = de_DBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
const de_DeleteDBInstanceAutomatedBackupResult = (output, context) => {
    const contents = {};
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = de_DBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
const de_DeleteDBInstanceResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_DeleteDBProxyEndpointResponse = (output, context) => {
    const contents = {};
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = de_DBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
const de_DeleteDBProxyResponse = (output, context) => {
    const contents = {};
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = de_DBProxy(output["DBProxy"], context);
    }
    return contents;
};
const de_DeleteDBSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = de_DBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const de_DeleteEventSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = de_EventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const de_DeleteGlobalClusterResult = (output, context) => {
    const contents = {};
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = de_GlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const de_DeregisterDBProxyTargetsResponse = (output, context) => {
    const contents = {};
    return contents;
};
const de_DescribeBlueGreenDeploymentsResponse = (output, context) => {
    const contents = {};
    if (output.BlueGreenDeployments === "") {
        contents.BlueGreenDeployments = [];
    }
    else if (output["BlueGreenDeployments"] !== undefined && output["BlueGreenDeployments"]["member"] !== undefined) {
        contents.BlueGreenDeployments = de_BlueGreenDeploymentList((0, smithy_client_1.getArrayIfSingleItem)(output["BlueGreenDeployments"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DescribeDBClusterSnapshotAttributesResult = (output, context) => {
    const contents = {};
    if (output["DBClusterSnapshotAttributesResult"] !== undefined) {
        contents.DBClusterSnapshotAttributesResult = de_DBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
    }
    return contents;
};
const de_DescribeDBLogFilesDetails = (output, context) => {
    const contents = {};
    if (output["LogFileName"] !== undefined) {
        contents.LogFileName = (0, smithy_client_1.expectString)(output["LogFileName"]);
    }
    if (output["LastWritten"] !== undefined) {
        contents.LastWritten = (0, smithy_client_1.strictParseLong)(output["LastWritten"]);
    }
    if (output["Size"] !== undefined) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
    }
    return contents;
};
const de_DescribeDBLogFilesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeDBLogFilesDetails(entry, context);
    });
};
const de_DescribeDBLogFilesResponse = (output, context) => {
    const contents = {};
    if (output.DescribeDBLogFiles === "") {
        contents.DescribeDBLogFiles = [];
    }
    else if (output["DescribeDBLogFiles"] !== undefined &&
        output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"] !== undefined) {
        contents.DescribeDBLogFiles = de_DescribeDBLogFilesList((0, smithy_client_1.getArrayIfSingleItem)(output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DescribeDBProxiesResponse = (output, context) => {
    const contents = {};
    if (output.DBProxies === "") {
        contents.DBProxies = [];
    }
    else if (output["DBProxies"] !== undefined && output["DBProxies"]["member"] !== undefined) {
        contents.DBProxies = de_DBProxyList((0, smithy_client_1.getArrayIfSingleItem)(output["DBProxies"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DescribeDBProxyEndpointsResponse = (output, context) => {
    const contents = {};
    if (output.DBProxyEndpoints === "") {
        contents.DBProxyEndpoints = [];
    }
    else if (output["DBProxyEndpoints"] !== undefined && output["DBProxyEndpoints"]["member"] !== undefined) {
        contents.DBProxyEndpoints = de_DBProxyEndpointList((0, smithy_client_1.getArrayIfSingleItem)(output["DBProxyEndpoints"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DescribeDBProxyTargetGroupsResponse = (output, context) => {
    const contents = {};
    if (output.TargetGroups === "") {
        contents.TargetGroups = [];
    }
    else if (output["TargetGroups"] !== undefined && output["TargetGroups"]["member"] !== undefined) {
        contents.TargetGroups = de_TargetGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["TargetGroups"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DescribeDBProxyTargetsResponse = (output, context) => {
    const contents = {};
    if (output.Targets === "") {
        contents.Targets = [];
    }
    else if (output["Targets"] !== undefined && output["Targets"]["member"] !== undefined) {
        contents.Targets = de_TargetList((0, smithy_client_1.getArrayIfSingleItem)(output["Targets"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_DescribeDBSnapshotAttributesResult = (output, context) => {
    const contents = {};
    if (output["DBSnapshotAttributesResult"] !== undefined) {
        contents.DBSnapshotAttributesResult = de_DBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
    }
    return contents;
};
const de_DescribeEngineDefaultClusterParametersResult = (output, context) => {
    const contents = {};
    if (output["EngineDefaults"] !== undefined) {
        contents.EngineDefaults = de_EngineDefaults(output["EngineDefaults"], context);
    }
    return contents;
};
const de_DescribeEngineDefaultParametersResult = (output, context) => {
    const contents = {};
    if (output["EngineDefaults"] !== undefined) {
        contents.EngineDefaults = de_EngineDefaults(output["EngineDefaults"], context);
    }
    return contents;
};
const de_DescribeValidDBInstanceModificationsResult = (output, context) => {
    const contents = {};
    if (output["ValidDBInstanceModificationsMessage"] !== undefined) {
        contents.ValidDBInstanceModificationsMessage = de_ValidDBInstanceModificationsMessage(output["ValidDBInstanceModificationsMessage"], context);
    }
    return contents;
};
const de_DomainMembership = (output, context) => {
    const contents = {};
    if (output["Domain"] !== undefined) {
        contents.Domain = (0, smithy_client_1.expectString)(output["Domain"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["FQDN"] !== undefined) {
        contents.FQDN = (0, smithy_client_1.expectString)(output["FQDN"]);
    }
    if (output["IAMRoleName"] !== undefined) {
        contents.IAMRoleName = (0, smithy_client_1.expectString)(output["IAMRoleName"]);
    }
    return contents;
};
const de_DomainMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DomainMembership(entry, context);
    });
};
const de_DomainNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_DoubleRange = (output, context) => {
    const contents = {};
    if (output["From"] !== undefined) {
        contents.From = (0, smithy_client_1.strictParseFloat)(output["From"]);
    }
    if (output["To"] !== undefined) {
        contents.To = (0, smithy_client_1.strictParseFloat)(output["To"]);
    }
    return contents;
};
const de_DoubleRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DoubleRange(entry, context);
    });
};
const de_DownloadDBLogFilePortionDetails = (output, context) => {
    const contents = {};
    if (output["LogFileData"] !== undefined) {
        contents.LogFileData = (0, smithy_client_1.expectString)(output["LogFileData"]);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output["AdditionalDataPending"] !== undefined) {
        contents.AdditionalDataPending = (0, smithy_client_1.parseBoolean)(output["AdditionalDataPending"]);
    }
    return contents;
};
const de_Ec2ImagePropertiesNotSupportedFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_EC2SecurityGroup = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["EC2SecurityGroupName"] !== undefined) {
        contents.EC2SecurityGroupName = (0, smithy_client_1.expectString)(output["EC2SecurityGroupName"]);
    }
    if (output["EC2SecurityGroupId"] !== undefined) {
        contents.EC2SecurityGroupId = (0, smithy_client_1.expectString)(output["EC2SecurityGroupId"]);
    }
    if (output["EC2SecurityGroupOwnerId"] !== undefined) {
        contents.EC2SecurityGroupOwnerId = (0, smithy_client_1.expectString)(output["EC2SecurityGroupOwnerId"]);
    }
    return contents;
};
const de_EC2SecurityGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EC2SecurityGroup(entry, context);
    });
};
const de_Endpoint = (output, context) => {
    const contents = {};
    if (output["Address"] !== undefined) {
        contents.Address = (0, smithy_client_1.expectString)(output["Address"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    return contents;
};
const de_EngineDefaults = (output, context) => {
    const contents = {};
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = de_ParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
    }
    return contents;
};
const de_EngineModeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_Event = (output, context) => {
    const contents = {};
    if (output["SourceIdentifier"] !== undefined) {
        contents.SourceIdentifier = (0, smithy_client_1.expectString)(output["SourceIdentifier"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    else if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = de_EventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategories"]["EventCategory"]), context);
    }
    if (output["Date"] !== undefined) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Date"]));
    }
    if (output["SourceArn"] !== undefined) {
        contents.SourceArn = (0, smithy_client_1.expectString)(output["SourceArn"]);
    }
    return contents;
};
const de_EventCategoriesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_EventCategoriesMap = (output, context) => {
    const contents = {};
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    else if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = de_EventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategories"]["EventCategory"]), context);
    }
    return contents;
};
const de_EventCategoriesMapList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventCategoriesMap(entry, context);
    });
};
const de_EventCategoriesMessage = (output, context) => {
    const contents = {};
    if (output.EventCategoriesMapList === "") {
        contents.EventCategoriesMapList = [];
    }
    else if (output["EventCategoriesMapList"] !== undefined &&
        output["EventCategoriesMapList"]["EventCategoriesMap"] !== undefined) {
        contents.EventCategoriesMapList = de_EventCategoriesMapList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategoriesMapList"]["EventCategoriesMap"]), context);
    }
    return contents;
};
const de_EventList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Event(entry, context);
    });
};
const de_EventsMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.Events === "") {
        contents.Events = [];
    }
    else if (output["Events"] !== undefined && output["Events"]["Event"] !== undefined) {
        contents.Events = de_EventList((0, smithy_client_1.getArrayIfSingleItem)(output["Events"]["Event"]), context);
    }
    return contents;
};
const de_EventSubscription = (output, context) => {
    const contents = {};
    if (output["CustomerAwsId"] !== undefined) {
        contents.CustomerAwsId = (0, smithy_client_1.expectString)(output["CustomerAwsId"]);
    }
    if (output["CustSubscriptionId"] !== undefined) {
        contents.CustSubscriptionId = (0, smithy_client_1.expectString)(output["CustSubscriptionId"]);
    }
    if (output["SnsTopicArn"] !== undefined) {
        contents.SnsTopicArn = (0, smithy_client_1.expectString)(output["SnsTopicArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["SubscriptionCreationTime"] !== undefined) {
        contents.SubscriptionCreationTime = (0, smithy_client_1.expectString)(output["SubscriptionCreationTime"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    if (output.SourceIdsList === "") {
        contents.SourceIdsList = [];
    }
    else if (output["SourceIdsList"] !== undefined && output["SourceIdsList"]["SourceId"] !== undefined) {
        contents.SourceIdsList = de_SourceIdsList((0, smithy_client_1.getArrayIfSingleItem)(output["SourceIdsList"]["SourceId"]), context);
    }
    if (output.EventCategoriesList === "") {
        contents.EventCategoriesList = [];
    }
    else if (output["EventCategoriesList"] !== undefined &&
        output["EventCategoriesList"]["EventCategory"] !== undefined) {
        contents.EventCategoriesList = de_EventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategoriesList"]["EventCategory"]), context);
    }
    if (output["Enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
    }
    if (output["EventSubscriptionArn"] !== undefined) {
        contents.EventSubscriptionArn = (0, smithy_client_1.expectString)(output["EventSubscriptionArn"]);
    }
    return contents;
};
const de_EventSubscriptionQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_EventSubscriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventSubscription(entry, context);
    });
};
const de_EventSubscriptionsMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.EventSubscriptionsList === "") {
        contents.EventSubscriptionsList = [];
    }
    else if (output["EventSubscriptionsList"] !== undefined &&
        output["EventSubscriptionsList"]["EventSubscription"] !== undefined) {
        contents.EventSubscriptionsList = de_EventSubscriptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["EventSubscriptionsList"]["EventSubscription"]), context);
    }
    return contents;
};
const de_ExportTask = (output, context) => {
    const contents = {};
    if (output["ExportTaskIdentifier"] !== undefined) {
        contents.ExportTaskIdentifier = (0, smithy_client_1.expectString)(output["ExportTaskIdentifier"]);
    }
    if (output["SourceArn"] !== undefined) {
        contents.SourceArn = (0, smithy_client_1.expectString)(output["SourceArn"]);
    }
    if (output.ExportOnly === "") {
        contents.ExportOnly = [];
    }
    else if (output["ExportOnly"] !== undefined && output["ExportOnly"]["member"] !== undefined) {
        contents.ExportOnly = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["ExportOnly"]["member"]), context);
    }
    if (output["SnapshotTime"] !== undefined) {
        contents.SnapshotTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["SnapshotTime"]));
    }
    if (output["TaskStartTime"] !== undefined) {
        contents.TaskStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["TaskStartTime"]));
    }
    if (output["TaskEndTime"] !== undefined) {
        contents.TaskEndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["TaskEndTime"]));
    }
    if (output["S3Bucket"] !== undefined) {
        contents.S3Bucket = (0, smithy_client_1.expectString)(output["S3Bucket"]);
    }
    if (output["S3Prefix"] !== undefined) {
        contents.S3Prefix = (0, smithy_client_1.expectString)(output["S3Prefix"]);
    }
    if (output["IamRoleArn"] !== undefined) {
        contents.IamRoleArn = (0, smithy_client_1.expectString)(output["IamRoleArn"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = (0, smithy_client_1.strictParseInt32)(output["PercentProgress"]);
    }
    if (output["TotalExtractedDataInGB"] !== undefined) {
        contents.TotalExtractedDataInGB = (0, smithy_client_1.strictParseInt32)(output["TotalExtractedDataInGB"]);
    }
    if (output["FailureCause"] !== undefined) {
        contents.FailureCause = (0, smithy_client_1.expectString)(output["FailureCause"]);
    }
    if (output["WarningMessage"] !== undefined) {
        contents.WarningMessage = (0, smithy_client_1.expectString)(output["WarningMessage"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    return contents;
};
const de_ExportTaskAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ExportTaskNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ExportTasksList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportTask(entry, context);
    });
};
const de_ExportTasksMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ExportTasks === "") {
        contents.ExportTasks = [];
    }
    else if (output["ExportTasks"] !== undefined && output["ExportTasks"]["ExportTask"] !== undefined) {
        contents.ExportTasks = de_ExportTasksList((0, smithy_client_1.getArrayIfSingleItem)(output["ExportTasks"]["ExportTask"]), context);
    }
    return contents;
};
const de_FailoverDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_FailoverGlobalClusterResult = (output, context) => {
    const contents = {};
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = de_GlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const de_FailoverState = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["FromDbClusterArn"] !== undefined) {
        contents.FromDbClusterArn = (0, smithy_client_1.expectString)(output["FromDbClusterArn"]);
    }
    if (output["ToDbClusterArn"] !== undefined) {
        contents.ToDbClusterArn = (0, smithy_client_1.expectString)(output["ToDbClusterArn"]);
    }
    return contents;
};
const de_FeatureNameList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_GlobalCluster = (output, context) => {
    const contents = {};
    if (output["GlobalClusterIdentifier"] !== undefined) {
        contents.GlobalClusterIdentifier = (0, smithy_client_1.expectString)(output["GlobalClusterIdentifier"]);
    }
    if (output["GlobalClusterResourceId"] !== undefined) {
        contents.GlobalClusterResourceId = (0, smithy_client_1.expectString)(output["GlobalClusterResourceId"]);
    }
    if (output["GlobalClusterArn"] !== undefined) {
        contents.GlobalClusterArn = (0, smithy_client_1.expectString)(output["GlobalClusterArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = (0, smithy_client_1.expectString)(output["DatabaseName"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = (0, smithy_client_1.parseBoolean)(output["DeletionProtection"]);
    }
    if (output.GlobalClusterMembers === "") {
        contents.GlobalClusterMembers = [];
    }
    else if (output["GlobalClusterMembers"] !== undefined &&
        output["GlobalClusterMembers"]["GlobalClusterMember"] !== undefined) {
        contents.GlobalClusterMembers = de_GlobalClusterMemberList((0, smithy_client_1.getArrayIfSingleItem)(output["GlobalClusterMembers"]["GlobalClusterMember"]), context);
    }
    if (output["FailoverState"] !== undefined) {
        contents.FailoverState = de_FailoverState(output["FailoverState"], context);
    }
    return contents;
};
const de_GlobalClusterAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_GlobalClusterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GlobalCluster(entry, context);
    });
};
const de_GlobalClusterMember = (output, context) => {
    const contents = {};
    if (output["DBClusterArn"] !== undefined) {
        contents.DBClusterArn = (0, smithy_client_1.expectString)(output["DBClusterArn"]);
    }
    if (output.Readers === "") {
        contents.Readers = [];
    }
    else if (output["Readers"] !== undefined && output["Readers"]["member"] !== undefined) {
        contents.Readers = de_ReadersArnList((0, smithy_client_1.getArrayIfSingleItem)(output["Readers"]["member"]), context);
    }
    if (output["IsWriter"] !== undefined) {
        contents.IsWriter = (0, smithy_client_1.parseBoolean)(output["IsWriter"]);
    }
    if (output["GlobalWriteForwardingStatus"] !== undefined) {
        contents.GlobalWriteForwardingStatus = (0, smithy_client_1.expectString)(output["GlobalWriteForwardingStatus"]);
    }
    return contents;
};
const de_GlobalClusterMemberList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GlobalClusterMember(entry, context);
    });
};
const de_GlobalClusterNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_GlobalClusterQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_GlobalClustersMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.GlobalClusters === "") {
        contents.GlobalClusters = [];
    }
    else if (output["GlobalClusters"] !== undefined && output["GlobalClusters"]["GlobalClusterMember"] !== undefined) {
        contents.GlobalClusters = de_GlobalClusterList((0, smithy_client_1.getArrayIfSingleItem)(output["GlobalClusters"]["GlobalClusterMember"]), context);
    }
    return contents;
};
const de_IamRoleMissingPermissionsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_IamRoleNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InstanceQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InsufficientAvailableIPsInSubnetFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InsufficientDBClusterCapacityFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InsufficientDBInstanceCapacityFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InsufficientStorageClusterCapacityFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidBlueGreenDeploymentStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidCustomDBEngineVersionStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBClusterCapacityFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBClusterEndpointStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBClusterSnapshotStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBClusterStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBInstanceAutomatedBackupStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBInstanceStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBParameterGroupStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBProxyEndpointStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBProxyStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBSecurityGroupStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBSnapshotStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBSubnetGroupFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBSubnetGroupStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidDBSubnetStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidEventSubscriptionStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidExportOnlyFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidExportSourceStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidExportTaskStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidGlobalClusterStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidOptionGroupStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidRestoreFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidS3BucketFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidSubnet = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_InvalidVPCNetworkStateFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_IPRange = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["CIDRIP"] !== undefined) {
        contents.CIDRIP = (0, smithy_client_1.expectString)(output["CIDRIP"]);
    }
    return contents;
};
const de_IPRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IPRange(entry, context);
    });
};
const de_KMSKeyNotAccessibleFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_LogTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_MasterUserSecret = (output, context) => {
    const contents = {};
    if (output["SecretArn"] !== undefined) {
        contents.SecretArn = (0, smithy_client_1.expectString)(output["SecretArn"]);
    }
    if (output["SecretStatus"] !== undefined) {
        contents.SecretStatus = (0, smithy_client_1.expectString)(output["SecretStatus"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    return contents;
};
const de_MinimumEngineVersionPerAllowedValue = (output, context) => {
    const contents = {};
    if (output["AllowedValue"] !== undefined) {
        contents.AllowedValue = (0, smithy_client_1.expectString)(output["AllowedValue"]);
    }
    if (output["MinimumEngineVersion"] !== undefined) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
    }
    return contents;
};
const de_MinimumEngineVersionPerAllowedValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MinimumEngineVersionPerAllowedValue(entry, context);
    });
};
const de_ModifyActivityStreamResponse = (output, context) => {
    const contents = {};
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = (0, smithy_client_1.expectString)(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Mode"] !== undefined) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
    }
    if (output["EngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.EngineNativeAuditFieldsIncluded = (0, smithy_client_1.parseBoolean)(output["EngineNativeAuditFieldsIncluded"]);
    }
    if (output["PolicyStatus"] !== undefined) {
        contents.PolicyStatus = (0, smithy_client_1.expectString)(output["PolicyStatus"]);
    }
    return contents;
};
const de_ModifyCertificatesResult = (output, context) => {
    const contents = {};
    if (output["Certificate"] !== undefined) {
        contents.Certificate = de_Certificate(output["Certificate"], context);
    }
    return contents;
};
const de_ModifyDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_ModifyDBClusterSnapshotAttributeResult = (output, context) => {
    const contents = {};
    if (output["DBClusterSnapshotAttributesResult"] !== undefined) {
        contents.DBClusterSnapshotAttributesResult = de_DBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
    }
    return contents;
};
const de_ModifyDBInstanceResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_ModifyDBProxyEndpointResponse = (output, context) => {
    const contents = {};
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = de_DBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
const de_ModifyDBProxyResponse = (output, context) => {
    const contents = {};
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = de_DBProxy(output["DBProxy"], context);
    }
    return contents;
};
const de_ModifyDBProxyTargetGroupResponse = (output, context) => {
    const contents = {};
    if (output["DBProxyTargetGroup"] !== undefined) {
        contents.DBProxyTargetGroup = de_DBProxyTargetGroup(output["DBProxyTargetGroup"], context);
    }
    return contents;
};
const de_ModifyDBSnapshotAttributeResult = (output, context) => {
    const contents = {};
    if (output["DBSnapshotAttributesResult"] !== undefined) {
        contents.DBSnapshotAttributesResult = de_DBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
    }
    return contents;
};
const de_ModifyDBSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = de_DBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const de_ModifyDBSubnetGroupResult = (output, context) => {
    const contents = {};
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = de_DBSubnetGroup(output["DBSubnetGroup"], context);
    }
    return contents;
};
const de_ModifyEventSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = de_EventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const de_ModifyGlobalClusterResult = (output, context) => {
    const contents = {};
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = de_GlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const de_ModifyOptionGroupResult = (output, context) => {
    const contents = {};
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = de_OptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
const de_NetworkTypeNotSupported = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_Option = (output, context) => {
    const contents = {};
    if (output["OptionName"] !== undefined) {
        contents.OptionName = (0, smithy_client_1.expectString)(output["OptionName"]);
    }
    if (output["OptionDescription"] !== undefined) {
        contents.OptionDescription = (0, smithy_client_1.expectString)(output["OptionDescription"]);
    }
    if (output["Persistent"] !== undefined) {
        contents.Persistent = (0, smithy_client_1.parseBoolean)(output["Persistent"]);
    }
    if (output["Permanent"] !== undefined) {
        contents.Permanent = (0, smithy_client_1.parseBoolean)(output["Permanent"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["OptionVersion"] !== undefined) {
        contents.OptionVersion = (0, smithy_client_1.expectString)(output["OptionVersion"]);
    }
    if (output.OptionSettings === "") {
        contents.OptionSettings = [];
    }
    else if (output["OptionSettings"] !== undefined && output["OptionSettings"]["OptionSetting"] !== undefined) {
        contents.OptionSettings = de_OptionSettingConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionSettings"]["OptionSetting"]), context);
    }
    if (output.DBSecurityGroupMemberships === "") {
        contents.DBSecurityGroupMemberships = [];
    }
    else if (output["DBSecurityGroupMemberships"] !== undefined &&
        output["DBSecurityGroupMemberships"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroupMemberships = de_DBSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSecurityGroupMemberships"]["DBSecurityGroup"]), context);
    }
    if (output.VpcSecurityGroupMemberships === "") {
        contents.VpcSecurityGroupMemberships = [];
    }
    else if (output["VpcSecurityGroupMemberships"] !== undefined &&
        output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroupMemberships = de_VpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"]), context);
    }
    return contents;
};
const de_OptionGroup = (output, context) => {
    const contents = {};
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
    }
    if (output["OptionGroupDescription"] !== undefined) {
        contents.OptionGroupDescription = (0, smithy_client_1.expectString)(output["OptionGroupDescription"]);
    }
    if (output["EngineName"] !== undefined) {
        contents.EngineName = (0, smithy_client_1.expectString)(output["EngineName"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = (0, smithy_client_1.expectString)(output["MajorEngineVersion"]);
    }
    if (output.Options === "") {
        contents.Options = [];
    }
    else if (output["Options"] !== undefined && output["Options"]["Option"] !== undefined) {
        contents.Options = de_OptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["Options"]["Option"]), context);
    }
    if (output["AllowsVpcAndNonVpcInstanceMemberships"] !== undefined) {
        contents.AllowsVpcAndNonVpcInstanceMemberships = (0, smithy_client_1.parseBoolean)(output["AllowsVpcAndNonVpcInstanceMemberships"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["OptionGroupArn"] !== undefined) {
        contents.OptionGroupArn = (0, smithy_client_1.expectString)(output["OptionGroupArn"]);
    }
    if (output["SourceOptionGroup"] !== undefined) {
        contents.SourceOptionGroup = (0, smithy_client_1.expectString)(output["SourceOptionGroup"]);
    }
    if (output["SourceAccountId"] !== undefined) {
        contents.SourceAccountId = (0, smithy_client_1.expectString)(output["SourceAccountId"]);
    }
    if (output["CopyTimestamp"] !== undefined) {
        contents.CopyTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CopyTimestamp"]));
    }
    return contents;
};
const de_OptionGroupAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_OptionGroupMembership = (output, context) => {
    const contents = {};
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_OptionGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptionGroupMembership(entry, context);
    });
};
const de_OptionGroupNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_OptionGroupOption = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["EngineName"] !== undefined) {
        contents.EngineName = (0, smithy_client_1.expectString)(output["EngineName"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = (0, smithy_client_1.expectString)(output["MajorEngineVersion"]);
    }
    if (output["MinimumRequiredMinorEngineVersion"] !== undefined) {
        contents.MinimumRequiredMinorEngineVersion = (0, smithy_client_1.expectString)(output["MinimumRequiredMinorEngineVersion"]);
    }
    if (output["PortRequired"] !== undefined) {
        contents.PortRequired = (0, smithy_client_1.parseBoolean)(output["PortRequired"]);
    }
    if (output["DefaultPort"] !== undefined) {
        contents.DefaultPort = (0, smithy_client_1.strictParseInt32)(output["DefaultPort"]);
    }
    if (output.OptionsDependedOn === "") {
        contents.OptionsDependedOn = [];
    }
    else if (output["OptionsDependedOn"] !== undefined && output["OptionsDependedOn"]["OptionName"] !== undefined) {
        contents.OptionsDependedOn = de_OptionsDependedOn((0, smithy_client_1.getArrayIfSingleItem)(output["OptionsDependedOn"]["OptionName"]), context);
    }
    if (output.OptionsConflictsWith === "") {
        contents.OptionsConflictsWith = [];
    }
    else if (output["OptionsConflictsWith"] !== undefined &&
        output["OptionsConflictsWith"]["OptionConflictName"] !== undefined) {
        contents.OptionsConflictsWith = de_OptionsConflictsWith((0, smithy_client_1.getArrayIfSingleItem)(output["OptionsConflictsWith"]["OptionConflictName"]), context);
    }
    if (output["Persistent"] !== undefined) {
        contents.Persistent = (0, smithy_client_1.parseBoolean)(output["Persistent"]);
    }
    if (output["Permanent"] !== undefined) {
        contents.Permanent = (0, smithy_client_1.parseBoolean)(output["Permanent"]);
    }
    if (output["RequiresAutoMinorEngineVersionUpgrade"] !== undefined) {
        contents.RequiresAutoMinorEngineVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["RequiresAutoMinorEngineVersionUpgrade"]);
    }
    if (output["VpcOnly"] !== undefined) {
        contents.VpcOnly = (0, smithy_client_1.parseBoolean)(output["VpcOnly"]);
    }
    if (output["SupportsOptionVersionDowngrade"] !== undefined) {
        contents.SupportsOptionVersionDowngrade = (0, smithy_client_1.parseBoolean)(output["SupportsOptionVersionDowngrade"]);
    }
    if (output.OptionGroupOptionSettings === "") {
        contents.OptionGroupOptionSettings = [];
    }
    else if (output["OptionGroupOptionSettings"] !== undefined &&
        output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"] !== undefined) {
        contents.OptionGroupOptionSettings = de_OptionGroupOptionSettingsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"]), context);
    }
    if (output.OptionGroupOptionVersions === "") {
        contents.OptionGroupOptionVersions = [];
    }
    else if (output["OptionGroupOptionVersions"] !== undefined &&
        output["OptionGroupOptionVersions"]["OptionVersion"] !== undefined) {
        contents.OptionGroupOptionVersions = de_OptionGroupOptionVersionsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupOptionVersions"]["OptionVersion"]), context);
    }
    if (output["CopyableCrossAccount"] !== undefined) {
        contents.CopyableCrossAccount = (0, smithy_client_1.parseBoolean)(output["CopyableCrossAccount"]);
    }
    return contents;
};
const de_OptionGroupOptionSetting = (output, context) => {
    const contents = {};
    if (output["SettingName"] !== undefined) {
        contents.SettingName = (0, smithy_client_1.expectString)(output["SettingName"]);
    }
    if (output["SettingDescription"] !== undefined) {
        contents.SettingDescription = (0, smithy_client_1.expectString)(output["SettingDescription"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = (0, smithy_client_1.expectString)(output["ApplyType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
    }
    if (output["IsRequired"] !== undefined) {
        contents.IsRequired = (0, smithy_client_1.parseBoolean)(output["IsRequired"]);
    }
    if (output.MinimumEngineVersionPerAllowedValue === "") {
        contents.MinimumEngineVersionPerAllowedValue = [];
    }
    else if (output["MinimumEngineVersionPerAllowedValue"] !== undefined &&
        output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"] !== undefined) {
        contents.MinimumEngineVersionPerAllowedValue = de_MinimumEngineVersionPerAllowedValueList((0, smithy_client_1.getArrayIfSingleItem)(output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"]), context);
    }
    return contents;
};
const de_OptionGroupOptionSettingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptionGroupOptionSetting(entry, context);
    });
};
const de_OptionGroupOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptionGroupOption(entry, context);
    });
};
const de_OptionGroupOptionsMessage = (output, context) => {
    const contents = {};
    if (output.OptionGroupOptions === "") {
        contents.OptionGroupOptions = [];
    }
    else if (output["OptionGroupOptions"] !== undefined &&
        output["OptionGroupOptions"]["OptionGroupOption"] !== undefined) {
        contents.OptionGroupOptions = de_OptionGroupOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupOptions"]["OptionGroupOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_OptionGroupOptionVersionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptionVersion(entry, context);
    });
};
const de_OptionGroupQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_OptionGroups = (output, context) => {
    const contents = {};
    if (output.OptionGroupsList === "") {
        contents.OptionGroupsList = [];
    }
    else if (output["OptionGroupsList"] !== undefined && output["OptionGroupsList"]["OptionGroup"] !== undefined) {
        contents.OptionGroupsList = de_OptionGroupsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupsList"]["OptionGroup"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_OptionGroupsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptionGroup(entry, context);
    });
};
const de_OptionsConflictsWith = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_OptionsDependedOn = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_OptionSetting = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = (0, smithy_client_1.expectString)(output["ApplyType"]);
    }
    if (output["DataType"] !== undefined) {
        contents.DataType = (0, smithy_client_1.expectString)(output["DataType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
    }
    if (output["IsCollection"] !== undefined) {
        contents.IsCollection = (0, smithy_client_1.parseBoolean)(output["IsCollection"]);
    }
    return contents;
};
const de_OptionSettingConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptionSetting(entry, context);
    });
};
const de_OptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Option(entry, context);
    });
};
const de_OptionVersion = (output, context) => {
    const contents = {};
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.expectString)(output["Version"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["IsDefault"]);
    }
    return contents;
};
const de_OrderableDBInstanceOption = (output, context) => {
    const contents = {};
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
    }
    if (output["AvailabilityZoneGroup"] !== undefined) {
        contents.AvailabilityZoneGroup = (0, smithy_client_1.expectString)(output["AvailabilityZoneGroup"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined &&
        output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = de_AvailabilityZoneList((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["MultiAZCapable"] !== undefined) {
        contents.MultiAZCapable = (0, smithy_client_1.parseBoolean)(output["MultiAZCapable"]);
    }
    if (output["ReadReplicaCapable"] !== undefined) {
        contents.ReadReplicaCapable = (0, smithy_client_1.parseBoolean)(output["ReadReplicaCapable"]);
    }
    if (output["Vpc"] !== undefined) {
        contents.Vpc = (0, smithy_client_1.parseBoolean)(output["Vpc"]);
    }
    if (output["SupportsStorageEncryption"] !== undefined) {
        contents.SupportsStorageEncryption = (0, smithy_client_1.parseBoolean)(output["SupportsStorageEncryption"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    if (output["SupportsIops"] !== undefined) {
        contents.SupportsIops = (0, smithy_client_1.parseBoolean)(output["SupportsIops"]);
    }
    if (output["SupportsEnhancedMonitoring"] !== undefined) {
        contents.SupportsEnhancedMonitoring = (0, smithy_client_1.parseBoolean)(output["SupportsEnhancedMonitoring"]);
    }
    if (output["SupportsIAMDatabaseAuthentication"] !== undefined) {
        contents.SupportsIAMDatabaseAuthentication = (0, smithy_client_1.parseBoolean)(output["SupportsIAMDatabaseAuthentication"]);
    }
    if (output["SupportsPerformanceInsights"] !== undefined) {
        contents.SupportsPerformanceInsights = (0, smithy_client_1.parseBoolean)(output["SupportsPerformanceInsights"]);
    }
    if (output["MinStorageSize"] !== undefined) {
        contents.MinStorageSize = (0, smithy_client_1.strictParseInt32)(output["MinStorageSize"]);
    }
    if (output["MaxStorageSize"] !== undefined) {
        contents.MaxStorageSize = (0, smithy_client_1.strictParseInt32)(output["MaxStorageSize"]);
    }
    if (output["MinIopsPerDbInstance"] !== undefined) {
        contents.MinIopsPerDbInstance = (0, smithy_client_1.strictParseInt32)(output["MinIopsPerDbInstance"]);
    }
    if (output["MaxIopsPerDbInstance"] !== undefined) {
        contents.MaxIopsPerDbInstance = (0, smithy_client_1.strictParseInt32)(output["MaxIopsPerDbInstance"]);
    }
    if (output["MinIopsPerGib"] !== undefined) {
        contents.MinIopsPerGib = (0, smithy_client_1.strictParseFloat)(output["MinIopsPerGib"]);
    }
    if (output["MaxIopsPerGib"] !== undefined) {
        contents.MaxIopsPerGib = (0, smithy_client_1.strictParseFloat)(output["MaxIopsPerGib"]);
    }
    if (output.AvailableProcessorFeatures === "") {
        contents.AvailableProcessorFeatures = [];
    }
    else if (output["AvailableProcessorFeatures"] !== undefined &&
        output["AvailableProcessorFeatures"]["AvailableProcessorFeature"] !== undefined) {
        contents.AvailableProcessorFeatures = de_AvailableProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["AvailableProcessorFeatures"]["AvailableProcessorFeature"]), context);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = de_EngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
    }
    if (output["SupportsStorageAutoscaling"] !== undefined) {
        contents.SupportsStorageAutoscaling = (0, smithy_client_1.parseBoolean)(output["SupportsStorageAutoscaling"]);
    }
    if (output["SupportsKerberosAuthentication"] !== undefined) {
        contents.SupportsKerberosAuthentication = (0, smithy_client_1.parseBoolean)(output["SupportsKerberosAuthentication"]);
    }
    if (output["OutpostCapable"] !== undefined) {
        contents.OutpostCapable = (0, smithy_client_1.parseBoolean)(output["OutpostCapable"]);
    }
    if (output.SupportedActivityStreamModes === "") {
        contents.SupportedActivityStreamModes = [];
    }
    else if (output["SupportedActivityStreamModes"] !== undefined &&
        output["SupportedActivityStreamModes"]["member"] !== undefined) {
        contents.SupportedActivityStreamModes = de_ActivityStreamModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedActivityStreamModes"]["member"]), context);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = (0, smithy_client_1.parseBoolean)(output["SupportsGlobalDatabases"]);
    }
    if (output["SupportsClusters"] !== undefined) {
        contents.SupportsClusters = (0, smithy_client_1.parseBoolean)(output["SupportsClusters"]);
    }
    if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
    }
    else if (output["SupportedNetworkTypes"] !== undefined && output["SupportedNetworkTypes"]["member"] !== undefined) {
        contents.SupportedNetworkTypes = de_StringList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNetworkTypes"]["member"]), context);
    }
    if (output["SupportsStorageThroughput"] !== undefined) {
        contents.SupportsStorageThroughput = (0, smithy_client_1.parseBoolean)(output["SupportsStorageThroughput"]);
    }
    if (output["MinStorageThroughputPerDbInstance"] !== undefined) {
        contents.MinStorageThroughputPerDbInstance = (0, smithy_client_1.strictParseInt32)(output["MinStorageThroughputPerDbInstance"]);
    }
    if (output["MaxStorageThroughputPerDbInstance"] !== undefined) {
        contents.MaxStorageThroughputPerDbInstance = (0, smithy_client_1.strictParseInt32)(output["MaxStorageThroughputPerDbInstance"]);
    }
    if (output["MinStorageThroughputPerIops"] !== undefined) {
        contents.MinStorageThroughputPerIops = (0, smithy_client_1.strictParseFloat)(output["MinStorageThroughputPerIops"]);
    }
    if (output["MaxStorageThroughputPerIops"] !== undefined) {
        contents.MaxStorageThroughputPerIops = (0, smithy_client_1.strictParseFloat)(output["MaxStorageThroughputPerIops"]);
    }
    return contents;
};
const de_OrderableDBInstanceOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrderableDBInstanceOption(entry, context);
    });
};
const de_OrderableDBInstanceOptionsMessage = (output, context) => {
    const contents = {};
    if (output.OrderableDBInstanceOptions === "") {
        contents.OrderableDBInstanceOptions = [];
    }
    else if (output["OrderableDBInstanceOptions"] !== undefined &&
        output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"] !== undefined) {
        contents.OrderableDBInstanceOptions = de_OrderableDBInstanceOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_Outpost = (output, context) => {
    const contents = {};
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    return contents;
};
const de_Parameter = (output, context) => {
    const contents = {};
    if (output["ParameterName"] !== undefined) {
        contents.ParameterName = (0, smithy_client_1.expectString)(output["ParameterName"]);
    }
    if (output["ParameterValue"] !== undefined) {
        contents.ParameterValue = (0, smithy_client_1.expectString)(output["ParameterValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["Source"] !== undefined) {
        contents.Source = (0, smithy_client_1.expectString)(output["Source"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = (0, smithy_client_1.expectString)(output["ApplyType"]);
    }
    if (output["DataType"] !== undefined) {
        contents.DataType = (0, smithy_client_1.expectString)(output["DataType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
    }
    if (output["MinimumEngineVersion"] !== undefined) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
    }
    if (output["ApplyMethod"] !== undefined) {
        contents.ApplyMethod = (0, smithy_client_1.expectString)(output["ApplyMethod"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = de_EngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
    }
    return contents;
};
const de_ParametersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Parameter(entry, context);
    });
};
const de_PendingCloudwatchLogsExports = (output, context) => {
    const contents = {};
    if (output.LogTypesToEnable === "") {
        contents.LogTypesToEnable = [];
    }
    else if (output["LogTypesToEnable"] !== undefined && output["LogTypesToEnable"]["member"] !== undefined) {
        contents.LogTypesToEnable = de_LogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["LogTypesToEnable"]["member"]), context);
    }
    if (output.LogTypesToDisable === "") {
        contents.LogTypesToDisable = [];
    }
    else if (output["LogTypesToDisable"] !== undefined && output["LogTypesToDisable"]["member"] !== undefined) {
        contents.LogTypesToDisable = de_LogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["LogTypesToDisable"]["member"]), context);
    }
    return contents;
};
const de_PendingMaintenanceAction = (output, context) => {
    const contents = {};
    if (output["Action"] !== undefined) {
        contents.Action = (0, smithy_client_1.expectString)(output["Action"]);
    }
    if (output["AutoAppliedAfterDate"] !== undefined) {
        contents.AutoAppliedAfterDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["AutoAppliedAfterDate"]));
    }
    if (output["ForcedApplyDate"] !== undefined) {
        contents.ForcedApplyDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ForcedApplyDate"]));
    }
    if (output["OptInStatus"] !== undefined) {
        contents.OptInStatus = (0, smithy_client_1.expectString)(output["OptInStatus"]);
    }
    if (output["CurrentApplyDate"] !== undefined) {
        contents.CurrentApplyDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CurrentApplyDate"]));
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    return contents;
};
const de_PendingMaintenanceActionDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PendingMaintenanceAction(entry, context);
    });
};
const de_PendingMaintenanceActions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourcePendingMaintenanceActions(entry, context);
    });
};
const de_PendingMaintenanceActionsMessage = (output, context) => {
    const contents = {};
    if (output.PendingMaintenanceActions === "") {
        contents.PendingMaintenanceActions = [];
    }
    else if (output["PendingMaintenanceActions"] !== undefined &&
        output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"] !== undefined) {
        contents.PendingMaintenanceActions = de_PendingMaintenanceActions((0, smithy_client_1.getArrayIfSingleItem)(output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const de_PendingModifiedValues = (output, context) => {
    const contents = {};
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
    }
    if (output["MasterUserPassword"] !== undefined) {
        contents.MasterUserPassword = (0, smithy_client_1.expectString)(output["MasterUserPassword"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    if (output["CACertificateIdentifier"] !== undefined) {
        contents.CACertificateIdentifier = (0, smithy_client_1.expectString)(output["CACertificateIdentifier"]);
    }
    if (output["DBSubnetGroupName"] !== undefined) {
        contents.DBSubnetGroupName = (0, smithy_client_1.expectString)(output["DBSubnetGroupName"]);
    }
    if (output["PendingCloudwatchLogsExports"] !== undefined) {
        contents.PendingCloudwatchLogsExports = de_PendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    else if (output["ProcessorFeatures"] !== undefined &&
        output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = de_ProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["AutomationMode"] !== undefined) {
        contents.AutomationMode = (0, smithy_client_1.expectString)(output["AutomationMode"]);
    }
    if (output["ResumeFullAutomationModeTime"] !== undefined) {
        contents.ResumeFullAutomationModeTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ResumeFullAutomationModeTime"]));
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = (0, smithy_client_1.strictParseInt32)(output["StorageThroughput"]);
    }
    return contents;
};
const de_PointInTimeRestoreNotEnabledFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ProcessorFeature = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const de_ProcessorFeatureList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProcessorFeature(entry, context);
    });
};
const de_PromoteReadReplicaDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_PromoteReadReplicaResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_ProvisionedIopsNotAvailableInAZFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_PurchaseReservedDBInstancesOfferingResult = (output, context) => {
    const contents = {};
    if (output["ReservedDBInstance"] !== undefined) {
        contents.ReservedDBInstance = de_ReservedDBInstance(output["ReservedDBInstance"], context);
    }
    return contents;
};
const de_Range = (output, context) => {
    const contents = {};
    if (output["From"] !== undefined) {
        contents.From = (0, smithy_client_1.strictParseInt32)(output["From"]);
    }
    if (output["To"] !== undefined) {
        contents.To = (0, smithy_client_1.strictParseInt32)(output["To"]);
    }
    if (output["Step"] !== undefined) {
        contents.Step = (0, smithy_client_1.strictParseInt32)(output["Step"]);
    }
    return contents;
};
const de_RangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Range(entry, context);
    });
};
const de_ReadersArnList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_ReadReplicaDBClusterIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_ReadReplicaDBInstanceIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_ReadReplicaIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_RebootDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_RebootDBInstanceResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_RecurringCharge = (output, context) => {
    const contents = {};
    if (output["RecurringChargeAmount"] !== undefined) {
        contents.RecurringChargeAmount = (0, smithy_client_1.strictParseFloat)(output["RecurringChargeAmount"]);
    }
    if (output["RecurringChargeFrequency"] !== undefined) {
        contents.RecurringChargeFrequency = (0, smithy_client_1.expectString)(output["RecurringChargeFrequency"]);
    }
    return contents;
};
const de_RecurringChargeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecurringCharge(entry, context);
    });
};
const de_RegisterDBProxyTargetsResponse = (output, context) => {
    const contents = {};
    if (output.DBProxyTargets === "") {
        contents.DBProxyTargets = [];
    }
    else if (output["DBProxyTargets"] !== undefined && output["DBProxyTargets"]["member"] !== undefined) {
        contents.DBProxyTargets = de_TargetList((0, smithy_client_1.getArrayIfSingleItem)(output["DBProxyTargets"]["member"]), context);
    }
    return contents;
};
const de_RemoveFromGlobalClusterResult = (output, context) => {
    const contents = {};
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = de_GlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const de_RemoveSourceIdentifierFromSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = de_EventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const de_ReservedDBInstance = (output, context) => {
    const contents = {};
    if (output["ReservedDBInstanceId"] !== undefined) {
        contents.ReservedDBInstanceId = (0, smithy_client_1.expectString)(output["ReservedDBInstanceId"]);
    }
    if (output["ReservedDBInstancesOfferingId"] !== undefined) {
        contents.ReservedDBInstancesOfferingId = (0, smithy_client_1.expectString)(output["ReservedDBInstancesOfferingId"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["StartTime"]));
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["CurrencyCode"]);
    }
    if (output["DBInstanceCount"] !== undefined) {
        contents.DBInstanceCount = (0, smithy_client_1.strictParseInt32)(output["DBInstanceCount"]);
    }
    if (output["ProductDescription"] !== undefined) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["ProductDescription"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
    }
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = de_RecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    if (output["ReservedDBInstanceArn"] !== undefined) {
        contents.ReservedDBInstanceArn = (0, smithy_client_1.expectString)(output["ReservedDBInstanceArn"]);
    }
    if (output["LeaseId"] !== undefined) {
        contents.LeaseId = (0, smithy_client_1.expectString)(output["LeaseId"]);
    }
    return contents;
};
const de_ReservedDBInstanceAlreadyExistsFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ReservedDBInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedDBInstance(entry, context);
    });
};
const de_ReservedDBInstanceMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ReservedDBInstances === "") {
        contents.ReservedDBInstances = [];
    }
    else if (output["ReservedDBInstances"] !== undefined &&
        output["ReservedDBInstances"]["ReservedDBInstance"] !== undefined) {
        contents.ReservedDBInstances = de_ReservedDBInstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedDBInstances"]["ReservedDBInstance"]), context);
    }
    return contents;
};
const de_ReservedDBInstanceNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ReservedDBInstanceQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ReservedDBInstancesOffering = (output, context) => {
    const contents = {};
    if (output["ReservedDBInstancesOfferingId"] !== undefined) {
        contents.ReservedDBInstancesOfferingId = (0, smithy_client_1.expectString)(output["ReservedDBInstancesOfferingId"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["CurrencyCode"]);
    }
    if (output["ProductDescription"] !== undefined) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["ProductDescription"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = de_RecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    return contents;
};
const de_ReservedDBInstancesOfferingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedDBInstancesOffering(entry, context);
    });
};
const de_ReservedDBInstancesOfferingMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ReservedDBInstancesOfferings === "") {
        contents.ReservedDBInstancesOfferings = [];
    }
    else if (output["ReservedDBInstancesOfferings"] !== undefined &&
        output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"] !== undefined) {
        contents.ReservedDBInstancesOfferings = de_ReservedDBInstancesOfferingList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"]), context);
    }
    return contents;
};
const de_ReservedDBInstancesOfferingNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ResourceNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_ResourcePendingMaintenanceActions = (output, context) => {
    const contents = {};
    if (output["ResourceIdentifier"] !== undefined) {
        contents.ResourceIdentifier = (0, smithy_client_1.expectString)(output["ResourceIdentifier"]);
    }
    if (output.PendingMaintenanceActionDetails === "") {
        contents.PendingMaintenanceActionDetails = [];
    }
    else if (output["PendingMaintenanceActionDetails"] !== undefined &&
        output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"] !== undefined) {
        contents.PendingMaintenanceActionDetails = de_PendingMaintenanceActionDetails((0, smithy_client_1.getArrayIfSingleItem)(output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"]), context);
    }
    return contents;
};
const de_RestoreDBClusterFromS3Result = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_RestoreDBClusterFromSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_RestoreDBClusterToPointInTimeResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_RestoreDBInstanceFromDBSnapshotResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_RestoreDBInstanceFromS3Result = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_RestoreDBInstanceToPointInTimeResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_RestoreWindow = (output, context) => {
    const contents = {};
    if (output["EarliestTime"] !== undefined) {
        contents.EarliestTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["EarliestTime"]));
    }
    if (output["LatestTime"] !== undefined) {
        contents.LatestTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LatestTime"]));
    }
    return contents;
};
const de_RevokeDBSecurityGroupIngressResult = (output, context) => {
    const contents = {};
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = de_DBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
const de_ScalingConfigurationInfo = (output, context) => {
    const contents = {};
    if (output["MinCapacity"] !== undefined) {
        contents.MinCapacity = (0, smithy_client_1.strictParseInt32)(output["MinCapacity"]);
    }
    if (output["MaxCapacity"] !== undefined) {
        contents.MaxCapacity = (0, smithy_client_1.strictParseInt32)(output["MaxCapacity"]);
    }
    if (output["AutoPause"] !== undefined) {
        contents.AutoPause = (0, smithy_client_1.parseBoolean)(output["AutoPause"]);
    }
    if (output["SecondsUntilAutoPause"] !== undefined) {
        contents.SecondsUntilAutoPause = (0, smithy_client_1.strictParseInt32)(output["SecondsUntilAutoPause"]);
    }
    if (output["TimeoutAction"] !== undefined) {
        contents.TimeoutAction = (0, smithy_client_1.expectString)(output["TimeoutAction"]);
    }
    if (output["SecondsBeforeTimeout"] !== undefined) {
        contents.SecondsBeforeTimeout = (0, smithy_client_1.strictParseInt32)(output["SecondsBeforeTimeout"]);
    }
    return contents;
};
const de_ServerlessV2ScalingConfigurationInfo = (output, context) => {
    const contents = {};
    if (output["MinCapacity"] !== undefined) {
        contents.MinCapacity = (0, smithy_client_1.strictParseFloat)(output["MinCapacity"]);
    }
    if (output["MaxCapacity"] !== undefined) {
        contents.MaxCapacity = (0, smithy_client_1.strictParseFloat)(output["MaxCapacity"]);
    }
    return contents;
};
const de_SharedSnapshotQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SnapshotQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SNSInvalidTopicFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SNSNoAuthorizationFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SNSTopicArnNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SourceClusterNotSupportedFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SourceDatabaseNotSupportedFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SourceIdsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_SourceNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SourceRegion = (output, context) => {
    const contents = {};
    if (output["RegionName"] !== undefined) {
        contents.RegionName = (0, smithy_client_1.expectString)(output["RegionName"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["SupportsDBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.SupportsDBInstanceAutomatedBackupsReplication = (0, smithy_client_1.parseBoolean)(output["SupportsDBInstanceAutomatedBackupsReplication"]);
    }
    return contents;
};
const de_SourceRegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SourceRegion(entry, context);
    });
};
const de_SourceRegionMessage = (output, context) => {
    const contents = {};
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.SourceRegions === "") {
        contents.SourceRegions = [];
    }
    else if (output["SourceRegions"] !== undefined && output["SourceRegions"]["SourceRegion"] !== undefined) {
        contents.SourceRegions = de_SourceRegionList((0, smithy_client_1.getArrayIfSingleItem)(output["SourceRegions"]["SourceRegion"]), context);
    }
    return contents;
};
const de_StartActivityStreamResponse = (output, context) => {
    const contents = {};
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = (0, smithy_client_1.expectString)(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Mode"] !== undefined) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
    }
    if (output["ApplyImmediately"] !== undefined) {
        contents.ApplyImmediately = (0, smithy_client_1.parseBoolean)(output["ApplyImmediately"]);
    }
    if (output["EngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.EngineNativeAuditFieldsIncluded = (0, smithy_client_1.parseBoolean)(output["EngineNativeAuditFieldsIncluded"]);
    }
    return contents;
};
const de_StartDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_StartDBInstanceAutomatedBackupsReplicationResult = (output, context) => {
    const contents = {};
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = de_DBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
const de_StartDBInstanceResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_StopActivityStreamResponse = (output, context) => {
    const contents = {};
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = (0, smithy_client_1.expectString)(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_StopDBClusterResult = (output, context) => {
    const contents = {};
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = de_DBCluster(output["DBCluster"], context);
    }
    return contents;
};
const de_StopDBInstanceAutomatedBackupsReplicationResult = (output, context) => {
    const contents = {};
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = de_DBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
const de_StopDBInstanceResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_StorageQuotaExceededFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_StorageTypeNotAvailableFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_StorageTypeNotSupportedFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_StringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_Subnet = (output, context) => {
    const contents = {};
    if (output["SubnetIdentifier"] !== undefined) {
        contents.SubnetIdentifier = (0, smithy_client_1.expectString)(output["SubnetIdentifier"]);
    }
    if (output["SubnetAvailabilityZone"] !== undefined) {
        contents.SubnetAvailabilityZone = de_AvailabilityZone(output["SubnetAvailabilityZone"], context);
    }
    if (output["SubnetOutpost"] !== undefined) {
        contents.SubnetOutpost = de_Outpost(output["SubnetOutpost"], context);
    }
    if (output["SubnetStatus"] !== undefined) {
        contents.SubnetStatus = (0, smithy_client_1.expectString)(output["SubnetStatus"]);
    }
    return contents;
};
const de_SubnetAlreadyInUse = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SubnetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Subnet(entry, context);
    });
};
const de_SubscriptionAlreadyExistFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SubscriptionCategoryNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SubscriptionNotFoundFault = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const de_SupportedCharacterSetsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CharacterSet(entry, context);
    });
};
const de_SupportedTimezonesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Timezone(entry, context);
    });
};
const de_SwitchoverBlueGreenDeploymentResponse = (output, context) => {
    const contents = {};
    if (output["BlueGreenDeployment"] !== undefined) {
        contents.BlueGreenDeployment = de_BlueGreenDeployment(output["BlueGreenDeployment"], context);
    }
    return contents;
};
const de_SwitchoverDetail = (output, context) => {
    const contents = {};
    if (output["SourceMember"] !== undefined) {
        contents.SourceMember = (0, smithy_client_1.expectString)(output["SourceMember"]);
    }
    if (output["TargetMember"] !== undefined) {
        contents.TargetMember = (0, smithy_client_1.expectString)(output["TargetMember"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_SwitchoverDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SwitchoverDetail(entry, context);
    });
};
const de_SwitchoverReadReplicaResult = (output, context) => {
    const contents = {};
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = de_DBInstance(output["DBInstance"], context);
    }
    return contents;
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry, context);
    });
};
const de_TagListMessage = (output, context) => {
    const contents = {};
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
    }
    return contents;
};
const de_TargetGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBProxyTargetGroup(entry, context);
    });
};
const de_TargetHealth = (output, context) => {
    const contents = {};
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    if (output["Reason"] !== undefined) {
        contents.Reason = (0, smithy_client_1.expectString)(output["Reason"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    return contents;
};
const de_TargetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DBProxyTarget(entry, context);
    });
};
const de_Timezone = (output, context) => {
    const contents = {};
    if (output["TimezoneName"] !== undefined) {
        contents.TimezoneName = (0, smithy_client_1.expectString)(output["TimezoneName"]);
    }
    return contents;
};
const de_UpgradeTarget = (output, context) => {
    const contents = {};
    if (output["Engine"] !== undefined) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["AutoUpgrade"] !== undefined) {
        contents.AutoUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoUpgrade"]);
    }
    if (output["IsMajorVersionUpgrade"] !== undefined) {
        contents.IsMajorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["IsMajorVersionUpgrade"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = de_EngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
    }
    if (output["SupportsParallelQuery"] !== undefined) {
        contents.SupportsParallelQuery = (0, smithy_client_1.parseBoolean)(output["SupportsParallelQuery"]);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = (0, smithy_client_1.parseBoolean)(output["SupportsGlobalDatabases"]);
    }
    if (output["SupportsBabelfish"] !== undefined) {
        contents.SupportsBabelfish = (0, smithy_client_1.parseBoolean)(output["SupportsBabelfish"]);
    }
    return contents;
};
const de_UserAuthConfigInfo = (output, context) => {
    const contents = {};
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["UserName"] !== undefined) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
    }
    if (output["AuthScheme"] !== undefined) {
        contents.AuthScheme = (0, smithy_client_1.expectString)(output["AuthScheme"]);
    }
    if (output["SecretArn"] !== undefined) {
        contents.SecretArn = (0, smithy_client_1.expectString)(output["SecretArn"]);
    }
    if (output["IAMAuth"] !== undefined) {
        contents.IAMAuth = (0, smithy_client_1.expectString)(output["IAMAuth"]);
    }
    if (output["ClientPasswordAuthType"] !== undefined) {
        contents.ClientPasswordAuthType = (0, smithy_client_1.expectString)(output["ClientPasswordAuthType"]);
    }
    return contents;
};
const de_UserAuthConfigInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserAuthConfigInfo(entry, context);
    });
};
const de_ValidDBInstanceModificationsMessage = (output, context) => {
    const contents = {};
    if (output.Storage === "") {
        contents.Storage = [];
    }
    else if (output["Storage"] !== undefined && output["Storage"]["ValidStorageOptions"] !== undefined) {
        contents.Storage = de_ValidStorageOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["Storage"]["ValidStorageOptions"]), context);
    }
    if (output.ValidProcessorFeatures === "") {
        contents.ValidProcessorFeatures = [];
    }
    else if (output["ValidProcessorFeatures"] !== undefined &&
        output["ValidProcessorFeatures"]["AvailableProcessorFeature"] !== undefined) {
        contents.ValidProcessorFeatures = de_AvailableProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ValidProcessorFeatures"]["AvailableProcessorFeature"]), context);
    }
    return contents;
};
const de_ValidStorageOptions = (output, context) => {
    const contents = {};
    if (output["StorageType"] !== undefined) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
    }
    if (output.StorageSize === "") {
        contents.StorageSize = [];
    }
    else if (output["StorageSize"] !== undefined && output["StorageSize"]["Range"] !== undefined) {
        contents.StorageSize = de_RangeList((0, smithy_client_1.getArrayIfSingleItem)(output["StorageSize"]["Range"]), context);
    }
    if (output.ProvisionedIops === "") {
        contents.ProvisionedIops = [];
    }
    else if (output["ProvisionedIops"] !== undefined && output["ProvisionedIops"]["Range"] !== undefined) {
        contents.ProvisionedIops = de_RangeList((0, smithy_client_1.getArrayIfSingleItem)(output["ProvisionedIops"]["Range"]), context);
    }
    if (output.IopsToStorageRatio === "") {
        contents.IopsToStorageRatio = [];
    }
    else if (output["IopsToStorageRatio"] !== undefined && output["IopsToStorageRatio"]["DoubleRange"] !== undefined) {
        contents.IopsToStorageRatio = de_DoubleRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["IopsToStorageRatio"]["DoubleRange"]), context);
    }
    if (output["SupportsStorageAutoscaling"] !== undefined) {
        contents.SupportsStorageAutoscaling = (0, smithy_client_1.parseBoolean)(output["SupportsStorageAutoscaling"]);
    }
    if (output.ProvisionedStorageThroughput === "") {
        contents.ProvisionedStorageThroughput = [];
    }
    else if (output["ProvisionedStorageThroughput"] !== undefined &&
        output["ProvisionedStorageThroughput"]["Range"] !== undefined) {
        contents.ProvisionedStorageThroughput = de_RangeList((0, smithy_client_1.getArrayIfSingleItem)(output["ProvisionedStorageThroughput"]["Range"]), context);
    }
    if (output.StorageThroughputToIopsRatio === "") {
        contents.StorageThroughputToIopsRatio = [];
    }
    else if (output["StorageThroughputToIopsRatio"] !== undefined &&
        output["StorageThroughputToIopsRatio"]["DoubleRange"] !== undefined) {
        contents.StorageThroughputToIopsRatio = de_DoubleRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["StorageThroughputToIopsRatio"]["DoubleRange"]), context);
    }
    return contents;
};
const de_ValidStorageOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidStorageOptions(entry, context);
    });
};
const de_ValidUpgradeTargetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UpgradeTarget(entry, context);
    });
};
const de_VpcSecurityGroupMembership = (output, context) => {
    const contents = {};
    if (output["VpcSecurityGroupId"] !== undefined) {
        contents.VpcSecurityGroupId = (0, smithy_client_1.expectString)(output["VpcSecurityGroupId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const de_VpcSecurityGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcSecurityGroupMembership(entry, context);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(RDSServiceException_1.RDSServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
