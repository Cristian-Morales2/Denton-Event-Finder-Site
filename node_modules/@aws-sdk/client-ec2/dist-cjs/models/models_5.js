"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportInstanceResultFilterSensitiveLog = exports.ImportInstanceRequestFilterSensitiveLog = exports.ImportInstanceLaunchSpecificationFilterSensitiveLog = exports.UserDataFilterSensitiveLog = exports.DiskImageFilterSensitiveLog = exports.DiskImageDetailFilterSensitiveLog = exports.ImportImageResultFilterSensitiveLog = exports.ImportImageRequestFilterSensitiveLog = exports.ImageDiskContainerFilterSensitiveLog = exports.GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog = exports.GetLaunchTemplateDataResultFilterSensitiveLog = exports.DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = exports.IpamManagementState = exports.IpamResourceType = exports.IpamDiscoveryFailureCode = exports.IpamAddressHistoryResourceType = exports.IpamOverlapStatus = exports.IpamComplianceStatus = exports.PartitionLoadFrequency = exports.UnlimitedSupportedInstanceFamily = exports.ClientCertificateRevocationListStatusCode = exports.TransitGatewayPropagationState = exports.VpcAttributeName = exports.VolumeStatusInfoStatus = exports.VolumeStatusName = exports.VolumeModificationState = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("./models_0");
const models_1_1 = require("./models_1");
const models_3_1 = require("./models_3");
exports.VolumeModificationState = {
    completed: "completed",
    failed: "failed",
    modifying: "modifying",
    optimizing: "optimizing",
};
exports.VolumeStatusName = {
    io_enabled: "io-enabled",
    io_performance: "io-performance",
};
exports.VolumeStatusInfoStatus = {
    impaired: "impaired",
    insufficient_data: "insufficient-data",
    ok: "ok",
};
exports.VpcAttributeName = {
    enableDnsHostnames: "enableDnsHostnames",
    enableDnsSupport: "enableDnsSupport",
    enableNetworkAddressUsageMetrics: "enableNetworkAddressUsageMetrics",
};
exports.TransitGatewayPropagationState = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    enabling: "enabling",
};
exports.ClientCertificateRevocationListStatusCode = {
    active: "active",
    pending: "pending",
};
exports.UnlimitedSupportedInstanceFamily = {
    t2: "t2",
    t3: "t3",
    t3a: "t3a",
    t4g: "t4g",
};
exports.PartitionLoadFrequency = {
    DAILY: "daily",
    MONTHLY: "monthly",
    NONE: "none",
    WEEKLY: "weekly",
};
exports.IpamComplianceStatus = {
    compliant: "compliant",
    ignored: "ignored",
    noncompliant: "noncompliant",
    unmanaged: "unmanaged",
};
exports.IpamOverlapStatus = {
    ignored: "ignored",
    nonoverlapping: "nonoverlapping",
    overlapping: "overlapping",
};
exports.IpamAddressHistoryResourceType = {
    eip: "eip",
    instance: "instance",
    network_interface: "network-interface",
    subnet: "subnet",
    vpc: "vpc",
};
exports.IpamDiscoveryFailureCode = {
    assume_role_failure: "assume-role-failure",
    throttling_failure: "throttling-failure",
    unauthorized_failure: "unauthorized-failure",
};
exports.IpamResourceType = {
    eip: "eip",
    ipv6_pool: "ipv6-pool",
    public_ipv4_pool: "public-ipv4-pool",
    subnet: "subnet",
    vpc: "vpc",
};
exports.IpamManagementState = {
    ignored: "ignored",
    managed: "managed",
    unmanaged: "unmanaged",
};
const DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: (0, models_0_1.VerifiedAccessTrustProviderFilterSensitiveLog)(obj.VerifiedAccessTrustProvider),
    }),
});
exports.DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = DetachVerifiedAccessTrustProviderResultFilterSensitiveLog;
const GetLaunchTemplateDataResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: (0, models_1_1.ResponseLaunchTemplateDataFilterSensitiveLog)(obj.LaunchTemplateData),
    }),
});
exports.GetLaunchTemplateDataResultFilterSensitiveLog = GetLaunchTemplateDataResultFilterSensitiveLog;
const GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnectionDeviceSampleConfiguration && { VpnConnectionDeviceSampleConfiguration: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog = GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog;
const ImageDiskContainerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithy_client_1.SENSITIVE_STRING }),
});
exports.ImageDiskContainerFilterSensitiveLog = ImageDiskContainerFilterSensitiveLog;
const ImportImageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DiskContainers && {
        DiskContainers: obj.DiskContainers.map((item) => (0, exports.ImageDiskContainerFilterSensitiveLog)(item)),
    }),
});
exports.ImportImageRequestFilterSensitiveLog = ImportImageRequestFilterSensitiveLog;
const ImportImageResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnapshotDetails && {
        SnapshotDetails: obj.SnapshotDetails.map((item) => (0, models_3_1.SnapshotDetailFilterSensitiveLog)(item)),
    }),
});
exports.ImportImageResultFilterSensitiveLog = ImportImageResultFilterSensitiveLog;
const DiskImageDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportManifestUrl && { ImportManifestUrl: smithy_client_1.SENSITIVE_STRING }),
});
exports.DiskImageDetailFilterSensitiveLog = DiskImageDetailFilterSensitiveLog;
const DiskImageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Image && { Image: (0, exports.DiskImageDetailFilterSensitiveLog)(obj.Image) }),
});
exports.DiskImageFilterSensitiveLog = DiskImageFilterSensitiveLog;
const UserDataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UserDataFilterSensitiveLog = UserDataFilterSensitiveLog;
const ImportInstanceLaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithy_client_1.SENSITIVE_STRING }),
});
exports.ImportInstanceLaunchSpecificationFilterSensitiveLog = ImportInstanceLaunchSpecificationFilterSensitiveLog;
const ImportInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DiskImages && { DiskImages: obj.DiskImages.map((item) => (0, exports.DiskImageFilterSensitiveLog)(item)) }),
    ...(obj.LaunchSpecification && {
        LaunchSpecification: (0, exports.ImportInstanceLaunchSpecificationFilterSensitiveLog)(obj.LaunchSpecification),
    }),
});
exports.ImportInstanceRequestFilterSensitiveLog = ImportInstanceRequestFilterSensitiveLog;
const ImportInstanceResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConversionTask && { ConversionTask: (0, models_3_1.ConversionTaskFilterSensitiveLog)(obj.ConversionTask) }),
});
exports.ImportInstanceResultFilterSensitiveLog = ImportInstanceResultFilterSensitiveLog;
