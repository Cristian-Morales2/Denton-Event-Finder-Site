"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = exports.DescribeSpotInstanceRequestsResultFilterSensitiveLog = exports.SpotInstanceRequestFilterSensitiveLog = exports.LaunchSpecificationFilterSensitiveLog = exports.DescribeSpotFleetRequestsResponseFilterSensitiveLog = exports.SpotFleetRequestConfigFilterSensitiveLog = exports.SpotFleetRequestConfigDataFilterSensitiveLog = exports.SpotFleetLaunchSpecificationFilterSensitiveLog = exports.DescribeLaunchTemplateVersionsResultFilterSensitiveLog = exports.VolumeAttributeName = exports.VerifiedAccessLogDeliveryStatusCode = exports.SpotInstanceState = exports.ReplacementStrategy = exports.OnDemandAllocationStrategy = exports.ExcessCapacityTerminationPolicy = exports.EventType = exports.TieringOperationStatus = exports.SnapshotAttributeName = exports.ReservedInstanceState = exports.Scope = exports.RecurringChargeFrequency = exports.RIProductDescription = exports.OfferingTypeValues = exports.OfferingClassType = exports.NetworkInterfaceAttribute = exports.AnalysisStatus = exports.FindingsFound = exports.MoveStatus = exports.UsageClassType = exports.RootDeviceType = exports.BootModeType = exports.SupportedAdditionalProcessorFeature = exports.ArchitectureType = exports.PlacementGroupStrategy = exports.EnaSupport = exports.EphemeralNvmeSupport = exports.InstanceStorageEncryptionSupport = exports.DiskType = exports.InstanceTypeHypervisor = exports.EbsNvmeSupport = exports.EbsEncryptionSupport = exports.EbsOptimizedSupport = exports.LocationType = exports.SummaryStatus = exports.StatusType = exports.StatusName = exports.EventCode = exports.InstanceStateName = exports.MonitoringState = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("./models_0");
const models_1_1 = require("./models_1");
exports.MonitoringState = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    pending: "pending",
};
exports.InstanceStateName = {
    pending: "pending",
    running: "running",
    shutting_down: "shutting-down",
    stopped: "stopped",
    stopping: "stopping",
    terminated: "terminated",
};
exports.EventCode = {
    instance_reboot: "instance-reboot",
    instance_retirement: "instance-retirement",
    instance_stop: "instance-stop",
    system_maintenance: "system-maintenance",
    system_reboot: "system-reboot",
};
exports.StatusName = {
    reachability: "reachability",
};
exports.StatusType = {
    failed: "failed",
    initializing: "initializing",
    insufficient_data: "insufficient-data",
    passed: "passed",
};
exports.SummaryStatus = {
    impaired: "impaired",
    initializing: "initializing",
    insufficient_data: "insufficient-data",
    not_applicable: "not-applicable",
    ok: "ok",
};
exports.LocationType = {
    availability_zone: "availability-zone",
    availability_zone_id: "availability-zone-id",
    region: "region",
};
exports.EbsOptimizedSupport = {
    default: "default",
    supported: "supported",
    unsupported: "unsupported",
};
exports.EbsEncryptionSupport = {
    supported: "supported",
    unsupported: "unsupported",
};
exports.EbsNvmeSupport = {
    REQUIRED: "required",
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
exports.InstanceTypeHypervisor = {
    NITRO: "nitro",
    XEN: "xen",
};
exports.DiskType = {
    hdd: "hdd",
    ssd: "ssd",
};
exports.InstanceStorageEncryptionSupport = {
    required: "required",
    unsupported: "unsupported",
};
exports.EphemeralNvmeSupport = {
    REQUIRED: "required",
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
exports.EnaSupport = {
    required: "required",
    supported: "supported",
    unsupported: "unsupported",
};
exports.PlacementGroupStrategy = {
    cluster: "cluster",
    partition: "partition",
    spread: "spread",
};
exports.ArchitectureType = {
    arm64: "arm64",
    arm64_mac: "arm64_mac",
    i386: "i386",
    x86_64: "x86_64",
    x86_64_mac: "x86_64_mac",
};
exports.SupportedAdditionalProcessorFeature = {
    AMD_SEV_SNP: "amd-sev-snp",
};
exports.BootModeType = {
    legacy_bios: "legacy-bios",
    uefi: "uefi",
};
exports.RootDeviceType = {
    ebs: "ebs",
    instance_store: "instance-store",
};
exports.UsageClassType = {
    on_demand: "on-demand",
    spot: "spot",
};
exports.MoveStatus = {
    movingToVpc: "movingToVpc",
    restoringToClassic: "restoringToClassic",
};
exports.FindingsFound = {
    false: "false",
    true: "true",
    unknown: "unknown",
};
exports.AnalysisStatus = {
    failed: "failed",
    running: "running",
    succeeded: "succeeded",
};
exports.NetworkInterfaceAttribute = {
    attachment: "attachment",
    description: "description",
    groupSet: "groupSet",
    sourceDestCheck: "sourceDestCheck",
};
exports.OfferingClassType = {
    CONVERTIBLE: "convertible",
    STANDARD: "standard",
};
exports.OfferingTypeValues = {
    All_Upfront: "All Upfront",
    Heavy_Utilization: "Heavy Utilization",
    Light_Utilization: "Light Utilization",
    Medium_Utilization: "Medium Utilization",
    No_Upfront: "No Upfront",
    Partial_Upfront: "Partial Upfront",
};
exports.RIProductDescription = {
    Linux_UNIX: "Linux/UNIX",
    Linux_UNIX_Amazon_VPC_: "Linux/UNIX (Amazon VPC)",
    Windows: "Windows",
    Windows_Amazon_VPC_: "Windows (Amazon VPC)",
};
exports.RecurringChargeFrequency = {
    Hourly: "Hourly",
};
exports.Scope = {
    AVAILABILITY_ZONE: "Availability Zone",
    REGIONAL: "Region",
};
exports.ReservedInstanceState = {
    active: "active",
    payment_failed: "payment-failed",
    payment_pending: "payment-pending",
    queued: "queued",
    queued_deleted: "queued-deleted",
    retired: "retired",
};
exports.SnapshotAttributeName = {
    createVolumePermission: "createVolumePermission",
    productCodes: "productCodes",
};
exports.TieringOperationStatus = {
    archival_completed: "archival-completed",
    archival_failed: "archival-failed",
    archival_in_progress: "archival-in-progress",
    permanent_restore_completed: "permanent-restore-completed",
    permanent_restore_failed: "permanent-restore-failed",
    permanent_restore_in_progress: "permanent-restore-in-progress",
    temporary_restore_completed: "temporary-restore-completed",
    temporary_restore_failed: "temporary-restore-failed",
    temporary_restore_in_progress: "temporary-restore-in-progress",
};
exports.EventType = {
    BATCH_CHANGE: "fleetRequestChange",
    ERROR: "error",
    INFORMATION: "information",
    INSTANCE_CHANGE: "instanceChange",
};
exports.ExcessCapacityTerminationPolicy = {
    DEFAULT: "default",
    NO_TERMINATION: "noTermination",
};
exports.OnDemandAllocationStrategy = {
    LOWEST_PRICE: "lowestPrice",
    PRIORITIZED: "prioritized",
};
exports.ReplacementStrategy = {
    LAUNCH: "launch",
    LAUNCH_BEFORE_TERMINATE: "launch-before-terminate",
};
exports.SpotInstanceState = {
    active: "active",
    cancelled: "cancelled",
    closed: "closed",
    failed: "failed",
    open: "open",
};
exports.VerifiedAccessLogDeliveryStatusCode = {
    FAILED: "failed",
    SUCCESS: "success",
};
exports.VolumeAttributeName = {
    autoEnableIO: "autoEnableIO",
    productCodes: "productCodes",
};
const DescribeLaunchTemplateVersionsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateVersions && {
        LaunchTemplateVersions: obj.LaunchTemplateVersions.map((item) => (0, models_1_1.LaunchTemplateVersionFilterSensitiveLog)(item)),
    }),
});
exports.DescribeLaunchTemplateVersionsResultFilterSensitiveLog = DescribeLaunchTemplateVersionsResultFilterSensitiveLog;
const SpotFleetLaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithy_client_1.SENSITIVE_STRING }),
});
exports.SpotFleetLaunchSpecificationFilterSensitiveLog = SpotFleetLaunchSpecificationFilterSensitiveLog;
const SpotFleetRequestConfigDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchSpecifications && {
        LaunchSpecifications: obj.LaunchSpecifications.map((item) => (0, exports.SpotFleetLaunchSpecificationFilterSensitiveLog)(item)),
    }),
});
exports.SpotFleetRequestConfigDataFilterSensitiveLog = SpotFleetRequestConfigDataFilterSensitiveLog;
const SpotFleetRequestConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SpotFleetRequestConfig && {
        SpotFleetRequestConfig: (0, exports.SpotFleetRequestConfigDataFilterSensitiveLog)(obj.SpotFleetRequestConfig),
    }),
});
exports.SpotFleetRequestConfigFilterSensitiveLog = SpotFleetRequestConfigFilterSensitiveLog;
const DescribeSpotFleetRequestsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeSpotFleetRequestsResponseFilterSensitiveLog = DescribeSpotFleetRequestsResponseFilterSensitiveLog;
const LaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithy_client_1.SENSITIVE_STRING }),
});
exports.LaunchSpecificationFilterSensitiveLog = LaunchSpecificationFilterSensitiveLog;
const SpotInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchSpecification && {
        LaunchSpecification: (0, exports.LaunchSpecificationFilterSensitiveLog)(obj.LaunchSpecification),
    }),
});
exports.SpotInstanceRequestFilterSensitiveLog = SpotInstanceRequestFilterSensitiveLog;
const DescribeSpotInstanceRequestsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SpotInstanceRequests && {
        SpotInstanceRequests: obj.SpotInstanceRequests.map((item) => (0, exports.SpotInstanceRequestFilterSensitiveLog)(item)),
    }),
});
exports.DescribeSpotInstanceRequestsResultFilterSensitiveLog = DescribeSpotInstanceRequestsResultFilterSensitiveLog;
const DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProviders && {
        VerifiedAccessTrustProviders: obj.VerifiedAccessTrustProviders.map((item) => (0, models_0_1.VerifiedAccessTrustProviderFilterSensitiveLog)(item)),
    }),
});
exports.DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog;
