"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceInterruptionBehavior = exports.MarketType = exports.ShutdownBehavior = exports.AmdSevSnpSpecification = exports.CapacityReservationPreference = exports.KeyType = exports.KeyFormat = exports.IpamScopeState = exports.IpamResourceDiscoveryState = exports.IpamPoolState = exports.IpamScopeType = exports.IpamPoolPublicIpSource = exports.IpamPoolAwsService = exports.IpamState = exports.ExportTaskState = exports.ExportEnvironment = exports.DiskImageFormat = exports.ContainerFormat = exports.VolumeType = exports.TrafficType = exports.FlowLogsResourceType = exports.LogDestinationType = exports.DestinationFileFormat = exports.PlatformValues = exports.InstanceLifecycle = exports.FleetType = exports.TargetCapacityUnitType = exports.DefaultTargetCapacityType = exports.FleetReplacementStrategy = exports.SpotInstanceInterruptionBehavior = exports.SpotAllocationStrategy = exports.FleetCapacityReservationUsageStrategy = exports.FleetOnDemandAllocationStrategy = exports.LocalStorageType = exports.LocalStorage = exports.InstanceGeneration = exports.CpuManufacturer = exports.BurstablePerformance = exports.BareMetal = exports.FleetExcessCapacityTerminationPolicy = exports.VpcState = exports.Tenancy = exports.SubnetState = exports.HostnameType = exports.GatewayType = exports.ClientVpnRouteStatusCode = exports.ClientVpnEndpointStatusCode = exports.TransportProtocol = exports.SelfServicePortal = exports.ClientVpnAuthenticationType = void 0;
exports.CreateLaunchTemplateVersionResultFilterSensitiveLog = exports.LaunchTemplateVersionFilterSensitiveLog = exports.ResponseLaunchTemplateDataFilterSensitiveLog = exports.CreateLaunchTemplateVersionRequestFilterSensitiveLog = exports.CreateLaunchTemplateRequestFilterSensitiveLog = exports.RequestLaunchTemplateDataFilterSensitiveLog = exports.KeyPairFilterSensitiveLog = exports.ReplaceRootVolumeTaskState = exports.PlacementGroupState = exports.PlacementStrategy = exports.SpreadLevel = exports.NetworkInterfacePermissionStateCode = exports.InterfacePermissionType = exports.NetworkInterfaceStatus = exports.NetworkInterfaceType = exports.NetworkInterfaceCreationType = exports.RuleAction = exports.NatGatewayState = exports.ConnectivityType = exports.PrefixListState = exports.LocalGatewayRouteTableMode = exports.LocalGatewayRouteType = exports.LocalGatewayRouteState = exports.LaunchTemplateInstanceMetadataOptionsState = exports.LaunchTemplateInstanceMetadataTagsState = exports.LaunchTemplateHttpTokensState = exports.LaunchTemplateInstanceMetadataProtocolIpv6 = exports.LaunchTemplateInstanceMetadataEndpointState = exports.LaunchTemplateAutoRecoveryState = exports.SpotInstanceType = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
exports.ClientVpnAuthenticationType = {
    certificate_authentication: "certificate-authentication",
    directory_service_authentication: "directory-service-authentication",
    federated_authentication: "federated-authentication",
};
exports.SelfServicePortal = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.TransportProtocol = {
    tcp: "tcp",
    udp: "udp",
};
exports.ClientVpnEndpointStatusCode = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending_associate: "pending-associate",
};
exports.ClientVpnRouteStatusCode = {
    active: "active",
    creating: "creating",
    deleting: "deleting",
    failed: "failed",
};
exports.GatewayType = {
    ipsec_1: "ipsec.1",
};
exports.HostnameType = {
    ip_name: "ip-name",
    resource_name: "resource-name",
};
exports.SubnetState = {
    available: "available",
    pending: "pending",
};
exports.Tenancy = {
    dedicated: "dedicated",
    default: "default",
    host: "host",
};
exports.VpcState = {
    available: "available",
    pending: "pending",
};
exports.FleetExcessCapacityTerminationPolicy = {
    NO_TERMINATION: "no-termination",
    TERMINATION: "termination",
};
exports.BareMetal = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
exports.BurstablePerformance = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
exports.CpuManufacturer = {
    AMAZON_WEB_SERVICES: "amazon-web-services",
    AMD: "amd",
    INTEL: "intel",
};
exports.InstanceGeneration = {
    CURRENT: "current",
    PREVIOUS: "previous",
};
exports.LocalStorage = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
exports.LocalStorageType = {
    HDD: "hdd",
    SSD: "ssd",
};
exports.FleetOnDemandAllocationStrategy = {
    LOWEST_PRICE: "lowest-price",
    PRIORITIZED: "prioritized",
};
exports.FleetCapacityReservationUsageStrategy = {
    USE_CAPACITY_RESERVATIONS_FIRST: "use-capacity-reservations-first",
};
exports.SpotAllocationStrategy = {
    CAPACITY_OPTIMIZED: "capacity-optimized",
    CAPACITY_OPTIMIZED_PRIORITIZED: "capacity-optimized-prioritized",
    DIVERSIFIED: "diversified",
    LOWEST_PRICE: "lowest-price",
    PRICE_CAPACITY_OPTIMIZED: "price-capacity-optimized",
};
exports.SpotInstanceInterruptionBehavior = {
    hibernate: "hibernate",
    stop: "stop",
    terminate: "terminate",
};
exports.FleetReplacementStrategy = {
    LAUNCH: "launch",
    LAUNCH_BEFORE_TERMINATE: "launch-before-terminate",
};
exports.DefaultTargetCapacityType = {
    ON_DEMAND: "on-demand",
    SPOT: "spot",
};
exports.TargetCapacityUnitType = {
    MEMORY_MIB: "memory-mib",
    UNITS: "units",
    VCPU: "vcpu",
};
exports.FleetType = {
    INSTANT: "instant",
    MAINTAIN: "maintain",
    REQUEST: "request",
};
exports.InstanceLifecycle = {
    ON_DEMAND: "on-demand",
    SPOT: "spot",
};
exports.PlatformValues = {
    Windows: "Windows",
};
exports.DestinationFileFormat = {
    parquet: "parquet",
    plain_text: "plain-text",
};
exports.LogDestinationType = {
    cloud_watch_logs: "cloud-watch-logs",
    kinesis_data_firehose: "kinesis-data-firehose",
    s3: "s3",
};
exports.FlowLogsResourceType = {
    NetworkInterface: "NetworkInterface",
    Subnet: "Subnet",
    TransitGateway: "TransitGateway",
    TransitGatewayAttachment: "TransitGatewayAttachment",
    VPC: "VPC",
};
exports.TrafficType = {
    ACCEPT: "ACCEPT",
    ALL: "ALL",
    REJECT: "REJECT",
};
exports.VolumeType = {
    gp2: "gp2",
    gp3: "gp3",
    io1: "io1",
    io2: "io2",
    sc1: "sc1",
    st1: "st1",
    standard: "standard",
};
exports.ContainerFormat = {
    ova: "ova",
};
exports.DiskImageFormat = {
    RAW: "RAW",
    VHD: "VHD",
    VMDK: "VMDK",
};
exports.ExportEnvironment = {
    citrix: "citrix",
    microsoft: "microsoft",
    vmware: "vmware",
};
exports.ExportTaskState = {
    active: "active",
    cancelled: "cancelled",
    cancelling: "cancelling",
    completed: "completed",
};
exports.IpamState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    isolate_complete: "isolate-complete",
    isolate_in_progress: "isolate-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_in_progress: "restore-in-progress",
};
exports.IpamPoolAwsService = {
    ec2: "ec2",
};
exports.IpamPoolPublicIpSource = {
    amazon: "amazon",
    byoip: "byoip",
};
exports.IpamScopeType = {
    private: "private",
    public: "public",
};
exports.IpamPoolState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    isolate_complete: "isolate-complete",
    isolate_in_progress: "isolate-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_in_progress: "restore-in-progress",
};
exports.IpamResourceDiscoveryState = {
    CREATE_COMPLETE: "create-complete",
    CREATE_FAILED: "create-failed",
    CREATE_IN_PROGRESS: "create-in-progress",
    DELETE_COMPLETE: "delete-complete",
    DELETE_FAILED: "delete-failed",
    DELETE_IN_PROGRESS: "delete-in-progress",
    ISOLATE_COMPLETE: "isolate-complete",
    ISOLATE_IN_PROGRESS: "isolate-in-progress",
    MODIFY_COMPLETE: "modify-complete",
    MODIFY_FAILED: "modify-failed",
    MODIFY_IN_PROGRESS: "modify-in-progress",
    RESTORE_IN_PROGRESS: "restore-in-progress",
};
exports.IpamScopeState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    isolate_complete: "isolate-complete",
    isolate_in_progress: "isolate-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_in_progress: "restore-in-progress",
};
exports.KeyFormat = {
    pem: "pem",
    ppk: "ppk",
};
exports.KeyType = {
    ed25519: "ed25519",
    rsa: "rsa",
};
exports.CapacityReservationPreference = {
    none: "none",
    open: "open",
};
exports.AmdSevSnpSpecification = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.ShutdownBehavior = {
    stop: "stop",
    terminate: "terminate",
};
exports.MarketType = {
    spot: "spot",
};
exports.InstanceInterruptionBehavior = {
    hibernate: "hibernate",
    stop: "stop",
    terminate: "terminate",
};
exports.SpotInstanceType = {
    one_time: "one-time",
    persistent: "persistent",
};
exports.LaunchTemplateAutoRecoveryState = {
    default: "default",
    disabled: "disabled",
};
exports.LaunchTemplateInstanceMetadataEndpointState = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.LaunchTemplateInstanceMetadataProtocolIpv6 = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.LaunchTemplateHttpTokensState = {
    optional: "optional",
    required: "required",
};
exports.LaunchTemplateInstanceMetadataTagsState = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.LaunchTemplateInstanceMetadataOptionsState = {
    applied: "applied",
    pending: "pending",
};
exports.LocalGatewayRouteState = {
    active: "active",
    blackhole: "blackhole",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.LocalGatewayRouteType = {
    propagated: "propagated",
    static: "static",
};
exports.LocalGatewayRouteTableMode = {
    coip: "coip",
    direct_vpc_routing: "direct-vpc-routing",
};
exports.PrefixListState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_complete: "restore-complete",
    restore_failed: "restore-failed",
    restore_in_progress: "restore-in-progress",
};
exports.ConnectivityType = {
    PRIVATE: "private",
    PUBLIC: "public",
};
exports.NatGatewayState = {
    AVAILABLE: "available",
    DELETED: "deleted",
    DELETING: "deleting",
    FAILED: "failed",
    PENDING: "pending",
};
exports.RuleAction = {
    allow: "allow",
    deny: "deny",
};
exports.NetworkInterfaceCreationType = {
    branch: "branch",
    efa: "efa",
    trunk: "trunk",
};
exports.NetworkInterfaceType = {
    api_gateway_managed: "api_gateway_managed",
    aws_codestar_connections_managed: "aws_codestar_connections_managed",
    branch: "branch",
    efa: "efa",
    gateway_load_balancer: "gateway_load_balancer",
    gateway_load_balancer_endpoint: "gateway_load_balancer_endpoint",
    global_accelerator_managed: "global_accelerator_managed",
    interface: "interface",
    iot_rules_managed: "iot_rules_managed",
    lambda: "lambda",
    load_balancer: "load_balancer",
    natGateway: "natGateway",
    network_load_balancer: "network_load_balancer",
    quicksight: "quicksight",
    transit_gateway: "transit_gateway",
    trunk: "trunk",
    vpc_endpoint: "vpc_endpoint",
};
exports.NetworkInterfaceStatus = {
    associated: "associated",
    attaching: "attaching",
    available: "available",
    detaching: "detaching",
    in_use: "in-use",
};
exports.InterfacePermissionType = {
    EIP_ASSOCIATE: "EIP-ASSOCIATE",
    INSTANCE_ATTACH: "INSTANCE-ATTACH",
};
exports.NetworkInterfacePermissionStateCode = {
    granted: "granted",
    pending: "pending",
    revoked: "revoked",
    revoking: "revoking",
};
exports.SpreadLevel = {
    host: "host",
    rack: "rack",
};
exports.PlacementStrategy = {
    cluster: "cluster",
    partition: "partition",
    spread: "spread",
};
exports.PlacementGroupState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.ReplaceRootVolumeTaskState = {
    failed: "failed",
    failed_detached: "failed-detached",
    failing: "failing",
    in_progress: "in-progress",
    pending: "pending",
    succeeded: "succeeded",
};
const KeyPairFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KeyMaterial && { KeyMaterial: smithy_client_1.SENSITIVE_STRING }),
});
exports.KeyPairFilterSensitiveLog = KeyPairFilterSensitiveLog;
const RequestLaunchTemplateDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithy_client_1.SENSITIVE_STRING }),
});
exports.RequestLaunchTemplateDataFilterSensitiveLog = RequestLaunchTemplateDataFilterSensitiveLog;
const CreateLaunchTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: (0, exports.RequestLaunchTemplateDataFilterSensitiveLog)(obj.LaunchTemplateData),
    }),
});
exports.CreateLaunchTemplateRequestFilterSensitiveLog = CreateLaunchTemplateRequestFilterSensitiveLog;
const CreateLaunchTemplateVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: (0, exports.RequestLaunchTemplateDataFilterSensitiveLog)(obj.LaunchTemplateData),
    }),
});
exports.CreateLaunchTemplateVersionRequestFilterSensitiveLog = CreateLaunchTemplateVersionRequestFilterSensitiveLog;
const ResponseLaunchTemplateDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithy_client_1.SENSITIVE_STRING }),
});
exports.ResponseLaunchTemplateDataFilterSensitiveLog = ResponseLaunchTemplateDataFilterSensitiveLog;
const LaunchTemplateVersionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: (0, exports.ResponseLaunchTemplateDataFilterSensitiveLog)(obj.LaunchTemplateData),
    }),
});
exports.LaunchTemplateVersionFilterSensitiveLog = LaunchTemplateVersionFilterSensitiveLog;
const CreateLaunchTemplateVersionResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateVersion && {
        LaunchTemplateVersion: (0, exports.LaunchTemplateVersionFilterSensitiveLog)(obj.LaunchTemplateVersion),
    }),
});
exports.CreateLaunchTemplateVersionResultFilterSensitiveLog = CreateLaunchTemplateVersionResultFilterSensitiveLog;
