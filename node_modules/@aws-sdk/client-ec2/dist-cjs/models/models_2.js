"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnStaticRouteSource = exports.GatewayAssociationState = exports.TunnelInsideIpVersion = exports.ServiceConnectivityType = exports.ServiceType = exports.ServiceState = exports.DnsNameState = exports.PayerResponsibility = exports.ConnectionNotificationType = exports.ConnectionNotificationState = exports.State = exports.VpcEndpointType = exports.IpAddressType = exports.DnsRecordIpType = exports.VolumeState = exports.VerifiedAccessEndpointStatusCode = exports.VerifiedAccessEndpointProtocol = exports.VerifiedAccessEndpointType = exports.VerifiedAccessEndpointAttachmentType = exports.TransitGatewayRouteTableAnnouncementState = exports.TransitGatewayRouteTableAnnouncementDirection = exports.TransitGatewayRouteTableState = exports.TransitGatewayRouteType = exports.TransitGatewayRouteState = exports.TransitGatewayPrefixListReferenceState = exports.TransitGatewayPolicyTableState = exports.TransitGatewayMulticastDomainState = exports.StaticSourcesSupportValue = exports.Igmpv2SupportValue = exports.AutoAcceptSharedAssociationsValue = exports.TransitGatewayConnectPeerState = exports.BgpStatus = exports.ProtocolValue = exports.TransitGatewayState = exports.VpnEcmpSupportValue = exports.MulticastSupportValue = exports.DefaultRouteTablePropagationValue = exports.DefaultRouteTableAssociationValue = exports.AutoAcceptSharedAttachmentsValue = exports.TrafficMirrorTargetType = exports.TrafficMirrorNetworkService = exports.TrafficDirection = exports.TrafficMirrorRuleAction = exports.SubnetCidrReservationType = exports.DatafeedSubscriptionState = exports.CopyTagsFromSource = exports.StorageTier = exports.SnapshotState = exports.RouteState = exports.RouteOrigin = void 0;
exports.CreateVerifiedAccessTrustProviderResultFilterSensitiveLog = exports.CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog = exports.CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = exports.DeleteQueuedReservedInstancesErrorCode = exports.LaunchTemplateErrorCode = exports.DeleteFleetErrorCode = exports.FleetStateCode = exports.TelemetryStatus = exports.VpnState = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("./models_0");
exports.RouteOrigin = {
    CreateRoute: "CreateRoute",
    CreateRouteTable: "CreateRouteTable",
    EnableVgwRoutePropagation: "EnableVgwRoutePropagation",
};
exports.RouteState = {
    active: "active",
    blackhole: "blackhole",
};
exports.SnapshotState = {
    completed: "completed",
    error: "error",
    pending: "pending",
    recoverable: "recoverable",
    recovering: "recovering",
};
exports.StorageTier = {
    archive: "archive",
    standard: "standard",
};
exports.CopyTagsFromSource = {
    volume: "volume",
};
exports.DatafeedSubscriptionState = {
    Active: "Active",
    Inactive: "Inactive",
};
exports.SubnetCidrReservationType = {
    explicit: "explicit",
    prefix: "prefix",
};
exports.TrafficMirrorRuleAction = {
    accept: "accept",
    reject: "reject",
};
exports.TrafficDirection = {
    egress: "egress",
    ingress: "ingress",
};
exports.TrafficMirrorNetworkService = {
    amazon_dns: "amazon-dns",
};
exports.TrafficMirrorTargetType = {
    gateway_load_balancer_endpoint: "gateway-load-balancer-endpoint",
    network_interface: "network-interface",
    network_load_balancer: "network-load-balancer",
};
exports.AutoAcceptSharedAttachmentsValue = {
    disable: "disable",
    enable: "enable",
};
exports.DefaultRouteTableAssociationValue = {
    disable: "disable",
    enable: "enable",
};
exports.DefaultRouteTablePropagationValue = {
    disable: "disable",
    enable: "enable",
};
exports.MulticastSupportValue = {
    disable: "disable",
    enable: "enable",
};
exports.VpnEcmpSupportValue = {
    disable: "disable",
    enable: "enable",
};
exports.TransitGatewayState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    modifying: "modifying",
    pending: "pending",
};
exports.ProtocolValue = {
    gre: "gre",
};
exports.BgpStatus = {
    down: "down",
    up: "up",
};
exports.TransitGatewayConnectPeerState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.AutoAcceptSharedAssociationsValue = {
    disable: "disable",
    enable: "enable",
};
exports.Igmpv2SupportValue = {
    disable: "disable",
    enable: "enable",
};
exports.StaticSourcesSupportValue = {
    disable: "disable",
    enable: "enable",
};
exports.TransitGatewayMulticastDomainState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.TransitGatewayPolicyTableState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.TransitGatewayPrefixListReferenceState = {
    available: "available",
    deleting: "deleting",
    modifying: "modifying",
    pending: "pending",
};
exports.TransitGatewayRouteState = {
    active: "active",
    blackhole: "blackhole",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.TransitGatewayRouteType = {
    propagated: "propagated",
    static: "static",
};
exports.TransitGatewayRouteTableState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.TransitGatewayRouteTableAnnouncementDirection = {
    incoming: "incoming",
    outgoing: "outgoing",
};
exports.TransitGatewayRouteTableAnnouncementState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    failed: "failed",
    failing: "failing",
    pending: "pending",
};
exports.VerifiedAccessEndpointAttachmentType = {
    vpc: "vpc",
};
exports.VerifiedAccessEndpointType = {
    load_balancer: "load-balancer",
    network_interface: "network-interface",
};
exports.VerifiedAccessEndpointProtocol = {
    http: "http",
    https: "https",
};
exports.VerifiedAccessEndpointStatusCode = {
    active: "active",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
    updating: "updating",
};
exports.VolumeState = {
    available: "available",
    creating: "creating",
    deleted: "deleted",
    deleting: "deleting",
    error: "error",
    in_use: "in-use",
};
exports.DnsRecordIpType = {
    dualstack: "dualstack",
    ipv4: "ipv4",
    ipv6: "ipv6",
    service_defined: "service-defined",
};
exports.IpAddressType = {
    dualstack: "dualstack",
    ipv4: "ipv4",
    ipv6: "ipv6",
};
exports.VpcEndpointType = {
    Gateway: "Gateway",
    GatewayLoadBalancer: "GatewayLoadBalancer",
    Interface: "Interface",
};
exports.State = {
    Available: "Available",
    Deleted: "Deleted",
    Deleting: "Deleting",
    Expired: "Expired",
    Failed: "Failed",
    Pending: "Pending",
    PendingAcceptance: "PendingAcceptance",
    Rejected: "Rejected",
};
exports.ConnectionNotificationState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ConnectionNotificationType = {
    Topic: "Topic",
};
exports.PayerResponsibility = {
    ServiceOwner: "ServiceOwner",
};
exports.DnsNameState = {
    Failed: "failed",
    PendingVerification: "pendingVerification",
    Verified: "verified",
};
exports.ServiceState = {
    Available: "Available",
    Deleted: "Deleted",
    Deleting: "Deleting",
    Failed: "Failed",
    Pending: "Pending",
};
exports.ServiceType = {
    Gateway: "Gateway",
    GatewayLoadBalancer: "GatewayLoadBalancer",
    Interface: "Interface",
};
exports.ServiceConnectivityType = {
    ipv4: "ipv4",
    ipv6: "ipv6",
};
exports.TunnelInsideIpVersion = {
    ipv4: "ipv4",
    ipv6: "ipv6",
};
exports.GatewayAssociationState = {
    associated: "associated",
    associating: "associating",
    disassociating: "disassociating",
    not_associated: "not-associated",
};
exports.VpnStaticRouteSource = {
    Static: "Static",
};
exports.VpnState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
exports.TelemetryStatus = {
    DOWN: "DOWN",
    UP: "UP",
};
exports.FleetStateCode = {
    ACTIVE: "active",
    DELETED: "deleted",
    DELETED_RUNNING: "deleted_running",
    DELETED_TERMINATING_INSTANCES: "deleted_terminating",
    FAILED: "failed",
    MODIFYING: "modifying",
    SUBMITTED: "submitted",
};
exports.DeleteFleetErrorCode = {
    FLEET_ID_DOES_NOT_EXIST: "fleetIdDoesNotExist",
    FLEET_ID_MALFORMED: "fleetIdMalformed",
    FLEET_NOT_IN_DELETABLE_STATE: "fleetNotInDeletableState",
    UNEXPECTED_ERROR: "unexpectedError",
};
exports.LaunchTemplateErrorCode = {
    LAUNCH_TEMPLATE_ID_DOES_NOT_EXIST: "launchTemplateIdDoesNotExist",
    LAUNCH_TEMPLATE_ID_MALFORMED: "launchTemplateIdMalformed",
    LAUNCH_TEMPLATE_NAME_DOES_NOT_EXIST: "launchTemplateNameDoesNotExist",
    LAUNCH_TEMPLATE_NAME_MALFORMED: "launchTemplateNameMalformed",
    LAUNCH_TEMPLATE_VERSION_DOES_NOT_EXIST: "launchTemplateVersionDoesNotExist",
    UNEXPECTED_ERROR: "unexpectedError",
};
exports.DeleteQueuedReservedInstancesErrorCode = {
    RESERVED_INSTANCES_ID_INVALID: "reserved-instances-id-invalid",
    RESERVED_INSTANCES_NOT_IN_QUEUED_STATE: "reserved-instances-not-in-queued-state",
    UNEXPECTED_ERROR: "unexpected-error",
};
const CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithy_client_1.SENSITIVE_STRING }),
});
exports.CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog;
const CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OidcOptions && {
        OidcOptions: (0, exports.CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog)(obj.OidcOptions),
    }),
});
exports.CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog = CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog;
const CreateVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: (0, models_0_1.VerifiedAccessTrustProviderFilterSensitiveLog)(obj.VerifiedAccessTrustProvider),
    }),
});
exports.CreateVerifiedAccessTrustProviderResultFilterSensitiveLog = CreateVerifiedAccessTrustProviderResultFilterSensitiveLog;
