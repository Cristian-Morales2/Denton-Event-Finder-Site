"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionTaskFilterSensitiveLog = exports.ImportVolumeTaskDetailsFilterSensitiveLog = exports.ImportInstanceTaskDetailsFilterSensitiveLog = exports.ImportInstanceVolumeDetailItemFilterSensitiveLog = exports.DiskImageDescriptionFilterSensitiveLog = exports.DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog = exports.InstanceMetadataOptionsState = exports.InstanceMetadataTagsState = exports.HttpTokensState = exports.InstanceMetadataProtocolState = exports.InstanceMetadataEndpointState = exports.InstanceAutoRecoveryState = exports.InstanceLifecycleType = exports.InstanceBootModeValues = exports.InstanceAttributeName = exports.VirtualizationType = exports.TpmSupportValues = exports.ImageState = exports.DeviceType = exports.ImdsSupportValues = exports.ImageTypeValues = exports.HypervisorType = exports.BootModeValues = exports.ArchitectureValues = exports.ImageAttributeName = exports.ReservationState = exports.PaymentOption = exports.FpgaImageStateCode = exports.ProductCodeValues = exports.PermissionGroup = exports.FpgaImageAttributeName = exports.FleetActivityStatus = exports.FleetEventType = exports.FastSnapshotRestoreStateCode = exports.FastLaunchStateCode = exports.FastLaunchResourceType = exports.ElasticGpuState = exports.ElasticGpuStatus = exports.ConversionTaskState = exports.VpnProtocol = exports.ClientVpnEndpointAttributeStatusCode = exports.AssociatedNetworkType = exports.ClientVpnConnectionStatusCode = exports.StatisticType = exports.PeriodType = exports.MetricType = exports.AvailabilityZoneState = exports.AvailabilityZoneOptInStatus = exports.IpamPoolCidrState = exports.IpamPoolCidrFailureCode = void 0;
exports.DescribeImportSnapshotTasksResultFilterSensitiveLog = exports.ImportSnapshotTaskFilterSensitiveLog = exports.SnapshotTaskDetailFilterSensitiveLog = exports.DescribeImportImageTasksResultFilterSensitiveLog = exports.ImportImageTaskFilterSensitiveLog = exports.SnapshotDetailFilterSensitiveLog = exports.DescribeConversionTasksResultFilterSensitiveLog = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("./models_0");
exports.IpamPoolCidrFailureCode = {
    cidr_not_available: "cidr-not-available",
    limit_exceeded: "limit-exceeded",
};
exports.IpamPoolCidrState = {
    deprovisioned: "deprovisioned",
    failed_deprovision: "failed-deprovision",
    failed_import: "failed-import",
    failed_provision: "failed-provision",
    pending_deprovision: "pending-deprovision",
    pending_import: "pending-import",
    pending_provision: "pending-provision",
    provisioned: "provisioned",
};
exports.AvailabilityZoneOptInStatus = {
    not_opted_in: "not-opted-in",
    opt_in_not_required: "opt-in-not-required",
    opted_in: "opted-in",
};
exports.AvailabilityZoneState = {
    available: "available",
    impaired: "impaired",
    information: "information",
    unavailable: "unavailable",
};
exports.MetricType = {
    aggregate_latency: "aggregate-latency",
};
exports.PeriodType = {
    fifteen_minutes: "fifteen-minutes",
    five_minutes: "five-minutes",
    one_day: "one-day",
    one_hour: "one-hour",
    one_week: "one-week",
    three_hours: "three-hours",
};
exports.StatisticType = {
    p50: "p50",
};
exports.ClientVpnConnectionStatusCode = {
    active: "active",
    failed_to_terminate: "failed-to-terminate",
    terminated: "terminated",
    terminating: "terminating",
};
exports.AssociatedNetworkType = {
    vpc: "vpc",
};
exports.ClientVpnEndpointAttributeStatusCode = {
    applied: "applied",
    applying: "applying",
};
exports.VpnProtocol = {
    openvpn: "openvpn",
};
exports.ConversionTaskState = {
    active: "active",
    cancelled: "cancelled",
    cancelling: "cancelling",
    completed: "completed",
};
exports.ElasticGpuStatus = {
    Impaired: "IMPAIRED",
    Ok: "OK",
};
exports.ElasticGpuState = {
    Attached: "ATTACHED",
};
exports.FastLaunchResourceType = {
    SNAPSHOT: "snapshot",
};
exports.FastLaunchStateCode = {
    disabling: "disabling",
    disabling_failed: "disabling-failed",
    enabled: "enabled",
    enabled_failed: "enabled-failed",
    enabling: "enabling",
    enabling_failed: "enabling-failed",
};
exports.FastSnapshotRestoreStateCode = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    enabling: "enabling",
    optimizing: "optimizing",
};
exports.FleetEventType = {
    FLEET_CHANGE: "fleet-change",
    INSTANCE_CHANGE: "instance-change",
    SERVICE_ERROR: "service-error",
};
exports.FleetActivityStatus = {
    ERROR: "error",
    FULFILLED: "fulfilled",
    PENDING_FULFILLMENT: "pending_fulfillment",
    PENDING_TERMINATION: "pending_termination",
};
exports.FpgaImageAttributeName = {
    description: "description",
    loadPermission: "loadPermission",
    name: "name",
    productCodes: "productCodes",
};
exports.PermissionGroup = {
    all: "all",
};
exports.ProductCodeValues = {
    devpay: "devpay",
    marketplace: "marketplace",
};
exports.FpgaImageStateCode = {
    available: "available",
    failed: "failed",
    pending: "pending",
    unavailable: "unavailable",
};
exports.PaymentOption = {
    ALL_UPFRONT: "AllUpfront",
    NO_UPFRONT: "NoUpfront",
    PARTIAL_UPFRONT: "PartialUpfront",
};
exports.ReservationState = {
    ACTIVE: "active",
    PAYMENT_FAILED: "payment-failed",
    PAYMENT_PENDING: "payment-pending",
    RETIRED: "retired",
};
exports.ImageAttributeName = {
    blockDeviceMapping: "blockDeviceMapping",
    bootMode: "bootMode",
    description: "description",
    imdsSupport: "imdsSupport",
    kernel: "kernel",
    lastLaunchedTime: "lastLaunchedTime",
    launchPermission: "launchPermission",
    productCodes: "productCodes",
    ramdisk: "ramdisk",
    sriovNetSupport: "sriovNetSupport",
    tpmSupport: "tpmSupport",
    uefiData: "uefiData",
};
exports.ArchitectureValues = {
    arm64: "arm64",
    arm64_mac: "arm64_mac",
    i386: "i386",
    x86_64: "x86_64",
    x86_64_mac: "x86_64_mac",
};
exports.BootModeValues = {
    legacy_bios: "legacy-bios",
    uefi: "uefi",
    uefi_preferred: "uefi-preferred",
};
exports.HypervisorType = {
    ovm: "ovm",
    xen: "xen",
};
exports.ImageTypeValues = {
    kernel: "kernel",
    machine: "machine",
    ramdisk: "ramdisk",
};
exports.ImdsSupportValues = {
    v2_0: "v2.0",
};
exports.DeviceType = {
    ebs: "ebs",
    instance_store: "instance-store",
};
exports.ImageState = {
    available: "available",
    deregistered: "deregistered",
    error: "error",
    failed: "failed",
    invalid: "invalid",
    pending: "pending",
    transient: "transient",
};
exports.TpmSupportValues = {
    v2_0: "v2.0",
};
exports.VirtualizationType = {
    hvm: "hvm",
    paravirtual: "paravirtual",
};
exports.InstanceAttributeName = {
    blockDeviceMapping: "blockDeviceMapping",
    disableApiStop: "disableApiStop",
    disableApiTermination: "disableApiTermination",
    ebsOptimized: "ebsOptimized",
    enaSupport: "enaSupport",
    enclaveOptions: "enclaveOptions",
    groupSet: "groupSet",
    instanceInitiatedShutdownBehavior: "instanceInitiatedShutdownBehavior",
    instanceType: "instanceType",
    kernel: "kernel",
    productCodes: "productCodes",
    ramdisk: "ramdisk",
    rootDeviceName: "rootDeviceName",
    sourceDestCheck: "sourceDestCheck",
    sriovNetSupport: "sriovNetSupport",
    userData: "userData",
};
exports.InstanceBootModeValues = {
    legacy_bios: "legacy-bios",
    uefi: "uefi",
};
exports.InstanceLifecycleType = {
    scheduled: "scheduled",
    spot: "spot",
};
exports.InstanceAutoRecoveryState = {
    default: "default",
    disabled: "disabled",
};
exports.InstanceMetadataEndpointState = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.InstanceMetadataProtocolState = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.HttpTokensState = {
    optional: "optional",
    required: "required",
};
exports.InstanceMetadataTagsState = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.InstanceMetadataOptionsState = {
    applied: "applied",
    pending: "pending",
};
const DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: (0, models_0_1.VerifiedAccessTrustProviderFilterSensitiveLog)(obj.VerifiedAccessTrustProvider),
    }),
});
exports.DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog = DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog;
const DiskImageDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportManifestUrl && { ImportManifestUrl: smithy_client_1.SENSITIVE_STRING }),
});
exports.DiskImageDescriptionFilterSensitiveLog = DiskImageDescriptionFilterSensitiveLog;
const ImportInstanceVolumeDetailItemFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Image && { Image: (0, exports.DiskImageDescriptionFilterSensitiveLog)(obj.Image) }),
});
exports.ImportInstanceVolumeDetailItemFilterSensitiveLog = ImportInstanceVolumeDetailItemFilterSensitiveLog;
const ImportInstanceTaskDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Volumes && { Volumes: obj.Volumes.map((item) => (0, exports.ImportInstanceVolumeDetailItemFilterSensitiveLog)(item)) }),
});
exports.ImportInstanceTaskDetailsFilterSensitiveLog = ImportInstanceTaskDetailsFilterSensitiveLog;
const ImportVolumeTaskDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Image && { Image: (0, exports.DiskImageDescriptionFilterSensitiveLog)(obj.Image) }),
});
exports.ImportVolumeTaskDetailsFilterSensitiveLog = ImportVolumeTaskDetailsFilterSensitiveLog;
const ConversionTaskFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportInstance && { ImportInstance: (0, exports.ImportInstanceTaskDetailsFilterSensitiveLog)(obj.ImportInstance) }),
    ...(obj.ImportVolume && { ImportVolume: (0, exports.ImportVolumeTaskDetailsFilterSensitiveLog)(obj.ImportVolume) }),
});
exports.ConversionTaskFilterSensitiveLog = ConversionTaskFilterSensitiveLog;
const DescribeConversionTasksResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConversionTasks && {
        ConversionTasks: obj.ConversionTasks.map((item) => (0, exports.ConversionTaskFilterSensitiveLog)(item)),
    }),
});
exports.DescribeConversionTasksResultFilterSensitiveLog = DescribeConversionTasksResultFilterSensitiveLog;
const SnapshotDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithy_client_1.SENSITIVE_STRING }),
});
exports.SnapshotDetailFilterSensitiveLog = SnapshotDetailFilterSensitiveLog;
const ImportImageTaskFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnapshotDetails && {
        SnapshotDetails: obj.SnapshotDetails.map((item) => (0, exports.SnapshotDetailFilterSensitiveLog)(item)),
    }),
});
exports.ImportImageTaskFilterSensitiveLog = ImportImageTaskFilterSensitiveLog;
const DescribeImportImageTasksResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeImportImageTasksResultFilterSensitiveLog = DescribeImportImageTasksResultFilterSensitiveLog;
const SnapshotTaskDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithy_client_1.SENSITIVE_STRING }),
});
exports.SnapshotTaskDetailFilterSensitiveLog = SnapshotTaskDetailFilterSensitiveLog;
const ImportSnapshotTaskFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnapshotTaskDetail && { SnapshotTaskDetail: (0, exports.SnapshotTaskDetailFilterSensitiveLog)(obj.SnapshotTaskDetail) }),
});
exports.ImportSnapshotTaskFilterSensitiveLog = ImportSnapshotTaskFilterSensitiveLog;
const DescribeImportSnapshotTasksResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportSnapshotTasks && {
        ImportSnapshotTasks: obj.ImportSnapshotTasks.map((item) => (0, exports.ImportSnapshotTaskFilterSensitiveLog)(item)),
    }),
});
exports.DescribeImportSnapshotTasksResultFilterSensitiveLog = DescribeImportSnapshotTasksResultFilterSensitiveLog;
