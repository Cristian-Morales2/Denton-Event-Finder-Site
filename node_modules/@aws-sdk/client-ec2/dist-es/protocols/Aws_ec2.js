import { expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, strictParseFloat as __strictParseFloat, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, withBaseException, } from "@aws-sdk/smithy-client";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { XMLParser } from "fast-xml-parser";
import { v4 as generateIdempotencyToken } from "uuid";
import { EC2ServiceException as __BaseException } from "../models/EC2ServiceException";
export const se_AcceptAddressTransferCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptAddressTransferRequest(input, context),
        Action: "AcceptAddressTransfer",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AcceptReservedInstancesExchangeQuoteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptReservedInstancesExchangeQuoteRequest(input, context),
        Action: "AcceptReservedInstancesExchangeQuote",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptTransitGatewayMulticastDomainAssociationsRequest(input, context),
        Action: "AcceptTransitGatewayMulticastDomainAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AcceptTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "AcceptTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AcceptTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptTransitGatewayVpcAttachmentRequest(input, context),
        Action: "AcceptTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AcceptVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptVpcEndpointConnectionsRequest(input, context),
        Action: "AcceptVpcEndpointConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AcceptVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptVpcPeeringConnectionRequest(input, context),
        Action: "AcceptVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AdvertiseByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AdvertiseByoipCidrRequest(input, context),
        Action: "AdvertiseByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AllocateAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AllocateAddressRequest(input, context),
        Action: "AllocateAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AllocateHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AllocateHostsRequest(input, context),
        Action: "AllocateHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AllocateIpamPoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AllocateIpamPoolCidrRequest(input, context),
        Action: "AllocateIpamPoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ApplySecurityGroupsToClientVpnTargetNetworkRequest(input, context),
        Action: "ApplySecurityGroupsToClientVpnTargetNetwork",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssignIpv6AddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssignIpv6AddressesRequest(input, context),
        Action: "AssignIpv6Addresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssignPrivateIpAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssignPrivateIpAddressesRequest(input, context),
        Action: "AssignPrivateIpAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssignPrivateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssignPrivateNatGatewayAddressRequest(input, context),
        Action: "AssignPrivateNatGatewayAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateAddressRequest(input, context),
        Action: "AssociateAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateClientVpnTargetNetworkRequest(input, context),
        Action: "AssociateClientVpnTargetNetwork",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateDhcpOptionsRequest(input, context),
        Action: "AssociateDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateEnclaveCertificateIamRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateEnclaveCertificateIamRoleRequest(input, context),
        Action: "AssociateEnclaveCertificateIamRole",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateIamInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateIamInstanceProfileRequest(input, context),
        Action: "AssociateIamInstanceProfile",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateInstanceEventWindowRequest(input, context),
        Action: "AssociateInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateIpamResourceDiscoveryRequest(input, context),
        Action: "AssociateIpamResourceDiscovery",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateNatGatewayAddressRequest(input, context),
        Action: "AssociateNatGatewayAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateRouteTableRequest(input, context),
        Action: "AssociateRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateSubnetCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateSubnetCidrBlockRequest(input, context),
        Action: "AssociateSubnetCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTransitGatewayMulticastDomainRequest(input, context),
        Action: "AssociateTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTransitGatewayPolicyTableRequest(input, context),
        Action: "AssociateTransitGatewayPolicyTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTransitGatewayRouteTableRequest(input, context),
        Action: "AssociateTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateTrunkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTrunkInterfaceRequest(input, context),
        Action: "AssociateTrunkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateVpcCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateVpcCidrBlockRequest(input, context),
        Action: "AssociateVpcCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachClassicLinkVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachClassicLinkVpcRequest(input, context),
        Action: "AttachClassicLinkVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachInternetGatewayRequest(input, context),
        Action: "AttachInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachNetworkInterfaceRequest(input, context),
        Action: "AttachNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachVerifiedAccessTrustProviderRequest(input, context),
        Action: "AttachVerifiedAccessTrustProvider",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachVolumeRequest(input, context),
        Action: "AttachVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachVpnGatewayRequest(input, context),
        Action: "AttachVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AuthorizeClientVpnIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AuthorizeClientVpnIngressRequest(input, context),
        Action: "AuthorizeClientVpnIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AuthorizeSecurityGroupEgressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AuthorizeSecurityGroupEgressRequest(input, context),
        Action: "AuthorizeSecurityGroupEgress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AuthorizeSecurityGroupIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AuthorizeSecurityGroupIngressRequest(input, context),
        Action: "AuthorizeSecurityGroupIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BundleInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_BundleInstanceRequest(input, context),
        Action: "BundleInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelBundleTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelBundleTaskRequest(input, context),
        Action: "CancelBundleTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelCapacityReservationRequest(input, context),
        Action: "CancelCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelCapacityReservationFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelCapacityReservationFleetsRequest(input, context),
        Action: "CancelCapacityReservationFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelConversionTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelConversionRequest(input, context),
        Action: "CancelConversionTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelExportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelExportTaskRequest(input, context),
        Action: "CancelExportTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelImageLaunchPermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelImageLaunchPermissionRequest(input, context),
        Action: "CancelImageLaunchPermission",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelImportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelImportTaskRequest(input, context),
        Action: "CancelImportTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelReservedInstancesListingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelReservedInstancesListingRequest(input, context),
        Action: "CancelReservedInstancesListing",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelSpotFleetRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelSpotFleetRequestsRequest(input, context),
        Action: "CancelSpotFleetRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelSpotInstanceRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelSpotInstanceRequestsRequest(input, context),
        Action: "CancelSpotInstanceRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ConfirmProductInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ConfirmProductInstanceRequest(input, context),
        Action: "ConfirmProductInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CopyFpgaImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyFpgaImageRequest(input, context),
        Action: "CopyFpgaImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CopyImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyImageRequest(input, context),
        Action: "CopyImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CopySnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopySnapshotRequest(input, context),
        Action: "CopySnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCapacityReservationRequest(input, context),
        Action: "CreateCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCapacityReservationFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCapacityReservationFleetRequest(input, context),
        Action: "CreateCapacityReservationFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCarrierGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCarrierGatewayRequest(input, context),
        Action: "CreateCarrierGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateClientVpnEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateClientVpnEndpointRequest(input, context),
        Action: "CreateClientVpnEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateClientVpnRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateClientVpnRouteRequest(input, context),
        Action: "CreateClientVpnRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCoipCidrRequest(input, context),
        Action: "CreateCoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCoipPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCoipPoolRequest(input, context),
        Action: "CreateCoipPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCustomerGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCustomerGatewayRequest(input, context),
        Action: "CreateCustomerGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDefaultSubnetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDefaultSubnetRequest(input, context),
        Action: "CreateDefaultSubnet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDefaultVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDefaultVpcRequest(input, context),
        Action: "CreateDefaultVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDhcpOptionsRequest(input, context),
        Action: "CreateDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEgressOnlyInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateEgressOnlyInternetGatewayRequest(input, context),
        Action: "CreateEgressOnlyInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateFleetRequest(input, context),
        Action: "CreateFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFlowLogsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateFlowLogsRequest(input, context),
        Action: "CreateFlowLogs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFpgaImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateFpgaImageRequest(input, context),
        Action: "CreateFpgaImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateImageRequest(input, context),
        Action: "CreateImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInstanceEventWindowRequest(input, context),
        Action: "CreateInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInstanceExportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInstanceExportTaskRequest(input, context),
        Action: "CreateInstanceExportTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInternetGatewayRequest(input, context),
        Action: "CreateInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamRequest(input, context),
        Action: "CreateIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateIpamPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamPoolRequest(input, context),
        Action: "CreateIpamPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamResourceDiscoveryRequest(input, context),
        Action: "CreateIpamResourceDiscovery",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateIpamScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamScopeRequest(input, context),
        Action: "CreateIpamScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateKeyPairCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateKeyPairRequest(input, context),
        Action: "CreateKeyPair",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLaunchTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLaunchTemplateRequest(input, context),
        Action: "CreateLaunchTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLaunchTemplateVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLaunchTemplateVersionRequest(input, context),
        Action: "CreateLaunchTemplateVersion",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLocalGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteRequest(input, context),
        Action: "CreateLocalGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLocalGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteTableRequest(input, context),
        Action: "CreateLocalGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
        Action: "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteTableVpcAssociationRequest(input, context),
        Action: "CreateLocalGatewayRouteTableVpcAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateManagedPrefixListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateManagedPrefixListRequest(input, context),
        Action: "CreateManagedPrefixList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNatGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNatGatewayRequest(input, context),
        Action: "CreateNatGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNetworkAclCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkAclRequest(input, context),
        Action: "CreateNetworkAcl",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNetworkAclEntryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkAclEntryRequest(input, context),
        Action: "CreateNetworkAclEntry",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNetworkInsightsAccessScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInsightsAccessScopeRequest(input, context),
        Action: "CreateNetworkInsightsAccessScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNetworkInsightsPathCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInsightsPathRequest(input, context),
        Action: "CreateNetworkInsightsPath",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInterfaceRequest(input, context),
        Action: "CreateNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNetworkInterfacePermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInterfacePermissionRequest(input, context),
        Action: "CreateNetworkInterfacePermission",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePlacementGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePlacementGroupRequest(input, context),
        Action: "CreatePlacementGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePublicIpv4PoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePublicIpv4PoolRequest(input, context),
        Action: "CreatePublicIpv4Pool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateReplaceRootVolumeTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateReplaceRootVolumeTaskRequest(input, context),
        Action: "CreateReplaceRootVolumeTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateReservedInstancesListingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateReservedInstancesListingRequest(input, context),
        Action: "CreateReservedInstancesListing",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRestoreImageTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRestoreImageTaskRequest(input, context),
        Action: "CreateRestoreImageTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRouteRequest(input, context),
        Action: "CreateRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRouteTableRequest(input, context),
        Action: "CreateRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSecurityGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSecurityGroupRequest(input, context),
        Action: "CreateSecurityGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSnapshotRequest(input, context),
        Action: "CreateSnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSnapshotsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSnapshotsRequest(input, context),
        Action: "CreateSnapshots",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSpotDatafeedSubscriptionRequest(input, context),
        Action: "CreateSpotDatafeedSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStoreImageTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateStoreImageTaskRequest(input, context),
        Action: "CreateStoreImageTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSubnetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSubnetRequest(input, context),
        Action: "CreateSubnet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSubnetCidrReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSubnetCidrReservationRequest(input, context),
        Action: "CreateSubnetCidrReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTagsRequest(input, context),
        Action: "CreateTags",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrafficMirrorFilterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorFilterRequest(input, context),
        Action: "CreateTrafficMirrorFilter",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorFilterRuleRequest(input, context),
        Action: "CreateTrafficMirrorFilterRule",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrafficMirrorSessionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorSessionRequest(input, context),
        Action: "CreateTrafficMirrorSession",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrafficMirrorTargetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorTargetRequest(input, context),
        Action: "CreateTrafficMirrorTarget",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRequest(input, context),
        Action: "CreateTransitGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayConnectCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayConnectRequest(input, context),
        Action: "CreateTransitGatewayConnect",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayConnectPeerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayConnectPeerRequest(input, context),
        Action: "CreateTransitGatewayConnectPeer",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayMulticastDomainRequest(input, context),
        Action: "CreateTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "CreateTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayPolicyTableRequest(input, context),
        Action: "CreateTransitGatewayPolicyTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayPrefixListReferenceRequest(input, context),
        Action: "CreateTransitGatewayPrefixListReference",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRouteRequest(input, context),
        Action: "CreateTransitGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRouteTableRequest(input, context),
        Action: "CreateTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayRouteTableAnnouncementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRouteTableAnnouncementRequest(input, context),
        Action: "CreateTransitGatewayRouteTableAnnouncement",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayVpcAttachmentRequest(input, context),
        Action: "CreateTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVerifiedAccessEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessEndpointRequest(input, context),
        Action: "CreateVerifiedAccessEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVerifiedAccessGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessGroupRequest(input, context),
        Action: "CreateVerifiedAccessGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVerifiedAccessInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessInstanceRequest(input, context),
        Action: "CreateVerifiedAccessInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessTrustProviderRequest(input, context),
        Action: "CreateVerifiedAccessTrustProvider",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVolumeRequest(input, context),
        Action: "CreateVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcRequest(input, context),
        Action: "CreateVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcEndpointRequest(input, context),
        Action: "CreateVpcEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcEndpointConnectionNotificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcEndpointConnectionNotificationRequest(input, context),
        Action: "CreateVpcEndpointConnectionNotification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcEndpointServiceConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcEndpointServiceConfigurationRequest(input, context),
        Action: "CreateVpcEndpointServiceConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcPeeringConnectionRequest(input, context),
        Action: "CreateVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpnConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpnConnectionRequest(input, context),
        Action: "CreateVpnConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpnConnectionRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpnConnectionRouteRequest(input, context),
        Action: "CreateVpnConnectionRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpnGatewayRequest(input, context),
        Action: "CreateVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCarrierGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCarrierGatewayRequest(input, context),
        Action: "DeleteCarrierGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteClientVpnEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteClientVpnEndpointRequest(input, context),
        Action: "DeleteClientVpnEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteClientVpnRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteClientVpnRouteRequest(input, context),
        Action: "DeleteClientVpnRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCoipCidrRequest(input, context),
        Action: "DeleteCoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCoipPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCoipPoolRequest(input, context),
        Action: "DeleteCoipPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCustomerGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCustomerGatewayRequest(input, context),
        Action: "DeleteCustomerGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDhcpOptionsRequest(input, context),
        Action: "DeleteDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEgressOnlyInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteEgressOnlyInternetGatewayRequest(input, context),
        Action: "DeleteEgressOnlyInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteFleetsRequest(input, context),
        Action: "DeleteFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFlowLogsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteFlowLogsRequest(input, context),
        Action: "DeleteFlowLogs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFpgaImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteFpgaImageRequest(input, context),
        Action: "DeleteFpgaImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInstanceEventWindowRequest(input, context),
        Action: "DeleteInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInternetGatewayRequest(input, context),
        Action: "DeleteInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamRequest(input, context),
        Action: "DeleteIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteIpamPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamPoolRequest(input, context),
        Action: "DeleteIpamPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamResourceDiscoveryRequest(input, context),
        Action: "DeleteIpamResourceDiscovery",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteIpamScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamScopeRequest(input, context),
        Action: "DeleteIpamScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteKeyPairCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteKeyPairRequest(input, context),
        Action: "DeleteKeyPair",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLaunchTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLaunchTemplateRequest(input, context),
        Action: "DeleteLaunchTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLaunchTemplateVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLaunchTemplateVersionsRequest(input, context),
        Action: "DeleteLaunchTemplateVersions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLocalGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteRequest(input, context),
        Action: "DeleteLocalGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLocalGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteTableRequest(input, context),
        Action: "DeleteLocalGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
        Action: "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteTableVpcAssociationRequest(input, context),
        Action: "DeleteLocalGatewayRouteTableVpcAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteManagedPrefixListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteManagedPrefixListRequest(input, context),
        Action: "DeleteManagedPrefixList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNatGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNatGatewayRequest(input, context),
        Action: "DeleteNatGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkAclCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkAclRequest(input, context),
        Action: "DeleteNetworkAcl",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkAclEntryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkAclEntryRequest(input, context),
        Action: "DeleteNetworkAclEntry",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkInsightsAccessScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsAccessScopeRequest(input, context),
        Action: "DeleteNetworkInsightsAccessScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsAccessScopeAnalysisRequest(input, context),
        Action: "DeleteNetworkInsightsAccessScopeAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkInsightsAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsAnalysisRequest(input, context),
        Action: "DeleteNetworkInsightsAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkInsightsPathCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsPathRequest(input, context),
        Action: "DeleteNetworkInsightsPath",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInterfaceRequest(input, context),
        Action: "DeleteNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkInterfacePermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInterfacePermissionRequest(input, context),
        Action: "DeleteNetworkInterfacePermission",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePlacementGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePlacementGroupRequest(input, context),
        Action: "DeletePlacementGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePublicIpv4PoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePublicIpv4PoolRequest(input, context),
        Action: "DeletePublicIpv4Pool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteQueuedReservedInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteQueuedReservedInstancesRequest(input, context),
        Action: "DeleteQueuedReservedInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRouteRequest(input, context),
        Action: "DeleteRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRouteTableRequest(input, context),
        Action: "DeleteRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSecurityGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSecurityGroupRequest(input, context),
        Action: "DeleteSecurityGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSnapshotRequest(input, context),
        Action: "DeleteSnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSpotDatafeedSubscriptionRequest(input, context),
        Action: "DeleteSpotDatafeedSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSubnetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSubnetRequest(input, context),
        Action: "DeleteSubnet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSubnetCidrReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSubnetCidrReservationRequest(input, context),
        Action: "DeleteSubnetCidrReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTagsRequest(input, context),
        Action: "DeleteTags",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTrafficMirrorFilterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorFilterRequest(input, context),
        Action: "DeleteTrafficMirrorFilter",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorFilterRuleRequest(input, context),
        Action: "DeleteTrafficMirrorFilterRule",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTrafficMirrorSessionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorSessionRequest(input, context),
        Action: "DeleteTrafficMirrorSession",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTrafficMirrorTargetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorTargetRequest(input, context),
        Action: "DeleteTrafficMirrorTarget",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRequest(input, context),
        Action: "DeleteTransitGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayConnectCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayConnectRequest(input, context),
        Action: "DeleteTransitGatewayConnect",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayConnectPeerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayConnectPeerRequest(input, context),
        Action: "DeleteTransitGatewayConnectPeer",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayMulticastDomainRequest(input, context),
        Action: "DeleteTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "DeleteTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayPolicyTableRequest(input, context),
        Action: "DeleteTransitGatewayPolicyTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayPrefixListReferenceRequest(input, context),
        Action: "DeleteTransitGatewayPrefixListReference",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRouteRequest(input, context),
        Action: "DeleteTransitGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRouteTableRequest(input, context),
        Action: "DeleteTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayRouteTableAnnouncementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRouteTableAnnouncementRequest(input, context),
        Action: "DeleteTransitGatewayRouteTableAnnouncement",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayVpcAttachmentRequest(input, context),
        Action: "DeleteTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVerifiedAccessEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessEndpointRequest(input, context),
        Action: "DeleteVerifiedAccessEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVerifiedAccessGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessGroupRequest(input, context),
        Action: "DeleteVerifiedAccessGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVerifiedAccessInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessInstanceRequest(input, context),
        Action: "DeleteVerifiedAccessInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessTrustProviderRequest(input, context),
        Action: "DeleteVerifiedAccessTrustProvider",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVolumeRequest(input, context),
        Action: "DeleteVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcRequest(input, context),
        Action: "DeleteVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcEndpointConnectionNotificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcEndpointConnectionNotificationsRequest(input, context),
        Action: "DeleteVpcEndpointConnectionNotifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcEndpointsRequest(input, context),
        Action: "DeleteVpcEndpoints",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcEndpointServiceConfigurationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcEndpointServiceConfigurationsRequest(input, context),
        Action: "DeleteVpcEndpointServiceConfigurations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcPeeringConnectionRequest(input, context),
        Action: "DeleteVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpnConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpnConnectionRequest(input, context),
        Action: "DeleteVpnConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpnConnectionRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpnConnectionRouteRequest(input, context),
        Action: "DeleteVpnConnectionRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpnGatewayRequest(input, context),
        Action: "DeleteVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeprovisionByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeprovisionByoipCidrRequest(input, context),
        Action: "DeprovisionByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeprovisionIpamPoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeprovisionIpamPoolCidrRequest(input, context),
        Action: "DeprovisionIpamPoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeprovisionPublicIpv4PoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeprovisionPublicIpv4PoolCidrRequest(input, context),
        Action: "DeprovisionPublicIpv4PoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterImageRequest(input, context),
        Action: "DeregisterImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterInstanceEventNotificationAttributesRequest(input, context),
        Action: "DeregisterInstanceEventNotificationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterTransitGatewayMulticastGroupMembersRequest(input, context),
        Action: "DeregisterTransitGatewayMulticastGroupMembers",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterTransitGatewayMulticastGroupSourcesRequest(input, context),
        Action: "DeregisterTransitGatewayMulticastGroupSources",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAccountAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAccountAttributesRequest(input, context),
        Action: "DescribeAccountAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAddressesRequest(input, context),
        Action: "DescribeAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAddressesAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAddressesAttributeRequest(input, context),
        Action: "DescribeAddressesAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAddressTransfersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAddressTransfersRequest(input, context),
        Action: "DescribeAddressTransfers",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAggregateIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAggregateIdFormatRequest(input, context),
        Action: "DescribeAggregateIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAvailabilityZonesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAvailabilityZonesRequest(input, context),
        Action: "DescribeAvailabilityZones",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(input, context),
        Action: "DescribeAwsNetworkPerformanceMetricSubscriptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBundleTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeBundleTasksRequest(input, context),
        Action: "DescribeBundleTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeByoipCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeByoipCidrsRequest(input, context),
        Action: "DescribeByoipCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCapacityReservationFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityReservationFleetsRequest(input, context),
        Action: "DescribeCapacityReservationFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCapacityReservationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityReservationsRequest(input, context),
        Action: "DescribeCapacityReservations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCarrierGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCarrierGatewaysRequest(input, context),
        Action: "DescribeCarrierGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClassicLinkInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClassicLinkInstancesRequest(input, context),
        Action: "DescribeClassicLinkInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClientVpnAuthorizationRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnAuthorizationRulesRequest(input, context),
        Action: "DescribeClientVpnAuthorizationRules",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClientVpnConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnConnectionsRequest(input, context),
        Action: "DescribeClientVpnConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClientVpnEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnEndpointsRequest(input, context),
        Action: "DescribeClientVpnEndpoints",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClientVpnRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnRoutesRequest(input, context),
        Action: "DescribeClientVpnRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClientVpnTargetNetworksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnTargetNetworksRequest(input, context),
        Action: "DescribeClientVpnTargetNetworks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCoipPoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCoipPoolsRequest(input, context),
        Action: "DescribeCoipPools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConversionTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeConversionTasksRequest(input, context),
        Action: "DescribeConversionTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCustomerGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCustomerGatewaysRequest(input, context),
        Action: "DescribeCustomerGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDhcpOptionsRequest(input, context),
        Action: "DescribeDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEgressOnlyInternetGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEgressOnlyInternetGatewaysRequest(input, context),
        Action: "DescribeEgressOnlyInternetGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeElasticGpusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeElasticGpusRequest(input, context),
        Action: "DescribeElasticGpus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeExportImageTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeExportImageTasksRequest(input, context),
        Action: "DescribeExportImageTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeExportTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeExportTasksRequest(input, context),
        Action: "DescribeExportTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFastLaunchImagesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFastLaunchImagesRequest(input, context),
        Action: "DescribeFastLaunchImages",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFastSnapshotRestoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFastSnapshotRestoresRequest(input, context),
        Action: "DescribeFastSnapshotRestores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFleetHistoryRequest(input, context),
        Action: "DescribeFleetHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFleetInstancesRequest(input, context),
        Action: "DescribeFleetInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFleetsRequest(input, context),
        Action: "DescribeFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFlowLogsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFlowLogsRequest(input, context),
        Action: "DescribeFlowLogs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFpgaImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFpgaImageAttributeRequest(input, context),
        Action: "DescribeFpgaImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFpgaImagesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFpgaImagesRequest(input, context),
        Action: "DescribeFpgaImages",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHostReservationOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeHostReservationOfferingsRequest(input, context),
        Action: "DescribeHostReservationOfferings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHostReservationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeHostReservationsRequest(input, context),
        Action: "DescribeHostReservations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeHostsRequest(input, context),
        Action: "DescribeHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIamInstanceProfileAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIamInstanceProfileAssociationsRequest(input, context),
        Action: "DescribeIamInstanceProfileAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIdentityIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIdentityIdFormatRequest(input, context),
        Action: "DescribeIdentityIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIdFormatRequest(input, context),
        Action: "DescribeIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImageAttributeRequest(input, context),
        Action: "DescribeImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImagesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImagesRequest(input, context),
        Action: "DescribeImages",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImportImageTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImportImageTasksRequest(input, context),
        Action: "DescribeImportImageTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImportSnapshotTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImportSnapshotTasksRequest(input, context),
        Action: "DescribeImportSnapshotTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstanceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceAttributeRequest(input, context),
        Action: "DescribeInstanceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstanceCreditSpecificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceCreditSpecificationsRequest(input, context),
        Action: "DescribeInstanceCreditSpecifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceEventNotificationAttributesRequest(input, context),
        Action: "DescribeInstanceEventNotificationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstanceEventWindowsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceEventWindowsRequest(input, context),
        Action: "DescribeInstanceEventWindows",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstancesRequest(input, context),
        Action: "DescribeInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstanceStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceStatusRequest(input, context),
        Action: "DescribeInstanceStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstanceTypeOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceTypeOfferingsRequest(input, context),
        Action: "DescribeInstanceTypeOfferings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstanceTypesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceTypesRequest(input, context),
        Action: "DescribeInstanceTypes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInternetGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInternetGatewaysRequest(input, context),
        Action: "DescribeInternetGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIpamPoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamPoolsRequest(input, context),
        Action: "DescribeIpamPools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIpamResourceDiscoveriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamResourceDiscoveriesRequest(input, context),
        Action: "DescribeIpamResourceDiscoveries",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIpamResourceDiscoveryAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamResourceDiscoveryAssociationsRequest(input, context),
        Action: "DescribeIpamResourceDiscoveryAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIpamsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamsRequest(input, context),
        Action: "DescribeIpams",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIpamScopesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamScopesRequest(input, context),
        Action: "DescribeIpamScopes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIpv6PoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpv6PoolsRequest(input, context),
        Action: "DescribeIpv6Pools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeKeyPairsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeKeyPairsRequest(input, context),
        Action: "DescribeKeyPairs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLaunchTemplatesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLaunchTemplatesRequest(input, context),
        Action: "DescribeLaunchTemplates",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLaunchTemplateVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLaunchTemplateVersionsRequest(input, context),
        Action: "DescribeLaunchTemplateVersions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLocalGatewayRouteTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayRouteTablesRequest(input, context),
        Action: "DescribeLocalGatewayRouteTables",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input, context),
        Action: "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayRouteTableVpcAssociationsRequest(input, context),
        Action: "DescribeLocalGatewayRouteTableVpcAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLocalGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewaysRequest(input, context),
        Action: "DescribeLocalGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayVirtualInterfaceGroupsRequest(input, context),
        Action: "DescribeLocalGatewayVirtualInterfaceGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLocalGatewayVirtualInterfacesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayVirtualInterfacesRequest(input, context),
        Action: "DescribeLocalGatewayVirtualInterfaces",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeManagedPrefixListsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeManagedPrefixListsRequest(input, context),
        Action: "DescribeManagedPrefixLists",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMovingAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeMovingAddressesRequest(input, context),
        Action: "DescribeMovingAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNatGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNatGatewaysRequest(input, context),
        Action: "DescribeNatGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkAclsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkAclsRequest(input, context),
        Action: "DescribeNetworkAcls",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsAccessScopeAnalysesRequest(input, context),
        Action: "DescribeNetworkInsightsAccessScopeAnalyses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkInsightsAccessScopesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsAccessScopesRequest(input, context),
        Action: "DescribeNetworkInsightsAccessScopes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkInsightsAnalysesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsAnalysesRequest(input, context),
        Action: "DescribeNetworkInsightsAnalyses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkInsightsPathsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsPathsRequest(input, context),
        Action: "DescribeNetworkInsightsPaths",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInterfaceAttributeRequest(input, context),
        Action: "DescribeNetworkInterfaceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkInterfacePermissionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInterfacePermissionsRequest(input, context),
        Action: "DescribeNetworkInterfacePermissions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNetworkInterfacesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInterfacesRequest(input, context),
        Action: "DescribeNetworkInterfaces",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePlacementGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePlacementGroupsRequest(input, context),
        Action: "DescribePlacementGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePrefixListsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePrefixListsRequest(input, context),
        Action: "DescribePrefixLists",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePrincipalIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePrincipalIdFormatRequest(input, context),
        Action: "DescribePrincipalIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePublicIpv4PoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePublicIpv4PoolsRequest(input, context),
        Action: "DescribePublicIpv4Pools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeRegionsRequest(input, context),
        Action: "DescribeRegions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeReplaceRootVolumeTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReplaceRootVolumeTasksRequest(input, context),
        Action: "DescribeReplaceRootVolumeTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeReservedInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesRequest(input, context),
        Action: "DescribeReservedInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeReservedInstancesListingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesListingsRequest(input, context),
        Action: "DescribeReservedInstancesListings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeReservedInstancesModificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesModificationsRequest(input, context),
        Action: "DescribeReservedInstancesModifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeReservedInstancesOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesOfferingsRequest(input, context),
        Action: "DescribeReservedInstancesOfferings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRouteTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeRouteTablesRequest(input, context),
        Action: "DescribeRouteTables",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScheduledInstanceAvailabilityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeScheduledInstanceAvailabilityRequest(input, context),
        Action: "DescribeScheduledInstanceAvailability",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScheduledInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeScheduledInstancesRequest(input, context),
        Action: "DescribeScheduledInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSecurityGroupReferencesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSecurityGroupReferencesRequest(input, context),
        Action: "DescribeSecurityGroupReferences",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSecurityGroupRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSecurityGroupRulesRequest(input, context),
        Action: "DescribeSecurityGroupRules",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSecurityGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSecurityGroupsRequest(input, context),
        Action: "DescribeSecurityGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSnapshotAttributeRequest(input, context),
        Action: "DescribeSnapshotAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSnapshotsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSnapshotsRequest(input, context),
        Action: "DescribeSnapshots",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSnapshotTierStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSnapshotTierStatusRequest(input, context),
        Action: "DescribeSnapshotTierStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotDatafeedSubscriptionRequest(input, context),
        Action: "DescribeSpotDatafeedSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpotFleetInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotFleetInstancesRequest(input, context),
        Action: "DescribeSpotFleetInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpotFleetRequestHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotFleetRequestHistoryRequest(input, context),
        Action: "DescribeSpotFleetRequestHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpotFleetRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotFleetRequestsRequest(input, context),
        Action: "DescribeSpotFleetRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpotInstanceRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotInstanceRequestsRequest(input, context),
        Action: "DescribeSpotInstanceRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpotPriceHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotPriceHistoryRequest(input, context),
        Action: "DescribeSpotPriceHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeStaleSecurityGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStaleSecurityGroupsRequest(input, context),
        Action: "DescribeStaleSecurityGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeStoreImageTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStoreImageTasksRequest(input, context),
        Action: "DescribeStoreImageTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSubnetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSubnetsRequest(input, context),
        Action: "DescribeSubnets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTagsRequest(input, context),
        Action: "DescribeTags",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrafficMirrorFiltersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrafficMirrorFiltersRequest(input, context),
        Action: "DescribeTrafficMirrorFilters",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrafficMirrorSessionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrafficMirrorSessionsRequest(input, context),
        Action: "DescribeTrafficMirrorSessions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrafficMirrorTargetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrafficMirrorTargetsRequest(input, context),
        Action: "DescribeTrafficMirrorTargets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayAttachmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayAttachmentsRequest(input, context),
        Action: "DescribeTransitGatewayAttachments",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayConnectPeersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayConnectPeersRequest(input, context),
        Action: "DescribeTransitGatewayConnectPeers",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayConnectsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayConnectsRequest(input, context),
        Action: "DescribeTransitGatewayConnects",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayMulticastDomainsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayMulticastDomainsRequest(input, context),
        Action: "DescribeTransitGatewayMulticastDomains",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayPeeringAttachmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayPeeringAttachmentsRequest(input, context),
        Action: "DescribeTransitGatewayPeeringAttachments",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayPolicyTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayPolicyTablesRequest(input, context),
        Action: "DescribeTransitGatewayPolicyTables",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayRouteTableAnnouncementsRequest(input, context),
        Action: "DescribeTransitGatewayRouteTableAnnouncements",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayRouteTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayRouteTablesRequest(input, context),
        Action: "DescribeTransitGatewayRouteTables",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewaysRequest(input, context),
        Action: "DescribeTransitGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTransitGatewayVpcAttachmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayVpcAttachmentsRequest(input, context),
        Action: "DescribeTransitGatewayVpcAttachments",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrunkInterfaceAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrunkInterfaceAssociationsRequest(input, context),
        Action: "DescribeTrunkInterfaceAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVerifiedAccessEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessEndpointsRequest(input, context),
        Action: "DescribeVerifiedAccessEndpoints",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVerifiedAccessGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessGroupsRequest(input, context),
        Action: "DescribeVerifiedAccessGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(input, context),
        Action: "DescribeVerifiedAccessInstanceLoggingConfigurations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVerifiedAccessInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessInstancesRequest(input, context),
        Action: "DescribeVerifiedAccessInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVerifiedAccessTrustProvidersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessTrustProvidersRequest(input, context),
        Action: "DescribeVerifiedAccessTrustProviders",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVolumeAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumeAttributeRequest(input, context),
        Action: "DescribeVolumeAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVolumesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumesRequest(input, context),
        Action: "DescribeVolumes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVolumesModificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumesModificationsRequest(input, context),
        Action: "DescribeVolumesModifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVolumeStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumeStatusRequest(input, context),
        Action: "DescribeVolumeStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcAttributeRequest(input, context),
        Action: "DescribeVpcAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcClassicLinkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcClassicLinkRequest(input, context),
        Action: "DescribeVpcClassicLink",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcClassicLinkDnsSupportRequest(input, context),
        Action: "DescribeVpcClassicLinkDnsSupport",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcEndpointConnectionNotificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointConnectionNotificationsRequest(input, context),
        Action: "DescribeVpcEndpointConnectionNotifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointConnectionsRequest(input, context),
        Action: "DescribeVpcEndpointConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointsRequest(input, context),
        Action: "DescribeVpcEndpoints",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcEndpointServiceConfigurationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointServiceConfigurationsRequest(input, context),
        Action: "DescribeVpcEndpointServiceConfigurations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcEndpointServicePermissionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointServicePermissionsRequest(input, context),
        Action: "DescribeVpcEndpointServicePermissions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcEndpointServicesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointServicesRequest(input, context),
        Action: "DescribeVpcEndpointServices",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcPeeringConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcPeeringConnectionsRequest(input, context),
        Action: "DescribeVpcPeeringConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcsRequest(input, context),
        Action: "DescribeVpcs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpnConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpnConnectionsRequest(input, context),
        Action: "DescribeVpnConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpnGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpnGatewaysRequest(input, context),
        Action: "DescribeVpnGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachClassicLinkVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachClassicLinkVpcRequest(input, context),
        Action: "DetachClassicLinkVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachInternetGatewayRequest(input, context),
        Action: "DetachInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachNetworkInterfaceRequest(input, context),
        Action: "DetachNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachVerifiedAccessTrustProviderRequest(input, context),
        Action: "DetachVerifiedAccessTrustProvider",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachVolumeRequest(input, context),
        Action: "DetachVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachVpnGatewayRequest(input, context),
        Action: "DetachVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableAddressTransferCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableAddressTransferRequest(input, context),
        Action: "DisableAddressTransfer",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
        Action: "DisableAwsNetworkPerformanceMetricSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableEbsEncryptionByDefaultRequest(input, context),
        Action: "DisableEbsEncryptionByDefault",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableFastLaunchCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableFastLaunchRequest(input, context),
        Action: "DisableFastLaunch",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableFastSnapshotRestoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableFastSnapshotRestoresRequest(input, context),
        Action: "DisableFastSnapshotRestores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableImageDeprecationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableImageDeprecationRequest(input, context),
        Action: "DisableImageDeprecation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableIpamOrganizationAdminAccountCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableIpamOrganizationAdminAccountRequest(input, context),
        Action: "DisableIpamOrganizationAdminAccount",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableSerialConsoleAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableSerialConsoleAccessRequest(input, context),
        Action: "DisableSerialConsoleAccess",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableTransitGatewayRouteTablePropagationRequest(input, context),
        Action: "DisableTransitGatewayRouteTablePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableVgwRoutePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableVgwRoutePropagationRequest(input, context),
        Action: "DisableVgwRoutePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableVpcClassicLinkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableVpcClassicLinkRequest(input, context),
        Action: "DisableVpcClassicLink",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableVpcClassicLinkDnsSupportRequest(input, context),
        Action: "DisableVpcClassicLinkDnsSupport",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateAddressRequest(input, context),
        Action: "DisassociateAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateClientVpnTargetNetworkRequest(input, context),
        Action: "DisassociateClientVpnTargetNetwork",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateEnclaveCertificateIamRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateEnclaveCertificateIamRoleRequest(input, context),
        Action: "DisassociateEnclaveCertificateIamRole",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateIamInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateIamInstanceProfileRequest(input, context),
        Action: "DisassociateIamInstanceProfile",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateInstanceEventWindowRequest(input, context),
        Action: "DisassociateInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateIpamResourceDiscoveryRequest(input, context),
        Action: "DisassociateIpamResourceDiscovery",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateNatGatewayAddressRequest(input, context),
        Action: "DisassociateNatGatewayAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateRouteTableRequest(input, context),
        Action: "DisassociateRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateSubnetCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateSubnetCidrBlockRequest(input, context),
        Action: "DisassociateSubnetCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTransitGatewayMulticastDomainRequest(input, context),
        Action: "DisassociateTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTransitGatewayPolicyTableRequest(input, context),
        Action: "DisassociateTransitGatewayPolicyTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTransitGatewayRouteTableRequest(input, context),
        Action: "DisassociateTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateTrunkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTrunkInterfaceRequest(input, context),
        Action: "DisassociateTrunkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateVpcCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateVpcCidrBlockRequest(input, context),
        Action: "DisassociateVpcCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableAddressTransferCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableAddressTransferRequest(input, context),
        Action: "EnableAddressTransfer",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
        Action: "EnableAwsNetworkPerformanceMetricSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableEbsEncryptionByDefaultRequest(input, context),
        Action: "EnableEbsEncryptionByDefault",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableFastLaunchCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableFastLaunchRequest(input, context),
        Action: "EnableFastLaunch",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableFastSnapshotRestoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableFastSnapshotRestoresRequest(input, context),
        Action: "EnableFastSnapshotRestores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableImageDeprecationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableImageDeprecationRequest(input, context),
        Action: "EnableImageDeprecation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableIpamOrganizationAdminAccountCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableIpamOrganizationAdminAccountRequest(input, context),
        Action: "EnableIpamOrganizationAdminAccount",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableReachabilityAnalyzerOrganizationSharingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableReachabilityAnalyzerOrganizationSharingRequest(input, context),
        Action: "EnableReachabilityAnalyzerOrganizationSharing",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableSerialConsoleAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableSerialConsoleAccessRequest(input, context),
        Action: "EnableSerialConsoleAccess",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableTransitGatewayRouteTablePropagationRequest(input, context),
        Action: "EnableTransitGatewayRouteTablePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableVgwRoutePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVgwRoutePropagationRequest(input, context),
        Action: "EnableVgwRoutePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableVolumeIOCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVolumeIORequest(input, context),
        Action: "EnableVolumeIO",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableVpcClassicLinkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVpcClassicLinkRequest(input, context),
        Action: "EnableVpcClassicLink",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVpcClassicLinkDnsSupportRequest(input, context),
        Action: "EnableVpcClassicLinkDnsSupport",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportClientVpnClientCertificateRevocationListRequest(input, context),
        Action: "ExportClientVpnClientCertificateRevocationList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportClientVpnClientConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportClientVpnClientConfigurationRequest(input, context),
        Action: "ExportClientVpnClientConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportImageRequest(input, context),
        Action: "ExportImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportTransitGatewayRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportTransitGatewayRoutesRequest(input, context),
        Action: "ExportTransitGatewayRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAssociatedEnclaveCertificateIamRolesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAssociatedEnclaveCertificateIamRolesRequest(input, context),
        Action: "GetAssociatedEnclaveCertificateIamRoles",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAssociatedIpv6PoolCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAssociatedIpv6PoolCidrsRequest(input, context),
        Action: "GetAssociatedIpv6PoolCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAwsNetworkPerformanceDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAwsNetworkPerformanceDataRequest(input, context),
        Action: "GetAwsNetworkPerformanceData",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCapacityReservationUsageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetCapacityReservationUsageRequest(input, context),
        Action: "GetCapacityReservationUsage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCoipPoolUsageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetCoipPoolUsageRequest(input, context),
        Action: "GetCoipPoolUsage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetConsoleOutputCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetConsoleOutputRequest(input, context),
        Action: "GetConsoleOutput",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetConsoleScreenshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetConsoleScreenshotRequest(input, context),
        Action: "GetConsoleScreenshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDefaultCreditSpecificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetDefaultCreditSpecificationRequest(input, context),
        Action: "GetDefaultCreditSpecification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetEbsDefaultKmsKeyIdRequest(input, context),
        Action: "GetEbsDefaultKmsKeyId",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetEbsEncryptionByDefaultRequest(input, context),
        Action: "GetEbsEncryptionByDefault",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetFlowLogsIntegrationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetFlowLogsIntegrationTemplateRequest(input, context),
        Action: "GetFlowLogsIntegrationTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetGroupsForCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetGroupsForCapacityReservationRequest(input, context),
        Action: "GetGroupsForCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetHostReservationPurchasePreviewCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetHostReservationPurchasePreviewRequest(input, context),
        Action: "GetHostReservationPurchasePreview",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceTypesFromInstanceRequirementsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInstanceTypesFromInstanceRequirementsRequest(input, context),
        Action: "GetInstanceTypesFromInstanceRequirements",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceUefiDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInstanceUefiDataRequest(input, context),
        Action: "GetInstanceUefiData",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIpamAddressHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamAddressHistoryRequest(input, context),
        Action: "GetIpamAddressHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIpamDiscoveredAccountsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamDiscoveredAccountsRequest(input, context),
        Action: "GetIpamDiscoveredAccounts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIpamDiscoveredResourceCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamDiscoveredResourceCidrsRequest(input, context),
        Action: "GetIpamDiscoveredResourceCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIpamPoolAllocationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamPoolAllocationsRequest(input, context),
        Action: "GetIpamPoolAllocations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIpamPoolCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamPoolCidrsRequest(input, context),
        Action: "GetIpamPoolCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIpamResourceCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamResourceCidrsRequest(input, context),
        Action: "GetIpamResourceCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLaunchTemplateDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetLaunchTemplateDataRequest(input, context),
        Action: "GetLaunchTemplateData",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetManagedPrefixListAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetManagedPrefixListAssociationsRequest(input, context),
        Action: "GetManagedPrefixListAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetManagedPrefixListEntriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetManagedPrefixListEntriesRequest(input, context),
        Action: "GetManagedPrefixListEntries",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest(input, context),
        Action: "GetNetworkInsightsAccessScopeAnalysisFindings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetNetworkInsightsAccessScopeContentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetNetworkInsightsAccessScopeContentRequest(input, context),
        Action: "GetNetworkInsightsAccessScopeContent",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPasswordDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetPasswordDataRequest(input, context),
        Action: "GetPasswordData",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetReservedInstancesExchangeQuoteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetReservedInstancesExchangeQuoteRequest(input, context),
        Action: "GetReservedInstancesExchangeQuote",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSerialConsoleAccessStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSerialConsoleAccessStatusRequest(input, context),
        Action: "GetSerialConsoleAccessStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSpotPlacementScoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSpotPlacementScoresRequest(input, context),
        Action: "GetSpotPlacementScores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSubnetCidrReservationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSubnetCidrReservationsRequest(input, context),
        Action: "GetSubnetCidrReservations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTransitGatewayAttachmentPropagationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayAttachmentPropagationsRequest(input, context),
        Action: "GetTransitGatewayAttachmentPropagations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayMulticastDomainAssociationsRequest(input, context),
        Action: "GetTransitGatewayMulticastDomainAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTransitGatewayPolicyTableAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayPolicyTableAssociationsRequest(input, context),
        Action: "GetTransitGatewayPolicyTableAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTransitGatewayPolicyTableEntriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayPolicyTableEntriesRequest(input, context),
        Action: "GetTransitGatewayPolicyTableEntries",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTransitGatewayPrefixListReferencesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayPrefixListReferencesRequest(input, context),
        Action: "GetTransitGatewayPrefixListReferences",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTransitGatewayRouteTableAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayRouteTableAssociationsRequest(input, context),
        Action: "GetTransitGatewayRouteTableAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTransitGatewayRouteTablePropagationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayRouteTablePropagationsRequest(input, context),
        Action: "GetTransitGatewayRouteTablePropagations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVerifiedAccessEndpointPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVerifiedAccessEndpointPolicyRequest(input, context),
        Action: "GetVerifiedAccessEndpointPolicy",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVerifiedAccessGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVerifiedAccessGroupPolicyRequest(input, context),
        Action: "GetVerifiedAccessGroupPolicy",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVpnConnectionDeviceSampleConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVpnConnectionDeviceSampleConfigurationRequest(input, context),
        Action: "GetVpnConnectionDeviceSampleConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVpnConnectionDeviceTypesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVpnConnectionDeviceTypesRequest(input, context),
        Action: "GetVpnConnectionDeviceTypes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVpnTunnelReplacementStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVpnTunnelReplacementStatusRequest(input, context),
        Action: "GetVpnTunnelReplacementStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportClientVpnClientCertificateRevocationListRequest(input, context),
        Action: "ImportClientVpnClientCertificateRevocationList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportImageRequest(input, context),
        Action: "ImportImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportInstanceRequest(input, context),
        Action: "ImportInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportKeyPairCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportKeyPairRequest(input, context),
        Action: "ImportKeyPair",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportSnapshotRequest(input, context),
        Action: "ImportSnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportVolumeRequest(input, context),
        Action: "ImportVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListImagesInRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListImagesInRecycleBinRequest(input, context),
        Action: "ListImagesInRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSnapshotsInRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSnapshotsInRecycleBinRequest(input, context),
        Action: "ListSnapshotsInRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyAddressAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyAddressAttributeRequest(input, context),
        Action: "ModifyAddressAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyAvailabilityZoneGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyAvailabilityZoneGroupRequest(input, context),
        Action: "ModifyAvailabilityZoneGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyCapacityReservationRequest(input, context),
        Action: "ModifyCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyCapacityReservationFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyCapacityReservationFleetRequest(input, context),
        Action: "ModifyCapacityReservationFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyClientVpnEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyClientVpnEndpointRequest(input, context),
        Action: "ModifyClientVpnEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyDefaultCreditSpecificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDefaultCreditSpecificationRequest(input, context),
        Action: "ModifyDefaultCreditSpecification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyEbsDefaultKmsKeyIdRequest(input, context),
        Action: "ModifyEbsDefaultKmsKeyId",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyFleetRequest(input, context),
        Action: "ModifyFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyFpgaImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyFpgaImageAttributeRequest(input, context),
        Action: "ModifyFpgaImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyHostsRequest(input, context),
        Action: "ModifyHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyIdentityIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIdentityIdFormatRequest(input, context),
        Action: "ModifyIdentityIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIdFormatRequest(input, context),
        Action: "ModifyIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyImageAttributeRequest(input, context),
        Action: "ModifyImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceAttributeRequest(input, context),
        Action: "ModifyInstanceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceCapacityReservationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceCapacityReservationAttributesRequest(input, context),
        Action: "ModifyInstanceCapacityReservationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceCreditSpecificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceCreditSpecificationRequest(input, context),
        Action: "ModifyInstanceCreditSpecification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceEventStartTimeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceEventStartTimeRequest(input, context),
        Action: "ModifyInstanceEventStartTime",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceEventWindowRequest(input, context),
        Action: "ModifyInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceMaintenanceOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceMaintenanceOptionsRequest(input, context),
        Action: "ModifyInstanceMaintenanceOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceMetadataOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceMetadataOptionsRequest(input, context),
        Action: "ModifyInstanceMetadataOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstancePlacementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstancePlacementRequest(input, context),
        Action: "ModifyInstancePlacement",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamRequest(input, context),
        Action: "ModifyIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyIpamPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamPoolRequest(input, context),
        Action: "ModifyIpamPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyIpamResourceCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamResourceCidrRequest(input, context),
        Action: "ModifyIpamResourceCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamResourceDiscoveryRequest(input, context),
        Action: "ModifyIpamResourceDiscovery",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyIpamScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamScopeRequest(input, context),
        Action: "ModifyIpamScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyLaunchTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyLaunchTemplateRequest(input, context),
        Action: "ModifyLaunchTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyLocalGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyLocalGatewayRouteRequest(input, context),
        Action: "ModifyLocalGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyManagedPrefixListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyManagedPrefixListRequest(input, context),
        Action: "ModifyManagedPrefixList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyNetworkInterfaceAttributeRequest(input, context),
        Action: "ModifyNetworkInterfaceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyPrivateDnsNameOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyPrivateDnsNameOptionsRequest(input, context),
        Action: "ModifyPrivateDnsNameOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyReservedInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyReservedInstancesRequest(input, context),
        Action: "ModifyReservedInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifySecurityGroupRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySecurityGroupRulesRequest(input, context),
        Action: "ModifySecurityGroupRules",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifySnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySnapshotAttributeRequest(input, context),
        Action: "ModifySnapshotAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifySnapshotTierCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySnapshotTierRequest(input, context),
        Action: "ModifySnapshotTier",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifySpotFleetRequestCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySpotFleetRequestRequest(input, context),
        Action: "ModifySpotFleetRequest",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifySubnetAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySubnetAttributeRequest(input, context),
        Action: "ModifySubnetAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyTrafficMirrorFilterNetworkServicesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTrafficMirrorFilterNetworkServicesRequest(input, context),
        Action: "ModifyTrafficMirrorFilterNetworkServices",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTrafficMirrorFilterRuleRequest(input, context),
        Action: "ModifyTrafficMirrorFilterRule",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyTrafficMirrorSessionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTrafficMirrorSessionRequest(input, context),
        Action: "ModifyTrafficMirrorSession",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyTransitGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTransitGatewayRequest(input, context),
        Action: "ModifyTransitGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTransitGatewayPrefixListReferenceRequest(input, context),
        Action: "ModifyTransitGatewayPrefixListReference",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTransitGatewayVpcAttachmentRequest(input, context),
        Action: "ModifyTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVerifiedAccessEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessEndpointRequest(input, context),
        Action: "ModifyVerifiedAccessEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVerifiedAccessEndpointPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessEndpointPolicyRequest(input, context),
        Action: "ModifyVerifiedAccessEndpointPolicy",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVerifiedAccessGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessGroupRequest(input, context),
        Action: "ModifyVerifiedAccessGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVerifiedAccessGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessGroupPolicyRequest(input, context),
        Action: "ModifyVerifiedAccessGroupPolicy",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVerifiedAccessInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessInstanceRequest(input, context),
        Action: "ModifyVerifiedAccessInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest(input, context),
        Action: "ModifyVerifiedAccessInstanceLoggingConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessTrustProviderRequest(input, context),
        Action: "ModifyVerifiedAccessTrustProvider",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVolumeRequest(input, context),
        Action: "ModifyVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVolumeAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVolumeAttributeRequest(input, context),
        Action: "ModifyVolumeAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcAttributeRequest(input, context),
        Action: "ModifyVpcAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointRequest(input, context),
        Action: "ModifyVpcEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcEndpointConnectionNotificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointConnectionNotificationRequest(input, context),
        Action: "ModifyVpcEndpointConnectionNotification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcEndpointServiceConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointServiceConfigurationRequest(input, context),
        Action: "ModifyVpcEndpointServiceConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcEndpointServicePayerResponsibilityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointServicePayerResponsibilityRequest(input, context),
        Action: "ModifyVpcEndpointServicePayerResponsibility",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcEndpointServicePermissionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointServicePermissionsRequest(input, context),
        Action: "ModifyVpcEndpointServicePermissions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcPeeringConnectionOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcPeeringConnectionOptionsRequest(input, context),
        Action: "ModifyVpcPeeringConnectionOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpcTenancyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcTenancyRequest(input, context),
        Action: "ModifyVpcTenancy",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpnConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnConnectionRequest(input, context),
        Action: "ModifyVpnConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpnConnectionOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnConnectionOptionsRequest(input, context),
        Action: "ModifyVpnConnectionOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpnTunnelCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnTunnelCertificateRequest(input, context),
        Action: "ModifyVpnTunnelCertificate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyVpnTunnelOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnTunnelOptionsRequest(input, context),
        Action: "ModifyVpnTunnelOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_MonitorInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_MonitorInstancesRequest(input, context),
        Action: "MonitorInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_MoveAddressToVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_MoveAddressToVpcRequest(input, context),
        Action: "MoveAddressToVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_MoveByoipCidrToIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_MoveByoipCidrToIpamRequest(input, context),
        Action: "MoveByoipCidrToIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ProvisionByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ProvisionByoipCidrRequest(input, context),
        Action: "ProvisionByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ProvisionIpamPoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ProvisionIpamPoolCidrRequest(input, context),
        Action: "ProvisionIpamPoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ProvisionPublicIpv4PoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ProvisionPublicIpv4PoolCidrRequest(input, context),
        Action: "ProvisionPublicIpv4PoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PurchaseHostReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseHostReservationRequest(input, context),
        Action: "PurchaseHostReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PurchaseReservedInstancesOfferingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseReservedInstancesOfferingRequest(input, context),
        Action: "PurchaseReservedInstancesOffering",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PurchaseScheduledInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseScheduledInstancesRequest(input, context),
        Action: "PurchaseScheduledInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RebootInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RebootInstancesRequest(input, context),
        Action: "RebootInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterImageRequest(input, context),
        Action: "RegisterImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterInstanceEventNotificationAttributesRequest(input, context),
        Action: "RegisterInstanceEventNotificationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterTransitGatewayMulticastGroupMembersRequest(input, context),
        Action: "RegisterTransitGatewayMulticastGroupMembers",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterTransitGatewayMulticastGroupSourcesRequest(input, context),
        Action: "RegisterTransitGatewayMulticastGroupSources",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectTransitGatewayMulticastDomainAssociationsRequest(input, context),
        Action: "RejectTransitGatewayMulticastDomainAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "RejectTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectTransitGatewayVpcAttachmentRequest(input, context),
        Action: "RejectTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectVpcEndpointConnectionsRequest(input, context),
        Action: "RejectVpcEndpointConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectVpcPeeringConnectionRequest(input, context),
        Action: "RejectVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReleaseAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReleaseAddressRequest(input, context),
        Action: "ReleaseAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReleaseHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReleaseHostsRequest(input, context),
        Action: "ReleaseHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReleaseIpamPoolAllocationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReleaseIpamPoolAllocationRequest(input, context),
        Action: "ReleaseIpamPoolAllocation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplaceIamInstanceProfileAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceIamInstanceProfileAssociationRequest(input, context),
        Action: "ReplaceIamInstanceProfileAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplaceNetworkAclAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceNetworkAclAssociationRequest(input, context),
        Action: "ReplaceNetworkAclAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplaceNetworkAclEntryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceNetworkAclEntryRequest(input, context),
        Action: "ReplaceNetworkAclEntry",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplaceRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceRouteRequest(input, context),
        Action: "ReplaceRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplaceRouteTableAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceRouteTableAssociationRequest(input, context),
        Action: "ReplaceRouteTableAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplaceTransitGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceTransitGatewayRouteRequest(input, context),
        Action: "ReplaceTransitGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplaceVpnTunnelCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceVpnTunnelRequest(input, context),
        Action: "ReplaceVpnTunnel",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReportInstanceStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReportInstanceStatusRequest(input, context),
        Action: "ReportInstanceStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestSpotFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RequestSpotFleetRequest(input, context),
        Action: "RequestSpotFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestSpotInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RequestSpotInstancesRequest(input, context),
        Action: "RequestSpotInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetAddressAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetAddressAttributeRequest(input, context),
        Action: "ResetAddressAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetEbsDefaultKmsKeyIdRequest(input, context),
        Action: "ResetEbsDefaultKmsKeyId",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetFpgaImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetFpgaImageAttributeRequest(input, context),
        Action: "ResetFpgaImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetImageAttributeRequest(input, context),
        Action: "ResetImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetInstanceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetInstanceAttributeRequest(input, context),
        Action: "ResetInstanceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetNetworkInterfaceAttributeRequest(input, context),
        Action: "ResetNetworkInterfaceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetSnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetSnapshotAttributeRequest(input, context),
        Action: "ResetSnapshotAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreAddressToClassicCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreAddressToClassicRequest(input, context),
        Action: "RestoreAddressToClassic",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreImageFromRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreImageFromRecycleBinRequest(input, context),
        Action: "RestoreImageFromRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreManagedPrefixListVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreManagedPrefixListVersionRequest(input, context),
        Action: "RestoreManagedPrefixListVersion",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreSnapshotFromRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreSnapshotFromRecycleBinRequest(input, context),
        Action: "RestoreSnapshotFromRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreSnapshotTierCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreSnapshotTierRequest(input, context),
        Action: "RestoreSnapshotTier",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RevokeClientVpnIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RevokeClientVpnIngressRequest(input, context),
        Action: "RevokeClientVpnIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RevokeSecurityGroupEgressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RevokeSecurityGroupEgressRequest(input, context),
        Action: "RevokeSecurityGroupEgress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RevokeSecurityGroupIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RevokeSecurityGroupIngressRequest(input, context),
        Action: "RevokeSecurityGroupIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RunInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RunInstancesRequest(input, context),
        Action: "RunInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RunScheduledInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RunScheduledInstancesRequest(input, context),
        Action: "RunScheduledInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchLocalGatewayRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SearchLocalGatewayRoutesRequest(input, context),
        Action: "SearchLocalGatewayRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchTransitGatewayMulticastGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SearchTransitGatewayMulticastGroupsRequest(input, context),
        Action: "SearchTransitGatewayMulticastGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchTransitGatewayRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SearchTransitGatewayRoutesRequest(input, context),
        Action: "SearchTransitGatewayRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendDiagnosticInterruptCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SendDiagnosticInterruptRequest(input, context),
        Action: "SendDiagnosticInterrupt",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartInstancesRequest(input, context),
        Action: "StartInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartNetworkInsightsAccessScopeAnalysisRequest(input, context),
        Action: "StartNetworkInsightsAccessScopeAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartNetworkInsightsAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartNetworkInsightsAnalysisRequest(input, context),
        Action: "StartNetworkInsightsAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartVpcEndpointServicePrivateDnsVerificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartVpcEndpointServicePrivateDnsVerificationRequest(input, context),
        Action: "StartVpcEndpointServicePrivateDnsVerification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopInstancesRequest(input, context),
        Action: "StopInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateClientVpnConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TerminateClientVpnConnectionsRequest(input, context),
        Action: "TerminateClientVpnConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TerminateInstancesRequest(input, context),
        Action: "TerminateInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UnassignIpv6AddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnassignIpv6AddressesRequest(input, context),
        Action: "UnassignIpv6Addresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UnassignPrivateIpAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnassignPrivateIpAddressesRequest(input, context),
        Action: "UnassignPrivateIpAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UnassignPrivateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnassignPrivateNatGatewayAddressRequest(input, context),
        Action: "UnassignPrivateNatGatewayAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UnmonitorInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnmonitorInstancesRequest(input, context),
        Action: "UnmonitorInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateSecurityGroupRuleDescriptionsEgressRequest(input, context),
        Action: "UpdateSecurityGroupRuleDescriptionsEgress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateSecurityGroupRuleDescriptionsIngressRequest(input, context),
        Action: "UpdateSecurityGroupRuleDescriptionsIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_WithdrawByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_WithdrawByoipCidrRequest(input, context),
        Action: "WithdrawByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AcceptAddressTransferCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptAddressTransferCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptAddressTransferResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptAddressTransferCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AcceptReservedInstancesExchangeQuoteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptReservedInstancesExchangeQuoteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptReservedInstancesExchangeQuoteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptReservedInstancesExchangeQuoteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptTransitGatewayMulticastDomainAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptTransitGatewayMulticastDomainAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptTransitGatewayMulticastDomainAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AcceptTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AcceptTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AcceptVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptVpcEndpointConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptVpcEndpointConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptVpcEndpointConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AcceptVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcceptVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AdvertiseByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AdvertiseByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AdvertiseByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdvertiseByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AllocateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AllocateAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AllocateAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AllocateAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AllocateHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AllocateHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AllocateHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AllocateHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AllocateIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AllocateIpamPoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AllocateIpamPoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AllocateIpamPoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ApplySecurityGroupsToClientVpnTargetNetworkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplySecurityGroupsToClientVpnTargetNetworkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ApplySecurityGroupsToClientVpnTargetNetworkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssignIpv6AddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssignIpv6AddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssignIpv6AddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssignIpv6AddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssignPrivateIpAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssignPrivateIpAddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssignPrivateIpAddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssignPrivateIpAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssignPrivateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssignPrivateNatGatewayAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssignPrivateNatGatewayAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssignPrivateNatGatewayAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateClientVpnTargetNetworkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateClientVpnTargetNetworkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateClientVpnTargetNetworkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateDhcpOptionsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AssociateDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateEnclaveCertificateIamRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateEnclaveCertificateIamRoleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateEnclaveCertificateIamRoleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateEnclaveCertificateIamRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateIamInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateIamInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateIamInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateIamInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateIpamResourceDiscoveryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateIpamResourceDiscoveryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateIpamResourceDiscoveryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateNatGatewayAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateNatGatewayAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateNatGatewayAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateSubnetCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateSubnetCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateSubnetCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateSubnetCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateTransitGatewayPolicyTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateTransitGatewayPolicyTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTransitGatewayPolicyTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateTrunkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateTrunkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateTrunkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTrunkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AssociateVpcCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateVpcCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateVpcCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateVpcCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AttachClassicLinkVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachClassicLinkVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachClassicLinkVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachClassicLinkVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AttachInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachInternetGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AttachInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AttachNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachNetworkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachNetworkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AttachVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachVerifiedAccessTrustProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachVerifiedAccessTrustProviderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachVerifiedAccessTrustProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AttachVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_VolumeAttachment(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AttachVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachVpnGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachVpnGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AuthorizeClientVpnIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AuthorizeClientVpnIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AuthorizeClientVpnIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AuthorizeClientVpnIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AuthorizeSecurityGroupEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AuthorizeSecurityGroupEgressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AuthorizeSecurityGroupEgressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AuthorizeSecurityGroupEgressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_AuthorizeSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AuthorizeSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AuthorizeSecurityGroupIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AuthorizeSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_BundleInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BundleInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BundleInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BundleInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelBundleTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelBundleTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelBundleTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelBundleTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelCapacityReservationFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelCapacityReservationFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelCapacityReservationFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelCapacityReservationFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelConversionTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelConversionTaskCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CancelConversionTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelExportTaskCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CancelExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelImageLaunchPermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelImageLaunchPermissionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelImageLaunchPermissionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelImageLaunchPermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelImportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelImportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelImportTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelImportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelReservedInstancesListingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelReservedInstancesListingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelReservedInstancesListingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelReservedInstancesListingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelSpotFleetRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelSpotFleetRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelSpotFleetRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelSpotFleetRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CancelSpotInstanceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelSpotInstanceRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelSpotInstanceRequestsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelSpotInstanceRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ConfirmProductInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ConfirmProductInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfirmProductInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmProductInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CopyFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopyFpgaImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopyFpgaImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CopyFpgaImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CopyImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopyImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopyImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CopyImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CopySnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopySnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopySnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CopySnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateCapacityReservationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCapacityReservationFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCapacityReservationFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCapacityReservationFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateCarrierGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCarrierGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCarrierGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCarrierGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateClientVpnEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateClientVpnEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateClientVpnEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateClientVpnRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateClientVpnRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateClientVpnRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateClientVpnRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateCoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateCoipPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCoipPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCoipPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCoipPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCustomerGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCustomerGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCustomerGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateDefaultSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDefaultSubnetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDefaultSubnetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDefaultSubnetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateDefaultVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDefaultVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDefaultVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDefaultVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDhcpOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDhcpOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateEgressOnlyInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEgressOnlyInternetGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEgressOnlyInternetGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEgressOnlyInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateFlowLogsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateFlowLogsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFlowLogsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateFpgaImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateFpgaImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFpgaImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateInstanceExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstanceExportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceExportTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInstanceExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInternetGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInternetGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateIpamPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateIpamResourceDiscoveryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamResourceDiscoveryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamResourceDiscoveryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateIpamScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_KeyPair(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLaunchTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLaunchTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLaunchTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateLaunchTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLaunchTemplateVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLaunchTemplateVersionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLaunchTemplateVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLocalGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateLocalGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLocalGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLocalGatewayRouteTableVpcAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteTableVpcAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteTableVpcAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateManagedPrefixListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateManagedPrefixListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateManagedPrefixListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateNatGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNatGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateNatGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNatGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateNetworkAclCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNetworkAclCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkAclResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNetworkAclEntryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateNetworkAclEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateNetworkInsightsAccessScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNetworkInsightsAccessScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInsightsAccessScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkInsightsAccessScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateNetworkInsightsPathCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNetworkInsightsPathCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInsightsPathResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkInsightsPathCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNetworkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateNetworkInterfacePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateNetworkInterfacePermissionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInterfacePermissionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkInterfacePermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreatePlacementGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePlacementGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePlacementGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePlacementGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreatePublicIpv4PoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePublicIpv4PoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePublicIpv4PoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePublicIpv4PoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateReplaceRootVolumeTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateReplaceRootVolumeTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateReplaceRootVolumeTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateReplaceRootVolumeTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateReservedInstancesListingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateReservedInstancesListingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateReservedInstancesListingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateReservedInstancesListingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateRestoreImageTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRestoreImageTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRestoreImageTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRestoreImageTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSecurityGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSecurityGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_Snapshot(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSpotDatafeedSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSpotDatafeedSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSpotDatafeedSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateStoreImageTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateStoreImageTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateStoreImageTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStoreImageTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSubnetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSubnetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSubnetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateSubnetCidrReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSubnetCidrReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSubnetCidrReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSubnetCidrReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTrafficMirrorFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTrafficMirrorFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorFilterResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrafficMirrorFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTrafficMirrorFilterRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorFilterRuleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrafficMirrorFilterRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTrafficMirrorSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrafficMirrorSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTrafficMirrorTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTrafficMirrorTargetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorTargetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrafficMirrorTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayConnectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayConnectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayConnectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayConnectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayConnectPeerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayConnectPeerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayConnectPeerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayPolicyTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayPolicyTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayPolicyTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayPrefixListReferenceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayPrefixListReferenceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayPrefixListReferenceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayRouteTableAnnouncementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayRouteTableAnnouncementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayRouteTableAnnouncementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayRouteTableAnnouncementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVerifiedAccessEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVerifiedAccessEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVerifiedAccessGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVerifiedAccessGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVerifiedAccessInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVerifiedAccessInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVerifiedAccessTrustProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessTrustProviderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessTrustProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_Volume(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpcEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpcEndpointConnectionNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpcEndpointConnectionNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcEndpointConnectionNotificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcEndpointConnectionNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpcEndpointServiceConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpcEndpointServiceConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcEndpointServiceConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcEndpointServiceConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpnConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpnConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpnConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpnConnectionRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpnConnectionRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateVpnConnectionRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_CreateVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateVpnGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpnGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteCarrierGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCarrierGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteCarrierGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCarrierGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteClientVpnEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteClientVpnEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteClientVpnEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteClientVpnRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteClientVpnRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteClientVpnRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteClientVpnRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteCoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteCoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteCoipPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCoipPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteCoipPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCoipPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCustomerGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteCustomerGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDhcpOptionsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteEgressOnlyInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEgressOnlyInternetGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteEgressOnlyInternetGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteEgressOnlyInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteFlowLogsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteFlowLogsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFlowLogsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteFpgaImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteFpgaImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFpgaImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteInternetGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteIpamPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteIpamResourceDiscoveryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamResourceDiscoveryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamResourceDiscoveryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteIpamScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteKeyPairCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLaunchTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLaunchTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLaunchTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteLaunchTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLaunchTemplateVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLaunchTemplateVersionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLaunchTemplateVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLocalGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteLocalGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLocalGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLocalGatewayRouteTableVpcAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteTableVpcAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteTableVpcAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteManagedPrefixListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteManagedPrefixListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteManagedPrefixListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNatGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNatGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteNatGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNatGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkAclCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkAclCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNetworkAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkAclEntryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNetworkAclEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkInsightsAccessScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkInsightsAccessScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsAccessScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInsightsAccessScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkInsightsAccessScopeAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsAccessScopeAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInsightsAccessScopeAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkInsightsAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkInsightsAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInsightsAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkInsightsPathCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkInsightsPathCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsPathResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInsightsPathCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkInterfaceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteNetworkInterfacePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteNetworkInterfacePermissionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInterfacePermissionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInterfacePermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeletePlacementGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePlacementGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePlacementGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeletePublicIpv4PoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePublicIpv4PoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeletePublicIpv4PoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeletePublicIpv4PoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteQueuedReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteQueuedReservedInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteQueuedReservedInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteQueuedReservedInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRouteTableCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSecurityGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSnapshotCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSpotDatafeedSubscriptionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSpotDatafeedSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSubnetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSubnetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteSubnetCidrReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSubnetCidrReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteSubnetCidrReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteSubnetCidrReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTrafficMirrorFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTrafficMirrorFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorFilterResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrafficMirrorFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTrafficMirrorFilterRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorFilterRuleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrafficMirrorFilterRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTrafficMirrorSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrafficMirrorSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTrafficMirrorTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTrafficMirrorTargetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorTargetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrafficMirrorTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayConnectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayConnectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayConnectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayConnectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayConnectPeerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayConnectPeerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayConnectPeerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayPolicyTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayPolicyTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayPolicyTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayPrefixListReferenceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayPrefixListReferenceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayPrefixListReferenceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayRouteTableAnnouncementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayRouteTableAnnouncementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayRouteTableAnnouncementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayRouteTableAnnouncementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVerifiedAccessEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVerifiedAccessEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVerifiedAccessGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVerifiedAccessGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVerifiedAccessInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVerifiedAccessInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVerifiedAccessTrustProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessTrustProviderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessTrustProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVolumeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpcCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpcEndpointConnectionNotificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpcEndpointConnectionNotificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcEndpointConnectionNotificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcEndpointConnectionNotificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpcEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpcEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcEndpointsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpcEndpointServiceConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpcEndpointServiceConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcEndpointServiceConfigurationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcEndpointServiceConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpnConnectionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpnConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpnConnectionRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpnConnectionRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpnConnectionRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeleteVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteVpnGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeprovisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeprovisionByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeprovisionByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeprovisionIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeprovisionIpamPoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionIpamPoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeprovisionIpamPoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeprovisionPublicIpv4PoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeprovisionPublicIpv4PoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionPublicIpv4PoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeprovisionPublicIpv4PoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeregisterImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterImageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeregisterImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeregisterInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterInstanceEventNotificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeregisterInstanceEventNotificationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterInstanceEventNotificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeregisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterTransitGatewayMulticastGroupMembersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeregisterTransitGatewayMulticastGroupMembersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTransitGatewayMulticastGroupMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeregisterTransitGatewayMulticastGroupSourcesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTransitGatewayMulticastGroupSourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAccountAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAccountAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAccountAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeAddressesAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAddressesAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAddressesAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAddressesAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeAddressTransfersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAddressTransfersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAddressTransfersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAddressTransfersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeAggregateIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAggregateIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAggregateIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAggregateIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeAvailabilityZonesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAvailabilityZonesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAvailabilityZonesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAvailabilityZonesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeBundleTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeBundleTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBundleTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeBundleTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeByoipCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeByoipCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeByoipCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeByoipCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeCapacityReservationFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCapacityReservationFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityReservationFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityReservationFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeCapacityReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCapacityReservationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityReservationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityReservationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeCarrierGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCarrierGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCarrierGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCarrierGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeClassicLinkInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeClassicLinkInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClassicLinkInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClassicLinkInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeClientVpnAuthorizationRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeClientVpnAuthorizationRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnAuthorizationRulesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnAuthorizationRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeClientVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeClientVpnConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeClientVpnEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeClientVpnEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnEndpointsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeClientVpnRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeClientVpnRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeClientVpnTargetNetworksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeClientVpnTargetNetworksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnTargetNetworksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnTargetNetworksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeCoipPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCoipPoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCoipPoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCoipPoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeConversionTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConversionTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConversionTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeConversionTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeCustomerGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCustomerGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCustomerGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCustomerGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDhcpOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDhcpOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeEgressOnlyInternetGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEgressOnlyInternetGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEgressOnlyInternetGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEgressOnlyInternetGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeElasticGpusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeElasticGpusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeElasticGpusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeElasticGpusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeExportImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeExportImageTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeExportImageTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExportImageTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeExportTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeExportTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeExportTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExportTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFastLaunchImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFastLaunchImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFastLaunchImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFastLaunchImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFastSnapshotRestoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFastSnapshotRestoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFastSnapshotRestoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFleetHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFleetHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFleetHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFleetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFleetInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFleetInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFlowLogsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFlowLogsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFlowLogsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFpgaImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFpgaImageAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFpgaImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeFpgaImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFpgaImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFpgaImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFpgaImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeHostReservationOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHostReservationOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHostReservationOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHostReservationOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeHostReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHostReservationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHostReservationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHostReservationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIamInstanceProfileAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIamInstanceProfileAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIamInstanceProfileAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIamInstanceProfileAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIdentityIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIdentityIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIdentityIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIdentityIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImageAttribute(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeImportImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImportImageTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImportImageTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImportImageTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeImportSnapshotTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImportSnapshotTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImportSnapshotTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImportSnapshotTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstanceAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_InstanceAttribute(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstanceCreditSpecificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstanceCreditSpecificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceCreditSpecificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceCreditSpecificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstanceEventNotificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceEventNotificationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceEventNotificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstanceEventWindowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstanceEventWindowsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceEventWindowsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceEventWindowsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstanceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstanceStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstanceTypeOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstanceTypeOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceTypeOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceTypeOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInstanceTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstanceTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceTypesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeInternetGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInternetGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInternetGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInternetGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIpamPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIpamPoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamPoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamPoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIpamResourceDiscoveriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIpamResourceDiscoveriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamResourceDiscoveriesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamResourceDiscoveriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIpamResourceDiscoveryAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIpamResourceDiscoveryAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamResourceDiscoveryAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamResourceDiscoveryAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIpamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIpamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIpamScopesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIpamScopesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamScopesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamScopesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeIpv6PoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeIpv6PoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpv6PoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpv6PoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeKeyPairsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeKeyPairsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeKeyPairsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeKeyPairsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLaunchTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLaunchTemplatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLaunchTemplatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLaunchTemplatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLaunchTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLaunchTemplateVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLaunchTemplateVersionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLaunchTemplateVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLocalGatewayRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLocalGatewayRouteTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayRouteTablesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayRouteTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLocalGatewayRouteTableVpcAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayRouteTableVpcAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayRouteTableVpcAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLocalGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLocalGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLocalGatewayVirtualInterfaceGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayVirtualInterfaceGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayVirtualInterfaceGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeLocalGatewayVirtualInterfacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeLocalGatewayVirtualInterfacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayVirtualInterfacesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayVirtualInterfacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeManagedPrefixListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeManagedPrefixListsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeManagedPrefixListsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeManagedPrefixListsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeMovingAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeMovingAddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMovingAddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMovingAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNatGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNatGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNatGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNatGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkAclsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkAclsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkAclsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkAclsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkInsightsAccessScopeAnalysesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsAccessScopeAnalysesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsAccessScopeAnalysesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkInsightsAccessScopesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkInsightsAccessScopesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsAccessScopesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsAccessScopesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkInsightsAnalysesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkInsightsAnalysesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsAnalysesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsAnalysesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkInsightsPathsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkInsightsPathsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsPathsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsPathsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkInterfaceAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInterfaceAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInterfaceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkInterfacePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkInterfacePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInterfacePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInterfacePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeNetworkInterfacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeNetworkInterfacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInterfacesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInterfacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribePlacementGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePlacementGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePlacementGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePlacementGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribePrefixListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePrefixListsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePrefixListsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePrefixListsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribePrincipalIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePrincipalIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePrincipalIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePrincipalIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribePublicIpv4PoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePublicIpv4PoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePublicIpv4PoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePublicIpv4PoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRegionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRegionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRegionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeReplaceRootVolumeTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeReplaceRootVolumeTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeReplaceRootVolumeTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReplaceRootVolumeTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeReservedInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeReservedInstancesListingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeReservedInstancesListingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesListingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesListingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeReservedInstancesModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeReservedInstancesModificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesModificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesModificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeReservedInstancesOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeReservedInstancesOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRouteTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRouteTablesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRouteTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeScheduledInstanceAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeScheduledInstanceAvailabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScheduledInstanceAvailabilityResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeScheduledInstanceAvailabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeScheduledInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScheduledInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeScheduledInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSecurityGroupReferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSecurityGroupReferencesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityGroupReferencesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSecurityGroupReferencesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSecurityGroupRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSecurityGroupRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityGroupRulesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSecurityGroupRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSecurityGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSecurityGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSnapshotAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSnapshotAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSnapshotTierStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSnapshotTierStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSnapshotTierStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSnapshotTierStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSpotDatafeedSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotDatafeedSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotDatafeedSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSpotFleetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSpotFleetInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotFleetInstancesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotFleetInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSpotFleetRequestHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSpotFleetRequestHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotFleetRequestHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotFleetRequestHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSpotFleetRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSpotFleetRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotFleetRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotFleetRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSpotInstanceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSpotInstanceRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotInstanceRequestsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotInstanceRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSpotPriceHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSpotPriceHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotPriceHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotPriceHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeStaleSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeStaleSecurityGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStaleSecurityGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStaleSecurityGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeStoreImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeStoreImageTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStoreImageTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStoreImageTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeSubnetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSubnetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSubnetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSubnetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTagsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTrafficMirrorFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTrafficMirrorFiltersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrafficMirrorFiltersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrafficMirrorFiltersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTrafficMirrorSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTrafficMirrorSessionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrafficMirrorSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrafficMirrorSessionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTrafficMirrorTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTrafficMirrorTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrafficMirrorTargetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrafficMirrorTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayAttachmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayAttachmentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayAttachmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayConnectPeersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayConnectPeersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayConnectPeersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayConnectPeersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayConnectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayConnectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayConnectsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayConnectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayMulticastDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayMulticastDomainsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayMulticastDomainsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayMulticastDomainsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayPeeringAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayPeeringAttachmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayPeeringAttachmentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayPeeringAttachmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayPolicyTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayPolicyTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayPolicyTablesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayPolicyTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayRouteTableAnnouncementsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayRouteTableAnnouncementsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayRouteTableAnnouncementsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayRouteTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayRouteTablesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayRouteTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTransitGatewayVpcAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTransitGatewayVpcAttachmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayVpcAttachmentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayVpcAttachmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeTrunkInterfaceAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTrunkInterfaceAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrunkInterfaceAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrunkInterfaceAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVerifiedAccessEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVerifiedAccessEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessEndpointsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVerifiedAccessGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVerifiedAccessGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVerifiedAccessInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVerifiedAccessInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVerifiedAccessTrustProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVerifiedAccessTrustProvidersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessTrustProvidersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessTrustProvidersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVolumeAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVolumeAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumeAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumeAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVolumesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVolumesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVolumesModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVolumesModificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumesModificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumesModificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVolumeStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVolumeStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumeStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumeStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcClassicLinkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcClassicLinkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcClassicLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcClassicLinkDnsSupportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcClassicLinkDnsSupportResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcClassicLinkDnsSupportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcEndpointConnectionNotificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcEndpointConnectionNotificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointConnectionNotificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointConnectionNotificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcEndpointConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcEndpointServiceConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcEndpointServiceConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointServiceConfigurationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointServiceConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcEndpointServicePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcEndpointServicePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointServicePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointServicePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcEndpointServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcEndpointServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointServicesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcPeeringConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcPeeringConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcPeeringConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcPeeringConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpcsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpcsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpnConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpnConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpnConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DescribeVpnGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeVpnGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpnGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpnGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DetachClassicLinkVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachClassicLinkVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachClassicLinkVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachClassicLinkVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DetachInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachInternetGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DetachNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachNetworkInterfaceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DetachVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachVerifiedAccessTrustProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachVerifiedAccessTrustProviderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachVerifiedAccessTrustProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DetachVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_VolumeAttachment(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DetachVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachVpnGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableAddressTransferCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableAddressTransferCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableAddressTransferResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableAddressTransferCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableAwsNetworkPerformanceMetricSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableAwsNetworkPerformanceMetricSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableEbsEncryptionByDefaultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableEbsEncryptionByDefaultResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableEbsEncryptionByDefaultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableFastLaunchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableFastLaunchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableFastLaunchResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableFastLaunchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableFastSnapshotRestoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableFastSnapshotRestoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableFastSnapshotRestoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableImageDeprecationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableImageDeprecationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableImageDeprecationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableImageDeprecationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableIpamOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableIpamOrganizationAdminAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableIpamOrganizationAdminAccountResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableIpamOrganizationAdminAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableSerialConsoleAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableSerialConsoleAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableSerialConsoleAccessResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableSerialConsoleAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableTransitGatewayRouteTablePropagationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableTransitGatewayRouteTablePropagationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableTransitGatewayRouteTablePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableVgwRoutePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableVgwRoutePropagationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisableVgwRoutePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableVpcClassicLinkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableVpcClassicLinkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableVpcClassicLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisableVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableVpcClassicLinkDnsSupportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableVpcClassicLinkDnsSupportResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableVpcClassicLinkDnsSupportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateAddressCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisassociateAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateClientVpnTargetNetworkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateClientVpnTargetNetworkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateClientVpnTargetNetworkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateEnclaveCertificateIamRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateEnclaveCertificateIamRoleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateEnclaveCertificateIamRoleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateEnclaveCertificateIamRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateIamInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateIamInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateIamInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateIamInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateIpamResourceDiscoveryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateIpamResourceDiscoveryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateIpamResourceDiscoveryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateNatGatewayAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateNatGatewayAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateNatGatewayAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateRouteTableCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisassociateRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateSubnetCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateSubnetCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateSubnetCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateSubnetCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateTransitGatewayPolicyTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTransitGatewayPolicyTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTransitGatewayPolicyTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateTrunkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateTrunkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTrunkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTrunkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_DisassociateVpcCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateVpcCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateVpcCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateVpcCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableAddressTransferCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableAddressTransferCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableAddressTransferResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableAddressTransferCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableAwsNetworkPerformanceMetricSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableAwsNetworkPerformanceMetricSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableEbsEncryptionByDefaultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableEbsEncryptionByDefaultResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableEbsEncryptionByDefaultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableFastLaunchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableFastLaunchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableFastLaunchResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableFastLaunchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableFastSnapshotRestoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableFastSnapshotRestoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableFastSnapshotRestoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableImageDeprecationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableImageDeprecationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableImageDeprecationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableImageDeprecationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableIpamOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableIpamOrganizationAdminAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableIpamOrganizationAdminAccountResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableIpamOrganizationAdminAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableReachabilityAnalyzerOrganizationSharingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableReachabilityAnalyzerOrganizationSharingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableReachabilityAnalyzerOrganizationSharingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableReachabilityAnalyzerOrganizationSharingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableSerialConsoleAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableSerialConsoleAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableSerialConsoleAccessResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableSerialConsoleAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableTransitGatewayRouteTablePropagationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableTransitGatewayRouteTablePropagationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableTransitGatewayRouteTablePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableVgwRoutePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableVgwRoutePropagationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableVgwRoutePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableVolumeIOCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableVolumeIOCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableVolumeIOCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableVpcClassicLinkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableVpcClassicLinkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableVpcClassicLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_EnableVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableVpcClassicLinkDnsSupportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableVpcClassicLinkDnsSupportResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableVpcClassicLinkDnsSupportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ExportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExportClientVpnClientCertificateRevocationListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportClientVpnClientCertificateRevocationListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportClientVpnClientCertificateRevocationListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ExportClientVpnClientConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExportClientVpnClientConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportClientVpnClientConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportClientVpnClientConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ExportImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExportImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ExportTransitGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExportTransitGatewayRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportTransitGatewayRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportTransitGatewayRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetAssociatedEnclaveCertificateIamRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAssociatedEnclaveCertificateIamRolesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAssociatedEnclaveCertificateIamRolesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAssociatedEnclaveCertificateIamRolesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetAssociatedIpv6PoolCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAssociatedIpv6PoolCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAssociatedIpv6PoolCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAssociatedIpv6PoolCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetAwsNetworkPerformanceDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAwsNetworkPerformanceDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAwsNetworkPerformanceDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAwsNetworkPerformanceDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetCapacityReservationUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCapacityReservationUsageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCapacityReservationUsageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCapacityReservationUsageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetCoipPoolUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCoipPoolUsageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCoipPoolUsageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCoipPoolUsageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetConsoleOutputCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConsoleOutputCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConsoleOutputResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetConsoleOutputCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetConsoleScreenshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConsoleScreenshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConsoleScreenshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetConsoleScreenshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetDefaultCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDefaultCreditSpecificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDefaultCreditSpecificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDefaultCreditSpecificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetEbsDefaultKmsKeyIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEbsDefaultKmsKeyIdResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetEbsDefaultKmsKeyIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetEbsEncryptionByDefaultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEbsEncryptionByDefaultResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetEbsEncryptionByDefaultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetFlowLogsIntegrationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetFlowLogsIntegrationTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetFlowLogsIntegrationTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetFlowLogsIntegrationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetGroupsForCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetGroupsForCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetGroupsForCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetGroupsForCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetHostReservationPurchasePreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetHostReservationPurchasePreviewCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetHostReservationPurchasePreviewResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetHostReservationPurchasePreviewCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetInstanceTypesFromInstanceRequirementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceTypesFromInstanceRequirementsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceTypesFromInstanceRequirementsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInstanceTypesFromInstanceRequirementsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetInstanceUefiDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceUefiDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceUefiDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInstanceUefiDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetIpamAddressHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetIpamAddressHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetIpamAddressHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamAddressHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetIpamDiscoveredAccountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetIpamDiscoveredAccountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetIpamDiscoveredAccountsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamDiscoveredAccountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetIpamDiscoveredResourceCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetIpamDiscoveredResourceCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetIpamDiscoveredResourceCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamDiscoveredResourceCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetIpamPoolAllocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetIpamPoolAllocationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetIpamPoolAllocationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamPoolAllocationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetIpamPoolCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetIpamPoolCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetIpamPoolCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamPoolCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetIpamResourceCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetIpamResourceCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetIpamResourceCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamResourceCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetLaunchTemplateDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLaunchTemplateDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLaunchTemplateDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLaunchTemplateDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetManagedPrefixListAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetManagedPrefixListAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetManagedPrefixListAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetManagedPrefixListAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetManagedPrefixListEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetManagedPrefixListEntriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetManagedPrefixListEntriesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetManagedPrefixListEntriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetNetworkInsightsAccessScopeAnalysisFindingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetNetworkInsightsAccessScopeAnalysisFindingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetNetworkInsightsAccessScopeAnalysisFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetNetworkInsightsAccessScopeContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetNetworkInsightsAccessScopeContentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetNetworkInsightsAccessScopeContentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetNetworkInsightsAccessScopeContentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetPasswordDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPasswordDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPasswordDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPasswordDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetReservedInstancesExchangeQuoteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetReservedInstancesExchangeQuoteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetReservedInstancesExchangeQuoteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetReservedInstancesExchangeQuoteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetSerialConsoleAccessStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSerialConsoleAccessStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSerialConsoleAccessStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSerialConsoleAccessStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetSpotPlacementScoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSpotPlacementScoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSpotPlacementScoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSpotPlacementScoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetSubnetCidrReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSubnetCidrReservationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSubnetCidrReservationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSubnetCidrReservationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetTransitGatewayAttachmentPropagationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTransitGatewayAttachmentPropagationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayAttachmentPropagationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayAttachmentPropagationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTransitGatewayMulticastDomainAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayMulticastDomainAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayMulticastDomainAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetTransitGatewayPolicyTableAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTransitGatewayPolicyTableAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayPolicyTableAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayPolicyTableAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetTransitGatewayPolicyTableEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTransitGatewayPolicyTableEntriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayPolicyTableEntriesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayPolicyTableEntriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetTransitGatewayPrefixListReferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTransitGatewayPrefixListReferencesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayPrefixListReferencesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayPrefixListReferencesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetTransitGatewayRouteTableAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTransitGatewayRouteTableAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayRouteTableAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayRouteTableAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetTransitGatewayRouteTablePropagationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTransitGatewayRouteTablePropagationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayRouteTablePropagationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayRouteTablePropagationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetVerifiedAccessEndpointPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetVerifiedAccessEndpointPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVerifiedAccessEndpointPolicyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVerifiedAccessEndpointPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetVerifiedAccessGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetVerifiedAccessGroupPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVerifiedAccessGroupPolicyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVerifiedAccessGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetVpnConnectionDeviceSampleConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetVpnConnectionDeviceSampleConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVpnConnectionDeviceSampleConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVpnConnectionDeviceSampleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetVpnConnectionDeviceTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetVpnConnectionDeviceTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVpnConnectionDeviceTypesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVpnConnectionDeviceTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_GetVpnTunnelReplacementStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetVpnTunnelReplacementStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetVpnTunnelReplacementStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVpnTunnelReplacementStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ImportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportClientVpnClientCertificateRevocationListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportClientVpnClientCertificateRevocationListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportClientVpnClientCertificateRevocationListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ImportImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ImportInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ImportKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ImportSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ImportVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportVolumeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ListImagesInRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListImagesInRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListImagesInRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImagesInRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ListSnapshotsInRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSnapshotsInRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSnapshotsInRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSnapshotsInRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyAddressAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyAddressAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyAddressAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyAddressAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyAvailabilityZoneGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyAvailabilityZoneGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyAvailabilityZoneGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyAvailabilityZoneGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyCapacityReservationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyCapacityReservationFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyCapacityReservationFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyCapacityReservationFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyClientVpnEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyClientVpnEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyClientVpnEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyDefaultCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyDefaultCreditSpecificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyDefaultCreditSpecificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyDefaultCreditSpecificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyEbsDefaultKmsKeyIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyEbsDefaultKmsKeyIdResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyEbsDefaultKmsKeyIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyFpgaImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyFpgaImageAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyFpgaImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyIdentityIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyIdentityIdFormatCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyIdentityIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyIdFormatCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyImageAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstanceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyInstanceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstanceCapacityReservationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstanceCapacityReservationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceCapacityReservationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceCapacityReservationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstanceCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstanceCreditSpecificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceCreditSpecificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceCreditSpecificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstanceEventStartTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstanceEventStartTimeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceEventStartTimeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceEventStartTimeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstanceMaintenanceOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstanceMaintenanceOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceMaintenanceOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceMaintenanceOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstanceMetadataOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstanceMetadataOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceMetadataOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceMetadataOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyInstancePlacementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyInstancePlacementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstancePlacementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstancePlacementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyIpamPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyIpamResourceCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyIpamResourceCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamResourceCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamResourceCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyIpamResourceDiscoveryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamResourceDiscoveryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamResourceDiscoveryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyIpamScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyLaunchTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyLaunchTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyLaunchTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyLocalGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyLocalGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyLocalGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyManagedPrefixListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyManagedPrefixListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyManagedPrefixListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyNetworkInterfaceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyNetworkInterfaceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyPrivateDnsNameOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyPrivateDnsNameOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyPrivateDnsNameOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyPrivateDnsNameOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyReservedInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyReservedInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyReservedInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifySecurityGroupRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifySecurityGroupRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifySecurityGroupRulesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifySecurityGroupRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifySnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifySnapshotAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifySnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifySnapshotTierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifySnapshotTierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifySnapshotTierResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifySnapshotTierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifySpotFleetRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifySpotFleetRequestCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifySpotFleetRequestResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifySpotFleetRequestCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifySubnetAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifySubnetAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifySubnetAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyTrafficMirrorFilterNetworkServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyTrafficMirrorFilterNetworkServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyTrafficMirrorFilterNetworkServicesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTrafficMirrorFilterNetworkServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyTrafficMirrorFilterRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyTrafficMirrorFilterRuleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTrafficMirrorFilterRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyTrafficMirrorSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyTrafficMirrorSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTrafficMirrorSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyTransitGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyTransitGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTransitGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyTransitGatewayPrefixListReferenceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyTransitGatewayPrefixListReferenceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTransitGatewayPrefixListReferenceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVerifiedAccessEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVerifiedAccessEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVerifiedAccessEndpointPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVerifiedAccessEndpointPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessEndpointPolicyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessEndpointPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVerifiedAccessGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVerifiedAccessGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVerifiedAccessGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVerifiedAccessGroupPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessGroupPolicyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVerifiedAccessInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVerifiedAccessInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVerifiedAccessInstanceLoggingConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessInstanceLoggingConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessInstanceLoggingConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVerifiedAccessTrustProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessTrustProviderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessTrustProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVolumeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVolumeAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVolumeAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyVolumeAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyVpcAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcEndpointConnectionNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcEndpointConnectionNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointConnectionNotificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointConnectionNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcEndpointServiceConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcEndpointServiceConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointServiceConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointServiceConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcEndpointServicePayerResponsibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcEndpointServicePayerResponsibilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointServicePayerResponsibilityResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointServicePayerResponsibilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcEndpointServicePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcEndpointServicePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointServicePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointServicePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcPeeringConnectionOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcPeeringConnectionOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcPeeringConnectionOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcPeeringConnectionOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpcTenancyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpcTenancyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcTenancyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcTenancyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpnConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpnConnectionOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpnConnectionOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnConnectionOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnConnectionOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpnTunnelCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpnTunnelCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnTunnelCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnTunnelCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ModifyVpnTunnelOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ModifyVpnTunnelOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnTunnelOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnTunnelOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_MonitorInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_MonitorInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_MonitorInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_MonitorInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_MoveAddressToVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_MoveAddressToVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_MoveAddressToVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_MoveAddressToVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_MoveByoipCidrToIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_MoveByoipCidrToIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_MoveByoipCidrToIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_MoveByoipCidrToIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ProvisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ProvisionByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ProvisionByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ProvisionByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ProvisionIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ProvisionIpamPoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ProvisionIpamPoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ProvisionIpamPoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ProvisionPublicIpv4PoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ProvisionPublicIpv4PoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ProvisionPublicIpv4PoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ProvisionPublicIpv4PoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_PurchaseHostReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PurchaseHostReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PurchaseHostReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseHostReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_PurchaseReservedInstancesOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PurchaseReservedInstancesOfferingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PurchaseReservedInstancesOfferingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseReservedInstancesOfferingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_PurchaseScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PurchaseScheduledInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PurchaseScheduledInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseScheduledInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RebootInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebootInstancesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RebootInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RegisterImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RegisterInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterInstanceEventNotificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterInstanceEventNotificationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterInstanceEventNotificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RegisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterTransitGatewayMulticastGroupMembersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterTransitGatewayMulticastGroupMembersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTransitGatewayMulticastGroupMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RegisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterTransitGatewayMulticastGroupSourcesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTransitGatewayMulticastGroupSourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RejectTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RejectTransitGatewayMulticastDomainAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RejectTransitGatewayMulticastDomainAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectTransitGatewayMulticastDomainAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RejectTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RejectTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RejectTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RejectTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RejectTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RejectTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RejectVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RejectVpcEndpointConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RejectVpcEndpointConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectVpcEndpointConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RejectVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RejectVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RejectVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReleaseAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReleaseAddressCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReleaseAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReleaseHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReleaseHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReleaseHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReleaseHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReleaseIpamPoolAllocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReleaseIpamPoolAllocationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReleaseIpamPoolAllocationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReleaseIpamPoolAllocationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReplaceIamInstanceProfileAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplaceIamInstanceProfileAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReplaceIamInstanceProfileAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceIamInstanceProfileAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReplaceNetworkAclAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplaceNetworkAclAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReplaceNetworkAclAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceNetworkAclAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReplaceNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplaceNetworkAclEntryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReplaceNetworkAclEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReplaceRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplaceRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReplaceRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReplaceRouteTableAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplaceRouteTableAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReplaceRouteTableAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceRouteTableAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReplaceTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplaceTransitGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReplaceTransitGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceTransitGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReplaceVpnTunnelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplaceVpnTunnelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReplaceVpnTunnelResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceVpnTunnelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ReportInstanceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReportInstanceStatusCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReportInstanceStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RequestSpotFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RequestSpotFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RequestSpotFleetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RequestSpotFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RequestSpotInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RequestSpotInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RequestSpotInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RequestSpotInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ResetAddressAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetAddressAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResetAddressAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetAddressAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ResetEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetEbsDefaultKmsKeyIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResetEbsDefaultKmsKeyIdResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetEbsDefaultKmsKeyIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ResetFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetFpgaImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResetFpgaImageAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetFpgaImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ResetImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetImageAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ResetInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetInstanceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetInstanceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ResetNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetNetworkInterfaceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetNetworkInterfaceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_ResetSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetSnapshotAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RestoreAddressToClassicCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreAddressToClassicCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreAddressToClassicResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreAddressToClassicCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RestoreImageFromRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreImageFromRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreImageFromRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreImageFromRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RestoreManagedPrefixListVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreManagedPrefixListVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreManagedPrefixListVersionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreManagedPrefixListVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RestoreSnapshotFromRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreSnapshotFromRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreSnapshotFromRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreSnapshotFromRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RestoreSnapshotTierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreSnapshotTierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreSnapshotTierResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreSnapshotTierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RevokeClientVpnIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RevokeClientVpnIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RevokeClientVpnIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeClientVpnIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RevokeSecurityGroupEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RevokeSecurityGroupEgressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RevokeSecurityGroupEgressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeSecurityGroupEgressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RevokeSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RevokeSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RevokeSecurityGroupIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RunInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RunInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_Reservation(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RunInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_RunScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RunScheduledInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RunScheduledInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RunScheduledInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_SearchLocalGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SearchLocalGatewayRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchLocalGatewayRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchLocalGatewayRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_SearchTransitGatewayMulticastGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SearchTransitGatewayMulticastGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchTransitGatewayMulticastGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchTransitGatewayMulticastGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_SearchTransitGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SearchTransitGatewayRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchTransitGatewayRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchTransitGatewayRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_SendDiagnosticInterruptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SendDiagnosticInterruptCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SendDiagnosticInterruptCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_StartInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_StartNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartNetworkInsightsAccessScopeAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartNetworkInsightsAccessScopeAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartNetworkInsightsAccessScopeAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_StartNetworkInsightsAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartNetworkInsightsAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartNetworkInsightsAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartNetworkInsightsAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_StartVpcEndpointServicePrivateDnsVerificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartVpcEndpointServicePrivateDnsVerificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartVpcEndpointServicePrivateDnsVerificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartVpcEndpointServicePrivateDnsVerificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_StopInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_TerminateClientVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TerminateClientVpnConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TerminateClientVpnConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TerminateClientVpnConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_TerminateInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TerminateInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TerminateInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TerminateInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_UnassignIpv6AddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UnassignIpv6AddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UnassignIpv6AddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnassignIpv6AddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_UnassignPrivateIpAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UnassignPrivateIpAddressesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UnassignPrivateIpAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_UnassignPrivateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UnassignPrivateNatGatewayAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UnassignPrivateNatGatewayAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnassignPrivateNatGatewayAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_UnmonitorInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UnmonitorInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UnmonitorInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnmonitorInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateSecurityGroupRuleDescriptionsEgressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateSecurityGroupRuleDescriptionsEgressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateSecurityGroupRuleDescriptionsEgressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateSecurityGroupRuleDescriptionsIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateSecurityGroupRuleDescriptionsIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateSecurityGroupRuleDescriptionsIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
export const de_WithdrawByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_WithdrawByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_WithdrawByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_WithdrawByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
const se_AcceleratorCount = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_AcceleratorCountRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_AcceleratorManufacturerSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AcceleratorNameSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AcceleratorTotalMemoryMiB = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_AcceleratorTotalMemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_AcceleratorTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AcceptAddressTransferRequest = (input, context) => {
    const entries = {};
    if (input.Address != null) {
        entries["Address"] = input.Address;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AcceptReservedInstancesExchangeQuoteRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstanceIds != null) {
        const memberEntries = se_ReservedInstanceIdSet(input.ReservedInstanceIds, context);
        if (input.ReservedInstanceIds?.length === 0) {
            entries.ReservedInstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetConfigurations != null) {
        const memberEntries = se_TargetConfigurationRequestSet(input.TargetConfigurations, context);
        if (input.TargetConfigurations?.length === 0) {
            entries.TargetConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AcceptTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_ValueStringList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AcceptTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AcceptTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AcceptVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointIds != null) {
        const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
        if (input.VpcEndpointIds?.length === 0) {
            entries.VpcEndpointId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AcceptVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId != null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const se_AccessScopePathListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AccessScopePathRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AccessScopePathRequest = (input, context) => {
    const entries = {};
    if (input.Source != null) {
        const memberEntries = se_PathStatementRequest(input.Source, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Source.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Destination != null) {
        const memberEntries = se_PathStatementRequest(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ThroughResources != null) {
        const memberEntries = se_ThroughResourcesStatementRequestList(input.ThroughResources, context);
        if (input.ThroughResources?.length === 0) {
            entries.ThroughResource = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ThroughResource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AccountAttributeNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AttributeName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AddIpamOperatingRegion = (input, context) => {
    const entries = {};
    if (input.RegionName != null) {
        entries["RegionName"] = input.RegionName;
    }
    return entries;
};
const se_AddIpamOperatingRegionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AddIpamOperatingRegion(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AddPrefixListEntries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AddPrefixListEntry(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AddPrefixListEntry = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_AdvertiseByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AllocateAddressRequest = (input, context) => {
    const entries = {};
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.Address != null) {
        entries["Address"] = input.Address;
    }
    if (input.PublicIpv4Pool != null) {
        entries["PublicIpv4Pool"] = input.PublicIpv4Pool;
    }
    if (input.NetworkBorderGroup != null) {
        entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
    }
    if (input.CustomerOwnedIpv4Pool != null) {
        entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AllocateHostsRequest = (input, context) => {
    const entries = {};
    if (input.AutoPlacement != null) {
        entries["AutoPlacement"] = input.AutoPlacement;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstanceFamily != null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    if (input.Quantity != null) {
        entries["Quantity"] = input.Quantity;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostRecovery != null) {
        entries["HostRecovery"] = input.HostRecovery;
    }
    if (input.OutpostArn != null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.HostMaintenance != null) {
        entries["HostMaintenance"] = input.HostMaintenance;
    }
    return entries;
};
const se_AllocateIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.NetmaskLength != null) {
        entries["NetmaskLength"] = input.NetmaskLength;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.PreviewNextCidr != null) {
        entries["PreviewNextCidr"] = input.PreviewNextCidr;
    }
    if (input.DisallowedCidrs != null) {
        const memberEntries = se_IpamPoolAllocationDisallowedCidrs(input.DisallowedCidrs, context);
        if (input.DisallowedCidrs?.length === 0) {
            entries.DisallowedCidr = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisallowedCidr.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AllocationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AllocationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AllocationIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AllowedInstanceTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ApplySecurityGroupsToClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ArchitectureTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ArnList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AssignIpv6AddressesRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6AddressCount != null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses != null) {
        const memberEntries = se_Ipv6AddressList(input.Ipv6Addresses, context);
        if (input.Ipv6Addresses?.length === 0) {
            entries.Ipv6Addresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount != null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    if (input.Ipv6Prefixes != null) {
        const memberEntries = se_IpPrefixList(input.Ipv6Prefixes, context);
        if (input.Ipv6Prefixes?.length === 0) {
            entries.Ipv6Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const se_AssignPrivateIpAddressesRequest = (input, context) => {
    const entries = {};
    if (input.AllowReassignment != null) {
        entries["AllowReassignment"] = input.AllowReassignment;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_PrivateIpAddressStringList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount != null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.Ipv4Prefixes != null) {
        const memberEntries = se_IpPrefixList(input.Ipv4Prefixes, context);
        if (input.Ipv4Prefixes?.length === 0) {
            entries.Ipv4Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount != null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    return entries;
};
const se_AssignPrivateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input.NatGatewayId != null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_IpList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddressCount != null) {
        entries["PrivateIpAddressCount"] = input.PrivateIpAddressCount;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateAddressRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId != null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.PublicIp != null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.AllowReassociation != null) {
        entries["AllowReassociation"] = input.AllowReassociation;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
const se_AssociateClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpOptionsId != null) {
        entries["DhcpOptionsId"] = input.DhcpOptionsId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateEnclaveCertificateIamRoleRequest = (input, context) => {
    const entries = {};
    if (input.CertificateArn != null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateIamInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input.IamInstanceProfile != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const se_AssociateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowId != null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.AssociationTarget != null) {
        const memberEntries = se_InstanceEventWindowAssociationRequest(input.AssociationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AssociateIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId != null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.IpamResourceDiscoveryId != null) {
        entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_AssociateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input.NatGatewayId != null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.AllocationIds != null) {
        const memberEntries = se_AllocationIdList(input.AllocationIds, context);
        if (input.AllocationIds?.length === 0) {
            entries.AllocationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_IpList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.GatewayId != null) {
        entries["GatewayId"] = input.GatewayId;
    }
    return entries;
};
const se_AssociateSubnetCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6CidrBlock != null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    return entries;
};
const se_AssociateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayPolicyTableId != null) {
        entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateTrunkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.BranchInterfaceId != null) {
        entries["BranchInterfaceId"] = input.BranchInterfaceId;
    }
    if (input.TrunkInterfaceId != null) {
        entries["TrunkInterfaceId"] = input.TrunkInterfaceId;
    }
    if (input.VlanId != null) {
        entries["VlanId"] = input.VlanId;
    }
    if (input.GreKey != null) {
        entries["GreKey"] = input.GreKey;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AssociateVpcCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.AmazonProvidedIpv6CidrBlock != null) {
        entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
    }
    if (input.CidrBlock != null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.Ipv6CidrBlockNetworkBorderGroup != null) {
        entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
    }
    if (input.Ipv6Pool != null) {
        entries["Ipv6Pool"] = input.Ipv6Pool;
    }
    if (input.Ipv6CidrBlock != null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.Ipv4IpamPoolId != null) {
        entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
    }
    if (input.Ipv4NetmaskLength != null) {
        entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
    }
    if (input.Ipv6IpamPoolId != null) {
        entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
    }
    if (input.Ipv6NetmaskLength != null) {
        entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
    }
    return entries;
};
const se_AssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AssociationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AthenaIntegration = (input, context) => {
    const entries = {};
    if (input.IntegrationResultS3DestinationArn != null) {
        entries["IntegrationResultS3DestinationArn"] = input.IntegrationResultS3DestinationArn;
    }
    if (input.PartitionLoadFrequency != null) {
        entries["PartitionLoadFrequency"] = input.PartitionLoadFrequency;
    }
    if (input.PartitionStartDate != null) {
        entries["PartitionStartDate"] = input.PartitionStartDate.toISOString().split(".")[0] + "Z";
    }
    if (input.PartitionEndDate != null) {
        entries["PartitionEndDate"] = input.PartitionEndDate.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_AthenaIntegrationsSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AthenaIntegration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AttachClassicLinkVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups != null) {
        const memberEntries = se_GroupIdStringList(input.Groups, context);
        if (input.Groups?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_AttachInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId != null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_AttachNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.DeviceIndex != null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.NetworkCardIndex != null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    if (input.EnaSrdSpecification != null) {
        const memberEntries = se_EnaSrdSpecification(input.EnaSrdSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AttachVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.VerifiedAccessTrustProviderId != null) {
        entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AttachVolumeRequest = (input, context) => {
    const entries = {};
    if (input.Device != null) {
        entries["Device"] = input.Device;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AttachVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpnGatewayId != null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AttributeBooleanValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_AttributeValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_AuthorizeClientVpnIngressRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetNetworkCidr != null) {
        entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
    }
    if (input.AccessGroupId != null) {
        entries["AccessGroupId"] = input.AccessGroupId;
    }
    if (input.AuthorizeAllGroups != null) {
        entries["AuthorizeAllGroups"] = input.AuthorizeAllGroups;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_AuthorizeSecurityGroupEgressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.IpPermissions != null) {
        const memberEntries = se_IpPermissionList(input.IpPermissions, context);
        if (input.IpPermissions?.length === 0) {
            entries.IpPermissions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CidrIp != null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol != null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.SourceSecurityGroupName != null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId != null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    return entries;
};
const se_AuthorizeSecurityGroupIngressRequest = (input, context) => {
    const entries = {};
    if (input.CidrIp != null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions != null) {
        const memberEntries = se_IpPermissionList(input.IpPermissions, context);
        if (input.IpPermissions?.length === 0) {
            entries.IpPermissions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpProtocol != null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.SourceSecurityGroupName != null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId != null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AvailabilityZoneStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AvailabilityZone.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_BaselineEbsBandwidthMbps = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_BaselineEbsBandwidthMbpsRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_BillingProductList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_BlobAttributeValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = context.base64Encoder(input.Value);
    }
    return entries;
};
const se_BlockDeviceMapping = (input, context) => {
    const entries = {};
    if (input.DeviceName != null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.VirtualName != null) {
        entries["VirtualName"] = input.VirtualName;
    }
    if (input.Ebs != null) {
        const memberEntries = se_EbsBlockDevice(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice != null) {
        entries["NoDevice"] = input.NoDevice;
    }
    return entries;
};
const se_BlockDeviceMappingList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_BlockDeviceMapping(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_BlockDeviceMappingRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_BlockDeviceMapping(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_BundleIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`BundleId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_BundleInstanceRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Storage != null) {
        const memberEntries = se_Storage(input.Storage, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Storage.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CancelBundleTaskRequest = (input, context) => {
    const entries = {};
    if (input.BundleId != null) {
        entries["BundleId"] = input.BundleId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CancelCapacityReservationFleetsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.CapacityReservationFleetIds != null) {
        const memberEntries = se_CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
        if (input.CapacityReservationFleetIds?.length === 0) {
            entries.CapacityReservationFleetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CancelCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId != null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CancelConversionRequest = (input, context) => {
    const entries = {};
    if (input.ConversionTaskId != null) {
        entries["ConversionTaskId"] = input.ConversionTaskId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReasonMessage != null) {
        entries["ReasonMessage"] = input.ReasonMessage;
    }
    return entries;
};
const se_CancelExportTaskRequest = (input, context) => {
    const entries = {};
    if (input.ExportTaskId != null) {
        entries["ExportTaskId"] = input.ExportTaskId;
    }
    return entries;
};
const se_CancelImageLaunchPermissionRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CancelImportTaskRequest = (input, context) => {
    const entries = {};
    if (input.CancelReason != null) {
        entries["CancelReason"] = input.CancelReason;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ImportTaskId != null) {
        entries["ImportTaskId"] = input.ImportTaskId;
    }
    return entries;
};
const se_CancelReservedInstancesListingRequest = (input, context) => {
    const entries = {};
    if (input.ReservedInstancesListingId != null) {
        entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
    }
    return entries;
};
const se_CancelSpotFleetRequestsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotFleetRequestIds != null) {
        const memberEntries = se_SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
        if (input.SpotFleetRequestIds?.length === 0) {
            entries.SpotFleetRequestId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TerminateInstances != null) {
        entries["TerminateInstances"] = input.TerminateInstances;
    }
    return entries;
};
const se_CancelSpotInstanceRequestsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotInstanceRequestIds != null) {
        const memberEntries = se_SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
        if (input.SpotInstanceRequestIds?.length === 0) {
            entries.SpotInstanceRequestId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CapacityReservationFleetIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CapacityReservationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CapacityReservationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.UsageStrategy != null) {
        entries["UsageStrategy"] = input.UsageStrategy;
    }
    return entries;
};
const se_CapacityReservationSpecification = (input, context) => {
    const entries = {};
    if (input.CapacityReservationPreference != null) {
        entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
    }
    if (input.CapacityReservationTarget != null) {
        const memberEntries = se_CapacityReservationTarget(input.CapacityReservationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CapacityReservationTarget = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId != null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.CapacityReservationResourceGroupArn != null) {
        entries["CapacityReservationResourceGroupArn"] = input.CapacityReservationResourceGroupArn;
    }
    return entries;
};
const se_CarrierGatewayIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CertificateAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.ClientRootCertificateChainArn != null) {
        entries["ClientRootCertificateChainArn"] = input.ClientRootCertificateChainArn;
    }
    return entries;
};
const se_CidrAuthorizationContext = (input, context) => {
    const entries = {};
    if (input.Message != null) {
        entries["Message"] = input.Message;
    }
    if (input.Signature != null) {
        entries["Signature"] = input.Signature;
    }
    return entries;
};
const se_ClassicLoadBalancer = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const se_ClassicLoadBalancers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ClassicLoadBalancer(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ClassicLoadBalancersConfig = (input, context) => {
    const entries = {};
    if (input.ClassicLoadBalancers != null) {
        const memberEntries = se_ClassicLoadBalancers(input.ClassicLoadBalancers, context);
        if (input.ClassicLoadBalancers?.length === 0) {
            entries.ClassicLoadBalancers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClassicLoadBalancers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ClientConnectOptions = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.LambdaFunctionArn != null) {
        entries["LambdaFunctionArn"] = input.LambdaFunctionArn;
    }
    return entries;
};
const se_ClientData = (input, context) => {
    const entries = {};
    if (input.Comment != null) {
        entries["Comment"] = input.Comment;
    }
    if (input.UploadEnd != null) {
        entries["UploadEnd"] = input.UploadEnd.toISOString().split(".")[0] + "Z";
    }
    if (input.UploadSize != null) {
        entries["UploadSize"] = __serializeFloat(input.UploadSize);
    }
    if (input.UploadStart != null) {
        entries["UploadStart"] = input.UploadStart.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_ClientLoginBannerOptions = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.BannerText != null) {
        entries["BannerText"] = input.BannerText;
    }
    return entries;
};
const se_ClientVpnAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.ActiveDirectory != null) {
        const memberEntries = se_DirectoryServiceAuthenticationRequest(input.ActiveDirectory, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ActiveDirectory.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MutualAuthentication != null) {
        const memberEntries = se_CertificateAuthenticationRequest(input.MutualAuthentication, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MutualAuthentication.${key}`;
            entries[loc] = value;
        });
    }
    if (input.FederatedAuthentication != null) {
        const memberEntries = se_FederatedAuthenticationRequest(input.FederatedAuthentication, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FederatedAuthentication.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ClientVpnAuthenticationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ClientVpnAuthenticationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ClientVpnEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ClientVpnSecurityGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CloudWatchLogOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.LogEnabled != null) {
        entries["LogEnabled"] = input.LogEnabled;
    }
    if (input.LogGroupArn != null) {
        entries["LogGroupArn"] = input.LogGroupArn;
    }
    if (input.LogOutputFormat != null) {
        entries["LogOutputFormat"] = input.LogOutputFormat;
    }
    return entries;
};
const se_CoipPoolIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ConfirmProductInstanceRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.ProductCode != null) {
        entries["ProductCode"] = input.ProductCode;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ConnectionLogOptions = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.CloudwatchLogGroup != null) {
        entries["CloudwatchLogGroup"] = input.CloudwatchLogGroup;
    }
    if (input.CloudwatchLogStream != null) {
        entries["CloudwatchLogStream"] = input.CloudwatchLogStream;
    }
    return entries;
};
const se_ConnectionNotificationIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ConversionIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CopyFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SourceFpgaImageId != null) {
        entries["SourceFpgaImageId"] = input.SourceFpgaImageId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.SourceRegion != null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CopyImageRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.SourceImageId != null) {
        entries["SourceImageId"] = input.SourceImageId;
    }
    if (input.SourceRegion != null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.DestinationOutpostArn != null) {
        entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.CopyImageTags != null) {
        entries["CopyImageTags"] = input.CopyImageTags;
    }
    return entries;
};
const se_CopySnapshotRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DestinationOutpostArn != null) {
        entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
    }
    if (input.DestinationRegion != null) {
        entries["DestinationRegion"] = input.DestinationRegion;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PresignedUrl != null) {
        entries["PresignedUrl"] = input.PresignedUrl;
    }
    if (input.SourceRegion != null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.SourceSnapshotId != null) {
        entries["SourceSnapshotId"] = input.SourceSnapshotId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CpuManufacturerSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CpuOptionsRequest = (input, context) => {
    const entries = {};
    if (input.CoreCount != null) {
        entries["CoreCount"] = input.CoreCount;
    }
    if (input.ThreadsPerCore != null) {
        entries["ThreadsPerCore"] = input.ThreadsPerCore;
    }
    if (input.AmdSevSnp != null) {
        entries["AmdSevSnp"] = input.AmdSevSnp;
    }
    return entries;
};
const se_CreateCapacityReservationFleetRequest = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy != null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceTypeSpecifications != null) {
        const memberEntries = se_ReservationFleetInstanceSpecificationList(input.InstanceTypeSpecifications, context);
        if (input.InstanceTypeSpecifications?.length === 0) {
            entries.InstanceTypeSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTypeSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Tenancy != null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.TotalTargetCapacity != null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.EndDate != null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceMatchCriteria != null) {
        entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstancePlatform != null) {
        entries["InstancePlatform"] = input.InstancePlatform;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId != null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.Tenancy != null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.EphemeralStorage != null) {
        entries["EphemeralStorage"] = input.EphemeralStorage;
    }
    if (input.EndDate != null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.EndDateType != null) {
        entries["EndDateType"] = input.EndDateType;
    }
    if (input.InstanceMatchCriteria != null) {
        entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecifications = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OutpostArn != null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.PlacementGroupArn != null) {
        entries["PlacementGroupArn"] = input.PlacementGroupArn;
    }
    return entries;
};
const se_CreateCarrierGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input.ClientCidrBlock != null) {
        entries["ClientCidrBlock"] = input.ClientCidrBlock;
    }
    if (input.ServerCertificateArn != null) {
        entries["ServerCertificateArn"] = input.ServerCertificateArn;
    }
    if (input.AuthenticationOptions != null) {
        const memberEntries = se_ClientVpnAuthenticationRequestList(input.AuthenticationOptions, context);
        if (input.AuthenticationOptions?.length === 0) {
            entries.Authentication = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Authentication.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ConnectionLogOptions != null) {
        const memberEntries = se_ConnectionLogOptions(input.ConnectionLogOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DnsServers != null) {
        const memberEntries = se_ValueStringList(input.DnsServers, context);
        if (input.DnsServers?.length === 0) {
            entries.DnsServers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsServers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TransportProtocol != null) {
        entries["TransportProtocol"] = input.TransportProtocol;
    }
    if (input.VpnPort != null) {
        entries["VpnPort"] = input.VpnPort;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.SplitTunnel != null) {
        entries["SplitTunnel"] = input.SplitTunnel;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SelfServicePortal != null) {
        entries["SelfServicePortal"] = input.SelfServicePortal;
    }
    if (input.ClientConnectOptions != null) {
        const memberEntries = se_ClientConnectOptions(input.ClientConnectOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientConnectOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SessionTimeoutHours != null) {
        entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
    }
    if (input.ClientLoginBannerOptions != null) {
        const memberEntries = se_ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientLoginBannerOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateClientVpnRouteRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TargetVpcSubnetId != null) {
        entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateCoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CoipPoolId != null) {
        entries["CoipPoolId"] = input.CoipPoolId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateCoipPoolRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateCustomerGatewayRequest = (input, context) => {
    const entries = {};
    if (input.BgpAsn != null) {
        entries["BgpAsn"] = input.BgpAsn;
    }
    if (input.PublicIp != null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.CertificateArn != null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DeviceName != null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.IpAddress != null) {
        entries["IpAddress"] = input.IpAddress;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateDefaultSubnetRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Ipv6Native != null) {
        entries["Ipv6Native"] = input.Ipv6Native;
    }
    return entries;
};
const se_CreateDefaultVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpConfigurations != null) {
        const memberEntries = se_NewDhcpConfigurationList(input.DhcpConfigurations, context);
        if (input.DhcpConfigurations?.length === 0) {
            entries.DhcpConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DhcpConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateEgressOnlyInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateFleetRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.SpotOptions != null) {
        const memberEntries = se_SpotOptionsRequest(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OnDemandOptions != null) {
        const memberEntries = se_OnDemandOptionsRequest(input.OnDemandOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OnDemandOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcessCapacityTerminationPolicy != null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs != null) {
        const memberEntries = se_FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
        if (input.LaunchTemplateConfigs?.length === 0) {
            entries.LaunchTemplateConfigs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetCapacitySpecification != null) {
        const memberEntries = se_TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetCapacitySpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TerminateInstancesWithExpiration != null) {
        entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom != null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil != null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.ReplaceUnhealthyInstances != null) {
        entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Context != null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
const se_CreateFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DeliverLogsPermissionArn != null) {
        entries["DeliverLogsPermissionArn"] = input.DeliverLogsPermissionArn;
    }
    if (input.DeliverCrossAccountRole != null) {
        entries["DeliverCrossAccountRole"] = input.DeliverCrossAccountRole;
    }
    if (input.LogGroupName != null) {
        entries["LogGroupName"] = input.LogGroupName;
    }
    if (input.ResourceIds != null) {
        const memberEntries = se_FlowLogResourceIds(input.ResourceIds, context);
        if (input.ResourceIds?.length === 0) {
            entries.ResourceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.TrafficType != null) {
        entries["TrafficType"] = input.TrafficType;
    }
    if (input.LogDestinationType != null) {
        entries["LogDestinationType"] = input.LogDestinationType;
    }
    if (input.LogDestination != null) {
        entries["LogDestination"] = input.LogDestination;
    }
    if (input.LogFormat != null) {
        entries["LogFormat"] = input.LogFormat;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxAggregationInterval != null) {
        entries["MaxAggregationInterval"] = input.MaxAggregationInterval;
    }
    if (input.DestinationOptions != null) {
        const memberEntries = se_DestinationOptionsRequest(input.DestinationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InputStorageLocation != null) {
        const memberEntries = se_StorageLocation(input.InputStorageLocation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InputStorageLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LogsStorageLocation != null) {
        const memberEntries = se_StorageLocation(input.LogsStorageLocation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogsStorageLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateImageRequest = (input, context) => {
    const entries = {};
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.NoReboot != null) {
        entries["NoReboot"] = input.NoReboot;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.TimeRanges != null) {
        const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
        if (input.TimeRanges?.length === 0) {
            entries.TimeRange = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CronExpression != null) {
        entries["CronExpression"] = input.CronExpression;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateInstanceExportTaskRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ExportToS3Task != null) {
        const memberEntries = se_ExportToS3TaskSpecification(input.ExportToS3Task, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportToS3.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.TargetEnvironment != null) {
        entries["TargetEnvironment"] = input.TargetEnvironment;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId != null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.Locale != null) {
        entries["Locale"] = input.Locale;
    }
    if (input.SourceIpamPoolId != null) {
        entries["SourceIpamPoolId"] = input.SourceIpamPoolId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.AddressFamily != null) {
        entries["AddressFamily"] = input.AddressFamily;
    }
    if (input.AutoImport != null) {
        entries["AutoImport"] = input.AutoImport;
    }
    if (input.PubliclyAdvertisable != null) {
        entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
    }
    if (input.AllocationMinNetmaskLength != null) {
        entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
    }
    if (input.AllocationMaxNetmaskLength != null) {
        entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
    }
    if (input.AllocationDefaultNetmaskLength != null) {
        entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
    }
    if (input.AllocationResourceTags != null) {
        const memberEntries = se_RequestIpamResourceTagList(input.AllocationResourceTags, context);
        if (input.AllocationResourceTags?.length === 0) {
            entries.AllocationResourceTag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.AwsService != null) {
        entries["AwsService"] = input.AwsService;
    }
    if (input.PublicIpSource != null) {
        entries["PublicIpSource"] = input.PublicIpSource;
    }
    return entries;
};
const se_CreateIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.OperatingRegions != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input.OperatingRegions, context);
        if (input.OperatingRegions?.length === 0) {
            entries.OperatingRegion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.OperatingRegions != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input.OperatingRegions, context);
        if (input.OperatingRegions?.length === 0) {
            entries.OperatingRegion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId != null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateKeyPairRequest = (input, context) => {
    const entries = {};
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.KeyType != null) {
        entries["KeyType"] = input.KeyType;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KeyFormat != null) {
        entries["KeyFormat"] = input.KeyFormat;
    }
    return entries;
};
const se_CreateLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.VersionDescription != null) {
        entries["VersionDescription"] = input.VersionDescription;
    }
    if (input.LaunchTemplateData != null) {
        const memberEntries = se_RequestLaunchTemplateData(input.LaunchTemplateData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateLaunchTemplateVersionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.SourceVersion != null) {
        entries["SourceVersion"] = input.SourceVersion;
    }
    if (input.VersionDescription != null) {
        entries["VersionDescription"] = input.VersionDescription;
    }
    if (input.LaunchTemplateData != null) {
        const memberEntries = se_RequestLaunchTemplateData(input.LaunchTemplateData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResolveAlias != null) {
        entries["ResolveAlias"] = input.ResolveAlias;
    }
    return entries;
};
const se_CreateLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.LocalGatewayVirtualInterfaceGroupId != null) {
        entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.DestinationPrefixListId != null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    return entries;
};
const se_CreateLocalGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayId != null) {
        entries["LocalGatewayId"] = input.LocalGatewayId;
    }
    if (input.Mode != null) {
        entries["Mode"] = input.Mode;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.LocalGatewayVirtualInterfaceGroupId != null) {
        entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListName != null) {
        entries["PrefixListName"] = input.PrefixListName;
    }
    if (input.Entries != null) {
        const memberEntries = se_AddPrefixListEntries(input.Entries, context);
        if (input.Entries?.length === 0) {
            entries.Entry = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Entry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxEntries != null) {
        entries["MaxEntries"] = input.MaxEntries;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddressFamily != null) {
        entries["AddressFamily"] = input.AddressFamily;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateNatGatewayRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId != null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ConnectivityType != null) {
        entries["ConnectivityType"] = input.ConnectivityType;
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.SecondaryAllocationIds != null) {
        const memberEntries = se_AllocationIdList(input.SecondaryAllocationIds, context);
        if (input.SecondaryAllocationIds?.length === 0) {
            entries.SecondaryAllocationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecondaryAllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddresses != null) {
        const memberEntries = se_IpList(input.SecondaryPrivateIpAddresses, context);
        if (input.SecondaryPrivateIpAddresses?.length === 0) {
            entries.SecondaryPrivateIpAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecondaryPrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount != null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    return entries;
};
const se_CreateNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input.CidrBlock != null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress != null) {
        entries["Egress"] = input.Egress;
    }
    if (input.IcmpTypeCode != null) {
        const memberEntries = se_IcmpTypeCode(input.IcmpTypeCode, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Icmp.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6CidrBlock != null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.NetworkAclId != null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.PortRange != null) {
        const memberEntries = se_PortRange(input.PortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.RuleAction != null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.RuleNumber != null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
const se_CreateNetworkAclRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateNetworkInsightsAccessScopeRequest = (input, context) => {
    const entries = {};
    if (input.MatchPaths != null) {
        const memberEntries = se_AccessScopePathListRequest(input.MatchPaths, context);
        if (input.MatchPaths?.length === 0) {
            entries.MatchPath = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MatchPath.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludePaths != null) {
        const memberEntries = se_AccessScopePathListRequest(input.ExcludePaths, context);
        if (input.ExcludePaths?.length === 0) {
            entries.ExcludePath = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludePath.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateNetworkInsightsPathRequest = (input, context) => {
    const entries = {};
    if (input.SourceIp != null) {
        entries["SourceIp"] = input.SourceIp;
    }
    if (input.DestinationIp != null) {
        entries["DestinationIp"] = input.DestinationIp;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination != null) {
        entries["Destination"] = input.Destination;
    }
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationPort != null) {
        entries["DestinationPort"] = input.DestinationPort;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.FilterAtSource != null) {
        const memberEntries = se_PathRequestFilter(input.FilterAtSource, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterAtSource.${key}`;
            entries[loc] = value;
        });
    }
    if (input.FilterAtDestination != null) {
        const memberEntries = se_PathRequestFilter(input.FilterAtDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterAtDestination.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateNetworkInterfacePermissionRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.AwsAccountId != null) {
        entries["AwsAccountId"] = input.AwsAccountId;
    }
    if (input.AwsService != null) {
        entries["AwsService"] = input.AwsService;
    }
    if (input.Permission != null) {
        entries["Permission"] = input.Permission;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups != null) {
        const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
        if (input.Groups?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount != null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses != null) {
        const memberEntries = se_InstanceIpv6AddressList(input.Ipv6Addresses, context);
        if (input.Ipv6Addresses?.length === 0) {
            entries.Ipv6Addresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount != null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.Ipv4Prefixes != null) {
        const memberEntries = se_Ipv4PrefixList(input.Ipv4Prefixes, context);
        if (input.Ipv4Prefixes?.length === 0) {
            entries.Ipv4Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount != null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes != null) {
        const memberEntries = se_Ipv6PrefixList(input.Ipv6Prefixes, context);
        if (input.Ipv6Prefixes?.length === 0) {
            entries.Ipv6Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount != null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    if (input.InterfaceType != null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreatePlacementGroupRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Strategy != null) {
        entries["Strategy"] = input.Strategy;
    }
    if (input.PartitionCount != null) {
        entries["PartitionCount"] = input.PartitionCount;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpreadLevel != null) {
        entries["SpreadLevel"] = input.SpreadLevel;
    }
    return entries;
};
const se_CreatePublicIpv4PoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateReplaceRootVolumeTaskRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DeleteReplacedRootVolume != null) {
        entries["DeleteReplacedRootVolume"] = input.DeleteReplacedRootVolume;
    }
    return entries;
};
const se_CreateReservedInstancesListingRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.PriceSchedules != null) {
        const memberEntries = se_PriceScheduleSpecificationList(input.PriceSchedules, context);
        if (input.PriceSchedules?.length === 0) {
            entries.PriceSchedules = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PriceSchedules.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesId != null) {
        entries["ReservedInstancesId"] = input.ReservedInstancesId;
    }
    return entries;
};
const se_CreateRestoreImageTaskRequest = (input, context) => {
    const entries = {};
    if (input.Bucket != null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.ObjectKey != null) {
        entries["ObjectKey"] = input.ObjectKey;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock != null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId != null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId != null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.EgressOnlyInternetGatewayId != null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    if (input.GatewayId != null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.NatGatewayId != null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.LocalGatewayId != null) {
        entries["LocalGatewayId"] = input.LocalGatewayId;
    }
    if (input.CarrierGatewayId != null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.VpcPeeringConnectionId != null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    if (input.CoreNetworkArn != null) {
        entries["CoreNetworkArn"] = input.CoreNetworkArn;
    }
    return entries;
};
const se_CreateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateSecurityGroupRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["GroupDescription"] = input.Description;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateSnapshotRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.OutpostArn != null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.InstanceSpecification != null) {
        const memberEntries = se_InstanceSpecification(input.InstanceSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OutpostArn != null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.CopyTagsFromSource != null) {
        entries["CopyTagsFromSource"] = input.CopyTagsFromSource;
    }
    return entries;
};
const se_CreateSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.Bucket != null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Prefix != null) {
        entries["Prefix"] = input.Prefix;
    }
    return entries;
};
const se_CreateStoreImageTaskRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.Bucket != null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.S3ObjectTags != null) {
        const memberEntries = se_S3ObjectTagList(input.S3ObjectTags, context);
        if (input.S3ObjectTags?.length === 0) {
            entries.S3ObjectTag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3ObjectTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateSubnetCidrReservationRequest = (input, context) => {
    const entries = {};
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.ReservationType != null) {
        entries["ReservationType"] = input.ReservationType;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateSubnetRequest = (input, context) => {
    const entries = {};
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId != null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.CidrBlock != null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.Ipv6CidrBlock != null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.OutpostArn != null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Ipv6Native != null) {
        entries["Ipv6Native"] = input.Ipv6Native;
    }
    return entries;
};
const se_CreateTagsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources != null) {
        const memberEntries = se_ResourceIdList(input.Resources, context);
        if (input.Resources?.length === 0) {
            entries.ResourceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateTrafficMirrorFilterRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterId != null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.TrafficDirection != null) {
        entries["TrafficDirection"] = input.TrafficDirection;
    }
    if (input.RuleNumber != null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    if (input.RuleAction != null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.DestinationPortRange != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePortRange != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.SourceCidrBlock != null) {
        entries["SourceCidrBlock"] = input.SourceCidrBlock;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.TrafficMirrorTargetId != null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.TrafficMirrorFilterId != null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.PacketLength != null) {
        entries["PacketLength"] = input.PacketLength;
    }
    if (input.SessionNumber != null) {
        entries["SessionNumber"] = input.SessionNumber;
    }
    if (input.VirtualNetworkId != null) {
        entries["VirtualNetworkId"] = input.VirtualNetworkId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateTrafficMirrorTargetRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.NetworkLoadBalancerArn != null) {
        entries["NetworkLoadBalancerArn"] = input.NetworkLoadBalancerArn;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.GatewayLoadBalancerEndpointId != null) {
        entries["GatewayLoadBalancerEndpointId"] = input.GatewayLoadBalancerEndpointId;
    }
    return entries;
};
const se_CreateTransitGatewayConnectPeerRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.TransitGatewayAddress != null) {
        entries["TransitGatewayAddress"] = input.TransitGatewayAddress;
    }
    if (input.PeerAddress != null) {
        entries["PeerAddress"] = input.PeerAddress;
    }
    if (input.BgpOptions != null) {
        const memberEntries = se_TransitGatewayConnectRequestBgpOptions(input.BgpOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BgpOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InsideCidrBlocks != null) {
        const memberEntries = se_InsideCidrBlocksStringList(input.InsideCidrBlocks, context);
        if (input.InsideCidrBlocks?.length === 0) {
            entries.InsideCidrBlocks = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InsideCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayConnectRequest = (input, context) => {
    const entries = {};
    if (input.TransportTransitGatewayAttachmentId != null) {
        entries["TransportTransitGatewayAttachmentId"] = input.TransportTransitGatewayAttachmentId;
    }
    if (input.Options != null) {
        const memberEntries = se_CreateTransitGatewayConnectRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayConnectRequestOptions = (input, context) => {
    const entries = {};
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    return entries;
};
const se_CreateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.Options != null) {
        const memberEntries = se_CreateTransitGatewayMulticastDomainRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayMulticastDomainRequestOptions = (input, context) => {
    const entries = {};
    if (input.Igmpv2Support != null) {
        entries["Igmpv2Support"] = input.Igmpv2Support;
    }
    if (input.StaticSourcesSupport != null) {
        entries["StaticSourcesSupport"] = input.StaticSourcesSupport;
    }
    if (input.AutoAcceptSharedAssociations != null) {
        entries["AutoAcceptSharedAssociations"] = input.AutoAcceptSharedAssociations;
    }
    return entries;
};
const se_CreateTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.PeerTransitGatewayId != null) {
        entries["PeerTransitGatewayId"] = input.PeerTransitGatewayId;
    }
    if (input.PeerAccountId != null) {
        entries["PeerAccountId"] = input.PeerAccountId;
    }
    if (input.PeerRegion != null) {
        entries["PeerRegion"] = input.PeerRegion;
    }
    if (input.Options != null) {
        const memberEntries = se_CreateTransitGatewayPeeringAttachmentRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayPeeringAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input.DynamicRouting != null) {
        entries["DynamicRouting"] = input.DynamicRouting;
    }
    return entries;
};
const se_CreateTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecifications = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole != null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Options != null) {
        const memberEntries = se_TransitGatewayRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole != null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayRouteTableAnnouncementRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PeeringAttachmentId != null) {
        entries["PeeringAttachmentId"] = input.PeeringAttachmentId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecifications = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Options != null) {
        const memberEntries = se_CreateTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecifications = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input.DnsSupport != null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.Ipv6Support != null) {
        entries["Ipv6Support"] = input.Ipv6Support;
    }
    if (input.ApplianceModeSupport != null) {
        entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointEniOptions = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointLoadBalancerOptions = (input, context) => {
    const entries = {};
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.LoadBalancerArn != null) {
        entries["LoadBalancerArn"] = input.LoadBalancerArn;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessGroupId != null) {
        entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
    }
    if (input.EndpointType != null) {
        entries["EndpointType"] = input.EndpointType;
    }
    if (input.AttachmentType != null) {
        entries["AttachmentType"] = input.AttachmentType;
    }
    if (input.DomainCertificateArn != null) {
        entries["DomainCertificateArn"] = input.DomainCertificateArn;
    }
    if (input.ApplicationDomain != null) {
        entries["ApplicationDomain"] = input.ApplicationDomain;
    }
    if (input.EndpointDomainPrefix != null) {
        entries["EndpointDomainPrefix"] = input.EndpointDomainPrefix;
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_SecurityGroupIdList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LoadBalancerOptions != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointLoadBalancerOptions(input.LoadBalancerOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancerOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceOptions != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointEniOptions(input.NetworkInterfaceOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointSubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CreateVerifiedAccessGroupRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateVerifiedAccessInstanceRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateVerifiedAccessTrustProviderDeviceOptions = (input, context) => {
    const entries = {};
    if (input.TenantId != null) {
        entries["TenantId"] = input.TenantId;
    }
    return entries;
};
const se_CreateVerifiedAccessTrustProviderOidcOptions = (input, context) => {
    const entries = {};
    if (input.Issuer != null) {
        entries["Issuer"] = input.Issuer;
    }
    if (input.AuthorizationEndpoint != null) {
        entries["AuthorizationEndpoint"] = input.AuthorizationEndpoint;
    }
    if (input.TokenEndpoint != null) {
        entries["TokenEndpoint"] = input.TokenEndpoint;
    }
    if (input.UserInfoEndpoint != null) {
        entries["UserInfoEndpoint"] = input.UserInfoEndpoint;
    }
    if (input.ClientId != null) {
        entries["ClientId"] = input.ClientId;
    }
    if (input.ClientSecret != null) {
        entries["ClientSecret"] = input.ClientSecret;
    }
    if (input.Scope != null) {
        entries["Scope"] = input.Scope;
    }
    return entries;
};
const se_CreateVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input.TrustProviderType != null) {
        entries["TrustProviderType"] = input.TrustProviderType;
    }
    if (input.UserTrustProviderType != null) {
        entries["UserTrustProviderType"] = input.UserTrustProviderType;
    }
    if (input.DeviceTrustProviderType != null) {
        entries["DeviceTrustProviderType"] = input.DeviceTrustProviderType;
    }
    if (input.OidcOptions != null) {
        const memberEntries = se_CreateVerifiedAccessTrustProviderOidcOptions(input.OidcOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OidcOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeviceOptions != null) {
        const memberEntries = se_CreateVerifiedAccessTrustProviderDeviceOptions(input.DeviceOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeviceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PolicyReferenceName != null) {
        entries["PolicyReferenceName"] = input.PolicyReferenceName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreateVolumePermission = (input, context) => {
    const entries = {};
    if (input.Group != null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId != null) {
        entries["UserId"] = input.UserId;
    }
    return entries;
};
const se_CreateVolumePermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_CreateVolumePermission(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_CreateVolumePermissionModifications = (input, context) => {
    const entries = {};
    if (input.Add != null) {
        const memberEntries = se_CreateVolumePermissionList(input.Add, context);
        if (input.Add?.length === 0) {
            entries.Add = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Remove != null) {
        const memberEntries = se_CreateVolumePermissionList(input.Remove, context);
        if (input.Remove?.length === 0) {
            entries.Remove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVolumeRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.OutpostArn != null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.Size != null) {
        entries["Size"] = input.Size;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeType != null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MultiAttachEnabled != null) {
        entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
    }
    if (input.Throughput != null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateVpcEndpointConnectionNotificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointId != null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.ConnectionNotificationArn != null) {
        entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
    }
    if (input.ConnectionEvents != null) {
        const memberEntries = se_ValueStringList(input.ConnectionEvents, context);
        if (input.ConnectionEvents?.length === 0) {
            entries.ConnectionEvents = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_CreateVpcEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointType != null) {
        entries["VpcEndpointType"] = input.VpcEndpointType;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.ServiceName != null) {
        entries["ServiceName"] = input.ServiceName;
    }
    if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.RouteTableIds != null) {
        const memberEntries = se_VpcEndpointRouteTableIdList(input.RouteTableIds, context);
        if (input.RouteTableIds?.length === 0) {
            entries.RouteTableId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_VpcEndpointSubnetIdList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_VpcEndpointSecurityGroupIdList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpAddressType != null) {
        entries["IpAddressType"] = input.IpAddressType;
    }
    if (input.DnsOptions != null) {
        const memberEntries = se_DnsOptionsSpecification(input.DnsOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.PrivateDnsEnabled != null) {
        entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpcEndpointServiceConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AcceptanceRequired != null) {
        entries["AcceptanceRequired"] = input.AcceptanceRequired;
    }
    if (input.PrivateDnsName != null) {
        entries["PrivateDnsName"] = input.PrivateDnsName;
    }
    if (input.NetworkLoadBalancerArns != null) {
        const memberEntries = se_ValueStringList(input.NetworkLoadBalancerArns, context);
        if (input.NetworkLoadBalancerArns?.length === 0) {
            entries.NetworkLoadBalancerArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GatewayLoadBalancerArns != null) {
        const memberEntries = se_ValueStringList(input.GatewayLoadBalancerArns, context);
        if (input.GatewayLoadBalancerArns?.length === 0) {
            entries.GatewayLoadBalancerArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SupportedIpAddressTypes != null) {
        const memberEntries = se_ValueStringList(input.SupportedIpAddressTypes, context);
        if (input.SupportedIpAddressTypes?.length === 0) {
            entries.SupportedIpAddressType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PeerOwnerId != null) {
        entries["PeerOwnerId"] = input.PeerOwnerId;
    }
    if (input.PeerVpcId != null) {
        entries["PeerVpcId"] = input.PeerVpcId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.PeerRegion != null) {
        entries["PeerRegion"] = input.PeerRegion;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpcRequest = (input, context) => {
    const entries = {};
    if (input.CidrBlock != null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.AmazonProvidedIpv6CidrBlock != null) {
        entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
    }
    if (input.Ipv6Pool != null) {
        entries["Ipv6Pool"] = input.Ipv6Pool;
    }
    if (input.Ipv6CidrBlock != null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.Ipv4IpamPoolId != null) {
        entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
    }
    if (input.Ipv4NetmaskLength != null) {
        entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
    }
    if (input.Ipv6IpamPoolId != null) {
        entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
    }
    if (input.Ipv6NetmaskLength != null) {
        entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTenancy != null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.Ipv6CidrBlockNetworkBorderGroup != null) {
        entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input.CustomerGatewayId != null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.VpnGatewayId != null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Options != null) {
        const memberEntries = se_VpnConnectionOptionsSpecification(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpnConnectionRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    return entries;
};
const se_CreateVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AmazonSideAsn != null) {
        entries["AmazonSideAsn"] = input.AmazonSideAsn;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_CreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.CpuCredits != null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
const se_CustomerGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`CustomerGatewayId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DataQueries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_DataQuery(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_DataQuery = (input, context) => {
    const entries = {};
    if (input.Id != null) {
        entries["Id"] = input.Id;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination != null) {
        entries["Destination"] = input.Destination;
    }
    if (input.Metric != null) {
        entries["Metric"] = input.Metric;
    }
    if (input.Statistic != null) {
        entries["Statistic"] = input.Statistic;
    }
    if (input.Period != null) {
        entries["Period"] = input.Period;
    }
    return entries;
};
const se_DedicatedHostIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteCarrierGatewayRequest = (input, context) => {
    const entries = {};
    if (input.CarrierGatewayId != null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteClientVpnRouteRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetVpcSubnetId != null) {
        entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
    }
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteCoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CoipPoolId != null) {
        entries["CoipPoolId"] = input.CoipPoolId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteCoipPoolRequest = (input, context) => {
    const entries = {};
    if (input.CoipPoolId != null) {
        entries["CoipPoolId"] = input.CoipPoolId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteCustomerGatewayRequest = (input, context) => {
    const entries = {};
    if (input.CustomerGatewayId != null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpOptionsId != null) {
        entries["DhcpOptionsId"] = input.DhcpOptionsId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteEgressOnlyInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EgressOnlyInternetGatewayId != null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    return entries;
};
const se_DeleteFleetsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FleetIds != null) {
        const memberEntries = se_FleetIdSet(input.FleetIds, context);
        if (input.FleetIds?.length === 0) {
            entries.FleetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TerminateInstances != null) {
        entries["TerminateInstances"] = input.TerminateInstances;
    }
    return entries;
};
const se_DeleteFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FlowLogIds != null) {
        const memberEntries = se_FlowLogIdList(input.FlowLogIds, context);
        if (input.FlowLogIds?.length === 0) {
            entries.FlowLogId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId != null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    return entries;
};
const se_DeleteInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ForceDelete != null) {
        entries["ForceDelete"] = input.ForceDelete;
    }
    if (input.InstanceEventWindowId != null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    return entries;
};
const se_DeleteInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId != null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    return entries;
};
const se_DeleteIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    return entries;
};
const se_DeleteIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId != null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Cascade != null) {
        entries["Cascade"] = input.Cascade;
    }
    return entries;
};
const se_DeleteIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamResourceDiscoveryId != null) {
        entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
    }
    return entries;
};
const se_DeleteIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId != null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    return entries;
};
const se_DeleteKeyPairRequest = (input, context) => {
    const entries = {};
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.KeyPairId != null) {
        entries["KeyPairId"] = input.KeyPairId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    return entries;
};
const se_DeleteLaunchTemplateVersionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Versions != null) {
        const memberEntries = se_VersionStringList(input.Versions, context);
        if (input.Versions?.length === 0) {
            entries.LaunchTemplateVersion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DestinationPrefixListId != null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    return entries;
};
const se_DeleteLocalGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId != null) {
        entries["LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"] =
            input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableVpcAssociationId != null) {
        entries["LocalGatewayRouteTableVpcAssociationId"] = input.LocalGatewayRouteTableVpcAssociationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    return entries;
};
const se_DeleteNatGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NatGatewayId != null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    return entries;
};
const se_DeleteNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress != null) {
        entries["Egress"] = input.Egress;
    }
    if (input.NetworkAclId != null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.RuleNumber != null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
const se_DeleteNetworkAclRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclId != null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    return entries;
};
const se_DeleteNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisId != null) {
        entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteNetworkInsightsAccessScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsAccessScopeId != null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    return entries;
};
const se_DeleteNetworkInsightsAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsAnalysisId != null) {
        entries["NetworkInsightsAnalysisId"] = input.NetworkInsightsAnalysisId;
    }
    return entries;
};
const se_DeleteNetworkInsightsPathRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsPathId != null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    return entries;
};
const se_DeleteNetworkInterfacePermissionRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfacePermissionId != null) {
        entries["NetworkInterfacePermissionId"] = input.NetworkInterfacePermissionId;
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const se_DeletePlacementGroupRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    return entries;
};
const se_DeletePublicIpv4PoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolId != null) {
        entries["PoolId"] = input.PoolId;
    }
    return entries;
};
const se_DeleteQueuedReservedInstancesIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteQueuedReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstancesIds != null) {
        const memberEntries = se_DeleteQueuedReservedInstancesIdList(input.ReservedInstancesIds, context);
        if (input.ReservedInstancesIds?.length === 0) {
            entries.ReservedInstancesId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock != null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId != null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
const se_DeleteRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
const se_DeleteSecurityGroupRequest = (input, context) => {
    const entries = {};
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteSnapshotRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteSubnetCidrReservationRequest = (input, context) => {
    const entries = {};
    if (input.SubnetCidrReservationId != null) {
        entries["SubnetCidrReservationId"] = input.SubnetCidrReservationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteSubnetRequest = (input, context) => {
    const entries = {};
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTagsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources != null) {
        const memberEntries = se_ResourceIdList(input.Resources, context);
        if (input.Resources?.length === 0) {
            entries.ResourceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteTrafficMirrorFilterRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterId != null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterRuleId != null) {
        entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorSessionId != null) {
        entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTrafficMirrorTargetRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorTargetId != null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayConnectPeerRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayConnectPeerId != null) {
        entries["TransitGatewayConnectPeerId"] = input.TransitGatewayConnectPeerId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayConnectRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayPolicyTableId != null) {
        entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayRouteTableAnnouncementRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableAnnouncementId != null) {
        entries["TransitGatewayRouteTableAnnouncementId"] = input.TransitGatewayRouteTableAnnouncementId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteVerifiedAccessEndpointRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessEndpointId != null) {
        entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteVerifiedAccessGroupRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessGroupId != null) {
        entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteVerifiedAccessInstanceRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_DeleteVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessTrustProviderId != null) {
        entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_DeleteVolumeRequest = (input, context) => {
    const entries = {};
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteVpcEndpointConnectionNotificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationIds != null) {
        const memberEntries = se_ConnectionNotificationIdsList(input.ConnectionNotificationIds, context);
        if (input.ConnectionNotificationIds?.length === 0) {
            entries.ConnectionNotificationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionNotificationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteVpcEndpointServiceConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceIds != null) {
        const memberEntries = se_VpcEndpointServiceIdList(input.ServiceIds, context);
        if (input.ServiceIds?.length === 0) {
            entries.ServiceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteVpcEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointIds != null) {
        const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
        if (input.VpcEndpointIds?.length === 0) {
            entries.VpcEndpointId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId != null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const se_DeleteVpcRequest = (input, context) => {
    const entries = {};
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeleteVpnConnectionRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    return entries;
};
const se_DeleteVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpnGatewayId != null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeprovisionByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeprovisionIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
const se_DeprovisionPublicIpv4PoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolId != null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
const se_DeregisterImageRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeregisterInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTagAttribute != null) {
        const memberEntries = se_DeregisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagAttribute.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeregisterInstanceTagAttributeRequest = (input, context) => {
    const entries = {};
    if (input.IncludeAllTagsOfInstance != null) {
        entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
    }
    if (input.InstanceTagKeys != null) {
        const memberEntries = se_InstanceTagKeySet(input.InstanceTagKeys, context);
        if (input.InstanceTagKeys?.length === 0) {
            entries.InstanceTagKey = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeregisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress != null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        if (input.NetworkInterfaceIds?.length === 0) {
            entries.NetworkInterfaceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DeregisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress != null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        if (input.NetworkInterfaceIds?.length === 0) {
            entries.NetworkInterfaceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeAccountAttributesRequest = (input, context) => {
    const entries = {};
    if (input.AttributeNames != null) {
        const memberEntries = se_AccountAttributeNameStringList(input.AttributeNames, context);
        if (input.AttributeNames?.length === 0) {
            entries.AttributeName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeAddressesAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AllocationIds != null) {
        const memberEntries = se_AllocationIds(input.AllocationIds, context);
        if (input.AllocationIds?.length === 0) {
            entries.AllocationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeAddressesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PublicIps != null) {
        const memberEntries = se_PublicIpStringList(input.PublicIps, context);
        if (input.PublicIps?.length === 0) {
            entries.PublicIp = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AllocationIds != null) {
        const memberEntries = se_AllocationIdList(input.AllocationIds, context);
        if (input.AllocationIds?.length === 0) {
            entries.AllocationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeAddressTransfersRequest = (input, context) => {
    const entries = {};
    if (input.AllocationIds != null) {
        const memberEntries = se_AllocationIdList(input.AllocationIds, context);
        if (input.AllocationIds?.length === 0) {
            entries.AllocationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeAggregateIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeAvailabilityZonesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ZoneNames != null) {
        const memberEntries = se_ZoneNameStringList(input.ZoneNames, context);
        if (input.ZoneNames?.length === 0) {
            entries.ZoneName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ZoneName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ZoneIds != null) {
        const memberEntries = se_ZoneIdStringList(input.ZoneIds, context);
        if (input.ZoneIds?.length === 0) {
            entries.ZoneId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ZoneId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AllAvailabilityZones != null) {
        entries["AllAvailabilityZones"] = input.AllAvailabilityZones;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest = (input, context) => {
    const entries = {};
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeBundleTasksRequest = (input, context) => {
    const entries = {};
    if (input.BundleIds != null) {
        const memberEntries = se_BundleIdStringList(input.BundleIds, context);
        if (input.BundleIds?.length === 0) {
            entries.BundleId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BundleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeByoipCidrsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeCapacityReservationFleetsRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationFleetIds != null) {
        const memberEntries = se_CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
        if (input.CapacityReservationFleetIds?.length === 0) {
            entries.CapacityReservationFleetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeCapacityReservationsRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationIds != null) {
        const memberEntries = se_CapacityReservationIdSet(input.CapacityReservationIds, context);
        if (input.CapacityReservationIds?.length === 0) {
            entries.CapacityReservationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeCarrierGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.CarrierGatewayIds != null) {
        const memberEntries = se_CarrierGatewayIdSet(input.CarrierGatewayIds, context);
        if (input.CarrierGatewayIds?.length === 0) {
            entries.CarrierGatewayId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CarrierGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeClassicLinkInstancesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeClientVpnAuthorizationRulesRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeClientVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeClientVpnEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointIds != null) {
        const memberEntries = se_ClientVpnEndpointIdList(input.ClientVpnEndpointIds, context);
        if (input.ClientVpnEndpointIds?.length === 0) {
            entries.ClientVpnEndpointId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientVpnEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeClientVpnRoutesRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeClientVpnTargetNetworksRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.AssociationIds != null) {
        const memberEntries = se_ValueStringList(input.AssociationIds, context);
        if (input.AssociationIds?.length === 0) {
            entries.AssociationIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeCoipPoolsRequest = (input, context) => {
    const entries = {};
    if (input.PoolIds != null) {
        const memberEntries = se_CoipPoolIdSet(input.PoolIds, context);
        if (input.PoolIds?.length === 0) {
            entries.PoolId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeConversionTasksRequest = (input, context) => {
    const entries = {};
    if (input.ConversionTaskIds != null) {
        const memberEntries = se_ConversionIdStringList(input.ConversionTaskIds, context);
        if (input.ConversionTaskIds?.length === 0) {
            entries.ConversionTaskId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConversionTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeCustomerGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.CustomerGatewayIds != null) {
        const memberEntries = se_CustomerGatewayIdStringList(input.CustomerGatewayIds, context);
        if (input.CustomerGatewayIds?.length === 0) {
            entries.CustomerGatewayId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomerGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpOptionsIds != null) {
        const memberEntries = se_DhcpOptionsIdStringList(input.DhcpOptionsIds, context);
        if (input.DhcpOptionsIds?.length === 0) {
            entries.DhcpOptionsId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DhcpOptionsId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeEgressOnlyInternetGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EgressOnlyInternetGatewayIds != null) {
        const memberEntries = se_EgressOnlyInternetGatewayIdList(input.EgressOnlyInternetGatewayIds, context);
        if (input.EgressOnlyInternetGatewayIds?.length === 0) {
            entries.EgressOnlyInternetGatewayId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EgressOnlyInternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeElasticGpusRequest = (input, context) => {
    const entries = {};
    if (input.ElasticGpuIds != null) {
        const memberEntries = se_ElasticGpuIdSet(input.ElasticGpuIds, context);
        if (input.ElasticGpuIds?.length === 0) {
            entries.ElasticGpuId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeExportImageTasksRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ExportImageTaskIds != null) {
        const memberEntries = se_ExportImageTaskIdList(input.ExportImageTaskIds, context);
        if (input.ExportImageTaskIds?.length === 0) {
            entries.ExportImageTaskId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportImageTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeExportTasksRequest = (input, context) => {
    const entries = {};
    if (input.ExportTaskIds != null) {
        const memberEntries = se_ExportTaskIdStringList(input.ExportTaskIds, context);
        if (input.ExportTaskIds?.length === 0) {
            entries.ExportTaskId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeFastLaunchImagesRequest = (input, context) => {
    const entries = {};
    if (input.ImageIds != null) {
        const memberEntries = se_FastLaunchImageIdList(input.ImageIds, context);
        if (input.ImageIds?.length === 0) {
            entries.ImageId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeFleetHistoryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EventType != null) {
        entries["EventType"] = input.EventType;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetId != null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_DescribeFleetInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetId != null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeFleetsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetIds != null) {
        const memberEntries = se_FleetIdSet(input.FleetIds, context);
        if (input.FleetIds?.length === 0) {
            entries.FleetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filter != null) {
        const memberEntries = se_FilterList(input.Filter, context);
        if (input.Filter?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.FlowLogIds != null) {
        const memberEntries = se_FlowLogIdList(input.FlowLogIds, context);
        if (input.FlowLogIds?.length === 0) {
            entries.FlowLogId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId != null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    return entries;
};
const se_DescribeFpgaImagesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageIds != null) {
        const memberEntries = se_FpgaImageIdList(input.FpgaImageIds, context);
        if (input.FpgaImageIds?.length === 0) {
            entries.FpgaImageId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FpgaImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Owners != null) {
        const memberEntries = se_OwnerStringList(input.Owners, context);
        if (input.Owners?.length === 0) {
            entries.Owner = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeHostReservationOfferingsRequest = (input, context) => {
    const entries = {};
    if (input.Filter != null) {
        const memberEntries = se_FilterList(input.Filter, context);
        if (input.Filter?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxDuration != null) {
        entries["MaxDuration"] = input.MaxDuration;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.MinDuration != null) {
        entries["MinDuration"] = input.MinDuration;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OfferingId != null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
const se_DescribeHostReservationsRequest = (input, context) => {
    const entries = {};
    if (input.Filter != null) {
        const memberEntries = se_FilterList(input.Filter, context);
        if (input.Filter?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostReservationIdSet != null) {
        const memberEntries = se_HostReservationIdSet(input.HostReservationIdSet, context);
        if (input.HostReservationIdSet?.length === 0) {
            entries.HostReservationIdSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostReservationIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeHostsRequest = (input, context) => {
    const entries = {};
    if (input.Filter != null) {
        const memberEntries = se_FilterList(input.Filter, context);
        if (input.Filter?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostIds != null) {
        const memberEntries = se_RequestHostIdList(input.HostIds, context);
        if (input.HostIds?.length === 0) {
            entries.HostId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeIamInstanceProfileAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.AssociationIds != null) {
        const memberEntries = se_AssociationIdList(input.AssociationIds, context);
        if (input.AssociationIds?.length === 0) {
            entries.AssociationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeIdentityIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
    }
    if (input.Resource != null) {
        entries["Resource"] = input.Resource;
    }
    return entries;
};
const se_DescribeIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.Resource != null) {
        entries["Resource"] = input.Resource;
    }
    return entries;
};
const se_DescribeImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeImagesRequest = (input, context) => {
    const entries = {};
    if (input.ExecutableUsers != null) {
        const memberEntries = se_ExecutableByStringList(input.ExecutableUsers, context);
        if (input.ExecutableUsers?.length === 0) {
            entries.ExecutableBy = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExecutableBy.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImageIds != null) {
        const memberEntries = se_ImageIdStringList(input.ImageIds, context);
        if (input.ImageIds?.length === 0) {
            entries.ImageId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Owners != null) {
        const memberEntries = se_OwnerStringList(input.Owners, context);
        if (input.Owners?.length === 0) {
            entries.Owner = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IncludeDeprecated != null) {
        entries["IncludeDeprecated"] = input.IncludeDeprecated;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeImportImageTasksRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImportTaskIds != null) {
        const memberEntries = se_ImportTaskIdList(input.ImportTaskIds, context);
        if (input.ImportTaskIds?.length === 0) {
            entries.ImportTaskId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeImportSnapshotTasksRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImportTaskIds != null) {
        const memberEntries = se_ImportSnapshotTaskIdList(input.ImportTaskIds, context);
        if (input.ImportTaskIds?.length === 0) {
            entries.ImportTaskId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const se_DescribeInstanceCreditSpecificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeInstanceEventWindowsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowIds != null) {
        const memberEntries = se_InstanceEventWindowIdSet(input.InstanceEventWindowIds, context);
        if (input.InstanceEventWindowIds?.length === 0) {
            entries.InstanceEventWindowId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceEventWindowId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeInstancesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeInstanceStatusRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IncludeAllInstances != null) {
        entries["IncludeAllInstances"] = input.IncludeAllInstances;
    }
    return entries;
};
const se_DescribeInstanceTypeOfferingsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LocationType != null) {
        entries["LocationType"] = input.LocationType;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeInstanceTypesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTypes != null) {
        const memberEntries = se_RequestInstanceTypeList(input.InstanceTypes, context);
        if (input.InstanceTypes?.length === 0) {
            entries.InstanceType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeInternetGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayIds != null) {
        const memberEntries = se_InternetGatewayIdList(input.InternetGatewayIds, context);
        if (input.InternetGatewayIds?.length === 0) {
            entries.InternetGatewayId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeIpamPoolsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamPoolIds != null) {
        const memberEntries = se_ValueStringList(input.IpamPoolIds, context);
        if (input.IpamPoolIds?.length === 0) {
            entries.IpamPoolId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamPoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamResourceDiscoveriesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamResourceDiscoveryIds != null) {
        const memberEntries = se_ValueStringList(input.IpamResourceDiscoveryIds, context);
        if (input.IpamResourceDiscoveryIds?.length === 0) {
            entries.IpamResourceDiscoveryId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamResourceDiscoveryId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamResourceDiscoveryAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamResourceDiscoveryAssociationIds != null) {
        const memberEntries = se_ValueStringList(input.IpamResourceDiscoveryAssociationIds, context);
        if (input.IpamResourceDiscoveryAssociationIds?.length === 0) {
            entries.IpamResourceDiscoveryAssociationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamResourceDiscoveryAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamScopesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamScopeIds != null) {
        const memberEntries = se_ValueStringList(input.IpamScopeIds, context);
        if (input.IpamScopeIds?.length === 0) {
            entries.IpamScopeId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamScopeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamIds != null) {
        const memberEntries = se_ValueStringList(input.IpamIds, context);
        if (input.IpamIds?.length === 0) {
            entries.IpamId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpv6PoolsRequest = (input, context) => {
    const entries = {};
    if (input.PoolIds != null) {
        const memberEntries = se_Ipv6PoolIdList(input.PoolIds, context);
        if (input.PoolIds?.length === 0) {
            entries.PoolId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeKeyPairsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KeyNames != null) {
        const memberEntries = se_KeyNameStringList(input.KeyNames, context);
        if (input.KeyNames?.length === 0) {
            entries.KeyName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KeyName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KeyPairIds != null) {
        const memberEntries = se_KeyPairIdStringList(input.KeyPairIds, context);
        if (input.KeyPairIds?.length === 0) {
            entries.KeyPairId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KeyPairId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IncludePublicKey != null) {
        entries["IncludePublicKey"] = input.IncludePublicKey;
    }
    return entries;
};
const se_DescribeLaunchTemplatesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateIds != null) {
        const memberEntries = se_LaunchTemplateIdStringList(input.LaunchTemplateIds, context);
        if (input.LaunchTemplateIds?.length === 0) {
            entries.LaunchTemplateId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplateNames != null) {
        const memberEntries = se_LaunchTemplateNameStringList(input.LaunchTemplateNames, context);
        if (input.LaunchTemplateNames?.length === 0) {
            entries.LaunchTemplateName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeLaunchTemplateVersionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Versions != null) {
        const memberEntries = se_VersionStringList(input.Versions, context);
        if (input.Versions?.length === 0) {
            entries.LaunchTemplateVersion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MinVersion != null) {
        entries["MinVersion"] = input.MinVersion;
    }
    if (input.MaxVersion != null) {
        entries["MaxVersion"] = input.MaxVersion;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ResolveAlias != null) {
        entries["ResolveAlias"] = input.ResolveAlias;
    }
    return entries;
};
const se_DescribeLocalGatewayRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableIds != null) {
        const memberEntries = se_LocalGatewayRouteTableIdSet(input.LocalGatewayRouteTableIds, context);
        if (input.LocalGatewayRouteTableIds?.length === 0) {
            entries.LocalGatewayRouteTableId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds != null) {
        const memberEntries = se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds, context);
        if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds?.length === 0) {
            entries.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeLocalGatewayRouteTableVpcAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableVpcAssociationIds != null) {
        const memberEntries = se_LocalGatewayRouteTableVpcAssociationIdSet(input.LocalGatewayRouteTableVpcAssociationIds, context);
        if (input.LocalGatewayRouteTableVpcAssociationIds?.length === 0) {
            entries.LocalGatewayRouteTableVpcAssociationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableVpcAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeLocalGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayIds != null) {
        const memberEntries = se_LocalGatewayIdSet(input.LocalGatewayIds, context);
        if (input.LocalGatewayIds?.length === 0) {
            entries.LocalGatewayId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeLocalGatewayVirtualInterfaceGroupsRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayVirtualInterfaceGroupIds != null) {
        const memberEntries = se_LocalGatewayVirtualInterfaceGroupIdSet(input.LocalGatewayVirtualInterfaceGroupIds, context);
        if (input.LocalGatewayVirtualInterfaceGroupIds?.length === 0) {
            entries.LocalGatewayVirtualInterfaceGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayVirtualInterfaceGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeLocalGatewayVirtualInterfacesRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayVirtualInterfaceIds != null) {
        const memberEntries = se_LocalGatewayVirtualInterfaceIdSet(input.LocalGatewayVirtualInterfaceIds, context);
        if (input.LocalGatewayVirtualInterfaceIds?.length === 0) {
            entries.LocalGatewayVirtualInterfaceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeManagedPrefixListsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PrefixListIds != null) {
        const memberEntries = se_ValueStringList(input.PrefixListIds, context);
        if (input.PrefixListIds?.length === 0) {
            entries.PrefixListId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeMovingAddressesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PublicIps != null) {
        const memberEntries = se_ValueStringList(input.PublicIps, context);
        if (input.PublicIps?.length === 0) {
            entries.PublicIp = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeNatGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filter != null) {
        const memberEntries = se_FilterList(input.Filter, context);
        if (input.Filter?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NatGatewayIds != null) {
        const memberEntries = se_NatGatewayIdStringList(input.NatGatewayIds, context);
        if (input.NatGatewayIds?.length === 0) {
            entries.NatGatewayId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NatGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeNetworkAclsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclIds != null) {
        const memberEntries = se_NetworkAclIdStringList(input.NetworkAclIds, context);
        if (input.NetworkAclIds?.length === 0) {
            entries.NetworkAclId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkAclId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeNetworkInsightsAccessScopeAnalysesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisIds != null) {
        const memberEntries = se_NetworkInsightsAccessScopeAnalysisIdList(input.NetworkInsightsAccessScopeAnalysisIds, context);
        if (input.NetworkInsightsAccessScopeAnalysisIds?.length === 0) {
            entries.NetworkInsightsAccessScopeAnalysisId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAccessScopeAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInsightsAccessScopeId != null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.AnalysisStartTimeBegin != null) {
        entries["AnalysisStartTimeBegin"] = input.AnalysisStartTimeBegin.toISOString().split(".")[0] + "Z";
    }
    if (input.AnalysisStartTimeEnd != null) {
        entries["AnalysisStartTimeEnd"] = input.AnalysisStartTimeEnd.toISOString().split(".")[0] + "Z";
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeNetworkInsightsAccessScopesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeIds != null) {
        const memberEntries = se_NetworkInsightsAccessScopeIdList(input.NetworkInsightsAccessScopeIds, context);
        if (input.NetworkInsightsAccessScopeIds?.length === 0) {
            entries.NetworkInsightsAccessScopeId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAccessScopeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeNetworkInsightsAnalysesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAnalysisIds != null) {
        const memberEntries = se_NetworkInsightsAnalysisIdList(input.NetworkInsightsAnalysisIds, context);
        if (input.NetworkInsightsAnalysisIds?.length === 0) {
            entries.NetworkInsightsAnalysisId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInsightsPathId != null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    if (input.AnalysisStartTime != null) {
        entries["AnalysisStartTime"] = input.AnalysisStartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.AnalysisEndTime != null) {
        entries["AnalysisEndTime"] = input.AnalysisEndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeNetworkInsightsPathsRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsPathIds != null) {
        const memberEntries = se_NetworkInsightsPathIdList(input.NetworkInsightsPathIds, context);
        if (input.NetworkInsightsPathIds?.length === 0) {
            entries.NetworkInsightsPathId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsPathId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const se_DescribeNetworkInterfacePermissionsRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfacePermissionIds != null) {
        const memberEntries = se_NetworkInterfacePermissionIdList(input.NetworkInterfacePermissionIds, context);
        if (input.NetworkInterfacePermissionIds?.length === 0) {
            entries.NetworkInterfacePermissionId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfacePermissionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeNetworkInterfacesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceIds != null) {
        const memberEntries = se_NetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        if (input.NetworkInterfaceIds?.length === 0) {
            entries.NetworkInterfaceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribePlacementGroupsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupNames != null) {
        const memberEntries = se_PlacementGroupStringList(input.GroupNames, context);
        if (input.GroupNames?.length === 0) {
            entries.GroupName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupIds != null) {
        const memberEntries = se_PlacementGroupIdStringList(input.GroupIds, context);
        if (input.GroupIds?.length === 0) {
            entries.GroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribePrefixListsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PrefixListIds != null) {
        const memberEntries = se_PrefixListResourceIdStringList(input.PrefixListIds, context);
        if (input.PrefixListIds?.length === 0) {
            entries.PrefixListId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribePrincipalIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources != null) {
        const memberEntries = se_ResourceList(input.Resources, context);
        if (input.Resources?.length === 0) {
            entries.Resource = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribePublicIpv4PoolsRequest = (input, context) => {
    const entries = {};
    if (input.PoolIds != null) {
        const memberEntries = se_PublicIpv4PoolIdStringList(input.PoolIds, context);
        if (input.PoolIds?.length === 0) {
            entries.PoolId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeRegionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RegionNames != null) {
        const memberEntries = se_RegionNameStringList(input.RegionNames, context);
        if (input.RegionNames?.length === 0) {
            entries.RegionName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AllRegions != null) {
        entries["AllRegions"] = input.AllRegions;
    }
    return entries;
};
const se_DescribeReplaceRootVolumeTasksRequest = (input, context) => {
    const entries = {};
    if (input.ReplaceRootVolumeTaskIds != null) {
        const memberEntries = se_ReplaceRootVolumeTaskIds(input.ReplaceRootVolumeTaskIds, context);
        if (input.ReplaceRootVolumeTaskIds?.length === 0) {
            entries.ReplaceRootVolumeTaskId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReplaceRootVolumeTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeReservedInstancesListingsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesId != null) {
        entries["ReservedInstancesId"] = input.ReservedInstancesId;
    }
    if (input.ReservedInstancesListingId != null) {
        entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
    }
    return entries;
};
const se_DescribeReservedInstancesModificationsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesModificationIds != null) {
        const memberEntries = se_ReservedInstancesModificationIdStringList(input.ReservedInstancesModificationIds, context);
        if (input.ReservedInstancesModificationIds?.length === 0) {
            entries.ReservedInstancesModificationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesModificationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeReservedInstancesOfferingsRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IncludeMarketplace != null) {
        entries["IncludeMarketplace"] = input.IncludeMarketplace;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.MaxDuration != null) {
        entries["MaxDuration"] = input.MaxDuration;
    }
    if (input.MaxInstanceCount != null) {
        entries["MaxInstanceCount"] = input.MaxInstanceCount;
    }
    if (input.MinDuration != null) {
        entries["MinDuration"] = input.MinDuration;
    }
    if (input.OfferingClass != null) {
        entries["OfferingClass"] = input.OfferingClass;
    }
    if (input.ProductDescription != null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.ReservedInstancesOfferingIds != null) {
        const memberEntries = se_ReservedInstancesOfferingIdStringList(input.ReservedInstancesOfferingIds, context);
        if (input.ReservedInstancesOfferingIds?.length === 0) {
            entries.ReservedInstancesOfferingId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesOfferingId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTenancy != null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
    }
    return entries;
};
const se_DescribeReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OfferingClass != null) {
        entries["OfferingClass"] = input.OfferingClass;
    }
    if (input.ReservedInstancesIds != null) {
        const memberEntries = se_ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
        if (input.ReservedInstancesIds?.length === 0) {
            entries.ReservedInstancesId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
    }
    return entries;
};
const se_DescribeRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableIds != null) {
        const memberEntries = se_RouteTableIdStringList(input.RouteTableIds, context);
        if (input.RouteTableIds?.length === 0) {
            entries.RouteTableId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeScheduledInstanceAvailabilityRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.FirstSlotStartTimeRange != null) {
        const memberEntries = se_SlotDateTimeRangeRequest(input.FirstSlotStartTimeRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FirstSlotStartTimeRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.MaxSlotDurationInHours != null) {
        entries["MaxSlotDurationInHours"] = input.MaxSlotDurationInHours;
    }
    if (input.MinSlotDurationInHours != null) {
        entries["MinSlotDurationInHours"] = input.MinSlotDurationInHours;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Recurrence != null) {
        const memberEntries = se_ScheduledInstanceRecurrenceRequest(input.Recurrence, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Recurrence.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.ScheduledInstanceIds != null) {
        const memberEntries = se_ScheduledInstanceIdRequestSet(input.ScheduledInstanceIds, context);
        if (input.ScheduledInstanceIds?.length === 0) {
            entries.ScheduledInstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduledInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SlotStartTimeRange != null) {
        const memberEntries = se_SlotStartTimeRangeRequest(input.SlotStartTimeRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SlotStartTimeRange.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSecurityGroupReferencesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId != null) {
        const memberEntries = se_GroupIds(input.GroupId, context);
        if (input.GroupId?.length === 0) {
            entries.GroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSecurityGroupRulesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleIds != null) {
        const memberEntries = se_SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        if (input.SecurityGroupRuleIds?.length === 0) {
            entries.SecurityGroupRuleId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeSecurityGroupsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupIds != null) {
        const memberEntries = se_GroupIdStringList(input.GroupIds, context);
        if (input.GroupIds?.length === 0) {
            entries.GroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupNames != null) {
        const memberEntries = se_GroupNameStringList(input.GroupNames, context);
        if (input.GroupNames?.length === 0) {
            entries.GroupName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeSnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OwnerIds != null) {
        const memberEntries = se_OwnerStringList(input.OwnerIds, context);
        if (input.OwnerIds?.length === 0) {
            entries.Owner = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RestorableByUserIds != null) {
        const memberEntries = se_RestorableByStringList(input.RestorableByUserIds, context);
        if (input.RestorableByUserIds?.length === 0) {
            entries.RestorableBy = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RestorableBy.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SnapshotIds != null) {
        const memberEntries = se_SnapshotIdStringList(input.SnapshotIds, context);
        if (input.SnapshotIds?.length === 0) {
            entries.SnapshotId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeSnapshotTierStatusRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeSpotFleetInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestId != null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    return entries;
};
const se_DescribeSpotFleetRequestHistoryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EventType != null) {
        entries["EventType"] = input.EventType;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestId != null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_DescribeSpotFleetRequestsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestIds != null) {
        const memberEntries = se_SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
        if (input.SpotFleetRequestIds?.length === 0) {
            entries.SpotFleetRequestId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSpotInstanceRequestsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotInstanceRequestIds != null) {
        const memberEntries = se_SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
        if (input.SpotInstanceRequestIds?.length === 0) {
            entries.SpotInstanceRequestId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeSpotPriceHistoryRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceTypes != null) {
        const memberEntries = se_InstanceTypeList(input.InstanceTypes, context);
        if (input.InstanceTypes?.length === 0) {
            entries.InstanceType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.ProductDescriptions != null) {
        const memberEntries = se_ProductDescriptionList(input.ProductDescriptions, context);
        if (input.ProductDescriptions?.length === 0) {
            entries.ProductDescription = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_DescribeStaleSecurityGroupsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_DescribeStoreImageTasksRequest = (input, context) => {
    const entries = {};
    if (input.ImageIds != null) {
        const memberEntries = se_ImageIdList(input.ImageIds, context);
        if (input.ImageIds?.length === 0) {
            entries.ImageId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeSubnetsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_SubnetIdStringList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeTagsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeTrafficMirrorFiltersRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterIds != null) {
        const memberEntries = se_TrafficMirrorFilterIdList(input.TrafficMirrorFilterIds, context);
        if (input.TrafficMirrorFilterIds?.length === 0) {
            entries.TrafficMirrorFilterId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorFilterId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeTrafficMirrorSessionsRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorSessionIds != null) {
        const memberEntries = se_TrafficMirrorSessionIdList(input.TrafficMirrorSessionIds, context);
        if (input.TrafficMirrorSessionIds?.length === 0) {
            entries.TrafficMirrorSessionId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorSessionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeTrafficMirrorTargetsRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorTargetIds != null) {
        const memberEntries = se_TrafficMirrorTargetIdList(input.TrafficMirrorTargetIds, context);
        if (input.TrafficMirrorTargetIds?.length === 0) {
            entries.TrafficMirrorTargetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorTargetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeTransitGatewayAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        if (input.TransitGatewayAttachmentIds?.length === 0) {
            entries.TransitGatewayAttachmentIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayConnectPeersRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayConnectPeerIds != null) {
        const memberEntries = se_TransitGatewayConnectPeerIdStringList(input.TransitGatewayConnectPeerIds, context);
        if (input.TransitGatewayConnectPeerIds?.length === 0) {
            entries.TransitGatewayConnectPeerIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayConnectPeerIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayConnectsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        if (input.TransitGatewayAttachmentIds?.length === 0) {
            entries.TransitGatewayAttachmentIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayMulticastDomainsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainIds != null) {
        const memberEntries = se_TransitGatewayMulticastDomainIdStringList(input.TransitGatewayMulticastDomainIds, context);
        if (input.TransitGatewayMulticastDomainIds?.length === 0) {
            entries.TransitGatewayMulticastDomainIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayMulticastDomainIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayPeeringAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        if (input.TransitGatewayAttachmentIds?.length === 0) {
            entries.TransitGatewayAttachmentIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayPolicyTablesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayPolicyTableIds != null) {
        const memberEntries = se_TransitGatewayPolicyTableIdStringList(input.TransitGatewayPolicyTableIds, context);
        if (input.TransitGatewayPolicyTableIds?.length === 0) {
            entries.TransitGatewayPolicyTableIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayPolicyTableIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayRouteTableAnnouncementsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableAnnouncementIds != null) {
        const memberEntries = se_TransitGatewayRouteTableAnnouncementIdStringList(input.TransitGatewayRouteTableAnnouncementIds, context);
        if (input.TransitGatewayRouteTableAnnouncementIds?.length === 0) {
            entries.TransitGatewayRouteTableAnnouncementIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayRouteTableAnnouncementIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableIds != null) {
        const memberEntries = se_TransitGatewayRouteTableIdStringList(input.TransitGatewayRouteTableIds, context);
        if (input.TransitGatewayRouteTableIds?.length === 0) {
            entries.TransitGatewayRouteTableIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayRouteTableIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayIds != null) {
        const memberEntries = se_TransitGatewayIdStringList(input.TransitGatewayIds, context);
        if (input.TransitGatewayIds?.length === 0) {
            entries.TransitGatewayIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTransitGatewayVpcAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        if (input.TransitGatewayAttachmentIds?.length === 0) {
            entries.TransitGatewayAttachmentIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeTrunkInterfaceAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.AssociationIds != null) {
        const memberEntries = se_TrunkInterfaceAssociationIdList(input.AssociationIds, context);
        if (input.AssociationIds?.length === 0) {
            entries.AssociationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeVerifiedAccessEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessEndpointIds != null) {
        const memberEntries = se_VerifiedAccessEndpointIdList(input.VerifiedAccessEndpointIds, context);
        if (input.VerifiedAccessEndpointIds?.length === 0) {
            entries.VerifiedAccessEndpointId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.VerifiedAccessGroupId != null) {
        entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVerifiedAccessGroupsRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessGroupIds != null) {
        const memberEntries = se_VerifiedAccessGroupIdList(input.VerifiedAccessGroupIds, context);
        if (input.VerifiedAccessGroupIds?.length === 0) {
            entries.VerifiedAccessGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceIds != null) {
        const memberEntries = se_VerifiedAccessInstanceIdList(input.VerifiedAccessInstanceIds, context);
        if (input.VerifiedAccessInstanceIds?.length === 0) {
            entries.VerifiedAccessInstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVerifiedAccessInstancesRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceIds != null) {
        const memberEntries = se_VerifiedAccessInstanceIdList(input.VerifiedAccessInstanceIds, context);
        if (input.VerifiedAccessInstanceIds?.length === 0) {
            entries.VerifiedAccessInstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVerifiedAccessTrustProvidersRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessTrustProviderIds != null) {
        const memberEntries = se_VerifiedAccessTrustProviderIdList(input.VerifiedAccessTrustProviderIds, context);
        if (input.VerifiedAccessTrustProviderIds?.length === 0) {
            entries.VerifiedAccessTrustProviderId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessTrustProviderId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVolumeAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVolumesModificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeIds != null) {
        const memberEntries = se_VolumeIdStringList(input.VolumeIds, context);
        if (input.VolumeIds?.length === 0) {
            entries.VolumeId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeVolumesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VolumeIds != null) {
        const memberEntries = se_VolumeIdStringList(input.VolumeIds, context);
        if (input.VolumeIds?.length === 0) {
            entries.VolumeId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeVolumeStatusRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VolumeIds != null) {
        const memberEntries = se_VolumeIdStringList(input.VolumeIds, context);
        if (input.VolumeIds?.length === 0) {
            entries.VolumeId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVpcAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VpcIds != null) {
        const memberEntries = se_VpcClassicLinkIdList(input.VpcIds, context);
        if (input.VpcIds?.length === 0) {
            entries.VpcIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcIds != null) {
        const memberEntries = se_VpcClassicLinkIdList(input.VpcIds, context);
        if (input.VpcIds?.length === 0) {
            entries.VpcId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeVpcEndpointConnectionNotificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationId != null) {
        entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeVpcEndpointServiceConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceIds != null) {
        const memberEntries = se_VpcEndpointServiceIdList(input.ServiceIds, context);
        if (input.ServiceIds?.length === 0) {
            entries.ServiceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeVpcEndpointServicePermissionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeVpcEndpointServicesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceNames != null) {
        const memberEntries = se_ValueStringList(input.ServiceNames, context);
        if (input.ServiceNames?.length === 0) {
            entries.ServiceName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeVpcEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointIds != null) {
        const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
        if (input.VpcEndpointIds?.length === 0) {
            entries.VpcEndpointId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeVpcPeeringConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionIds != null) {
        const memberEntries = se_VpcPeeringConnectionIdList(input.VpcPeeringConnectionIds, context);
        if (input.VpcPeeringConnectionIds?.length === 0) {
            entries.VpcPeeringConnectionId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcPeeringConnectionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeVpcsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpcIds != null) {
        const memberEntries = se_VpcIdStringList(input.VpcIds, context);
        if (input.VpcIds?.length === 0) {
            entries.VpcId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_DescribeVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpnConnectionIds != null) {
        const memberEntries = se_VpnConnectionIdStringList(input.VpnConnectionIds, context);
        if (input.VpnConnectionIds?.length === 0) {
            entries.VpnConnectionId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpnConnectionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DescribeVpnGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpnGatewayIds != null) {
        const memberEntries = se_VpnGatewayIdStringList(input.VpnGatewayIds, context);
        if (input.VpnGatewayIds?.length === 0) {
            entries.VpnGatewayId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpnGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DestinationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.FileFormat != null) {
        entries["FileFormat"] = input.FileFormat;
    }
    if (input.HiveCompatiblePartitions != null) {
        entries["HiveCompatiblePartitions"] = input.HiveCompatiblePartitions;
    }
    if (input.PerHourPartition != null) {
        entries["PerHourPartition"] = input.PerHourPartition;
    }
    return entries;
};
const se_DetachClassicLinkVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_DetachInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId != null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_DetachNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.AttachmentId != null) {
        entries["AttachmentId"] = input.AttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
const se_DetachVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.VerifiedAccessTrustProviderId != null) {
        entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DetachVolumeRequest = (input, context) => {
    const entries = {};
    if (input.Device != null) {
        entries["Device"] = input.Device;
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DetachVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpnGatewayId != null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DhcpOptionsIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`DhcpOptionsId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DirectoryServiceAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.DirectoryId != null) {
        entries["DirectoryId"] = input.DirectoryId;
    }
    return entries;
};
const se_DisableAddressTransferRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId != null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableAwsNetworkPerformanceMetricSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination != null) {
        entries["Destination"] = input.Destination;
    }
    if (input.Metric != null) {
        entries["Metric"] = input.Metric;
    }
    if (input.Statistic != null) {
        entries["Statistic"] = input.Statistic;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableFastLaunchRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = se_AvailabilityZoneStringList(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZone = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourceSnapshotIds != null) {
        const memberEntries = se_SnapshotIdStringList(input.SourceSnapshotIds, context);
        if (input.SourceSnapshotIds?.length === 0) {
            entries.SourceSnapshotId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableImageDeprecationRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableIpamOrganizationAdminAccountRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DelegatedAdminAccountId != null) {
        entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
    }
    return entries;
};
const se_DisableSerialConsoleAccessRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableTransitGatewayRouteTablePropagationRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TransitGatewayRouteTableAnnouncementId != null) {
        entries["TransitGatewayRouteTableAnnouncementId"] = input.TransitGatewayRouteTableAnnouncementId;
    }
    return entries;
};
const se_DisableVgwRoutePropagationRequest = (input, context) => {
    const entries = {};
    if (input.GatewayId != null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisableVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_DisableVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_DisassociateAddressRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.PublicIp != null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateEnclaveCertificateIamRoleRequest = (input, context) => {
    const entries = {};
    if (input.CertificateArn != null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateIamInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const se_DisassociateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowId != null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.AssociationTarget != null) {
        const memberEntries = se_InstanceEventWindowDisassociationRequest(input.AssociationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DisassociateIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamResourceDiscoveryAssociationId != null) {
        entries["IpamResourceDiscoveryAssociationId"] = input.IpamResourceDiscoveryAssociationId;
    }
    return entries;
};
const se_DisassociateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input.NatGatewayId != null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.AssociationIds != null) {
        const memberEntries = se_EipAssociationIdList(input.AssociationIds, context);
        if (input.AssociationIds?.length === 0) {
            entries.AssociationId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxDrainDurationSeconds != null) {
        entries["MaxDrainDurationSeconds"] = input.MaxDrainDurationSeconds;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateSubnetCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const se_DisassociateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayPolicyTableId != null) {
        entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateTrunkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_DisassociateVpcCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const se_DiskImage = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Image != null) {
        const memberEntries = se_DiskImageDetail(input.Image, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Image.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Volume != null) {
        const memberEntries = se_VolumeDetail(input.Volume, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Volume.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DiskImageDetail = (input, context) => {
    const entries = {};
    if (input.Bytes != null) {
        entries["Bytes"] = input.Bytes;
    }
    if (input.Format != null) {
        entries["Format"] = input.Format;
    }
    if (input.ImportManifestUrl != null) {
        entries["ImportManifestUrl"] = input.ImportManifestUrl;
    }
    return entries;
};
const se_DiskImageList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_DiskImage(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_DnsOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.DnsRecordIpType != null) {
        entries["DnsRecordIpType"] = input.DnsRecordIpType;
    }
    if (input.PrivateDnsOnlyForInboundResolverEndpoint != null) {
        entries["PrivateDnsOnlyForInboundResolverEndpoint"] = input.PrivateDnsOnlyForInboundResolverEndpoint;
    }
    return entries;
};
const se_DnsServersOptionsModifyStructure = (input, context) => {
    const entries = {};
    if (input.CustomDnsServers != null) {
        const memberEntries = se_ValueStringList(input.CustomDnsServers, context);
        if (input.CustomDnsServers?.length === 0) {
            entries.CustomDnsServers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomDnsServers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_EbsBlockDevice = (input, context) => {
    const entries = {};
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize != null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType != null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Throughput != null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.OutpostArn != null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    return entries;
};
const se_EbsInstanceBlockDeviceSpecification = (input, context) => {
    const entries = {};
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    return entries;
};
const se_EgressOnlyInternetGatewayIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EipAssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ElasticGpuIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ElasticGpuSpecification = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
const se_ElasticGpuSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ElasticGpuSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`ElasticGpuSpecification.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ElasticGpuSpecifications = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ElasticGpuSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ElasticInferenceAccelerator = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Count != null) {
        entries["Count"] = input.Count;
    }
    return entries;
};
const se_ElasticInferenceAccelerators = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ElasticInferenceAccelerator(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_EnableAddressTransferRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId != null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.TransferAccountId != null) {
        entries["TransferAccountId"] = input.TransferAccountId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableAwsNetworkPerformanceMetricSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination != null) {
        entries["Destination"] = input.Destination;
    }
    if (input.Metric != null) {
        entries["Metric"] = input.Metric;
    }
    if (input.Statistic != null) {
        entries["Statistic"] = input.Statistic;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableFastLaunchRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.SnapshotConfiguration != null) {
        const memberEntries = se_FastLaunchSnapshotConfigurationRequest(input.SnapshotConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplate != null) {
        const memberEntries = se_FastLaunchLaunchTemplateSpecificationRequest(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxParallelLaunches != null) {
        entries["MaxParallelLaunches"] = input.MaxParallelLaunches;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = se_AvailabilityZoneStringList(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZone = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourceSnapshotIds != null) {
        const memberEntries = se_SnapshotIdStringList(input.SourceSnapshotIds, context);
        if (input.SourceSnapshotIds?.length === 0) {
            entries.SourceSnapshotId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableImageDeprecationRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DeprecateAt != null) {
        entries["DeprecateAt"] = input.DeprecateAt.toISOString().split(".")[0] + "Z";
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableIpamOrganizationAdminAccountRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DelegatedAdminAccountId != null) {
        entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
    }
    return entries;
};
const se_EnableReachabilityAnalyzerOrganizationSharingRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableSerialConsoleAccessRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableTransitGatewayRouteTablePropagationRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TransitGatewayRouteTableAnnouncementId != null) {
        entries["TransitGatewayRouteTableAnnouncementId"] = input.TransitGatewayRouteTableAnnouncementId;
    }
    return entries;
};
const se_EnableVgwRoutePropagationRequest = (input, context) => {
    const entries = {};
    if (input.GatewayId != null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_EnableVolumeIORequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    return entries;
};
const se_EnableVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_EnableVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const se_EnaSrdSpecification = (input, context) => {
    const entries = {};
    if (input.EnaSrdEnabled != null) {
        entries["EnaSrdEnabled"] = input.EnaSrdEnabled;
    }
    if (input.EnaSrdUdpSpecification != null) {
        const memberEntries = se_EnaSrdUdpSpecification(input.EnaSrdUdpSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdUdpSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EnaSrdUdpSpecification = (input, context) => {
    const entries = {};
    if (input.EnaSrdUdpEnabled != null) {
        entries["EnaSrdUdpEnabled"] = input.EnaSrdUdpEnabled;
    }
    return entries;
};
const se_EnclaveOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_ExcludedInstanceTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExecutableByStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExecutableBy.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExportClientVpnClientCertificateRevocationListRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ExportClientVpnClientConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ExportImageRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskImageFormat != null) {
        entries["DiskImageFormat"] = input.DiskImageFormat;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.S3ExportLocation != null) {
        const memberEntries = se_ExportTaskS3LocationRequest(input.S3ExportLocation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3ExportLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ExportImageTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExportImageTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExportTaskIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExportTaskS3LocationRequest = (input, context) => {
    const entries = {};
    if (input.S3Bucket != null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    return entries;
};
const se_ExportToS3TaskSpecification = (input, context) => {
    const entries = {};
    if (input.ContainerFormat != null) {
        entries["ContainerFormat"] = input.ContainerFormat;
    }
    if (input.DiskImageFormat != null) {
        entries["DiskImageFormat"] = input.DiskImageFormat;
    }
    if (input.S3Bucket != null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    return entries;
};
const se_ExportTransitGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.S3Bucket != null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_FastLaunchImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImageId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FastLaunchLaunchTemplateSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version != null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const se_FastLaunchSnapshotConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.TargetResourceCount != null) {
        entries["TargetResourceCount"] = input.TargetResourceCount;
    }
    return entries;
};
const se_FederatedAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.SAMLProviderArn != null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
    }
    if (input.SelfServiceSAMLProviderArn != null) {
        entries["SelfServiceSAMLProviderArn"] = input.SelfServiceSAMLProviderArn;
    }
    return entries;
};
const se_Filter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Values != null) {
        const memberEntries = se_ValueStringList(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Value = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_FilterList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Filter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Filter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FleetIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FleetLaunchTemplateConfigListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_FleetLaunchTemplateConfigRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FleetLaunchTemplateConfigRequest = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateSpecification != null) {
        const memberEntries = se_FleetLaunchTemplateSpecificationRequest(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Overrides != null) {
        const memberEntries = se_FleetLaunchTemplateOverridesListRequest(input.Overrides, context);
        if (input.Overrides?.length === 0) {
            entries.Overrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_FleetLaunchTemplateOverridesListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_FleetLaunchTemplateOverridesRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FleetLaunchTemplateOverridesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.MaxPrice != null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.WeightedCapacity != null) {
        entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
    }
    if (input.Priority != null) {
        entries["Priority"] = __serializeFloat(input.Priority);
    }
    if (input.Placement != null) {
        const memberEntries = se_Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements != null) {
        const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    return entries;
};
const se_FleetLaunchTemplateSpecification = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version != null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const se_FleetLaunchTemplateSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version != null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const se_FleetSpotCapacityRebalanceRequest = (input, context) => {
    const entries = {};
    if (input.ReplacementStrategy != null) {
        entries["ReplacementStrategy"] = input.ReplacementStrategy;
    }
    if (input.TerminationDelay != null) {
        entries["TerminationDelay"] = input.TerminationDelay;
    }
    return entries;
};
const se_FleetSpotMaintenanceStrategiesRequest = (input, context) => {
    const entries = {};
    if (input.CapacityRebalance != null) {
        const memberEntries = se_FleetSpotCapacityRebalanceRequest(input.CapacityRebalance, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityRebalance.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_FlowLogIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FlowLogResourceIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FpgaImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GetAssociatedEnclaveCertificateIamRolesRequest = (input, context) => {
    const entries = {};
    if (input.CertificateArn != null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetAssociatedIpv6PoolCidrsRequest = (input, context) => {
    const entries = {};
    if (input.PoolId != null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetAwsNetworkPerformanceDataRequest = (input, context) => {
    const entries = {};
    if (input.DataQueries != null) {
        const memberEntries = se_DataQueries(input.DataQueries, context);
        if (input.DataQueries?.length === 0) {
            entries.DataQuery = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DataQuery.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetCapacityReservationUsageRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId != null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetCoipPoolUsageRequest = (input, context) => {
    const entries = {};
    if (input.PoolId != null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetConsoleOutputRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Latest != null) {
        entries["Latest"] = input.Latest;
    }
    return entries;
};
const se_GetConsoleScreenshotRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.WakeUp != null) {
        entries["WakeUp"] = input.WakeUp;
    }
    return entries;
};
const se_GetDefaultCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceFamily != null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    return entries;
};
const se_GetEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetFlowLogsIntegrationTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FlowLogId != null) {
        entries["FlowLogId"] = input.FlowLogId;
    }
    if (input.ConfigDeliveryS3DestinationArn != null) {
        entries["ConfigDeliveryS3DestinationArn"] = input.ConfigDeliveryS3DestinationArn;
    }
    if (input.IntegrateServices != null) {
        const memberEntries = se_IntegrateServices(input.IntegrateServices, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IntegrateService.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetGroupsForCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId != null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetHostReservationPurchasePreviewRequest = (input, context) => {
    const entries = {};
    if (input.HostIdSet != null) {
        const memberEntries = se_RequestHostIdSet(input.HostIdSet, context);
        if (input.HostIdSet?.length === 0) {
            entries.HostIdSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OfferingId != null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
const se_GetInstanceTypesFromInstanceRequirementsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ArchitectureTypes != null) {
        const memberEntries = se_ArchitectureTypeSet(input.ArchitectureTypes, context);
        if (input.ArchitectureTypes?.length === 0) {
            entries.ArchitectureType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VirtualizationTypes != null) {
        const memberEntries = se_VirtualizationTypeSet(input.VirtualizationTypes, context);
        if (input.VirtualizationTypes?.length === 0) {
            entries.VirtualizationType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements != null) {
        const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_GetInstanceUefiDataRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetIpamAddressHistoryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamScopeId != null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_GetIpamDiscoveredAccountsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamResourceDiscoveryId != null) {
        entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
    }
    if (input.DiscoveryRegion != null) {
        entries["DiscoveryRegion"] = input.DiscoveryRegion;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_GetIpamDiscoveredResourceCidrsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamResourceDiscoveryId != null) {
        entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
    }
    if (input.ResourceRegion != null) {
        entries["ResourceRegion"] = input.ResourceRegion;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_GetIpamPoolAllocationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.IpamPoolAllocationId != null) {
        entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_GetIpamPoolCidrsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_GetIpamResourceCidrsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamScopeId != null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.ResourceId != null) {
        entries["ResourceId"] = input.ResourceId;
    }
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.ResourceTag != null) {
        const memberEntries = se_RequestIpamResourceTag(input.ResourceTag, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTag.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceOwner != null) {
        entries["ResourceOwner"] = input.ResourceOwner;
    }
    return entries;
};
const se_GetLaunchTemplateDataRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const se_GetManagedPrefixListAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_GetManagedPrefixListEntriesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TargetVersion != null) {
        entries["TargetVersion"] = input.TargetVersion;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisId != null) {
        entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetNetworkInsightsAccessScopeContentRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeId != null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetPasswordDataRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetReservedInstancesExchangeQuoteRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstanceIds != null) {
        const memberEntries = se_ReservedInstanceIdSet(input.ReservedInstanceIds, context);
        if (input.ReservedInstanceIds?.length === 0) {
            entries.ReservedInstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetConfigurations != null) {
        const memberEntries = se_TargetConfigurationRequestSet(input.TargetConfigurations, context);
        if (input.TargetConfigurations?.length === 0) {
            entries.TargetConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetSerialConsoleAccessStatusRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetSpotPlacementScoresRequest = (input, context) => {
    const entries = {};
    if (input.InstanceTypes != null) {
        const memberEntries = se_InstanceTypes(input.InstanceTypes, context);
        if (input.InstanceTypes?.length === 0) {
            entries.InstanceType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetCapacity != null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.TargetCapacityUnitType != null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    if (input.SingleAvailabilityZone != null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.RegionNames != null) {
        const memberEntries = se_RegionNames(input.RegionNames, context);
        if (input.RegionNames?.length === 0) {
            entries.RegionName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirementsWithMetadata != null) {
        const memberEntries = se_InstanceRequirementsWithMetadataRequest(input.InstanceRequirementsWithMetadata, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirementsWithMetadata.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_GetSubnetCidrReservationsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const se_GetTransitGatewayAttachmentPropagationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetTransitGatewayPolicyTableAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayPolicyTableId != null) {
        entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetTransitGatewayPolicyTableEntriesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayPolicyTableId != null) {
        entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetTransitGatewayPrefixListReferencesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetTransitGatewayRouteTableAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetTransitGatewayRouteTablePropagationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetVerifiedAccessEndpointPolicyRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessEndpointId != null) {
        entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetVerifiedAccessGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessGroupId != null) {
        entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetVpnConnectionDeviceSampleConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnConnectionDeviceTypeId != null) {
        entries["VpnConnectionDeviceTypeId"] = input.VpnConnectionDeviceTypeId;
    }
    if (input.InternetKeyExchangeVersion != null) {
        entries["InternetKeyExchangeVersion"] = input.InternetKeyExchangeVersion;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetVpnConnectionDeviceTypesRequest = (input, context) => {
    const entries = {};
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GetVpnTunnelReplacementStatusRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress != null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_GroupIdentifier = (input, context) => {
    const entries = {};
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    return entries;
};
const se_GroupIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_GroupIdentifier(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_GroupIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GroupNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_HibernationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Configured != null) {
        entries["Configured"] = input.Configured;
    }
    return entries;
};
const se_HostReservationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IamInstanceProfileSpecification = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const se_IcmpTypeCode = (input, context) => {
    const entries = {};
    if (input.Code != null) {
        entries["Code"] = input.Code;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
const se_IKEVersionsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_IKEVersionsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_IKEVersionsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_ImageDiskContainer = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceName != null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Format != null) {
        entries["Format"] = input.Format;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.Url != null) {
        entries["Url"] = input.Url;
    }
    if (input.UserBucket != null) {
        const memberEntries = se_UserBucket(input.UserBucket, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserBucket.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImageDiskContainerList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ImageDiskContainer(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImageId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImportClientVpnClientCertificateRevocationListRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.CertificateRevocationList != null) {
        entries["CertificateRevocationList"] = input.CertificateRevocationList;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ImportImageLicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.LicenseConfigurationArn != null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
const se_ImportImageLicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ImportImageLicenseConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ImportImageRequest = (input, context) => {
    const entries = {};
    if (input.Architecture != null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.ClientData != null) {
        const memberEntries = se_ClientData(input.ClientData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskContainers != null) {
        const memberEntries = se_ImageDiskContainerList(input.DiskContainers, context);
        if (input.DiskContainers?.length === 0) {
            entries.DiskContainer = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskContainer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Hypervisor != null) {
        entries["Hypervisor"] = input.Hypervisor;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.LicenseType != null) {
        entries["LicenseType"] = input.LicenseType;
    }
    if (input.Platform != null) {
        entries["Platform"] = input.Platform;
    }
    if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.LicenseSpecifications != null) {
        const memberEntries = se_ImportImageLicenseSpecificationListRequest(input.LicenseSpecifications, context);
        if (input.LicenseSpecifications?.length === 0) {
            entries.LicenseSpecifications = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UsageOperation != null) {
        entries["UsageOperation"] = input.UsageOperation;
    }
    if (input.BootMode != null) {
        entries["BootMode"] = input.BootMode;
    }
    return entries;
};
const se_ImportInstanceLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.AdditionalInfo != null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.Architecture != null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.GroupIds != null) {
        const memberEntries = se_SecurityGroupIdStringList(input.GroupIds, context);
        if (input.GroupIds?.length === 0) {
            entries.GroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupNames != null) {
        const memberEntries = se_SecurityGroupStringList(input.GroupNames, context);
        if (input.GroupNames?.length === 0) {
            entries.GroupName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInitiatedShutdownBehavior != null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Monitoring != null) {
        entries["Monitoring"] = input.Monitoring;
    }
    if (input.Placement != null) {
        const memberEntries = se_Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData != null) {
        const memberEntries = se_UserData(input.UserData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserData.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImportInstanceRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskImages != null) {
        const memberEntries = se_DiskImageList(input.DiskImages, context);
        if (input.DiskImages?.length === 0) {
            entries.DiskImage = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskImage.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchSpecification != null) {
        const memberEntries = se_ImportInstanceLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Platform != null) {
        entries["Platform"] = input.Platform;
    }
    return entries;
};
const se_ImportKeyPairRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.PublicKeyMaterial != null) {
        entries["PublicKeyMaterial"] = context.base64Encoder(input.PublicKeyMaterial);
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImportSnapshotRequest = (input, context) => {
    const entries = {};
    if (input.ClientData != null) {
        const memberEntries = se_ClientData(input.ClientData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskContainer != null) {
        const memberEntries = se_SnapshotDiskContainer(input.DiskContainer, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskContainer.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImportSnapshotTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImportTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImportVolumeRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Image != null) {
        const memberEntries = se_DiskImageDetail(input.Image, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Image.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Volume != null) {
        const memberEntries = se_VolumeDetail(input.Volume, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Volume.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InsideCidrBlocksStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceBlockDeviceMappingSpecification = (input, context) => {
    const entries = {};
    if (input.DeviceName != null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Ebs != null) {
        const memberEntries = se_EbsInstanceBlockDeviceSpecification(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice != null) {
        entries["NoDevice"] = input.NoDevice;
    }
    if (input.VirtualName != null) {
        entries["VirtualName"] = input.VirtualName;
    }
    return entries;
};
const se_InstanceBlockDeviceMappingSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceBlockDeviceMappingSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceCreditSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceCreditSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.CpuCredits != null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
const se_InstanceEventWindowAssociationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceTags != null) {
        const memberEntries = se_TagList(input.InstanceTags, context);
        if (input.InstanceTags?.length === 0) {
            entries.InstanceTag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DedicatedHostIds != null) {
        const memberEntries = se_DedicatedHostIdList(input.DedicatedHostIds, context);
        if (input.DedicatedHostIds?.length === 0) {
            entries.DedicatedHostId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceEventWindowDisassociationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceTags != null) {
        const memberEntries = se_TagList(input.InstanceTags, context);
        if (input.InstanceTags?.length === 0) {
            entries.InstanceTag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DedicatedHostIds != null) {
        const memberEntries = se_DedicatedHostIdList(input.DedicatedHostIds, context);
        if (input.DedicatedHostIds?.length === 0) {
            entries.DedicatedHostId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceEventWindowIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`InstanceEventWindowId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceEventWindowTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input.StartWeekDay != null) {
        entries["StartWeekDay"] = input.StartWeekDay;
    }
    if (input.StartHour != null) {
        entries["StartHour"] = input.StartHour;
    }
    if (input.EndWeekDay != null) {
        entries["EndWeekDay"] = input.EndWeekDay;
    }
    if (input.EndHour != null) {
        entries["EndHour"] = input.EndHour;
    }
    return entries;
};
const se_InstanceEventWindowTimeRangeRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceEventWindowTimeRangeRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceGenerationSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`InstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceIpv6Address = (input, context) => {
    const entries = {};
    if (input.Ipv6Address != null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
const se_InstanceIpv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceIpv6Address(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceIpv6AddressListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceIpv6AddressRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`InstanceIpv6Address.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceIpv6AddressRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6Address != null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
const se_InstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AutoRecovery != null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    return entries;
};
const se_InstanceMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input.MarketType != null) {
        entries["MarketType"] = input.MarketType;
    }
    if (input.SpotOptions != null) {
        const memberEntries = se_SpotMarketOptions(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HttpTokens != null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit != null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint != null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.HttpProtocolIpv6 != null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags != null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
const se_InstanceNetworkInterfaceSpecification = (input, context) => {
    const entries = {};
    if (input.AssociatePublicIpAddress != null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex != null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups != null) {
        const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
        if (input.Groups?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount != null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses != null) {
        const memberEntries = se_InstanceIpv6AddressList(input.Ipv6Addresses, context);
        if (input.Ipv6Addresses?.length === 0) {
            entries.Ipv6Addresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount != null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AssociateCarrierIpAddress != null) {
        entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
    }
    if (input.InterfaceType != null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.NetworkCardIndex != null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    if (input.Ipv4Prefixes != null) {
        const memberEntries = se_Ipv4PrefixList(input.Ipv4Prefixes, context);
        if (input.Ipv4Prefixes?.length === 0) {
            entries.Ipv4Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount != null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes != null) {
        const memberEntries = se_Ipv6PrefixList(input.Ipv6Prefixes, context);
        if (input.Ipv6Prefixes?.length === 0) {
            entries.Ipv6Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount != null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    return entries;
};
const se_InstanceNetworkInterfaceSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceNetworkInterfaceSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceRequirements = (input, context) => {
    const entries = {};
    if (input.VCpuCount != null) {
        const memberEntries = se_VCpuCountRange(input.VCpuCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VCpuCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryMiB != null) {
        const memberEntries = se_MemoryMiB(input.MemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuManufacturers != null) {
        const memberEntries = se_CpuManufacturerSet(input.CpuManufacturers, context);
        if (input.CpuManufacturers?.length === 0) {
            entries.CpuManufacturerSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryGiBPerVCpu != null) {
        const memberEntries = se_MemoryGiBPerVCpu(input.MemoryGiBPerVCpu, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryGiBPerVCpu.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedInstanceTypes != null) {
        const memberEntries = se_ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
        if (input.ExcludedInstanceTypes?.length === 0) {
            entries.ExcludedInstanceTypeSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceGenerations != null) {
        const memberEntries = se_InstanceGenerationSet(input.InstanceGenerations, context);
        if (input.InstanceGenerations?.length === 0) {
            entries.InstanceGenerationSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceGenerationSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotMaxPricePercentageOverLowestPrice != null) {
        entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
    }
    if (input.OnDemandMaxPricePercentageOverLowestPrice != null) {
        entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
    }
    if (input.BareMetal != null) {
        entries["BareMetal"] = input.BareMetal;
    }
    if (input.BurstablePerformance != null) {
        entries["BurstablePerformance"] = input.BurstablePerformance;
    }
    if (input.RequireHibernateSupport != null) {
        entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
    }
    if (input.NetworkInterfaceCount != null) {
        const memberEntries = se_NetworkInterfaceCount(input.NetworkInterfaceCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LocalStorage != null) {
        entries["LocalStorage"] = input.LocalStorage;
    }
    if (input.LocalStorageTypes != null) {
        const memberEntries = se_LocalStorageTypeSet(input.LocalStorageTypes, context);
        if (input.LocalStorageTypes?.length === 0) {
            entries.LocalStorageTypeSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalStorageTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TotalLocalStorageGB != null) {
        const memberEntries = se_TotalLocalStorageGB(input.TotalLocalStorageGB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TotalLocalStorageGB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BaselineEbsBandwidthMbps != null) {
        const memberEntries = se_BaselineEbsBandwidthMbps(input.BaselineEbsBandwidthMbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselineEbsBandwidthMbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTypes != null) {
        const memberEntries = se_AcceleratorTypeSet(input.AcceleratorTypes, context);
        if (input.AcceleratorTypes?.length === 0) {
            entries.AcceleratorTypeSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorCount != null) {
        const memberEntries = se_AcceleratorCount(input.AcceleratorCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorManufacturers != null) {
        const memberEntries = se_AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
        if (input.AcceleratorManufacturers?.length === 0) {
            entries.AcceleratorManufacturerSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorNames != null) {
        const memberEntries = se_AcceleratorNameSet(input.AcceleratorNames, context);
        if (input.AcceleratorNames?.length === 0) {
            entries.AcceleratorNameSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorNameSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTotalMemoryMiB != null) {
        const memberEntries = se_AcceleratorTotalMemoryMiB(input.AcceleratorTotalMemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTotalMemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkBandwidthGbps != null) {
        const memberEntries = se_NetworkBandwidthGbps(input.NetworkBandwidthGbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkBandwidthGbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AllowedInstanceTypes != null) {
        const memberEntries = se_AllowedInstanceTypeSet(input.AllowedInstanceTypes, context);
        if (input.AllowedInstanceTypes?.length === 0) {
            entries.AllowedInstanceTypeSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllowedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceRequirementsRequest = (input, context) => {
    const entries = {};
    if (input.VCpuCount != null) {
        const memberEntries = se_VCpuCountRangeRequest(input.VCpuCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VCpuCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryMiB != null) {
        const memberEntries = se_MemoryMiBRequest(input.MemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuManufacturers != null) {
        const memberEntries = se_CpuManufacturerSet(input.CpuManufacturers, context);
        if (input.CpuManufacturers?.length === 0) {
            entries.CpuManufacturer = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuManufacturer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryGiBPerVCpu != null) {
        const memberEntries = se_MemoryGiBPerVCpuRequest(input.MemoryGiBPerVCpu, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryGiBPerVCpu.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedInstanceTypes != null) {
        const memberEntries = se_ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
        if (input.ExcludedInstanceTypes?.length === 0) {
            entries.ExcludedInstanceType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceGenerations != null) {
        const memberEntries = se_InstanceGenerationSet(input.InstanceGenerations, context);
        if (input.InstanceGenerations?.length === 0) {
            entries.InstanceGeneration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceGeneration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotMaxPricePercentageOverLowestPrice != null) {
        entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
    }
    if (input.OnDemandMaxPricePercentageOverLowestPrice != null) {
        entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
    }
    if (input.BareMetal != null) {
        entries["BareMetal"] = input.BareMetal;
    }
    if (input.BurstablePerformance != null) {
        entries["BurstablePerformance"] = input.BurstablePerformance;
    }
    if (input.RequireHibernateSupport != null) {
        entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
    }
    if (input.NetworkInterfaceCount != null) {
        const memberEntries = se_NetworkInterfaceCountRequest(input.NetworkInterfaceCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LocalStorage != null) {
        entries["LocalStorage"] = input.LocalStorage;
    }
    if (input.LocalStorageTypes != null) {
        const memberEntries = se_LocalStorageTypeSet(input.LocalStorageTypes, context);
        if (input.LocalStorageTypes?.length === 0) {
            entries.LocalStorageType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalStorageType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TotalLocalStorageGB != null) {
        const memberEntries = se_TotalLocalStorageGBRequest(input.TotalLocalStorageGB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TotalLocalStorageGB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BaselineEbsBandwidthMbps != null) {
        const memberEntries = se_BaselineEbsBandwidthMbpsRequest(input.BaselineEbsBandwidthMbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselineEbsBandwidthMbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTypes != null) {
        const memberEntries = se_AcceleratorTypeSet(input.AcceleratorTypes, context);
        if (input.AcceleratorTypes?.length === 0) {
            entries.AcceleratorType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorCount != null) {
        const memberEntries = se_AcceleratorCountRequest(input.AcceleratorCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorManufacturers != null) {
        const memberEntries = se_AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
        if (input.AcceleratorManufacturers?.length === 0) {
            entries.AcceleratorManufacturer = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorManufacturer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorNames != null) {
        const memberEntries = se_AcceleratorNameSet(input.AcceleratorNames, context);
        if (input.AcceleratorNames?.length === 0) {
            entries.AcceleratorName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTotalMemoryMiB != null) {
        const memberEntries = se_AcceleratorTotalMemoryMiBRequest(input.AcceleratorTotalMemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTotalMemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkBandwidthGbps != null) {
        const memberEntries = se_NetworkBandwidthGbpsRequest(input.NetworkBandwidthGbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkBandwidthGbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AllowedInstanceTypes != null) {
        const memberEntries = se_AllowedInstanceTypeSet(input.AllowedInstanceTypes, context);
        if (input.AllowedInstanceTypes?.length === 0) {
            entries.AllowedInstanceType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllowedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceRequirementsWithMetadataRequest = (input, context) => {
    const entries = {};
    if (input.ArchitectureTypes != null) {
        const memberEntries = se_ArchitectureTypeSet(input.ArchitectureTypes, context);
        if (input.ArchitectureTypes?.length === 0) {
            entries.ArchitectureType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VirtualizationTypes != null) {
        const memberEntries = se_VirtualizationTypeSet(input.VirtualizationTypes, context);
        if (input.VirtualizationTypes?.length === 0) {
            entries.VirtualizationType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements != null) {
        const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceSpecification = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.ExcludeBootVolume != null) {
        entries["ExcludeBootVolume"] = input.ExcludeBootVolume;
    }
    if (input.ExcludeDataVolumeIds != null) {
        const memberEntries = se_VolumeIdStringList(input.ExcludeDataVolumeIds, context);
        if (input.ExcludeDataVolumeIds?.length === 0) {
            entries.ExcludeDataVolumeId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludeDataVolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceTagKeySet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IntegrateServices = (input, context) => {
    const entries = {};
    if (input.AthenaIntegrations != null) {
        const memberEntries = se_AthenaIntegrationsSet(input.AthenaIntegrations, context);
        if (input.AthenaIntegrations?.length === 0) {
            entries.AthenaIntegration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AthenaIntegration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InternetGatewayIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpamCidrAuthorizationContext = (input, context) => {
    const entries = {};
    if (input.Message != null) {
        entries["Message"] = input.Message;
    }
    if (input.Signature != null) {
        entries["Signature"] = input.Signature;
    }
    return entries;
};
const se_IpamPoolAllocationDisallowedCidrs = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpPermission = (input, context) => {
    const entries = {};
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol != null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.IpRanges != null) {
        const memberEntries = se_IpRangeList(input.IpRanges, context);
        if (input.IpRanges?.length === 0) {
            entries.IpRanges = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpRanges.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6Ranges != null) {
        const memberEntries = se_Ipv6RangeList(input.Ipv6Ranges, context);
        if (input.Ipv6Ranges?.length === 0) {
            entries.Ipv6Ranges = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Ranges.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrefixListIds != null) {
        const memberEntries = se_PrefixListIdList(input.PrefixListIds, context);
        if (input.PrefixListIds?.length === 0) {
            entries.PrefixListIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.UserIdGroupPairs != null) {
        const memberEntries = se_UserIdGroupPairList(input.UserIdGroupPairs, context);
        if (input.UserIdGroupPairs?.length === 0) {
            entries.Groups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Groups.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_IpPermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_IpPermission(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_IpPrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpRange = (input, context) => {
    const entries = {};
    if (input.CidrIp != null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_IpRangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_IpRange(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Ipv4PrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Ipv4PrefixSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Ipv4PrefixSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.Ipv4Prefix != null) {
        entries["Ipv4Prefix"] = input.Ipv4Prefix;
    }
    return entries;
};
const se_Ipv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Ipv6PoolIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Ipv6PrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Ipv6PrefixSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Ipv6PrefixSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6Prefix != null) {
        entries["Ipv6Prefix"] = input.Ipv6Prefix;
    }
    return entries;
};
const se_Ipv6Range = (input, context) => {
    const entries = {};
    if (input.CidrIpv6 != null) {
        entries["CidrIpv6"] = input.CidrIpv6;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_Ipv6RangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Ipv6Range(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_KeyNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`KeyName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_KeyPairIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`KeyPairId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LaunchPermission = (input, context) => {
    const entries = {};
    if (input.Group != null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId != null) {
        entries["UserId"] = input.UserId;
    }
    if (input.OrganizationArn != null) {
        entries["OrganizationArn"] = input.OrganizationArn;
    }
    if (input.OrganizationalUnitArn != null) {
        entries["OrganizationalUnitArn"] = input.OrganizationalUnitArn;
    }
    return entries;
};
const se_LaunchPermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchPermission(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchPermissionModifications = (input, context) => {
    const entries = {};
    if (input.Add != null) {
        const memberEntries = se_LaunchPermissionList(input.Add, context);
        if (input.Add?.length === 0) {
            entries.Add = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Remove != null) {
        const memberEntries = se_LaunchPermissionList(input.Remove, context);
        if (input.Remove?.length === 0) {
            entries.Remove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchSpecsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SpotFleetLaunchSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateBlockDeviceMappingRequest = (input, context) => {
    const entries = {};
    if (input.DeviceName != null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.VirtualName != null) {
        entries["VirtualName"] = input.VirtualName;
    }
    if (input.Ebs != null) {
        const memberEntries = se_LaunchTemplateEbsBlockDeviceRequest(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice != null) {
        entries["NoDevice"] = input.NoDevice;
    }
    return entries;
};
const se_LaunchTemplateBlockDeviceMappingRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateBlockDeviceMappingRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateCapacityReservationSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationPreference != null) {
        entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
    }
    if (input.CapacityReservationTarget != null) {
        const memberEntries = se_CapacityReservationTarget(input.CapacityReservationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateConfig = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateSpecification != null) {
        const memberEntries = se_FleetLaunchTemplateSpecification(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Overrides != null) {
        const memberEntries = se_LaunchTemplateOverridesList(input.Overrides, context);
        if (input.Overrides?.length === 0) {
            entries.Overrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateConfigList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateConfig(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateCpuOptionsRequest = (input, context) => {
    const entries = {};
    if (input.CoreCount != null) {
        entries["CoreCount"] = input.CoreCount;
    }
    if (input.ThreadsPerCore != null) {
        entries["ThreadsPerCore"] = input.ThreadsPerCore;
    }
    if (input.AmdSevSnp != null) {
        entries["AmdSevSnp"] = input.AmdSevSnp;
    }
    return entries;
};
const se_LaunchTemplateEbsBlockDeviceRequest = (input, context) => {
    const entries = {};
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize != null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType != null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.Throughput != null) {
        entries["Throughput"] = input.Throughput;
    }
    return entries;
};
const se_LaunchTemplateElasticInferenceAccelerator = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Count != null) {
        entries["Count"] = input.Count;
    }
    return entries;
};
const se_LaunchTemplateElasticInferenceAcceleratorList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateElasticInferenceAccelerator(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateEnclaveOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_LaunchTemplateHibernationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Configured != null) {
        entries["Configured"] = input.Configured;
    }
    return entries;
};
const se_LaunchTemplateIamInstanceProfileSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const se_LaunchTemplateIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LaunchTemplateInstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AutoRecovery != null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    return entries;
};
const se_LaunchTemplateInstanceMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input.MarketType != null) {
        entries["MarketType"] = input.MarketType;
    }
    if (input.SpotOptions != null) {
        const memberEntries = se_LaunchTemplateSpotMarketOptionsRequest(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateInstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HttpTokens != null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit != null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint != null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.HttpProtocolIpv6 != null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags != null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.AssociateCarrierIpAddress != null) {
        entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
    }
    if (input.AssociatePublicIpAddress != null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex != null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups != null) {
        const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
        if (input.Groups?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InterfaceType != null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.Ipv6AddressCount != null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses != null) {
        const memberEntries = se_InstanceIpv6AddressListRequest(input.Ipv6Addresses, context);
        if (input.Ipv6Addresses?.length === 0) {
            entries.Ipv6Addresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount != null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.NetworkCardIndex != null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    if (input.Ipv4Prefixes != null) {
        const memberEntries = se_Ipv4PrefixList(input.Ipv4Prefixes, context);
        if (input.Ipv4Prefixes?.length === 0) {
            entries.Ipv4Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount != null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes != null) {
        const memberEntries = se_Ipv6PrefixList(input.Ipv6Prefixes, context);
        if (input.Ipv6Prefixes?.length === 0) {
            entries.Ipv6Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount != null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    return entries;
};
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`InstanceNetworkInterfaceSpecification.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateLicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.LicenseConfigurationArn != null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
const se_LaunchTemplateLicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateLicenseConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LaunchTemplateOverrides = (input, context) => {
    const entries = {};
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.SpotPrice != null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.WeightedCapacity != null) {
        entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
    }
    if (input.Priority != null) {
        entries["Priority"] = __serializeFloat(input.Priority);
    }
    if (input.InstanceRequirements != null) {
        const memberEntries = se_InstanceRequirements(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateOverridesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateOverrides(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplatePlacementRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Affinity != null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.HostId != null) {
        entries["HostId"] = input.HostId;
    }
    if (input.Tenancy != null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.SpreadDomain != null) {
        entries["SpreadDomain"] = input.SpreadDomain;
    }
    if (input.HostResourceGroupArn != null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    if (input.PartitionNumber != null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    return entries;
};
const se_LaunchTemplatePrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HostnameType != null) {
        entries["HostnameType"] = input.HostnameType;
    }
    if (input.EnableResourceNameDnsARecord != null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord != null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
const se_LaunchTemplatesMonitoringRequest = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_LaunchTemplateSpecification = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version != null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const se_LaunchTemplateSpotMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input.MaxPrice != null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SpotInstanceType != null) {
        entries["SpotInstanceType"] = input.SpotInstanceType;
    }
    if (input.BlockDurationMinutes != null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ValidUntil != null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceInterruptionBehavior != null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
const se_LaunchTemplateTagSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateTagSpecificationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateTagSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`LaunchTemplateTagSpecificationRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.LicenseConfigurationArn != null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
const se_LicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LicenseConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ListImagesInRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.ImageIds != null) {
        const memberEntries = se_ImageIdStringList(input.ImageIds, context);
        if (input.ImageIds?.length === 0) {
            entries.ImageId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ListSnapshotsInRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SnapshotIds != null) {
        const memberEntries = se_SnapshotIdStringList(input.SnapshotIds, context);
        if (input.SnapshotIds?.length === 0) {
            entries.SnapshotId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_LoadBalancersConfig = (input, context) => {
    const entries = {};
    if (input.ClassicLoadBalancersConfig != null) {
        const memberEntries = se_ClassicLoadBalancersConfig(input.ClassicLoadBalancersConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClassicLoadBalancersConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TargetGroupsConfig != null) {
        const memberEntries = se_TargetGroupsConfig(input.TargetGroupsConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroupsConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LoadPermissionListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LoadPermissionRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LoadPermissionModifications = (input, context) => {
    const entries = {};
    if (input.Add != null) {
        const memberEntries = se_LoadPermissionListRequest(input.Add, context);
        if (input.Add?.length === 0) {
            entries.Add = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Remove != null) {
        const memberEntries = se_LoadPermissionListRequest(input.Remove, context);
        if (input.Remove?.length === 0) {
            entries.Remove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LoadPermissionRequest = (input, context) => {
    const entries = {};
    if (input.Group != null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId != null) {
        entries["UserId"] = input.UserId;
    }
    return entries;
};
const se_LocalGatewayIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayRouteTableIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayRouteTableVpcAssociationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayVirtualInterfaceGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayVirtualInterfaceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalStorageTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MemoryGiBPerVCpu = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
const se_MemoryGiBPerVCpuRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
const se_MemoryMiB = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_MemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_ModifyAddressAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId != null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.DomainName != null) {
        entries["DomainName"] = input.DomainName;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyAvailabilityZoneGroupRequest = (input, context) => {
    const entries = {};
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.OptInStatus != null) {
        entries["OptInStatus"] = input.OptInStatus;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyCapacityReservationFleetRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationFleetId != null) {
        entries["CapacityReservationFleetId"] = input.CapacityReservationFleetId;
    }
    if (input.TotalTargetCapacity != null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.EndDate != null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RemoveEndDate != null) {
        entries["RemoveEndDate"] = input.RemoveEndDate;
    }
    return entries;
};
const se_ModifyCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId != null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.EndDate != null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.EndDateType != null) {
        entries["EndDateType"] = input.EndDateType;
    }
    if (input.Accept != null) {
        entries["Accept"] = input.Accept;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AdditionalInfo != null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    return entries;
};
const se_ModifyClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.ServerCertificateArn != null) {
        entries["ServerCertificateArn"] = input.ServerCertificateArn;
    }
    if (input.ConnectionLogOptions != null) {
        const memberEntries = se_ConnectionLogOptions(input.ConnectionLogOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DnsServers != null) {
        const memberEntries = se_DnsServersOptionsModifyStructure(input.DnsServers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsServers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpnPort != null) {
        entries["VpnPort"] = input.VpnPort;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.SplitTunnel != null) {
        entries["SplitTunnel"] = input.SplitTunnel;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SelfServicePortal != null) {
        entries["SelfServicePortal"] = input.SelfServicePortal;
    }
    if (input.ClientConnectOptions != null) {
        const memberEntries = se_ClientConnectOptions(input.ClientConnectOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientConnectOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SessionTimeoutHours != null) {
        entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
    }
    if (input.ClientLoginBannerOptions != null) {
        const memberEntries = se_ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientLoginBannerOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyDefaultCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceFamily != null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    if (input.CpuCredits != null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
const se_ModifyEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyFleetRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ExcessCapacityTerminationPolicy != null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs != null) {
        const memberEntries = se_FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
        if (input.LaunchTemplateConfigs?.length === 0) {
            entries.LaunchTemplateConfig = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.FleetId != null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.TargetCapacitySpecification != null) {
        const memberEntries = se_TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetCapacitySpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Context != null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
const se_ModifyFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId != null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.OperationType != null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.UserIds != null) {
        const memberEntries = se_UserIdStringList(input.UserIds, context);
        if (input.UserIds?.length === 0) {
            entries.UserId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UserGroups != null) {
        const memberEntries = se_UserGroupStringList(input.UserGroups, context);
        if (input.UserGroups?.length === 0) {
            entries.UserGroup = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ProductCodes != null) {
        const memberEntries = se_ProductCodeStringList(input.ProductCodes, context);
        if (input.ProductCodes?.length === 0) {
            entries.ProductCode = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LoadPermission != null) {
        const memberEntries = se_LoadPermissionModifications(input.LoadPermission, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadPermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const se_ModifyHostsRequest = (input, context) => {
    const entries = {};
    if (input.AutoPlacement != null) {
        entries["AutoPlacement"] = input.AutoPlacement;
    }
    if (input.HostIds != null) {
        const memberEntries = se_RequestHostIdList(input.HostIds, context);
        if (input.HostIds?.length === 0) {
            entries.HostId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostRecovery != null) {
        entries["HostRecovery"] = input.HostRecovery;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstanceFamily != null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    if (input.HostMaintenance != null) {
        entries["HostMaintenance"] = input.HostMaintenance;
    }
    return entries;
};
const se_ModifyIdentityIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
    }
    if (input.Resource != null) {
        entries["Resource"] = input.Resource;
    }
    if (input.UseLongIds != null) {
        entries["UseLongIds"] = input.UseLongIds;
    }
    return entries;
};
const se_ModifyIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.Resource != null) {
        entries["Resource"] = input.Resource;
    }
    if (input.UseLongIds != null) {
        entries["UseLongIds"] = input.UseLongIds;
    }
    return entries;
};
const se_ModifyImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.Description != null) {
        const memberEntries = se_AttributeValue(input.Description, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Description.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.LaunchPermission != null) {
        const memberEntries = se_LaunchPermissionModifications(input.LaunchPermission, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchPermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationType != null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.ProductCodes != null) {
        const memberEntries = se_ProductCodeStringList(input.ProductCodes, context);
        if (input.ProductCodes?.length === 0) {
            entries.ProductCode = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UserGroups != null) {
        const memberEntries = se_UserGroupStringList(input.UserGroups, context);
        if (input.UserGroups?.length === 0) {
            entries.UserGroup = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UserIds != null) {
        const memberEntries = se_UserIdStringList(input.UserIds, context);
        if (input.UserIds?.length === 0) {
            entries.UserId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OrganizationArns != null) {
        const memberEntries = se_OrganizationArnStringList(input.OrganizationArns, context);
        if (input.OrganizationArns?.length === 0) {
            entries.OrganizationArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OrganizationalUnitArns != null) {
        const memberEntries = se_OrganizationalUnitArnStringList(input.OrganizationalUnitArns, context);
        if (input.OrganizationalUnitArns?.length === 0) {
            entries.OrganizationalUnitArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationalUnitArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImdsSupport != null) {
        const memberEntries = se_AttributeValue(input.ImdsSupport, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImdsSupport.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.SourceDestCheck != null) {
        const memberEntries = se_AttributeBooleanValue(input.SourceDestCheck, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceDestCheck.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_InstanceBlockDeviceMappingSpecificationList(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DisableApiTermination != null) {
        const memberEntries = se_AttributeBooleanValue(input.DisableApiTermination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableApiTermination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EbsOptimized != null) {
        const memberEntries = se_AttributeBooleanValue(input.EbsOptimized, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EbsOptimized.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnaSupport != null) {
        const memberEntries = se_AttributeBooleanValue(input.EnaSupport, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Groups != null) {
        const memberEntries = se_GroupIdStringList(input.Groups, context);
        if (input.Groups?.length === 0) {
            entries.GroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.InstanceInitiatedShutdownBehavior != null) {
        const memberEntries = se_AttributeValue(input.InstanceInitiatedShutdownBehavior, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceInitiatedShutdownBehavior.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceType != null) {
        const memberEntries = se_AttributeValue(input.InstanceType, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Kernel != null) {
        const memberEntries = se_AttributeValue(input.Kernel, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Kernel.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Ramdisk != null) {
        const memberEntries = se_AttributeValue(input.Ramdisk, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ramdisk.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SriovNetSupport != null) {
        const memberEntries = se_AttributeValue(input.SriovNetSupport, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SriovNetSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UserData != null) {
        const memberEntries = se_BlobAttributeValue(input.UserData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    if (input.DisableApiStop != null) {
        const memberEntries = se_AttributeBooleanValue(input.DisableApiStop, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableApiStop.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyInstanceCapacityReservationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.CapacityReservationSpecification != null) {
        const memberEntries = se_CapacityReservationSpecification(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyInstanceCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceCreditSpecifications != null) {
        const memberEntries = se_InstanceCreditSpecificationListRequest(input.InstanceCreditSpecifications, context);
        if (input.InstanceCreditSpecifications?.length === 0) {
            entries.InstanceCreditSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceCreditSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyInstanceEventStartTimeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.InstanceEventId != null) {
        entries["InstanceEventId"] = input.InstanceEventId;
    }
    if (input.NotBefore != null) {
        entries["NotBefore"] = input.NotBefore.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_ModifyInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.InstanceEventWindowId != null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.TimeRanges != null) {
        const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
        if (input.TimeRanges?.length === 0) {
            entries.TimeRange = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CronExpression != null) {
        entries["CronExpression"] = input.CronExpression;
    }
    return entries;
};
const se_ModifyInstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.AutoRecovery != null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyInstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.HttpTokens != null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit != null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint != null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.HttpProtocolIpv6 != null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags != null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
const se_ModifyInstancePlacementRequest = (input, context) => {
    const entries = {};
    if (input.Affinity != null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.HostId != null) {
        entries["HostId"] = input.HostId;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Tenancy != null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.PartitionNumber != null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    if (input.HostResourceGroupArn != null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    return entries;
};
const se_ModifyIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.AutoImport != null) {
        entries["AutoImport"] = input.AutoImport;
    }
    if (input.AllocationMinNetmaskLength != null) {
        entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
    }
    if (input.AllocationMaxNetmaskLength != null) {
        entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
    }
    if (input.AllocationDefaultNetmaskLength != null) {
        entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
    }
    if (input.ClearAllocationDefaultNetmaskLength != null) {
        entries["ClearAllocationDefaultNetmaskLength"] = input.ClearAllocationDefaultNetmaskLength;
    }
    if (input.AddAllocationResourceTags != null) {
        const memberEntries = se_RequestIpamResourceTagList(input.AddAllocationResourceTags, context);
        if (input.AddAllocationResourceTags?.length === 0) {
            entries.AddAllocationResourceTag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveAllocationResourceTags != null) {
        const memberEntries = se_RequestIpamResourceTagList(input.RemoveAllocationResourceTags, context);
        if (input.RemoveAllocationResourceTags?.length === 0) {
            entries.RemoveAllocationResourceTag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId != null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.AddOperatingRegions != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input.AddOperatingRegions, context);
        if (input.AddOperatingRegions?.length === 0) {
            entries.AddOperatingRegion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveOperatingRegions != null) {
        const memberEntries = se_RemoveIpamOperatingRegionSet(input.RemoveOperatingRegions, context);
        if (input.RemoveOperatingRegions?.length === 0) {
            entries.RemoveOperatingRegion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyIpamResourceCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ResourceId != null) {
        entries["ResourceId"] = input.ResourceId;
    }
    if (input.ResourceCidr != null) {
        entries["ResourceCidr"] = input.ResourceCidr;
    }
    if (input.ResourceRegion != null) {
        entries["ResourceRegion"] = input.ResourceRegion;
    }
    if (input.CurrentIpamScopeId != null) {
        entries["CurrentIpamScopeId"] = input.CurrentIpamScopeId;
    }
    if (input.DestinationIpamScopeId != null) {
        entries["DestinationIpamScopeId"] = input.DestinationIpamScopeId;
    }
    if (input.Monitored != null) {
        entries["Monitored"] = input.Monitored;
    }
    return entries;
};
const se_ModifyIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamResourceDiscoveryId != null) {
        entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.AddOperatingRegions != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input.AddOperatingRegions, context);
        if (input.AddOperatingRegions?.length === 0) {
            entries.AddOperatingRegion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveOperatingRegions != null) {
        const memberEntries = se_RemoveIpamOperatingRegionSet(input.RemoveOperatingRegions, context);
        if (input.RemoveOperatingRegions?.length === 0) {
            entries.RemoveOperatingRegion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId != null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_ModifyLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.DefaultVersion != null) {
        entries["SetDefaultVersion"] = input.DefaultVersion;
    }
    return entries;
};
const se_ModifyLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.LocalGatewayVirtualInterfaceGroupId != null) {
        entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DestinationPrefixListId != null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    return entries;
};
const se_ModifyManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.CurrentVersion != null) {
        entries["CurrentVersion"] = input.CurrentVersion;
    }
    if (input.PrefixListName != null) {
        entries["PrefixListName"] = input.PrefixListName;
    }
    if (input.AddEntries != null) {
        const memberEntries = se_AddPrefixListEntries(input.AddEntries, context);
        if (input.AddEntries?.length === 0) {
            entries.AddEntry = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddEntry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveEntries != null) {
        const memberEntries = se_RemovePrefixListEntries(input.RemoveEntries, context);
        if (input.RemoveEntries?.length === 0) {
            entries.RemoveEntry = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveEntry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxEntries != null) {
        entries["MaxEntries"] = input.MaxEntries;
    }
    return entries;
};
const se_ModifyNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attachment != null) {
        const memberEntries = se_NetworkInterfaceAttachmentChanges(input.Attachment, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attachment.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        const memberEntries = se_AttributeValue(input.Description, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Description.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups != null) {
        const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
        if (input.Groups?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.SourceDestCheck != null) {
        const memberEntries = se_AttributeBooleanValue(input.SourceDestCheck, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceDestCheck.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnaSrdSpecification != null) {
        const memberEntries = se_EnaSrdSpecification(input.EnaSrdSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyPrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.PrivateDnsHostnameType != null) {
        entries["PrivateDnsHostnameType"] = input.PrivateDnsHostnameType;
    }
    if (input.EnableResourceNameDnsARecord != null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord != null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
const se_ModifyReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input.ReservedInstancesIds != null) {
        const memberEntries = se_ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
        if (input.ReservedInstancesIds?.length === 0) {
            entries.ReservedInstancesId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TargetConfigurations != null) {
        const memberEntries = se_ReservedInstancesConfigurationList(input.TargetConfigurations, context);
        if (input.TargetConfigurations?.length === 0) {
            entries.ReservedInstancesConfigurationSetItemType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesConfigurationSetItemType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifySecurityGroupRulesRequest = (input, context) => {
    const entries = {};
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.SecurityGroupRules != null) {
        const memberEntries = se_SecurityGroupRuleUpdateList(input.SecurityGroupRules, context);
        if (input.SecurityGroupRules?.length === 0) {
            entries.SecurityGroupRule = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRule.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifySnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.CreateVolumePermission != null) {
        const memberEntries = se_CreateVolumePermissionModifications(input.CreateVolumePermission, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreateVolumePermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input.GroupNames != null) {
        const memberEntries = se_GroupNameStringList(input.GroupNames, context);
        if (input.GroupNames?.length === 0) {
            entries.UserGroup = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OperationType != null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.UserIds != null) {
        const memberEntries = se_UserIdStringList(input.UserIds, context);
        if (input.UserIds?.length === 0) {
            entries.UserId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifySnapshotTierRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.StorageTier != null) {
        entries["StorageTier"] = input.StorageTier;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifySpotFleetRequestRequest = (input, context) => {
    const entries = {};
    if (input.ExcessCapacityTerminationPolicy != null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs != null) {
        const memberEntries = se_LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
        if (input.LaunchTemplateConfigs?.length === 0) {
            entries.LaunchTemplateConfig = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotFleetRequestId != null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    if (input.TargetCapacity != null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.OnDemandTargetCapacity != null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.Context != null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
const se_ModifySubnetAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AssignIpv6AddressOnCreation != null) {
        const memberEntries = se_AttributeBooleanValue(input.AssignIpv6AddressOnCreation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssignIpv6AddressOnCreation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MapPublicIpOnLaunch != null) {
        const memberEntries = se_AttributeBooleanValue(input.MapPublicIpOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MapPublicIpOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.MapCustomerOwnedIpOnLaunch != null) {
        const memberEntries = se_AttributeBooleanValue(input.MapCustomerOwnedIpOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MapCustomerOwnedIpOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CustomerOwnedIpv4Pool != null) {
        entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
    }
    if (input.EnableDns64 != null) {
        const memberEntries = se_AttributeBooleanValue(input.EnableDns64, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDns64.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsHostnameTypeOnLaunch != null) {
        entries["PrivateDnsHostnameTypeOnLaunch"] = input.PrivateDnsHostnameTypeOnLaunch;
    }
    if (input.EnableResourceNameDnsARecordOnLaunch != null) {
        const memberEntries = se_AttributeBooleanValue(input.EnableResourceNameDnsARecordOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableResourceNameDnsARecordOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableResourceNameDnsAAAARecordOnLaunch != null) {
        const memberEntries = se_AttributeBooleanValue(input.EnableResourceNameDnsAAAARecordOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableResourceNameDnsAAAARecordOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableLniAtDeviceIndex != null) {
        entries["EnableLniAtDeviceIndex"] = input.EnableLniAtDeviceIndex;
    }
    if (input.DisableLniAtDeviceIndex != null) {
        const memberEntries = se_AttributeBooleanValue(input.DisableLniAtDeviceIndex, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableLniAtDeviceIndex.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyTrafficMirrorFilterNetworkServicesRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterId != null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.AddNetworkServices != null) {
        const memberEntries = se_TrafficMirrorNetworkServiceList(input.AddNetworkServices, context);
        if (input.AddNetworkServices?.length === 0) {
            entries.AddNetworkService = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddNetworkService.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveNetworkServices != null) {
        const memberEntries = se_TrafficMirrorNetworkServiceList(input.RemoveNetworkServices, context);
        if (input.RemoveNetworkServices?.length === 0) {
            entries.RemoveNetworkService = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveNetworkService.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterRuleId != null) {
        entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
    }
    if (input.TrafficDirection != null) {
        entries["TrafficDirection"] = input.TrafficDirection;
    }
    if (input.RuleNumber != null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    if (input.RuleAction != null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.DestinationPortRange != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePortRange != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.SourceCidrBlock != null) {
        entries["SourceCidrBlock"] = input.SourceCidrBlock;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.RemoveFields != null) {
        const memberEntries = se_TrafficMirrorFilterRuleFieldList(input.RemoveFields, context);
        if (input.RemoveFields?.length === 0) {
            entries.RemoveField = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorSessionId != null) {
        entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
    }
    if (input.TrafficMirrorTargetId != null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.TrafficMirrorFilterId != null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.PacketLength != null) {
        entries["PacketLength"] = input.PacketLength;
    }
    if (input.SessionNumber != null) {
        entries["SessionNumber"] = input.SessionNumber;
    }
    if (input.VirtualNetworkId != null) {
        entries["VirtualNetworkId"] = input.VirtualNetworkId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.RemoveFields != null) {
        const memberEntries = se_TrafficMirrorSessionFieldList(input.RemoveFields, context);
        if (input.RemoveFields?.length === 0) {
            entries.RemoveField = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyTransitGatewayOptions = (input, context) => {
    const entries = {};
    if (input.AddTransitGatewayCidrBlocks != null) {
        const memberEntries = se_TransitGatewayCidrBlockStringList(input.AddTransitGatewayCidrBlocks, context);
        if (input.AddTransitGatewayCidrBlocks?.length === 0) {
            entries.AddTransitGatewayCidrBlocks = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveTransitGatewayCidrBlocks != null) {
        const memberEntries = se_TransitGatewayCidrBlockStringList(input.RemoveTransitGatewayCidrBlocks, context);
        if (input.RemoveTransitGatewayCidrBlocks?.length === 0) {
            entries.RemoveTransitGatewayCidrBlocks = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpnEcmpSupport != null) {
        entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
    }
    if (input.DnsSupport != null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.AutoAcceptSharedAttachments != null) {
        entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
    }
    if (input.DefaultRouteTableAssociation != null) {
        entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
    }
    if (input.AssociationDefaultRouteTableId != null) {
        entries["AssociationDefaultRouteTableId"] = input.AssociationDefaultRouteTableId;
    }
    if (input.DefaultRouteTablePropagation != null) {
        entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
    }
    if (input.PropagationDefaultRouteTableId != null) {
        entries["PropagationDefaultRouteTableId"] = input.PropagationDefaultRouteTableId;
    }
    if (input.AmazonSideAsn != null) {
        entries["AmazonSideAsn"] = input.AmazonSideAsn;
    }
    return entries;
};
const se_ModifyTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole != null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Options != null) {
        const memberEntries = se_ModifyTransitGatewayOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.AddSubnetIds != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input.AddSubnetIds, context);
        if (input.AddSubnetIds?.length === 0) {
            entries.AddSubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSubnetIds != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input.RemoveSubnetIds, context);
        if (input.RemoveSubnetIds?.length === 0) {
            entries.RemoveSubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Options != null) {
        const memberEntries = se_ModifyTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input.DnsSupport != null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.Ipv6Support != null) {
        entries["Ipv6Support"] = input.Ipv6Support;
    }
    if (input.ApplianceModeSupport != null) {
        entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointEniOptions = (input, context) => {
    const entries = {};
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointLoadBalancerOptions = (input, context) => {
    const entries = {};
    if (input.SubnetIds != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointSubnetIdList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointPolicyRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessEndpointId != null) {
        entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
    }
    if (input.PolicyEnabled != null) {
        entries["PolicyEnabled"] = input.PolicyEnabled;
    }
    if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessEndpointId != null) {
        entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
    }
    if (input.VerifiedAccessGroupId != null) {
        entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
    }
    if (input.LoadBalancerOptions != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointLoadBalancerOptions(input.LoadBalancerOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancerOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceOptions != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointEniOptions(input.NetworkInterfaceOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointSubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ModifyVerifiedAccessGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessGroupId != null) {
        entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
    }
    if (input.PolicyEnabled != null) {
        entries["PolicyEnabled"] = input.PolicyEnabled;
    }
    if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVerifiedAccessGroupRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessGroupId != null) {
        entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
    }
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.AccessLogs != null) {
        const memberEntries = se_VerifiedAccessLogOptions(input.AccessLogs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AccessLogs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_ModifyVerifiedAccessInstanceRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessInstanceId != null) {
        entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_ModifyVerifiedAccessTrustProviderOidcOptions = (input, context) => {
    const entries = {};
    if (input.Issuer != null) {
        entries["Issuer"] = input.Issuer;
    }
    if (input.AuthorizationEndpoint != null) {
        entries["AuthorizationEndpoint"] = input.AuthorizationEndpoint;
    }
    if (input.TokenEndpoint != null) {
        entries["TokenEndpoint"] = input.TokenEndpoint;
    }
    if (input.UserInfoEndpoint != null) {
        entries["UserInfoEndpoint"] = input.UserInfoEndpoint;
    }
    if (input.ClientId != null) {
        entries["ClientId"] = input.ClientId;
    }
    if (input.ClientSecret != null) {
        entries["ClientSecret"] = input.ClientSecret;
    }
    if (input.Scope != null) {
        entries["Scope"] = input.Scope;
    }
    return entries;
};
const se_ModifyVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input.VerifiedAccessTrustProviderId != null) {
        entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
    }
    if (input.OidcOptions != null) {
        const memberEntries = se_ModifyVerifiedAccessTrustProviderOidcOptions(input.OidcOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OidcOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_ModifyVolumeAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AutoEnableIO != null) {
        const memberEntries = se_AttributeBooleanValue(input.AutoEnableIO, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoEnableIO.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVolumeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeId != null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.Size != null) {
        entries["Size"] = input.Size;
    }
    if (input.VolumeType != null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.Throughput != null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.MultiAttachEnabled != null) {
        entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
    }
    return entries;
};
const se_ModifyVpcAttributeRequest = (input, context) => {
    const entries = {};
    if (input.EnableDnsHostnames != null) {
        const memberEntries = se_AttributeBooleanValue(input.EnableDnsHostnames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDnsHostnames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableDnsSupport != null) {
        const memberEntries = se_AttributeBooleanValue(input.EnableDnsSupport, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDnsSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.EnableNetworkAddressUsageMetrics != null) {
        const memberEntries = se_AttributeBooleanValue(input.EnableNetworkAddressUsageMetrics, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableNetworkAddressUsageMetrics.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcEndpointConnectionNotificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationId != null) {
        entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
    }
    if (input.ConnectionNotificationArn != null) {
        entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
    }
    if (input.ConnectionEvents != null) {
        const memberEntries = se_ValueStringList(input.ConnectionEvents, context);
        if (input.ConnectionEvents?.length === 0) {
            entries.ConnectionEvents = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId != null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.ResetPolicy != null) {
        entries["ResetPolicy"] = input.ResetPolicy;
    }
    if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.AddRouteTableIds != null) {
        const memberEntries = se_VpcEndpointRouteTableIdList(input.AddRouteTableIds, context);
        if (input.AddRouteTableIds?.length === 0) {
            entries.AddRouteTableId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveRouteTableIds != null) {
        const memberEntries = se_VpcEndpointRouteTableIdList(input.RemoveRouteTableIds, context);
        if (input.RemoveRouteTableIds?.length === 0) {
            entries.RemoveRouteTableId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddSubnetIds != null) {
        const memberEntries = se_VpcEndpointSubnetIdList(input.AddSubnetIds, context);
        if (input.AddSubnetIds?.length === 0) {
            entries.AddSubnetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSubnetIds != null) {
        const memberEntries = se_VpcEndpointSubnetIdList(input.RemoveSubnetIds, context);
        if (input.RemoveSubnetIds?.length === 0) {
            entries.RemoveSubnetId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddSecurityGroupIds != null) {
        const memberEntries = se_VpcEndpointSecurityGroupIdList(input.AddSecurityGroupIds, context);
        if (input.AddSecurityGroupIds?.length === 0) {
            entries.AddSecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSecurityGroupIds != null) {
        const memberEntries = se_VpcEndpointSecurityGroupIdList(input.RemoveSecurityGroupIds, context);
        if (input.RemoveSecurityGroupIds?.length === 0) {
            entries.RemoveSecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpAddressType != null) {
        entries["IpAddressType"] = input.IpAddressType;
    }
    if (input.DnsOptions != null) {
        const memberEntries = se_DnsOptionsSpecification(input.DnsOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsEnabled != null) {
        entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
    }
    return entries;
};
const se_ModifyVpcEndpointServiceConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.PrivateDnsName != null) {
        entries["PrivateDnsName"] = input.PrivateDnsName;
    }
    if (input.RemovePrivateDnsName != null) {
        entries["RemovePrivateDnsName"] = input.RemovePrivateDnsName;
    }
    if (input.AcceptanceRequired != null) {
        entries["AcceptanceRequired"] = input.AcceptanceRequired;
    }
    if (input.AddNetworkLoadBalancerArns != null) {
        const memberEntries = se_ValueStringList(input.AddNetworkLoadBalancerArns, context);
        if (input.AddNetworkLoadBalancerArns?.length === 0) {
            entries.AddNetworkLoadBalancerArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveNetworkLoadBalancerArns != null) {
        const memberEntries = se_ValueStringList(input.RemoveNetworkLoadBalancerArns, context);
        if (input.RemoveNetworkLoadBalancerArns?.length === 0) {
            entries.RemoveNetworkLoadBalancerArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddGatewayLoadBalancerArns != null) {
        const memberEntries = se_ValueStringList(input.AddGatewayLoadBalancerArns, context);
        if (input.AddGatewayLoadBalancerArns?.length === 0) {
            entries.AddGatewayLoadBalancerArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveGatewayLoadBalancerArns != null) {
        const memberEntries = se_ValueStringList(input.RemoveGatewayLoadBalancerArns, context);
        if (input.RemoveGatewayLoadBalancerArns?.length === 0) {
            entries.RemoveGatewayLoadBalancerArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddSupportedIpAddressTypes != null) {
        const memberEntries = se_ValueStringList(input.AddSupportedIpAddressTypes, context);
        if (input.AddSupportedIpAddressTypes?.length === 0) {
            entries.AddSupportedIpAddressType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSupportedIpAddressTypes != null) {
        const memberEntries = se_ValueStringList(input.RemoveSupportedIpAddressTypes, context);
        if (input.RemoveSupportedIpAddressTypes?.length === 0) {
            entries.RemoveSupportedIpAddressType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcEndpointServicePayerResponsibilityRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.PayerResponsibility != null) {
        entries["PayerResponsibility"] = input.PayerResponsibility;
    }
    return entries;
};
const se_ModifyVpcEndpointServicePermissionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.AddAllowedPrincipals != null) {
        const memberEntries = se_ValueStringList(input.AddAllowedPrincipals, context);
        if (input.AddAllowedPrincipals?.length === 0) {
            entries.AddAllowedPrincipals = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveAllowedPrincipals != null) {
        const memberEntries = se_ValueStringList(input.RemoveAllowedPrincipals, context);
        if (input.RemoveAllowedPrincipals?.length === 0) {
            entries.RemoveAllowedPrincipals = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcPeeringConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AccepterPeeringConnectionOptions != null) {
        const memberEntries = se_PeeringConnectionOptionsRequest(input.AccepterPeeringConnectionOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AccepterPeeringConnectionOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RequesterPeeringConnectionOptions != null) {
        const memberEntries = se_PeeringConnectionOptionsRequest(input.RequesterPeeringConnectionOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RequesterPeeringConnectionOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcPeeringConnectionId != null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const se_ModifyVpcTenancyRequest = (input, context) => {
    const entries = {};
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.InstanceTenancy != null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVpnConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.LocalIpv4NetworkCidr != null) {
        entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
    }
    if (input.RemoteIpv4NetworkCidr != null) {
        entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
    }
    if (input.LocalIpv6NetworkCidr != null) {
        entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
    }
    if (input.RemoteIpv6NetworkCidr != null) {
        entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.CustomerGatewayId != null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.VpnGatewayId != null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVpnTunnelCertificateRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress != null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ModifyVpnTunnelOptionsRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress != null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.TunnelOptions != null) {
        const memberEntries = se_ModifyVpnTunnelOptionsSpecification(input.TunnelOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TunnelOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SkipTunnelReplacement != null) {
        entries["SkipTunnelReplacement"] = input.SkipTunnelReplacement;
    }
    return entries;
};
const se_ModifyVpnTunnelOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.TunnelInsideCidr != null) {
        entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
    }
    if (input.TunnelInsideIpv6Cidr != null) {
        entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
    }
    if (input.PreSharedKey != null) {
        entries["PreSharedKey"] = input.PreSharedKey;
    }
    if (input.Phase1LifetimeSeconds != null) {
        entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
    }
    if (input.Phase2LifetimeSeconds != null) {
        entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
    }
    if (input.RekeyMarginTimeSeconds != null) {
        entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
    }
    if (input.RekeyFuzzPercentage != null) {
        entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
    }
    if (input.ReplayWindowSize != null) {
        entries["ReplayWindowSize"] = input.ReplayWindowSize;
    }
    if (input.DPDTimeoutSeconds != null) {
        entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
    }
    if (input.DPDTimeoutAction != null) {
        entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
    }
    if (input.Phase1EncryptionAlgorithms != null) {
        const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
        if (input.Phase1EncryptionAlgorithms?.length === 0) {
            entries.Phase1EncryptionAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2EncryptionAlgorithms != null) {
        const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
        if (input.Phase2EncryptionAlgorithms?.length === 0) {
            entries.Phase2EncryptionAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1IntegrityAlgorithms != null) {
        const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
        if (input.Phase1IntegrityAlgorithms?.length === 0) {
            entries.Phase1IntegrityAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2IntegrityAlgorithms != null) {
        const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
        if (input.Phase2IntegrityAlgorithms?.length === 0) {
            entries.Phase2IntegrityAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1DHGroupNumbers != null) {
        const memberEntries = se_Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
        if (input.Phase1DHGroupNumbers?.length === 0) {
            entries.Phase1DHGroupNumber = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2DHGroupNumbers != null) {
        const memberEntries = se_Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
        if (input.Phase2DHGroupNumbers?.length === 0) {
            entries.Phase2DHGroupNumber = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IKEVersions != null) {
        const memberEntries = se_IKEVersionsRequestList(input.IKEVersions, context);
        if (input.IKEVersions?.length === 0) {
            entries.IKEVersion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartupAction != null) {
        entries["StartupAction"] = input.StartupAction;
    }
    if (input.LogOptions != null) {
        const memberEntries = se_VpnTunnelLogOptionsSpecification(input.LogOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableTunnelLifecycleControl != null) {
        entries["EnableTunnelLifecycleControl"] = input.EnableTunnelLifecycleControl;
    }
    return entries;
};
const se_MonitorInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_MoveAddressToVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PublicIp != null) {
        entries["PublicIp"] = input.PublicIp;
    }
    return entries;
};
const se_MoveByoipCidrToIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.IpamPoolOwner != null) {
        entries["IpamPoolOwner"] = input.IpamPoolOwner;
    }
    return entries;
};
const se_NatGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkAclIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkBandwidthGbps = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
const se_NetworkBandwidthGbpsRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
const se_NetworkInsightsAccessScopeAnalysisIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInsightsAccessScopeIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInsightsAnalysisIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInsightsPathIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInterfaceAttachmentChanges = (input, context) => {
    const entries = {};
    if (input.AttachmentId != null) {
        entries["AttachmentId"] = input.AttachmentId;
    }
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    return entries;
};
const se_NetworkInterfaceCount = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_NetworkInterfaceCountRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_NetworkInterfaceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInterfacePermissionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NewDhcpConfiguration = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Values != null) {
        const memberEntries = se_ValueStringList(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Value = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_NewDhcpConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_NewDhcpConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_OccurrenceDayRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OccurenceDay.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OnDemandOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy != null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.CapacityReservationOptions != null) {
        const memberEntries = se_CapacityReservationOptionsRequest(input.CapacityReservationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SingleInstanceType != null) {
        entries["SingleInstanceType"] = input.SingleInstanceType;
    }
    if (input.SingleAvailabilityZone != null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.MinTargetCapacity != null) {
        entries["MinTargetCapacity"] = input.MinTargetCapacity;
    }
    if (input.MaxTotalPrice != null) {
        entries["MaxTotalPrice"] = input.MaxTotalPrice;
    }
    return entries;
};
const se_OrganizationalUnitArnStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OrganizationalUnitArn.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OrganizationArnStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OrganizationArn.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OwnerStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Owner.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PacketHeaderStatementRequest = (input, context) => {
    const entries = {};
    if (input.SourceAddresses != null) {
        const memberEntries = se_ValueStringList(input.SourceAddresses, context);
        if (input.SourceAddresses?.length === 0) {
            entries.SourceAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DestinationAddresses != null) {
        const memberEntries = se_ValueStringList(input.DestinationAddresses, context);
        if (input.DestinationAddresses?.length === 0) {
            entries.DestinationAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePorts != null) {
        const memberEntries = se_ValueStringList(input.SourcePorts, context);
        if (input.SourcePorts?.length === 0) {
            entries.SourcePort = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePort.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DestinationPorts != null) {
        const memberEntries = se_ValueStringList(input.DestinationPorts, context);
        if (input.DestinationPorts?.length === 0) {
            entries.DestinationPort = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPort.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePrefixLists != null) {
        const memberEntries = se_ValueStringList(input.SourcePrefixLists, context);
        if (input.SourcePrefixLists?.length === 0) {
            entries.SourcePrefixList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePrefixList.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DestinationPrefixLists != null) {
        const memberEntries = se_ValueStringList(input.DestinationPrefixLists, context);
        if (input.DestinationPrefixLists?.length === 0) {
            entries.DestinationPrefixList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPrefixList.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Protocols != null) {
        const memberEntries = se_ProtocolList(input.Protocols, context);
        if (input.Protocols?.length === 0) {
            entries.Protocol = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Protocol.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PathRequestFilter = (input, context) => {
    const entries = {};
    if (input.SourceAddress != null) {
        entries["SourceAddress"] = input.SourceAddress;
    }
    if (input.SourcePortRange != null) {
        const memberEntries = se_RequestFilterPortRange(input.SourcePortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DestinationAddress != null) {
        entries["DestinationAddress"] = input.DestinationAddress;
    }
    if (input.DestinationPortRange != null) {
        const memberEntries = se_RequestFilterPortRange(input.DestinationPortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PathStatementRequest = (input, context) => {
    const entries = {};
    if (input.PacketHeaderStatement != null) {
        const memberEntries = se_PacketHeaderStatementRequest(input.PacketHeaderStatement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PacketHeaderStatement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceStatement != null) {
        const memberEntries = se_ResourceStatementRequest(input.ResourceStatement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceStatement.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PeeringConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AllowDnsResolutionFromRemoteVpc != null) {
        entries["AllowDnsResolutionFromRemoteVpc"] = input.AllowDnsResolutionFromRemoteVpc;
    }
    if (input.AllowEgressFromLocalClassicLinkToRemoteVpc != null) {
        entries["AllowEgressFromLocalClassicLinkToRemoteVpc"] = input.AllowEgressFromLocalClassicLinkToRemoteVpc;
    }
    if (input.AllowEgressFromLocalVpcToRemoteClassicLink != null) {
        entries["AllowEgressFromLocalVpcToRemoteClassicLink"] = input.AllowEgressFromLocalVpcToRemoteClassicLink;
    }
    return entries;
};
const se_Phase1DHGroupNumbersRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase1DHGroupNumbersRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase1DHGroupNumbersRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_Phase1EncryptionAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase1EncryptionAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase1EncryptionAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_Phase1IntegrityAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase1IntegrityAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase1IntegrityAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_Phase2DHGroupNumbersRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase2DHGroupNumbersRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase2DHGroupNumbersRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_Phase2EncryptionAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase2EncryptionAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase2EncryptionAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_Phase2IntegrityAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase2IntegrityAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase2IntegrityAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_Placement = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Affinity != null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.PartitionNumber != null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    if (input.HostId != null) {
        entries["HostId"] = input.HostId;
    }
    if (input.Tenancy != null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.SpreadDomain != null) {
        entries["SpreadDomain"] = input.SpreadDomain;
    }
    if (input.HostResourceGroupArn != null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    return entries;
};
const se_PlacementGroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PlacementGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PortRange = (input, context) => {
    const entries = {};
    if (input.From != null) {
        entries["From"] = input.From;
    }
    if (input.To != null) {
        entries["To"] = input.To;
    }
    return entries;
};
const se_PrefixListId = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    return entries;
};
const se_PrefixListIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PrefixListId(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrefixListResourceIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PriceScheduleSpecification = (input, context) => {
    const entries = {};
    if (input.CurrencyCode != null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    if (input.Price != null) {
        entries["Price"] = __serializeFloat(input.Price);
    }
    if (input.Term != null) {
        entries["Term"] = input.Term;
    }
    return entries;
};
const se_PriceScheduleSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PriceScheduleSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HostnameType != null) {
        entries["HostnameType"] = input.HostnameType;
    }
    if (input.EnableResourceNameDnsARecord != null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord != null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
const se_PrivateIpAddressConfigSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesPrivateIpAddressConfig(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`PrivateIpAddressConfigSet.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrivateIpAddressSpecification = (input, context) => {
    const entries = {};
    if (input.Primary != null) {
        entries["Primary"] = input.Primary;
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
const se_PrivateIpAddressSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PrivateIpAddressSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrivateIpAddressStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`PrivateIpAddress.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProductCodeStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ProductCode.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProductDescriptionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProtocolList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProvisionByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CidrAuthorizationContext != null) {
        const memberEntries = se_CidrAuthorizationContext(input.CidrAuthorizationContext, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrAuthorizationContext.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PubliclyAdvertisable != null) {
        entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolTagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.PoolTagSpecifications, context);
        if (input.PoolTagSpecifications?.length === 0) {
            entries.PoolTagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolTagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MultiRegion != null) {
        entries["MultiRegion"] = input.MultiRegion;
    }
    return entries;
};
const se_ProvisionIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CidrAuthorizationContext != null) {
        const memberEntries = se_IpamCidrAuthorizationContext(input.CidrAuthorizationContext, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrAuthorizationContext.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetmaskLength != null) {
        entries["NetmaskLength"] = input.NetmaskLength;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_ProvisionPublicIpv4PoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.PoolId != null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.NetmaskLength != null) {
        entries["NetmaskLength"] = input.NetmaskLength;
    }
    return entries;
};
const se_PublicIpStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`PublicIp.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PublicIpv4PoolIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PurchaseHostReservationRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.CurrencyCode != null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    if (input.HostIdSet != null) {
        const memberEntries = se_RequestHostIdSet(input.HostIdSet, context);
        if (input.HostIdSet?.length === 0) {
            entries.HostIdSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LimitPrice != null) {
        entries["LimitPrice"] = input.LimitPrice;
    }
    if (input.OfferingId != null) {
        entries["OfferingId"] = input.OfferingId;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PurchaseRequest = (input, context) => {
    const entries = {};
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.PurchaseToken != null) {
        entries["PurchaseToken"] = input.PurchaseToken;
    }
    return entries;
};
const se_PurchaseRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PurchaseRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`PurchaseRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PurchaseReservedInstancesOfferingRequest = (input, context) => {
    const entries = {};
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.ReservedInstancesOfferingId != null) {
        entries["ReservedInstancesOfferingId"] = input.ReservedInstancesOfferingId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LimitPrice != null) {
        const memberEntries = se_ReservedInstanceLimitPrice(input.LimitPrice, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LimitPrice.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PurchaseTime != null) {
        entries["PurchaseTime"] = input.PurchaseTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_PurchaseScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PurchaseRequests != null) {
        const memberEntries = se_PurchaseRequestSet(input.PurchaseRequests, context);
        if (input.PurchaseRequests?.length === 0) {
            entries.PurchaseRequest = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PurchaseRequest.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ReasonCodesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RebootInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RegionNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RegionNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`RegionName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RegisterImageRequest = (input, context) => {
    const entries = {};
    if (input.ImageLocation != null) {
        entries["ImageLocation"] = input.ImageLocation;
    }
    if (input.Architecture != null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EnaSupport != null) {
        entries["EnaSupport"] = input.EnaSupport;
    }
    if (input.KernelId != null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.BillingProducts != null) {
        const memberEntries = se_BillingProductList(input.BillingProducts, context);
        if (input.BillingProducts?.length === 0) {
            entries.BillingProduct = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BillingProduct.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId != null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.RootDeviceName != null) {
        entries["RootDeviceName"] = input.RootDeviceName;
    }
    if (input.SriovNetSupport != null) {
        entries["SriovNetSupport"] = input.SriovNetSupport;
    }
    if (input.VirtualizationType != null) {
        entries["VirtualizationType"] = input.VirtualizationType;
    }
    if (input.BootMode != null) {
        entries["BootMode"] = input.BootMode;
    }
    if (input.TpmSupport != null) {
        entries["TpmSupport"] = input.TpmSupport;
    }
    if (input.UefiData != null) {
        entries["UefiData"] = input.UefiData;
    }
    if (input.ImdsSupport != null) {
        entries["ImdsSupport"] = input.ImdsSupport;
    }
    return entries;
};
const se_RegisterInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTagAttribute != null) {
        const memberEntries = se_RegisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagAttribute.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RegisterInstanceTagAttributeRequest = (input, context) => {
    const entries = {};
    if (input.IncludeAllTagsOfInstance != null) {
        entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
    }
    if (input.InstanceTagKeys != null) {
        const memberEntries = se_InstanceTagKeySet(input.InstanceTagKeys, context);
        if (input.InstanceTagKeys?.length === 0) {
            entries.InstanceTagKey = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RegisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress != null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        if (input.NetworkInterfaceIds?.length === 0) {
            entries.NetworkInterfaceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RegisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress != null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        if (input.NetworkInterfaceIds?.length === 0) {
            entries.NetworkInterfaceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RejectTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds != null) {
        const memberEntries = se_ValueStringList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RejectTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RejectTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RejectVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointIds != null) {
        const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
        if (input.VpcEndpointIds?.length === 0) {
            entries.VpcEndpointId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RejectVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId != null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const se_ReleaseAddressRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId != null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.PublicIp != null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.NetworkBorderGroup != null) {
        entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ReleaseHostsRequest = (input, context) => {
    const entries = {};
    if (input.HostIds != null) {
        const memberEntries = se_RequestHostIdList(input.HostIds, context);
        if (input.HostIds?.length === 0) {
            entries.HostId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ReleaseIpamPoolAllocationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId != null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamPoolAllocationId != null) {
        entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
    }
    return entries;
};
const se_RemoveIpamOperatingRegion = (input, context) => {
    const entries = {};
    if (input.RegionName != null) {
        entries["RegionName"] = input.RegionName;
    }
    return entries;
};
const se_RemoveIpamOperatingRegionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RemoveIpamOperatingRegion(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RemovePrefixListEntries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RemovePrefixListEntry(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RemovePrefixListEntry = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
const se_ReplaceIamInstanceProfileAssociationRequest = (input, context) => {
    const entries = {};
    if (input.IamInstanceProfile != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const se_ReplaceNetworkAclAssociationRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclId != null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    return entries;
};
const se_ReplaceNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input.CidrBlock != null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress != null) {
        entries["Egress"] = input.Egress;
    }
    if (input.IcmpTypeCode != null) {
        const memberEntries = se_IcmpTypeCode(input.IcmpTypeCode, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Icmp.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6CidrBlock != null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.NetworkAclId != null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.PortRange != null) {
        const memberEntries = se_PortRange(input.PortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol != null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.RuleAction != null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.RuleNumber != null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
const se_ReplaceRootVolumeTaskIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReplaceRootVolumeTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReplaceRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock != null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId != null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId != null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.EgressOnlyInternetGatewayId != null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    if (input.GatewayId != null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.LocalTarget != null) {
        entries["LocalTarget"] = input.LocalTarget;
    }
    if (input.NatGatewayId != null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.TransitGatewayId != null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.LocalGatewayId != null) {
        entries["LocalGatewayId"] = input.LocalGatewayId;
    }
    if (input.CarrierGatewayId != null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.VpcPeeringConnectionId != null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    if (input.CoreNetworkArn != null) {
        entries["CoreNetworkArn"] = input.CoreNetworkArn;
    }
    return entries;
};
const se_ReplaceRouteTableAssociationRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId != null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId != null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
const se_ReplaceTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock != null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId != null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole != null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ReplaceVpnTunnelRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId != null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress != null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.ApplyPendingMaintenance != null) {
        entries["ApplyPendingMaintenance"] = input.ApplyPendingMaintenance;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ReportInstanceStatusRequest = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Instances != null) {
        const memberEntries = se_InstanceIdStringList(input.Instances, context);
        if (input.Instances?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReasonCodes != null) {
        const memberEntries = se_ReasonCodesList(input.ReasonCodes, context);
        if (input.ReasonCodes?.length === 0) {
            entries.ReasonCode = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReasonCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
const se_RequestFilterPortRange = (input, context) => {
    const entries = {};
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    return entries;
};
const se_RequestHostIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestHostIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestInstanceTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestIpamResourceTag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_RequestIpamResourceTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RequestIpamResourceTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RequestLaunchTemplateData = (input, context) => {
    const entries = {};
    if (input.KernelId != null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile != null) {
        const memberEntries = se_LaunchTemplateIamInstanceProfileSpecificationRequest(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_LaunchTemplateBlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces != null) {
        const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(input.NetworkInterfaces, context);
        if (input.NetworkInterfaces?.length === 0) {
            entries.NetworkInterface = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring != null) {
        const memberEntries = se_LaunchTemplatesMonitoringRequest(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Placement != null) {
        const memberEntries = se_LaunchTemplatePlacementRequest(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamDiskId != null) {
        entries["RamDiskId"] = input.RamDiskId;
    }
    if (input.DisableApiTermination != null) {
        entries["DisableApiTermination"] = input.DisableApiTermination;
    }
    if (input.InstanceInitiatedShutdownBehavior != null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.UserData != null) {
        entries["UserData"] = input.UserData;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_LaunchTemplateTagSpecificationRequestList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ElasticGpuSpecifications != null) {
        const memberEntries = se_ElasticGpuSpecificationList(input.ElasticGpuSpecifications, context);
        if (input.ElasticGpuSpecifications?.length === 0) {
            entries.ElasticGpuSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ElasticInferenceAccelerators != null) {
        const memberEntries = se_LaunchTemplateElasticInferenceAcceleratorList(input.ElasticInferenceAccelerators, context);
        if (input.ElasticInferenceAccelerators?.length === 0) {
            entries.ElasticInferenceAccelerator = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_SecurityGroupIdStringList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups != null) {
        const memberEntries = se_SecurityGroupStringList(input.SecurityGroups, context);
        if (input.SecurityGroups?.length === 0) {
            entries.SecurityGroup = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceMarketOptions != null) {
        const memberEntries = se_LaunchTemplateInstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceMarketOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CreditSpecification != null) {
        const memberEntries = se_CreditSpecificationRequest(input.CreditSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreditSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuOptions != null) {
        const memberEntries = se_LaunchTemplateCpuOptionsRequest(input.CpuOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CapacityReservationSpecification != null) {
        const memberEntries = se_LaunchTemplateCapacityReservationSpecificationRequest(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LicenseSpecifications != null) {
        const memberEntries = se_LaunchTemplateLicenseSpecificationListRequest(input.LicenseSpecifications, context);
        if (input.LicenseSpecifications?.length === 0) {
            entries.LicenseSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HibernationOptions != null) {
        const memberEntries = se_LaunchTemplateHibernationOptionsRequest(input.HibernationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HibernationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MetadataOptions != null) {
        const memberEntries = se_LaunchTemplateInstanceMetadataOptionsRequest(input.MetadataOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetadataOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnclaveOptions != null) {
        const memberEntries = se_LaunchTemplateEnclaveOptionsRequest(input.EnclaveOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnclaveOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements != null) {
        const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsNameOptions != null) {
        const memberEntries = se_LaunchTemplatePrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateDnsNameOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaintenanceOptions != null) {
        const memberEntries = se_LaunchTemplateInstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableApiStop != null) {
        entries["DisableApiStop"] = input.DisableApiStop;
    }
    return entries;
};
const se_RequestSpotFleetRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotFleetRequestConfig != null) {
        const memberEntries = se_SpotFleetRequestConfigData(input.SpotFleetRequestConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RequestSpotInstancesRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZoneGroup != null) {
        entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
    }
    if (input.BlockDurationMinutes != null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.LaunchGroup != null) {
        entries["LaunchGroup"] = input.LaunchGroup;
    }
    if (input.LaunchSpecification != null) {
        const memberEntries = se_RequestSpotLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SpotPrice != null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom != null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil != null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInterruptionBehavior != null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
const se_RequestSpotLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupIdList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups != null) {
        const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupList(input.SecurityGroups, context);
        if (input.SecurityGroups?.length === 0) {
            entries.SecurityGroup = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddressingType != null) {
        entries["AddressingType"] = input.AddressingType;
    }
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_BlockDeviceMappingList(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId != null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring != null) {
        const memberEntries = se_RunInstancesMonitoringEnabled(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces != null) {
        const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        if (input.NetworkInterfaces?.length === 0) {
            entries.NetworkInterface = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Placement != null) {
        const memberEntries = se_SpotPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId != null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData != null) {
        entries["UserData"] = input.UserData;
    }
    return entries;
};
const se_RequestSpotLaunchSpecificationSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestSpotLaunchSpecificationSecurityGroupList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservationFleetInstanceSpecification = (input, context) => {
    const entries = {};
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstancePlatform != null) {
        entries["InstancePlatform"] = input.InstancePlatform;
    }
    if (input.Weight != null) {
        entries["Weight"] = __serializeFloat(input.Weight);
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId != null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.Priority != null) {
        entries["Priority"] = input.Priority;
    }
    return entries;
};
const se_ReservationFleetInstanceSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ReservationFleetInstanceSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ReservedInstanceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservedInstanceLimitPrice = (input, context) => {
    const entries = {};
    if (input.Amount != null) {
        entries["Amount"] = __serializeFloat(input.Amount);
    }
    if (input.CurrencyCode != null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    return entries;
};
const se_ReservedInstancesConfiguration = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Platform != null) {
        entries["Platform"] = input.Platform;
    }
    if (input.Scope != null) {
        entries["Scope"] = input.Scope;
    }
    return entries;
};
const se_ReservedInstancesConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ReservedInstancesConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ReservedInstancesIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstancesId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservedInstancesModificationIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstancesModificationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservedInstancesOfferingIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResetAddressAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId != null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ResetEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ResetFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId != null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    return entries;
};
const se_ResetImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ResetInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const se_ResetNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.SourceDestCheck != null) {
        entries["SourceDestCheck"] = input.SourceDestCheck;
    }
    return entries;
};
const se_ResetSnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ResourceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResourceList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResourceStatementRequest = (input, context) => {
    const entries = {};
    if (input.Resources != null) {
        const memberEntries = se_ValueStringList(input.Resources, context);
        if (input.Resources?.length === 0) {
            entries.Resource = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceTypes != null) {
        const memberEntries = se_ValueStringList(input.ResourceTypes, context);
        if (input.ResourceTypes?.length === 0) {
            entries.ResourceType = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RestorableByStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RestoreAddressToClassicRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PublicIp != null) {
        entries["PublicIp"] = input.PublicIp;
    }
    return entries;
};
const se_RestoreImageFromRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RestoreManagedPrefixListVersionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.PreviousVersion != null) {
        entries["PreviousVersion"] = input.PreviousVersion;
    }
    if (input.CurrentVersion != null) {
        entries["CurrentVersion"] = input.CurrentVersion;
    }
    return entries;
};
const se_RestoreSnapshotFromRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RestoreSnapshotTierRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.TemporaryRestoreDays != null) {
        entries["TemporaryRestoreDays"] = input.TemporaryRestoreDays;
    }
    if (input.PermanentRestore != null) {
        entries["PermanentRestore"] = input.PermanentRestore;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RevokeClientVpnIngressRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetNetworkCidr != null) {
        entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
    }
    if (input.AccessGroupId != null) {
        entries["AccessGroupId"] = input.AccessGroupId;
    }
    if (input.RevokeAllGroups != null) {
        entries["RevokeAllGroups"] = input.RevokeAllGroups;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_RevokeSecurityGroupEgressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.IpPermissions != null) {
        const memberEntries = se_IpPermissionList(input.IpPermissions, context);
        if (input.IpPermissions?.length === 0) {
            entries.IpPermissions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleIds != null) {
        const memberEntries = se_SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        if (input.SecurityGroupRuleIds?.length === 0) {
            entries.SecurityGroupRuleId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CidrIp != null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol != null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.SourceSecurityGroupName != null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId != null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    return entries;
};
const se_RevokeSecurityGroupIngressRequest = (input, context) => {
    const entries = {};
    if (input.CidrIp != null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions != null) {
        const memberEntries = se_IpPermissionList(input.IpPermissions, context);
        if (input.IpPermissions?.length === 0) {
            entries.IpPermissions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpProtocol != null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.SourceSecurityGroupName != null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId != null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SecurityGroupRuleIds != null) {
        const memberEntries = se_SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        if (input.SecurityGroupRuleIds?.length === 0) {
            entries.SecurityGroupRuleId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RouteTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RunInstancesMonitoringEnabled = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_RunInstancesRequest = (input, context) => {
    const entries = {};
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Ipv6AddressCount != null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses != null) {
        const memberEntries = se_InstanceIpv6AddressList(input.Ipv6Addresses, context);
        if (input.Ipv6Addresses?.length === 0) {
            entries.Ipv6Address = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KernelId != null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.MaxCount != null) {
        entries["MaxCount"] = input.MaxCount;
    }
    if (input.MinCount != null) {
        entries["MinCount"] = input.MinCount;
    }
    if (input.Monitoring != null) {
        const memberEntries = se_RunInstancesMonitoringEnabled(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Placement != null) {
        const memberEntries = se_Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId != null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_SecurityGroupIdStringList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups != null) {
        const memberEntries = se_SecurityGroupStringList(input.SecurityGroups, context);
        if (input.SecurityGroups?.length === 0) {
            entries.SecurityGroup = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData != null) {
        entries["UserData"] = input.UserData;
    }
    if (input.AdditionalInfo != null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DisableApiTermination != null) {
        entries["DisableApiTermination"] = input.DisableApiTermination;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInitiatedShutdownBehavior != null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.NetworkInterfaces != null) {
        const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        if (input.NetworkInterfaces?.length === 0) {
            entries.NetworkInterface = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.ElasticGpuSpecification != null) {
        const memberEntries = se_ElasticGpuSpecifications(input.ElasticGpuSpecification, context);
        if (input.ElasticGpuSpecification?.length === 0) {
            entries.ElasticGpuSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ElasticInferenceAccelerators != null) {
        const memberEntries = se_ElasticInferenceAccelerators(input.ElasticInferenceAccelerators, context);
        if (input.ElasticInferenceAccelerators?.length === 0) {
            entries.ElasticInferenceAccelerator = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplate != null) {
        const memberEntries = se_LaunchTemplateSpecification(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceMarketOptions != null) {
        const memberEntries = se_InstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceMarketOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CreditSpecification != null) {
        const memberEntries = se_CreditSpecificationRequest(input.CreditSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreditSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuOptions != null) {
        const memberEntries = se_CpuOptionsRequest(input.CpuOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CapacityReservationSpecification != null) {
        const memberEntries = se_CapacityReservationSpecification(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.HibernationOptions != null) {
        const memberEntries = se_HibernationOptionsRequest(input.HibernationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HibernationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LicenseSpecifications != null) {
        const memberEntries = se_LicenseSpecificationListRequest(input.LicenseSpecifications, context);
        if (input.LicenseSpecifications?.length === 0) {
            entries.LicenseSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MetadataOptions != null) {
        const memberEntries = se_InstanceMetadataOptionsRequest(input.MetadataOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetadataOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnclaveOptions != null) {
        const memberEntries = se_EnclaveOptionsRequest(input.EnclaveOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnclaveOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsNameOptions != null) {
        const memberEntries = se_PrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateDnsNameOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaintenanceOptions != null) {
        const memberEntries = se_InstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableApiStop != null) {
        entries["DisableApiStop"] = input.DisableApiStop;
    }
    return entries;
};
const se_RunScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.LaunchSpecification != null) {
        const memberEntries = se_ScheduledInstancesLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ScheduledInstanceId != null) {
        entries["ScheduledInstanceId"] = input.ScheduledInstanceId;
    }
    return entries;
};
const se_S3ObjectTag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_S3ObjectTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_S3ObjectTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_S3Storage = (input, context) => {
    const entries = {};
    if (input.AWSAccessKeyId != null) {
        entries["AWSAccessKeyId"] = input.AWSAccessKeyId;
    }
    if (input.Bucket != null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.Prefix != null) {
        entries["Prefix"] = input.Prefix;
    }
    if (input.UploadPolicy != null) {
        entries["UploadPolicy"] = context.base64Encoder(input.UploadPolicy);
    }
    if (input.UploadPolicySignature != null) {
        entries["UploadPolicySignature"] = input.UploadPolicySignature;
    }
    return entries;
};
const se_ScheduledInstanceIdRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ScheduledInstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ScheduledInstanceRecurrenceRequest = (input, context) => {
    const entries = {};
    if (input.Frequency != null) {
        entries["Frequency"] = input.Frequency;
    }
    if (input.Interval != null) {
        entries["Interval"] = input.Interval;
    }
    if (input.OccurrenceDays != null) {
        const memberEntries = se_OccurrenceDayRequestSet(input.OccurrenceDays, context);
        if (input.OccurrenceDays?.length === 0) {
            entries.OccurrenceDay = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OccurrenceDay.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OccurrenceRelativeToEnd != null) {
        entries["OccurrenceRelativeToEnd"] = input.OccurrenceRelativeToEnd;
    }
    if (input.OccurrenceUnit != null) {
        entries["OccurrenceUnit"] = input.OccurrenceUnit;
    }
    return entries;
};
const se_ScheduledInstancesBlockDeviceMapping = (input, context) => {
    const entries = {};
    if (input.DeviceName != null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Ebs != null) {
        const memberEntries = se_ScheduledInstancesEbs(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice != null) {
        entries["NoDevice"] = input.NoDevice;
    }
    if (input.VirtualName != null) {
        entries["VirtualName"] = input.VirtualName;
    }
    return entries;
};
const se_ScheduledInstancesBlockDeviceMappingSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesBlockDeviceMapping(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScheduledInstancesEbs = (input, context) => {
    const entries = {};
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize != null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType != null) {
        entries["VolumeType"] = input.VolumeType;
    }
    return entries;
};
const se_ScheduledInstancesIamInstanceProfile = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const se_ScheduledInstancesIpv6Address = (input, context) => {
    const entries = {};
    if (input.Ipv6Address != null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
const se_ScheduledInstancesIpv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesIpv6Address(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Ipv6Address.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScheduledInstancesLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_ScheduledInstancesBlockDeviceMappingSet(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile != null) {
        const memberEntries = se_ScheduledInstancesIamInstanceProfile(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId != null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring != null) {
        const memberEntries = se_ScheduledInstancesMonitoring(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces != null) {
        const memberEntries = se_ScheduledInstancesNetworkInterfaceSet(input.NetworkInterfaces, context);
        if (input.NetworkInterfaces?.length === 0) {
            entries.NetworkInterface = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Placement != null) {
        const memberEntries = se_ScheduledInstancesPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId != null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SecurityGroupIds != null) {
        const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
            entries.SecurityGroupId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData != null) {
        entries["UserData"] = input.UserData;
    }
    return entries;
};
const se_ScheduledInstancesMonitoring = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_ScheduledInstancesNetworkInterface = (input, context) => {
    const entries = {};
    if (input.AssociatePublicIpAddress != null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex != null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups != null) {
        const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input.Groups, context);
        if (input.Groups?.length === 0) {
            entries.Group = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Group.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount != null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses != null) {
        const memberEntries = se_ScheduledInstancesIpv6AddressList(input.Ipv6Addresses, context);
        if (input.Ipv6Addresses?.length === 0) {
            entries.Ipv6Address = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddressConfigs != null) {
        const memberEntries = se_PrivateIpAddressConfigSet(input.PrivateIpAddressConfigs, context);
        if (input.PrivateIpAddressConfigs?.length === 0) {
            entries.PrivateIpAddressConfig = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddressConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount != null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    return entries;
};
const se_ScheduledInstancesNetworkInterfaceSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesNetworkInterface(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`NetworkInterface.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScheduledInstancesPlacement = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    return entries;
};
const se_ScheduledInstancesPrivateIpAddressConfig = (input, context) => {
    const entries = {};
    if (input.Primary != null) {
        entries["Primary"] = input.Primary;
    }
    if (input.PrivateIpAddress != null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
const se_ScheduledInstancesSecurityGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SearchLocalGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableId != null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_SearchTransitGatewayMulticastGroupsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId != null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_SearchTransitGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId != null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_SecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SecurityGroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SecurityGroupRuleDescription = (input, context) => {
    const entries = {};
    if (input.SecurityGroupRuleId != null) {
        entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_SecurityGroupRuleDescriptionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SecurityGroupRuleDescription(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SecurityGroupRuleIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SecurityGroupRuleRequest = (input, context) => {
    const entries = {};
    if (input.IpProtocol != null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.CidrIpv4 != null) {
        entries["CidrIpv4"] = input.CidrIpv4;
    }
    if (input.CidrIpv6 != null) {
        entries["CidrIpv6"] = input.CidrIpv6;
    }
    if (input.PrefixListId != null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.ReferencedGroupId != null) {
        entries["ReferencedGroupId"] = input.ReferencedGroupId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_SecurityGroupRuleUpdate = (input, context) => {
    const entries = {};
    if (input.SecurityGroupRuleId != null) {
        entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
    }
    if (input.SecurityGroupRule != null) {
        const memberEntries = se_SecurityGroupRuleRequest(input.SecurityGroupRule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SecurityGroupRuleUpdateList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SecurityGroupRuleUpdate(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SecurityGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroup.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SendDiagnosticInterruptRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_SlotDateTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input.EarliestTime != null) {
        entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
    }
    if (input.LatestTime != null) {
        entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_SlotStartTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input.EarliestTime != null) {
        entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
    }
    if (input.LatestTime != null) {
        entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const se_SnapshotDiskContainer = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Format != null) {
        entries["Format"] = input.Format;
    }
    if (input.Url != null) {
        entries["Url"] = input.Url;
    }
    if (input.UserBucket != null) {
        const memberEntries = se_UserBucket(input.UserBucket, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserBucket.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SnapshotIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SnapshotId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SpotCapacityRebalance = (input, context) => {
    const entries = {};
    if (input.ReplacementStrategy != null) {
        entries["ReplacementStrategy"] = input.ReplacementStrategy;
    }
    if (input.TerminationDelay != null) {
        entries["TerminationDelay"] = input.TerminationDelay;
    }
    return entries;
};
const se_SpotFleetLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.SecurityGroups != null) {
        const memberEntries = se_GroupIdentifierList(input.SecurityGroups, context);
        if (input.SecurityGroups?.length === 0) {
            entries.GroupSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddressingType != null) {
        entries["AddressingType"] = input.AddressingType;
    }
    if (input.BlockDeviceMappings != null) {
        const memberEntries = se_BlockDeviceMappingList(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMapping = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId != null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring != null) {
        const memberEntries = se_SpotFleetMonitoring(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces != null) {
        const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        if (input.NetworkInterfaces?.length === 0) {
            entries.NetworkInterfaceSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Placement != null) {
        const memberEntries = se_SpotPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId != null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SpotPrice != null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.SubnetId != null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData != null) {
        entries["UserData"] = input.UserData;
    }
    if (input.WeightedCapacity != null) {
        entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_SpotFleetTagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecificationSet = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecificationSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements != null) {
        const memberEntries = se_InstanceRequirements(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotFleetMonitoring = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const se_SpotFleetRequestConfigData = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy != null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.OnDemandAllocationStrategy != null) {
        entries["OnDemandAllocationStrategy"] = input.OnDemandAllocationStrategy;
    }
    if (input.SpotMaintenanceStrategies != null) {
        const memberEntries = se_SpotMaintenanceStrategies(input.SpotMaintenanceStrategies, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotMaintenanceStrategies.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.ExcessCapacityTerminationPolicy != null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.FulfilledCapacity != null) {
        entries["FulfilledCapacity"] = __serializeFloat(input.FulfilledCapacity);
    }
    if (input.OnDemandFulfilledCapacity != null) {
        entries["OnDemandFulfilledCapacity"] = __serializeFloat(input.OnDemandFulfilledCapacity);
    }
    if (input.IamFleetRole != null) {
        entries["IamFleetRole"] = input.IamFleetRole;
    }
    if (input.LaunchSpecifications != null) {
        const memberEntries = se_LaunchSpecsList(input.LaunchSpecifications, context);
        if (input.LaunchSpecifications?.length === 0) {
            entries.LaunchSpecifications = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplateConfigs != null) {
        const memberEntries = se_LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
        if (input.LaunchTemplateConfigs?.length === 0) {
            entries.LaunchTemplateConfigs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotPrice != null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.TargetCapacity != null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.OnDemandTargetCapacity != null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.OnDemandMaxTotalPrice != null) {
        entries["OnDemandMaxTotalPrice"] = input.OnDemandMaxTotalPrice;
    }
    if (input.SpotMaxTotalPrice != null) {
        entries["SpotMaxTotalPrice"] = input.SpotMaxTotalPrice;
    }
    if (input.TerminateInstancesWithExpiration != null) {
        entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom != null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil != null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.ReplaceUnhealthyInstances != null) {
        entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
    }
    if (input.InstanceInterruptionBehavior != null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    if (input.LoadBalancersConfig != null) {
        const memberEntries = se_LoadBalancersConfig(input.LoadBalancersConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancersConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstancePoolsToUseCount != null) {
        entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
    }
    if (input.Context != null) {
        entries["Context"] = input.Context;
    }
    if (input.TargetCapacityUnitType != null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotFleetRequestIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SpotFleetTagSpecification = (input, context) => {
    const entries = {};
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotFleetTagSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SpotFleetTagSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SpotInstanceRequestIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SpotInstanceRequestId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SpotMaintenanceStrategies = (input, context) => {
    const entries = {};
    if (input.CapacityRebalance != null) {
        const memberEntries = se_SpotCapacityRebalance(input.CapacityRebalance, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityRebalance.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotMarketOptions = (input, context) => {
    const entries = {};
    if (input.MaxPrice != null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SpotInstanceType != null) {
        entries["SpotInstanceType"] = input.SpotInstanceType;
    }
    if (input.BlockDurationMinutes != null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ValidUntil != null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceInterruptionBehavior != null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
const se_SpotOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy != null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.MaintenanceStrategies != null) {
        const memberEntries = se_FleetSpotMaintenanceStrategiesRequest(input.MaintenanceStrategies, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceStrategies.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInterruptionBehavior != null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    if (input.InstancePoolsToUseCount != null) {
        entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
    }
    if (input.SingleInstanceType != null) {
        entries["SingleInstanceType"] = input.SingleInstanceType;
    }
    if (input.SingleAvailabilityZone != null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.MinTargetCapacity != null) {
        entries["MinTargetCapacity"] = input.MinTargetCapacity;
    }
    if (input.MaxTotalPrice != null) {
        entries["MaxTotalPrice"] = input.MaxTotalPrice;
    }
    return entries;
};
const se_SpotPlacement = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Tenancy != null) {
        entries["Tenancy"] = input.Tenancy;
    }
    return entries;
};
const se_StartInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AdditionalInfo != null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_StartNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeId != null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_StartNetworkInsightsAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsPathId != null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    if (input.AdditionalAccounts != null) {
        const memberEntries = se_ValueStringList(input.AdditionalAccounts, context);
        if (input.AdditionalAccounts?.length === 0) {
            entries.AdditionalAccount = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AdditionalAccount.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.FilterInArns != null) {
        const memberEntries = se_ArnList(input.FilterInArns, context);
        if (input.FilterInArns?.length === 0) {
            entries.FilterInArn = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterInArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications != null) {
        const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
        if (input.TagSpecifications?.length === 0) {
            entries.TagSpecification = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const se_StartVpcEndpointServicePrivateDnsVerificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId != null) {
        entries["ServiceId"] = input.ServiceId;
    }
    return entries;
};
const se_StopInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Hibernate != null) {
        entries["Hibernate"] = input.Hibernate;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
const se_Storage = (input, context) => {
    const entries = {};
    if (input.S3 != null) {
        const memberEntries = se_S3Storage(input.S3, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_StorageLocation = (input, context) => {
    const entries = {};
    if (input.Bucket != null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    return entries;
};
const se_SubnetIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SubnetId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TagSpecification = (input, context) => {
    const entries = {};
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tag = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_TagSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TargetCapacitySpecificationRequest = (input, context) => {
    const entries = {};
    if (input.TotalTargetCapacity != null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.OnDemandTargetCapacity != null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.SpotTargetCapacity != null) {
        entries["SpotTargetCapacity"] = input.SpotTargetCapacity;
    }
    if (input.DefaultTargetCapacityType != null) {
        entries["DefaultTargetCapacityType"] = input.DefaultTargetCapacityType;
    }
    if (input.TargetCapacityUnitType != null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    return entries;
};
const se_TargetConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceCount != null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.OfferingId != null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
const se_TargetConfigurationRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_TargetConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`TargetConfigurationRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TargetGroup = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    return entries;
};
const se_TargetGroups = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_TargetGroup(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TargetGroupsConfig = (input, context) => {
    const entries = {};
    if (input.TargetGroups != null) {
        const memberEntries = se_TargetGroups(input.TargetGroups, context);
        if (input.TargetGroups?.length === 0) {
            entries.TargetGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroups.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TerminateClientVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId != null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.ConnectionId != null) {
        entries["ConnectionId"] = input.ConnectionId;
    }
    if (input.Username != null) {
        entries["Username"] = input.Username;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_TerminateInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ThroughResourcesStatementRequest = (input, context) => {
    const entries = {};
    if (input.ResourceStatement != null) {
        const memberEntries = se_ResourceStatementRequest(input.ResourceStatement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceStatement.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ThroughResourcesStatementRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ThroughResourcesStatementRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TotalLocalStorageGB = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
const se_TotalLocalStorageGBRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
const se_TrafficMirrorFilterIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorFilterRuleFieldList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorNetworkServiceList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorPortRangeRequest = (input, context) => {
    const entries = {};
    if (input.FromPort != null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.ToPort != null) {
        entries["ToPort"] = input.ToPort;
    }
    return entries;
};
const se_TrafficMirrorSessionFieldList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorSessionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorTargetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayAttachmentIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayCidrBlockStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayConnectPeerIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayConnectRequestBgpOptions = (input, context) => {
    const entries = {};
    if (input.PeerAsn != null) {
        entries["PeerAsn"] = input.PeerAsn;
    }
    return entries;
};
const se_TransitGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayMulticastDomainIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayNetworkInterfaceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayPolicyTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayRequestOptions = (input, context) => {
    const entries = {};
    if (input.AmazonSideAsn != null) {
        entries["AmazonSideAsn"] = input.AmazonSideAsn;
    }
    if (input.AutoAcceptSharedAttachments != null) {
        entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
    }
    if (input.DefaultRouteTableAssociation != null) {
        entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
    }
    if (input.DefaultRouteTablePropagation != null) {
        entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
    }
    if (input.VpnEcmpSupport != null) {
        entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
    }
    if (input.DnsSupport != null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.MulticastSupport != null) {
        entries["MulticastSupport"] = input.MulticastSupport;
    }
    if (input.TransitGatewayCidrBlocks != null) {
        const memberEntries = se_TransitGatewayCidrBlockStringList(input.TransitGatewayCidrBlocks, context);
        if (input.TransitGatewayCidrBlocks?.length === 0) {
            entries.TransitGatewayCidrBlocks = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TransitGatewayRouteTableAnnouncementIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayRouteTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewaySubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrunkInterfaceAssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_UnassignIpv6AddressesRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6Addresses != null) {
        const memberEntries = se_Ipv6AddressList(input.Ipv6Addresses, context);
        if (input.Ipv6Addresses?.length === 0) {
            entries.Ipv6Addresses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6Prefixes != null) {
        const memberEntries = se_IpPrefixList(input.Ipv6Prefixes, context);
        if (input.Ipv6Prefixes?.length === 0) {
            entries.Ipv6Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const se_UnassignPrivateIpAddressesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId != null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_PrivateIpAddressStringList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4Prefixes != null) {
        const memberEntries = se_IpPrefixList(input.Ipv4Prefixes, context);
        if (input.Ipv4Prefixes?.length === 0) {
            entries.Ipv4Prefix = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UnassignPrivateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input.NatGatewayId != null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.PrivateIpAddresses != null) {
        const memberEntries = se_IpList(input.PrivateIpAddresses, context);
        if (input.PrivateIpAddresses?.length === 0) {
            entries.PrivateIpAddress = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxDrainDurationSeconds != null) {
        entries["MaxDrainDurationSeconds"] = input.MaxDrainDurationSeconds;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_UnmonitorInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_UpdateSecurityGroupRuleDescriptionsEgressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions != null) {
        const memberEntries = se_IpPermissionList(input.IpPermissions, context);
        if (input.IpPermissions?.length === 0) {
            entries.IpPermissions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleDescriptions != null) {
        const memberEntries = se_SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
        if (input.SecurityGroupRuleDescriptions?.length === 0) {
            entries.SecurityGroupRuleDescription = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateSecurityGroupRuleDescriptionsIngressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions != null) {
        const memberEntries = se_IpPermissionList(input.IpPermissions, context);
        if (input.IpPermissions?.length === 0) {
            entries.IpPermissions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleDescriptions != null) {
        const memberEntries = se_SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
        if (input.SecurityGroupRuleDescriptions?.length === 0) {
            entries.SecurityGroupRuleDescription = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UserBucket = (input, context) => {
    const entries = {};
    if (input.S3Bucket != null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Key != null) {
        entries["S3Key"] = input.S3Key;
    }
    return entries;
};
const se_UserData = (input, context) => {
    const entries = {};
    if (input.Data != null) {
        entries["Data"] = input.Data;
    }
    return entries;
};
const se_UserGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`UserGroup.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_UserIdGroupPair = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.GroupId != null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.PeeringStatus != null) {
        entries["PeeringStatus"] = input.PeeringStatus;
    }
    if (input.UserId != null) {
        entries["UserId"] = input.UserId;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpcPeeringConnectionId != null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const se_UserIdGroupPairList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_UserIdGroupPair(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_UserIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`UserId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ValueStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VCpuCountRange = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_VCpuCountRangeRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const se_VerifiedAccessEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VerifiedAccessGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VerifiedAccessInstanceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VerifiedAccessLogCloudWatchLogsDestinationOptions = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.LogGroup != null) {
        entries["LogGroup"] = input.LogGroup;
    }
    return entries;
};
const se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.DeliveryStream != null) {
        entries["DeliveryStream"] = input.DeliveryStream;
    }
    return entries;
};
const se_VerifiedAccessLogOptions = (input, context) => {
    const entries = {};
    if (input.S3 != null) {
        const memberEntries = se_VerifiedAccessLogS3DestinationOptions(input.S3, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CloudWatchLogs != null) {
        const memberEntries = se_VerifiedAccessLogCloudWatchLogsDestinationOptions(input.CloudWatchLogs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudWatchLogs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.KinesisDataFirehose != null) {
        const memberEntries = se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions(input.KinesisDataFirehose, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KinesisDataFirehose.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_VerifiedAccessLogS3DestinationOptions = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.BucketName != null) {
        entries["BucketName"] = input.BucketName;
    }
    if (input.Prefix != null) {
        entries["Prefix"] = input.Prefix;
    }
    if (input.BucketOwner != null) {
        entries["BucketOwner"] = input.BucketOwner;
    }
    return entries;
};
const se_VerifiedAccessTrustProviderIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VersionStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VirtualizationTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VolumeDetail = (input, context) => {
    const entries = {};
    if (input.Size != null) {
        entries["Size"] = input.Size;
    }
    return entries;
};
const se_VolumeIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VolumeId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcClassicLinkIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointRouteTableIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointServiceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointSubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcPeeringConnectionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpnConnectionIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpnConnectionId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpnConnectionOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.EnableAcceleration != null) {
        entries["EnableAcceleration"] = input.EnableAcceleration;
    }
    if (input.StaticRoutesOnly != null) {
        entries["StaticRoutesOnly"] = input.StaticRoutesOnly;
    }
    if (input.TunnelInsideIpVersion != null) {
        entries["TunnelInsideIpVersion"] = input.TunnelInsideIpVersion;
    }
    if (input.TunnelOptions != null) {
        const memberEntries = se_VpnTunnelOptionsSpecificationsList(input.TunnelOptions, context);
        if (input.TunnelOptions?.length === 0) {
            entries.TunnelOptions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TunnelOptions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LocalIpv4NetworkCidr != null) {
        entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
    }
    if (input.RemoteIpv4NetworkCidr != null) {
        entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
    }
    if (input.LocalIpv6NetworkCidr != null) {
        entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
    }
    if (input.RemoteIpv6NetworkCidr != null) {
        entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
    }
    if (input.OutsideIpAddressType != null) {
        entries["OutsideIpAddressType"] = input.OutsideIpAddressType;
    }
    if (input.TransportTransitGatewayAttachmentId != null) {
        entries["TransportTransitGatewayAttachmentId"] = input.TransportTransitGatewayAttachmentId;
    }
    return entries;
};
const se_VpnGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpnGatewayId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpnTunnelLogOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.CloudWatchLogOptions != null) {
        const memberEntries = se_CloudWatchLogOptionsSpecification(input.CloudWatchLogOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudWatchLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_VpnTunnelOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.TunnelInsideCidr != null) {
        entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
    }
    if (input.TunnelInsideIpv6Cidr != null) {
        entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
    }
    if (input.PreSharedKey != null) {
        entries["PreSharedKey"] = input.PreSharedKey;
    }
    if (input.Phase1LifetimeSeconds != null) {
        entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
    }
    if (input.Phase2LifetimeSeconds != null) {
        entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
    }
    if (input.RekeyMarginTimeSeconds != null) {
        entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
    }
    if (input.RekeyFuzzPercentage != null) {
        entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
    }
    if (input.ReplayWindowSize != null) {
        entries["ReplayWindowSize"] = input.ReplayWindowSize;
    }
    if (input.DPDTimeoutSeconds != null) {
        entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
    }
    if (input.DPDTimeoutAction != null) {
        entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
    }
    if (input.Phase1EncryptionAlgorithms != null) {
        const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
        if (input.Phase1EncryptionAlgorithms?.length === 0) {
            entries.Phase1EncryptionAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2EncryptionAlgorithms != null) {
        const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
        if (input.Phase2EncryptionAlgorithms?.length === 0) {
            entries.Phase2EncryptionAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1IntegrityAlgorithms != null) {
        const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
        if (input.Phase1IntegrityAlgorithms?.length === 0) {
            entries.Phase1IntegrityAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2IntegrityAlgorithms != null) {
        const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
        if (input.Phase2IntegrityAlgorithms?.length === 0) {
            entries.Phase2IntegrityAlgorithm = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1DHGroupNumbers != null) {
        const memberEntries = se_Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
        if (input.Phase1DHGroupNumbers?.length === 0) {
            entries.Phase1DHGroupNumber = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2DHGroupNumbers != null) {
        const memberEntries = se_Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
        if (input.Phase2DHGroupNumbers?.length === 0) {
            entries.Phase2DHGroupNumber = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IKEVersions != null) {
        const memberEntries = se_IKEVersionsRequestList(input.IKEVersions, context);
        if (input.IKEVersions?.length === 0) {
            entries.IKEVersion = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartupAction != null) {
        entries["StartupAction"] = input.StartupAction;
    }
    if (input.LogOptions != null) {
        const memberEntries = se_VpnTunnelLogOptionsSpecification(input.LogOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableTunnelLifecycleControl != null) {
        entries["EnableTunnelLifecycleControl"] = input.EnableTunnelLifecycleControl;
    }
    return entries;
};
const se_VpnTunnelOptionsSpecificationsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_VpnTunnelOptionsSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_WithdrawByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const se_ZoneIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ZoneId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ZoneNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ZoneName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const de_AcceleratorCount = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
const de_AcceleratorManufacturerSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_AcceleratorNameSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_AcceleratorTotalMemoryMiB = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
const de_AcceleratorTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_AcceptAddressTransferResult = (output, context) => {
    const contents = {};
    if (output["addressTransfer"] !== undefined) {
        contents.AddressTransfer = de_AddressTransfer(output["addressTransfer"], context);
    }
    return contents;
};
const de_AcceptReservedInstancesExchangeQuoteResult = (output, context) => {
    const contents = {};
    if (output["exchangeId"] !== undefined) {
        contents.ExchangeId = __expectString(output["exchangeId"]);
    }
    return contents;
};
const de_AcceptTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {};
    if (output["associations"] !== undefined) {
        contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const de_AcceptTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const de_AcceptTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const de_AcceptVpcEndpointConnectionsResult = (output, context) => {
    const contents = {};
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_AcceptVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = de_VpcPeeringConnection(output["vpcPeeringConnection"], context);
    }
    return contents;
};
const de_AccessScopeAnalysisFinding = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output["findingId"] !== undefined) {
        contents.FindingId = __expectString(output["findingId"]);
    }
    if (output.findingComponentSet === "") {
        contents.FindingComponents = [];
    }
    else if (output["findingComponentSet"] !== undefined && output["findingComponentSet"]["item"] !== undefined) {
        contents.FindingComponents = de_PathComponentList(__getArrayIfSingleItem(output["findingComponentSet"]["item"]), context);
    }
    return contents;
};
const de_AccessScopeAnalysisFindingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessScopeAnalysisFinding(entry, context);
    });
};
const de_AccessScopePath = (output, context) => {
    const contents = {};
    if (output["source"] !== undefined) {
        contents.Source = de_PathStatement(output["source"], context);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = de_PathStatement(output["destination"], context);
    }
    if (output.throughResourceSet === "") {
        contents.ThroughResources = [];
    }
    else if (output["throughResourceSet"] !== undefined && output["throughResourceSet"]["item"] !== undefined) {
        contents.ThroughResources = de_ThroughResourcesStatementList(__getArrayIfSingleItem(output["throughResourceSet"]["item"]), context);
    }
    return contents;
};
const de_AccessScopePathList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessScopePath(entry, context);
    });
};
const de_AccountAttribute = (output, context) => {
    const contents = {};
    if (output["attributeName"] !== undefined) {
        contents.AttributeName = __expectString(output["attributeName"]);
    }
    if (output.attributeValueSet === "") {
        contents.AttributeValues = [];
    }
    else if (output["attributeValueSet"] !== undefined && output["attributeValueSet"]["item"] !== undefined) {
        contents.AttributeValues = de_AccountAttributeValueList(__getArrayIfSingleItem(output["attributeValueSet"]["item"]), context);
    }
    return contents;
};
const de_AccountAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountAttribute(entry, context);
    });
};
const de_AccountAttributeValue = (output, context) => {
    const contents = {};
    if (output["attributeValue"] !== undefined) {
        contents.AttributeValue = __expectString(output["attributeValue"]);
    }
    return contents;
};
const de_AccountAttributeValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountAttributeValue(entry, context);
    });
};
const de_ActiveInstance = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["instanceHealth"] !== undefined) {
        contents.InstanceHealth = __expectString(output["instanceHealth"]);
    }
    return contents;
};
const de_ActiveInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActiveInstance(entry, context);
    });
};
const de_AddedPrincipal = (output, context) => {
    const contents = {};
    if (output["principalType"] !== undefined) {
        contents.PrincipalType = __expectString(output["principalType"]);
    }
    if (output["principal"] !== undefined) {
        contents.Principal = __expectString(output["principal"]);
    }
    if (output["servicePermissionId"] !== undefined) {
        contents.ServicePermissionId = __expectString(output["servicePermissionId"]);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    return contents;
};
const de_AddedPrincipalSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AddedPrincipal(entry, context);
    });
};
const de_AdditionalDetail = (output, context) => {
    const contents = {};
    if (output["additionalDetailType"] !== undefined) {
        contents.AdditionalDetailType = __expectString(output["additionalDetailType"]);
    }
    if (output["component"] !== undefined) {
        contents.Component = de_AnalysisComponent(output["component"], context);
    }
    if (output["vpcEndpointService"] !== undefined) {
        contents.VpcEndpointService = de_AnalysisComponent(output["vpcEndpointService"], context);
    }
    if (output.ruleOptionSet === "") {
        contents.RuleOptions = [];
    }
    else if (output["ruleOptionSet"] !== undefined && output["ruleOptionSet"]["item"] !== undefined) {
        contents.RuleOptions = de_RuleOptionList(__getArrayIfSingleItem(output["ruleOptionSet"]["item"]), context);
    }
    if (output.ruleGroupTypePairSet === "") {
        contents.RuleGroupTypePairs = [];
    }
    else if (output["ruleGroupTypePairSet"] !== undefined && output["ruleGroupTypePairSet"]["item"] !== undefined) {
        contents.RuleGroupTypePairs = de_RuleGroupTypePairList(__getArrayIfSingleItem(output["ruleGroupTypePairSet"]["item"]), context);
    }
    if (output.ruleGroupRuleOptionsPairSet === "") {
        contents.RuleGroupRuleOptionsPairs = [];
    }
    else if (output["ruleGroupRuleOptionsPairSet"] !== undefined &&
        output["ruleGroupRuleOptionsPairSet"]["item"] !== undefined) {
        contents.RuleGroupRuleOptionsPairs = de_RuleGroupRuleOptionsPairList(__getArrayIfSingleItem(output["ruleGroupRuleOptionsPairSet"]["item"]), context);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    if (output.loadBalancerSet === "") {
        contents.LoadBalancers = [];
    }
    else if (output["loadBalancerSet"] !== undefined && output["loadBalancerSet"]["item"] !== undefined) {
        contents.LoadBalancers = de_AnalysisComponentList(__getArrayIfSingleItem(output["loadBalancerSet"]["item"]), context);
    }
    return contents;
};
const de_AdditionalDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdditionalDetail(entry, context);
    });
};
const de_Address = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["domain"] !== undefined) {
        contents.Domain = __expectString(output["domain"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["networkInterfaceOwnerId"] !== undefined) {
        contents.NetworkInterfaceOwnerId = __expectString(output["networkInterfaceOwnerId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["publicIpv4Pool"] !== undefined) {
        contents.PublicIpv4Pool = __expectString(output["publicIpv4Pool"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    return contents;
};
const de_AddressAttribute = (output, context) => {
    const contents = {};
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["ptrRecord"] !== undefined) {
        contents.PtrRecord = __expectString(output["ptrRecord"]);
    }
    if (output["ptrRecordUpdate"] !== undefined) {
        contents.PtrRecordUpdate = de_PtrUpdateStatus(output["ptrRecordUpdate"], context);
    }
    return contents;
};
const de_AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Address(entry, context);
    });
};
const de_AddressSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AddressAttribute(entry, context);
    });
};
const de_AddressTransfer = (output, context) => {
    const contents = {};
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["transferAccountId"] !== undefined) {
        contents.TransferAccountId = __expectString(output["transferAccountId"]);
    }
    if (output["transferOfferExpirationTimestamp"] !== undefined) {
        contents.TransferOfferExpirationTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["transferOfferExpirationTimestamp"]));
    }
    if (output["transferOfferAcceptedTimestamp"] !== undefined) {
        contents.TransferOfferAcceptedTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["transferOfferAcceptedTimestamp"]));
    }
    if (output["addressTransferStatus"] !== undefined) {
        contents.AddressTransferStatus = __expectString(output["addressTransferStatus"]);
    }
    return contents;
};
const de_AddressTransferList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AddressTransfer(entry, context);
    });
};
const de_AdvertiseByoipCidrResult = (output, context) => {
    const contents = {};
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const de_AllocateAddressResult = (output, context) => {
    const contents = {};
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["publicIpv4Pool"] !== undefined) {
        contents.PublicIpv4Pool = __expectString(output["publicIpv4Pool"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["domain"] !== undefined) {
        contents.Domain = __expectString(output["domain"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    return contents;
};
const de_AllocateHostsResult = (output, context) => {
    const contents = {};
    if (output.hostIdSet === "") {
        contents.HostIds = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIds = de_ResponseHostIdList(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
    }
    return contents;
};
const de_AllocateIpamPoolCidrResult = (output, context) => {
    const contents = {};
    if (output["ipamPoolAllocation"] !== undefined) {
        contents.IpamPoolAllocation = de_IpamPoolAllocation(output["ipamPoolAllocation"], context);
    }
    return contents;
};
const de_AllowedInstanceTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_AllowedPrincipal = (output, context) => {
    const contents = {};
    if (output["principalType"] !== undefined) {
        contents.PrincipalType = __expectString(output["principalType"]);
    }
    if (output["principal"] !== undefined) {
        contents.Principal = __expectString(output["principal"]);
    }
    if (output["servicePermissionId"] !== undefined) {
        contents.ServicePermissionId = __expectString(output["servicePermissionId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    return contents;
};
const de_AllowedPrincipalSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AllowedPrincipal(entry, context);
    });
};
const de_AlternatePathHint = (output, context) => {
    const contents = {};
    if (output["componentId"] !== undefined) {
        contents.ComponentId = __expectString(output["componentId"]);
    }
    if (output["componentArn"] !== undefined) {
        contents.ComponentArn = __expectString(output["componentArn"]);
    }
    return contents;
};
const de_AlternatePathHintList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlternatePathHint(entry, context);
    });
};
const de_AnalysisAclRule = (output, context) => {
    const contents = {};
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["egress"] !== undefined) {
        contents.Egress = __parseBoolean(output["egress"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = de_PortRange(output["portRange"], context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = __strictParseInt32(output["ruleNumber"]);
    }
    return contents;
};
const de_AnalysisComponent = (output, context) => {
    const contents = {};
    if (output["id"] !== undefined) {
        contents.Id = __expectString(output["id"]);
    }
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
const de_AnalysisComponentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnalysisComponent(entry, context);
    });
};
const de_AnalysisLoadBalancerListener = (output, context) => {
    const contents = {};
    if (output["loadBalancerPort"] !== undefined) {
        contents.LoadBalancerPort = __strictParseInt32(output["loadBalancerPort"]);
    }
    if (output["instancePort"] !== undefined) {
        contents.InstancePort = __strictParseInt32(output["instancePort"]);
    }
    return contents;
};
const de_AnalysisLoadBalancerTarget = (output, context) => {
    const contents = {};
    if (output["address"] !== undefined) {
        contents.Address = __expectString(output["address"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["instance"] !== undefined) {
        contents.Instance = de_AnalysisComponent(output["instance"], context);
    }
    if (output["port"] !== undefined) {
        contents.Port = __strictParseInt32(output["port"]);
    }
    return contents;
};
const de_AnalysisPacketHeader = (output, context) => {
    const contents = {};
    if (output.destinationAddressSet === "") {
        contents.DestinationAddresses = [];
    }
    else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
        contents.DestinationAddresses = de_IpAddressList(__getArrayIfSingleItem(output["destinationAddressSet"]["item"]), context);
    }
    if (output.destinationPortRangeSet === "") {
        contents.DestinationPortRanges = [];
    }
    else if (output["destinationPortRangeSet"] !== undefined &&
        output["destinationPortRangeSet"]["item"] !== undefined) {
        contents.DestinationPortRanges = de_PortRangeList(__getArrayIfSingleItem(output["destinationPortRangeSet"]["item"]), context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output.sourceAddressSet === "") {
        contents.SourceAddresses = [];
    }
    else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
        contents.SourceAddresses = de_IpAddressList(__getArrayIfSingleItem(output["sourceAddressSet"]["item"]), context);
    }
    if (output.sourcePortRangeSet === "") {
        contents.SourcePortRanges = [];
    }
    else if (output["sourcePortRangeSet"] !== undefined && output["sourcePortRangeSet"]["item"] !== undefined) {
        contents.SourcePortRanges = de_PortRangeList(__getArrayIfSingleItem(output["sourcePortRangeSet"]["item"]), context);
    }
    return contents;
};
const de_AnalysisRouteTableRoute = (output, context) => {
    const contents = {};
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["destinationPrefixListId"] !== undefined) {
        contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = __expectString(output["origin"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["carrierGatewayId"] !== undefined) {
        contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
    }
    if (output["coreNetworkArn"] !== undefined) {
        contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    return contents;
};
const de_AnalysisSecurityGroupRule = (output, context) => {
    const contents = {};
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["direction"] !== undefined) {
        contents.Direction = __expectString(output["direction"]);
    }
    if (output["securityGroupId"] !== undefined) {
        contents.SecurityGroupId = __expectString(output["securityGroupId"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = de_PortRange(output["portRange"], context);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    return contents;
};
const de_ApplySecurityGroupsToClientVpnTargetNetworkResult = (output, context) => {
    const contents = {};
    if (output.securityGroupIds === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIds"] !== undefined && output["securityGroupIds"]["item"] !== undefined) {
        contents.SecurityGroupIds = de_ClientVpnSecurityGroupIdSet(__getArrayIfSingleItem(output["securityGroupIds"]["item"]), context);
    }
    return contents;
};
const de_ArchitectureTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_ArnList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_AssignedPrivateIpAddress = (output, context) => {
    const contents = {};
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
const de_AssignedPrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssignedPrivateIpAddress(entry, context);
    });
};
const de_AssignIpv6AddressesResult = (output, context) => {
    const contents = {};
    if (output.assignedIpv6Addresses === "") {
        contents.AssignedIpv6Addresses = [];
    }
    else if (output["assignedIpv6Addresses"] !== undefined && output["assignedIpv6Addresses"]["item"] !== undefined) {
        contents.AssignedIpv6Addresses = de_Ipv6AddressList(__getArrayIfSingleItem(output["assignedIpv6Addresses"]["item"]), context);
    }
    if (output.assignedIpv6PrefixSet === "") {
        contents.AssignedIpv6Prefixes = [];
    }
    else if (output["assignedIpv6PrefixSet"] !== undefined && output["assignedIpv6PrefixSet"]["item"] !== undefined) {
        contents.AssignedIpv6Prefixes = de_IpPrefixList(__getArrayIfSingleItem(output["assignedIpv6PrefixSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    return contents;
};
const de_AssignPrivateIpAddressesResult = (output, context) => {
    const contents = {};
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output.assignedPrivateIpAddressesSet === "") {
        contents.AssignedPrivateIpAddresses = [];
    }
    else if (output["assignedPrivateIpAddressesSet"] !== undefined &&
        output["assignedPrivateIpAddressesSet"]["item"] !== undefined) {
        contents.AssignedPrivateIpAddresses = de_AssignedPrivateIpAddressList(__getArrayIfSingleItem(output["assignedPrivateIpAddressesSet"]["item"]), context);
    }
    if (output.assignedIpv4PrefixSet === "") {
        contents.AssignedIpv4Prefixes = [];
    }
    else if (output["assignedIpv4PrefixSet"] !== undefined && output["assignedIpv4PrefixSet"]["item"] !== undefined) {
        contents.AssignedIpv4Prefixes = de_Ipv4PrefixesList(__getArrayIfSingleItem(output["assignedIpv4PrefixSet"]["item"]), context);
    }
    return contents;
};
const de_AssignPrivateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output.natGatewayAddressSet === "") {
        contents.NatGatewayAddresses = [];
    }
    else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
        contents.NatGatewayAddresses = de_NatGatewayAddressList(__getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]), context);
    }
    return contents;
};
const de_AssociateAddressResult = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    return contents;
};
const de_AssociateClientVpnTargetNetworkResult = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_AssociationStatus(output["status"], context);
    }
    return contents;
};
const de_AssociatedRole = (output, context) => {
    const contents = {};
    if (output["associatedRoleArn"] !== undefined) {
        contents.AssociatedRoleArn = __expectString(output["associatedRoleArn"]);
    }
    if (output["certificateS3BucketName"] !== undefined) {
        contents.CertificateS3BucketName = __expectString(output["certificateS3BucketName"]);
    }
    if (output["certificateS3ObjectKey"] !== undefined) {
        contents.CertificateS3ObjectKey = __expectString(output["certificateS3ObjectKey"]);
    }
    if (output["encryptionKmsKeyId"] !== undefined) {
        contents.EncryptionKmsKeyId = __expectString(output["encryptionKmsKeyId"]);
    }
    return contents;
};
const de_AssociatedRolesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociatedRole(entry, context);
    });
};
const de_AssociatedTargetNetwork = (output, context) => {
    const contents = {};
    if (output["networkId"] !== undefined) {
        contents.NetworkId = __expectString(output["networkId"]);
    }
    if (output["networkType"] !== undefined) {
        contents.NetworkType = __expectString(output["networkType"]);
    }
    return contents;
};
const de_AssociatedTargetNetworkSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociatedTargetNetwork(entry, context);
    });
};
const de_AssociateEnclaveCertificateIamRoleResult = (output, context) => {
    const contents = {};
    if (output["certificateS3BucketName"] !== undefined) {
        contents.CertificateS3BucketName = __expectString(output["certificateS3BucketName"]);
    }
    if (output["certificateS3ObjectKey"] !== undefined) {
        contents.CertificateS3ObjectKey = __expectString(output["certificateS3ObjectKey"]);
    }
    if (output["encryptionKmsKeyId"] !== undefined) {
        contents.EncryptionKmsKeyId = __expectString(output["encryptionKmsKeyId"]);
    }
    return contents;
};
const de_AssociateIamInstanceProfileResult = (output, context) => {
    const contents = {};
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = de_IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
const de_AssociateInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const de_AssociateIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output["ipamResourceDiscoveryAssociation"] !== undefined) {
        contents.IpamResourceDiscoveryAssociation = de_IpamResourceDiscoveryAssociation(output["ipamResourceDiscoveryAssociation"], context);
    }
    return contents;
};
const de_AssociateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output.natGatewayAddressSet === "") {
        contents.NatGatewayAddresses = [];
    }
    else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
        contents.NatGatewayAddresses = de_NatGatewayAddressList(__getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]), context);
    }
    return contents;
};
const de_AssociateRouteTableResult = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = de_RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
const de_AssociateSubnetCidrBlockResult = (output, context) => {
    const contents = {};
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = de_SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    return contents;
};
const de_AssociateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output["associations"] !== undefined) {
        contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const de_AssociateTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_TransitGatewayPolicyTableAssociation(output["association"], context);
    }
    return contents;
};
const de_AssociateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_TransitGatewayAssociation(output["association"], context);
    }
    return contents;
};
const de_AssociateTrunkInterfaceResult = (output, context) => {
    const contents = {};
    if (output["interfaceAssociation"] !== undefined) {
        contents.InterfaceAssociation = de_TrunkInterfaceAssociation(output["interfaceAssociation"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_AssociateVpcCidrBlockResult = (output, context) => {
    const contents = {};
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = de_VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["cidrBlockAssociation"] !== undefined) {
        contents.CidrBlockAssociation = de_VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_AssociationStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_AttachClassicLinkVpcResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_AttachmentEnaSrdSpecification = (output, context) => {
    const contents = {};
    if (output["enaSrdEnabled"] !== undefined) {
        contents.EnaSrdEnabled = __parseBoolean(output["enaSrdEnabled"]);
    }
    if (output["enaSrdUdpSpecification"] !== undefined) {
        contents.EnaSrdUdpSpecification = de_AttachmentEnaSrdUdpSpecification(output["enaSrdUdpSpecification"], context);
    }
    return contents;
};
const de_AttachmentEnaSrdUdpSpecification = (output, context) => {
    const contents = {};
    if (output["enaSrdUdpEnabled"] !== undefined) {
        contents.EnaSrdUdpEnabled = __parseBoolean(output["enaSrdUdpEnabled"]);
    }
    return contents;
};
const de_AttachNetworkInterfaceResult = (output, context) => {
    const contents = {};
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    return contents;
};
const de_AttachVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessTrustProvider"] !== undefined) {
        contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(output["verifiedAccessTrustProvider"], context);
    }
    if (output["verifiedAccessInstance"] !== undefined) {
        contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
    }
    return contents;
};
const de_AttachVpnGatewayResult = (output, context) => {
    const contents = {};
    if (output["attachment"] !== undefined) {
        contents.VpcAttachment = de_VpcAttachment(output["attachment"], context);
    }
    return contents;
};
const de_AttributeBooleanValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __parseBoolean(output["value"]);
    }
    return contents;
};
const de_AttributeValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_AuthorizationRule = (output, context) => {
    const contents = {};
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["accessAll"] !== undefined) {
        contents.AccessAll = __parseBoolean(output["accessAll"]);
    }
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
const de_AuthorizationRuleSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthorizationRule(entry, context);
    });
};
const de_AuthorizeClientVpnIngressResult = (output, context) => {
    const contents = {};
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
const de_AuthorizeSecurityGroupEgressResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = de_SecurityGroupRuleList(__getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]), context);
    }
    return contents;
};
const de_AuthorizeSecurityGroupIngressResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = de_SecurityGroupRuleList(__getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]), context);
    }
    return contents;
};
const de_AvailabilityZone = (output, context) => {
    const contents = {};
    if (output["zoneState"] !== undefined) {
        contents.State = __expectString(output["zoneState"]);
    }
    if (output["optInStatus"] !== undefined) {
        contents.OptInStatus = __expectString(output["optInStatus"]);
    }
    if (output.messageSet === "") {
        contents.Messages = [];
    }
    else if (output["messageSet"] !== undefined && output["messageSet"]["item"] !== undefined) {
        contents.Messages = de_AvailabilityZoneMessageList(__getArrayIfSingleItem(output["messageSet"]["item"]), context);
    }
    if (output["regionName"] !== undefined) {
        contents.RegionName = __expectString(output["regionName"]);
    }
    if (output["zoneName"] !== undefined) {
        contents.ZoneName = __expectString(output["zoneName"]);
    }
    if (output["zoneId"] !== undefined) {
        contents.ZoneId = __expectString(output["zoneId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["zoneType"] !== undefined) {
        contents.ZoneType = __expectString(output["zoneType"]);
    }
    if (output["parentZoneName"] !== undefined) {
        contents.ParentZoneName = __expectString(output["parentZoneName"]);
    }
    if (output["parentZoneId"] !== undefined) {
        contents.ParentZoneId = __expectString(output["parentZoneId"]);
    }
    return contents;
};
const de_AvailabilityZoneList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailabilityZone(entry, context);
    });
};
const de_AvailabilityZoneMessage = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_AvailabilityZoneMessageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailabilityZoneMessage(entry, context);
    });
};
const de_AvailableCapacity = (output, context) => {
    const contents = {};
    if (output.availableInstanceCapacity === "") {
        contents.AvailableInstanceCapacity = [];
    }
    else if (output["availableInstanceCapacity"] !== undefined &&
        output["availableInstanceCapacity"]["item"] !== undefined) {
        contents.AvailableInstanceCapacity = de_AvailableInstanceCapacityList(__getArrayIfSingleItem(output["availableInstanceCapacity"]["item"]), context);
    }
    if (output["availableVCpus"] !== undefined) {
        contents.AvailableVCpus = __strictParseInt32(output["availableVCpus"]);
    }
    return contents;
};
const de_AvailableInstanceCapacityList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceCapacity(entry, context);
    });
};
const de_BaselineEbsBandwidthMbps = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
const de_BlockDeviceMapping = (output, context) => {
    const contents = {};
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["virtualName"] !== undefined) {
        contents.VirtualName = __expectString(output["virtualName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = de_EbsBlockDevice(output["ebs"], context);
    }
    if (output["noDevice"] !== undefined) {
        contents.NoDevice = __expectString(output["noDevice"]);
    }
    return contents;
};
const de_BlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlockDeviceMapping(entry, context);
    });
};
const de_BootModeTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_BundleInstanceResult = (output, context) => {
    const contents = {};
    if (output["bundleInstanceTask"] !== undefined) {
        contents.BundleTask = de_BundleTask(output["bundleInstanceTask"], context);
    }
    return contents;
};
const de_BundleTask = (output, context) => {
    const contents = {};
    if (output["bundleId"] !== undefined) {
        contents.BundleId = __expectString(output["bundleId"]);
    }
    if (output["error"] !== undefined) {
        contents.BundleTaskError = de_BundleTaskError(output["error"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["storage"] !== undefined) {
        contents.Storage = de_Storage(output["storage"], context);
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateTime"]));
    }
    return contents;
};
const de_BundleTaskError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_BundleTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BundleTask(entry, context);
    });
};
const de_ByoipCidr = (output, context) => {
    const contents = {};
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_ByoipCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ByoipCidr(entry, context);
    });
};
const de_CancelBundleTaskResult = (output, context) => {
    const contents = {};
    if (output["bundleInstanceTask"] !== undefined) {
        contents.BundleTask = de_BundleTask(output["bundleInstanceTask"], context);
    }
    return contents;
};
const de_CancelCapacityReservationFleetError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_CancelCapacityReservationFleetsResult = (output, context) => {
    const contents = {};
    if (output.successfulFleetCancellationSet === "") {
        contents.SuccessfulFleetCancellations = [];
    }
    else if (output["successfulFleetCancellationSet"] !== undefined &&
        output["successfulFleetCancellationSet"]["item"] !== undefined) {
        contents.SuccessfulFleetCancellations = de_CapacityReservationFleetCancellationStateSet(__getArrayIfSingleItem(output["successfulFleetCancellationSet"]["item"]), context);
    }
    if (output.failedFleetCancellationSet === "") {
        contents.FailedFleetCancellations = [];
    }
    else if (output["failedFleetCancellationSet"] !== undefined &&
        output["failedFleetCancellationSet"]["item"] !== undefined) {
        contents.FailedFleetCancellations = de_FailedCapacityReservationFleetCancellationResultSet(__getArrayIfSingleItem(output["failedFleetCancellationSet"]["item"]), context);
    }
    return contents;
};
const de_CancelCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_CancelImageLaunchPermissionResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_CancelImportTaskResult = (output, context) => {
    const contents = {};
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["previousState"] !== undefined) {
        contents.PreviousState = __expectString(output["previousState"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_CancelledSpotInstanceRequest = (output, context) => {
    const contents = {};
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_CancelledSpotInstanceRequestList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CancelledSpotInstanceRequest(entry, context);
    });
};
const de_CancelReservedInstancesListingResult = (output, context) => {
    const contents = {};
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = de_ReservedInstancesListingList(__getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
const de_CancelSpotFleetRequestsError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_CancelSpotFleetRequestsErrorItem = (output, context) => {
    const contents = {};
    if (output["error"] !== undefined) {
        contents.Error = de_CancelSpotFleetRequestsError(output["error"], context);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
const de_CancelSpotFleetRequestsErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CancelSpotFleetRequestsErrorItem(entry, context);
    });
};
const de_CancelSpotFleetRequestsResponse = (output, context) => {
    const contents = {};
    if (output.successfulFleetRequestSet === "") {
        contents.SuccessfulFleetRequests = [];
    }
    else if (output["successfulFleetRequestSet"] !== undefined &&
        output["successfulFleetRequestSet"]["item"] !== undefined) {
        contents.SuccessfulFleetRequests = de_CancelSpotFleetRequestsSuccessSet(__getArrayIfSingleItem(output["successfulFleetRequestSet"]["item"]), context);
    }
    if (output.unsuccessfulFleetRequestSet === "") {
        contents.UnsuccessfulFleetRequests = [];
    }
    else if (output["unsuccessfulFleetRequestSet"] !== undefined &&
        output["unsuccessfulFleetRequestSet"]["item"] !== undefined) {
        contents.UnsuccessfulFleetRequests = de_CancelSpotFleetRequestsErrorSet(__getArrayIfSingleItem(output["unsuccessfulFleetRequestSet"]["item"]), context);
    }
    return contents;
};
const de_CancelSpotFleetRequestsSuccessItem = (output, context) => {
    const contents = {};
    if (output["currentSpotFleetRequestState"] !== undefined) {
        contents.CurrentSpotFleetRequestState = __expectString(output["currentSpotFleetRequestState"]);
    }
    if (output["previousSpotFleetRequestState"] !== undefined) {
        contents.PreviousSpotFleetRequestState = __expectString(output["previousSpotFleetRequestState"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
const de_CancelSpotFleetRequestsSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CancelSpotFleetRequestsSuccessItem(entry, context);
    });
};
const de_CancelSpotInstanceRequestsResult = (output, context) => {
    const contents = {};
    if (output.spotInstanceRequestSet === "") {
        contents.CancelledSpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.CancelledSpotInstanceRequests = de_CancelledSpotInstanceRequestList(__getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]), context);
    }
    return contents;
};
const de_CapacityAllocation = (output, context) => {
    const contents = {};
    if (output["allocationType"] !== undefined) {
        contents.AllocationType = __expectString(output["allocationType"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    return contents;
};
const de_CapacityAllocations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityAllocation(entry, context);
    });
};
const de_CapacityReservation = (output, context) => {
    const contents = {};
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["capacityReservationArn"] !== undefined) {
        contents.CapacityReservationArn = __expectString(output["capacityReservationArn"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["instancePlatform"] !== undefined) {
        contents.InstancePlatform = __expectString(output["instancePlatform"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["ephemeralStorage"] !== undefined) {
        contents.EphemeralStorage = __parseBoolean(output["ephemeralStorage"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
    }
    if (output["endDateType"] !== undefined) {
        contents.EndDateType = __expectString(output["endDateType"]);
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["placementGroupArn"] !== undefined) {
        contents.PlacementGroupArn = __expectString(output["placementGroupArn"]);
    }
    if (output.capacityAllocationSet === "") {
        contents.CapacityAllocations = [];
    }
    else if (output["capacityAllocationSet"] !== undefined && output["capacityAllocationSet"]["item"] !== undefined) {
        contents.CapacityAllocations = de_CapacityAllocations(__getArrayIfSingleItem(output["capacityAllocationSet"]["item"]), context);
    }
    return contents;
};
const de_CapacityReservationFleet = (output, context) => {
    const contents = {};
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["capacityReservationFleetArn"] !== undefined) {
        contents.CapacityReservationFleetArn = __expectString(output["capacityReservationFleetArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]);
    }
    if (output["totalFulfilledCapacity"] !== undefined) {
        contents.TotalFulfilledCapacity = __strictParseFloat(output["totalFulfilledCapacity"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
    }
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output.instanceTypeSpecificationSet === "") {
        contents.InstanceTypeSpecifications = [];
    }
    else if (output["instanceTypeSpecificationSet"] !== undefined &&
        output["instanceTypeSpecificationSet"]["item"] !== undefined) {
        contents.InstanceTypeSpecifications = de_FleetCapacityReservationSet(__getArrayIfSingleItem(output["instanceTypeSpecificationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_CapacityReservationFleetCancellationState = (output, context) => {
    const contents = {};
    if (output["currentFleetState"] !== undefined) {
        contents.CurrentFleetState = __expectString(output["currentFleetState"]);
    }
    if (output["previousFleetState"] !== undefined) {
        contents.PreviousFleetState = __expectString(output["previousFleetState"]);
    }
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    return contents;
};
const de_CapacityReservationFleetCancellationStateSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationFleetCancellationState(entry, context);
    });
};
const de_CapacityReservationFleetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationFleet(entry, context);
    });
};
const de_CapacityReservationGroup = (output, context) => {
    const contents = {};
    if (output["groupArn"] !== undefined) {
        contents.GroupArn = __expectString(output["groupArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
const de_CapacityReservationGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationGroup(entry, context);
    });
};
const de_CapacityReservationOptions = (output, context) => {
    const contents = {};
    if (output["usageStrategy"] !== undefined) {
        contents.UsageStrategy = __expectString(output["usageStrategy"]);
    }
    return contents;
};
const de_CapacityReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservation(entry, context);
    });
};
const de_CapacityReservationSpecificationResponse = (output, context) => {
    const contents = {};
    if (output["capacityReservationPreference"] !== undefined) {
        contents.CapacityReservationPreference = __expectString(output["capacityReservationPreference"]);
    }
    if (output["capacityReservationTarget"] !== undefined) {
        contents.CapacityReservationTarget = de_CapacityReservationTargetResponse(output["capacityReservationTarget"], context);
    }
    return contents;
};
const de_CapacityReservationTargetResponse = (output, context) => {
    const contents = {};
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["capacityReservationResourceGroupArn"] !== undefined) {
        contents.CapacityReservationResourceGroupArn = __expectString(output["capacityReservationResourceGroupArn"]);
    }
    return contents;
};
const de_CarrierGateway = (output, context) => {
    const contents = {};
    if (output["carrierGatewayId"] !== undefined) {
        contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_CarrierGatewaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CarrierGateway(entry, context);
    });
};
const de_CertificateAuthentication = (output, context) => {
    const contents = {};
    if (output["clientRootCertificateChain"] !== undefined) {
        contents.ClientRootCertificateChain = __expectString(output["clientRootCertificateChain"]);
    }
    return contents;
};
const de_CidrBlock = (output, context) => {
    const contents = {};
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    return contents;
};
const de_CidrBlockSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CidrBlock(entry, context);
    });
};
const de_ClassicLinkDnsSupport = (output, context) => {
    const contents = {};
    if (output["classicLinkDnsSupported"] !== undefined) {
        contents.ClassicLinkDnsSupported = __parseBoolean(output["classicLinkDnsSupported"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_ClassicLinkDnsSupportList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClassicLinkDnsSupport(entry, context);
    });
};
const de_ClassicLinkInstance = (output, context) => {
    const contents = {};
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_ClassicLinkInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClassicLinkInstance(entry, context);
    });
};
const de_ClassicLoadBalancer = (output, context) => {
    const contents = {};
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
const de_ClassicLoadBalancers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClassicLoadBalancer(entry, context);
    });
};
const de_ClassicLoadBalancersConfig = (output, context) => {
    const contents = {};
    if (output.classicLoadBalancers === "") {
        contents.ClassicLoadBalancers = [];
    }
    else if (output["classicLoadBalancers"] !== undefined && output["classicLoadBalancers"]["item"] !== undefined) {
        contents.ClassicLoadBalancers = de_ClassicLoadBalancers(__getArrayIfSingleItem(output["classicLoadBalancers"]["item"]), context);
    }
    return contents;
};
const de_ClientCertificateRevocationListStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ClientConnectResponseOptions = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    if (output["lambdaFunctionArn"] !== undefined) {
        contents.LambdaFunctionArn = __expectString(output["lambdaFunctionArn"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnEndpointAttributeStatus(output["status"], context);
    }
    return contents;
};
const de_ClientLoginBannerResponseOptions = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    if (output["bannerText"] !== undefined) {
        contents.BannerText = __expectString(output["bannerText"]);
    }
    return contents;
};
const de_ClientVpnAuthentication = (output, context) => {
    const contents = {};
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["activeDirectory"] !== undefined) {
        contents.ActiveDirectory = de_DirectoryServiceAuthentication(output["activeDirectory"], context);
    }
    if (output["mutualAuthentication"] !== undefined) {
        contents.MutualAuthentication = de_CertificateAuthentication(output["mutualAuthentication"], context);
    }
    if (output["federatedAuthentication"] !== undefined) {
        contents.FederatedAuthentication = de_FederatedAuthentication(output["federatedAuthentication"], context);
    }
    return contents;
};
const de_ClientVpnAuthenticationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnAuthentication(entry, context);
    });
};
const de_ClientVpnAuthorizationRuleStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ClientVpnConnection = (output, context) => {
    const contents = {};
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectString(output["timestamp"]);
    }
    if (output["connectionId"] !== undefined) {
        contents.ConnectionId = __expectString(output["connectionId"]);
    }
    if (output["username"] !== undefined) {
        contents.Username = __expectString(output["username"]);
    }
    if (output["connectionEstablishedTime"] !== undefined) {
        contents.ConnectionEstablishedTime = __expectString(output["connectionEstablishedTime"]);
    }
    if (output["ingressBytes"] !== undefined) {
        contents.IngressBytes = __expectString(output["ingressBytes"]);
    }
    if (output["egressBytes"] !== undefined) {
        contents.EgressBytes = __expectString(output["egressBytes"]);
    }
    if (output["ingressPackets"] !== undefined) {
        contents.IngressPackets = __expectString(output["ingressPackets"]);
    }
    if (output["egressPackets"] !== undefined) {
        contents.EgressPackets = __expectString(output["egressPackets"]);
    }
    if (output["clientIp"] !== undefined) {
        contents.ClientIp = __expectString(output["clientIp"]);
    }
    if (output["commonName"] !== undefined) {
        contents.CommonName = __expectString(output["commonName"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnConnectionStatus(output["status"], context);
    }
    if (output["connectionEndTime"] !== undefined) {
        contents.ConnectionEndTime = __expectString(output["connectionEndTime"]);
    }
    if (output.postureComplianceStatusSet === "") {
        contents.PostureComplianceStatuses = [];
    }
    else if (output["postureComplianceStatusSet"] !== undefined &&
        output["postureComplianceStatusSet"]["item"] !== undefined) {
        contents.PostureComplianceStatuses = de_ValueStringList(__getArrayIfSingleItem(output["postureComplianceStatusSet"]["item"]), context);
    }
    return contents;
};
const de_ClientVpnConnectionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnConnection(entry, context);
    });
};
const de_ClientVpnConnectionStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ClientVpnEndpoint = (output, context) => {
    const contents = {};
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnEndpointStatus(output["status"], context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectString(output["creationTime"]);
    }
    if (output["deletionTime"] !== undefined) {
        contents.DeletionTime = __expectString(output["deletionTime"]);
    }
    if (output["dnsName"] !== undefined) {
        contents.DnsName = __expectString(output["dnsName"]);
    }
    if (output["clientCidrBlock"] !== undefined) {
        contents.ClientCidrBlock = __expectString(output["clientCidrBlock"]);
    }
    if (output.dnsServer === "") {
        contents.DnsServers = [];
    }
    else if (output["dnsServer"] !== undefined && output["dnsServer"]["item"] !== undefined) {
        contents.DnsServers = de_ValueStringList(__getArrayIfSingleItem(output["dnsServer"]["item"]), context);
    }
    if (output["splitTunnel"] !== undefined) {
        contents.SplitTunnel = __parseBoolean(output["splitTunnel"]);
    }
    if (output["vpnProtocol"] !== undefined) {
        contents.VpnProtocol = __expectString(output["vpnProtocol"]);
    }
    if (output["transportProtocol"] !== undefined) {
        contents.TransportProtocol = __expectString(output["transportProtocol"]);
    }
    if (output["vpnPort"] !== undefined) {
        contents.VpnPort = __strictParseInt32(output["vpnPort"]);
    }
    if (output.associatedTargetNetwork === "") {
        contents.AssociatedTargetNetworks = [];
    }
    else if (output["associatedTargetNetwork"] !== undefined &&
        output["associatedTargetNetwork"]["item"] !== undefined) {
        contents.AssociatedTargetNetworks = de_AssociatedTargetNetworkSet(__getArrayIfSingleItem(output["associatedTargetNetwork"]["item"]), context);
    }
    if (output["serverCertificateArn"] !== undefined) {
        contents.ServerCertificateArn = __expectString(output["serverCertificateArn"]);
    }
    if (output.authenticationOptions === "") {
        contents.AuthenticationOptions = [];
    }
    else if (output["authenticationOptions"] !== undefined && output["authenticationOptions"]["item"] !== undefined) {
        contents.AuthenticationOptions = de_ClientVpnAuthenticationList(__getArrayIfSingleItem(output["authenticationOptions"]["item"]), context);
    }
    if (output["connectionLogOptions"] !== undefined) {
        contents.ConnectionLogOptions = de_ConnectionLogResponseOptions(output["connectionLogOptions"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.securityGroupIdSet === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
        contents.SecurityGroupIds = de_ClientVpnSecurityGroupIdSet(__getArrayIfSingleItem(output["securityGroupIdSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["selfServicePortalUrl"] !== undefined) {
        contents.SelfServicePortalUrl = __expectString(output["selfServicePortalUrl"]);
    }
    if (output["clientConnectOptions"] !== undefined) {
        contents.ClientConnectOptions = de_ClientConnectResponseOptions(output["clientConnectOptions"], context);
    }
    if (output["sessionTimeoutHours"] !== undefined) {
        contents.SessionTimeoutHours = __strictParseInt32(output["sessionTimeoutHours"]);
    }
    if (output["clientLoginBannerOptions"] !== undefined) {
        contents.ClientLoginBannerOptions = de_ClientLoginBannerResponseOptions(output["clientLoginBannerOptions"], context);
    }
    return contents;
};
const de_ClientVpnEndpointAttributeStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ClientVpnEndpointStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ClientVpnRoute = (output, context) => {
    const contents = {};
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["targetSubnet"] !== undefined) {
        contents.TargetSubnet = __expectString(output["targetSubnet"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = __expectString(output["origin"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnRouteStatus(output["status"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
const de_ClientVpnRouteSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnRoute(entry, context);
    });
};
const de_ClientVpnRouteStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ClientVpnSecurityGroupIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_CloudWatchLogOptions = (output, context) => {
    const contents = {};
    if (output["logEnabled"] !== undefined) {
        contents.LogEnabled = __parseBoolean(output["logEnabled"]);
    }
    if (output["logGroupArn"] !== undefined) {
        contents.LogGroupArn = __expectString(output["logGroupArn"]);
    }
    if (output["logOutputFormat"] !== undefined) {
        contents.LogOutputFormat = __expectString(output["logOutputFormat"]);
    }
    return contents;
};
const de_CoipAddressUsage = (output, context) => {
    const contents = {};
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["awsAccountId"] !== undefined) {
        contents.AwsAccountId = __expectString(output["awsAccountId"]);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = __expectString(output["awsService"]);
    }
    if (output["coIp"] !== undefined) {
        contents.CoIp = __expectString(output["coIp"]);
    }
    return contents;
};
const de_CoipAddressUsageSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoipAddressUsage(entry, context);
    });
};
const de_CoipCidr = (output, context) => {
    const contents = {};
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["coipPoolId"] !== undefined) {
        contents.CoipPoolId = __expectString(output["coipPoolId"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    return contents;
};
const de_CoipPool = (output, context) => {
    const contents = {};
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output.poolCidrSet === "") {
        contents.PoolCidrs = [];
    }
    else if (output["poolCidrSet"] !== undefined && output["poolCidrSet"]["item"] !== undefined) {
        contents.PoolCidrs = de_ValueStringList(__getArrayIfSingleItem(output["poolCidrSet"]["item"]), context);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["poolArn"] !== undefined) {
        contents.PoolArn = __expectString(output["poolArn"]);
    }
    return contents;
};
const de_CoipPoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoipPool(entry, context);
    });
};
const de_ConfirmProductInstanceResult = (output, context) => {
    const contents = {};
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ConnectionLogResponseOptions = (output, context) => {
    const contents = {};
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["CloudwatchLogGroup"] !== undefined) {
        contents.CloudwatchLogGroup = __expectString(output["CloudwatchLogGroup"]);
    }
    if (output["CloudwatchLogStream"] !== undefined) {
        contents.CloudwatchLogStream = __expectString(output["CloudwatchLogStream"]);
    }
    return contents;
};
const de_ConnectionNotification = (output, context) => {
    const contents = {};
    if (output["connectionNotificationId"] !== undefined) {
        contents.ConnectionNotificationId = __expectString(output["connectionNotificationId"]);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
    }
    if (output["connectionNotificationType"] !== undefined) {
        contents.ConnectionNotificationType = __expectString(output["connectionNotificationType"]);
    }
    if (output["connectionNotificationArn"] !== undefined) {
        contents.ConnectionNotificationArn = __expectString(output["connectionNotificationArn"]);
    }
    if (output.connectionEvents === "") {
        contents.ConnectionEvents = [];
    }
    else if (output["connectionEvents"] !== undefined && output["connectionEvents"]["item"] !== undefined) {
        contents.ConnectionEvents = de_ValueStringList(__getArrayIfSingleItem(output["connectionEvents"]["item"]), context);
    }
    if (output["connectionNotificationState"] !== undefined) {
        contents.ConnectionNotificationState = __expectString(output["connectionNotificationState"]);
    }
    return contents;
};
const de_ConnectionNotificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectionNotification(entry, context);
    });
};
const de_ConversionTask = (output, context) => {
    const contents = {};
    if (output["conversionTaskId"] !== undefined) {
        contents.ConversionTaskId = __expectString(output["conversionTaskId"]);
    }
    if (output["expirationTime"] !== undefined) {
        contents.ExpirationTime = __expectString(output["expirationTime"]);
    }
    if (output["importInstance"] !== undefined) {
        contents.ImportInstance = de_ImportInstanceTaskDetails(output["importInstance"], context);
    }
    if (output["importVolume"] !== undefined) {
        contents.ImportVolume = de_ImportVolumeTaskDetails(output["importVolume"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_CopyFpgaImageResult = (output, context) => {
    const contents = {};
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    return contents;
};
const de_CopyImageResult = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
const de_CopySnapshotResult = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_CoreCountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __strictParseInt32(entry);
    });
};
const de_CpuManufacturerSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_CpuOptions = (output, context) => {
    const contents = {};
    if (output["coreCount"] !== undefined) {
        contents.CoreCount = __strictParseInt32(output["coreCount"]);
    }
    if (output["threadsPerCore"] !== undefined) {
        contents.ThreadsPerCore = __strictParseInt32(output["threadsPerCore"]);
    }
    if (output["amdSevSnp"] !== undefined) {
        contents.AmdSevSnp = __expectString(output["amdSevSnp"]);
    }
    return contents;
};
const de_CreateCapacityReservationFleetResult = (output, context) => {
    const contents = {};
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]);
    }
    if (output["totalFulfilledCapacity"] !== undefined) {
        contents.TotalFulfilledCapacity = __strictParseFloat(output["totalFulfilledCapacity"]);
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
    }
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output.fleetCapacityReservationSet === "") {
        contents.FleetCapacityReservations = [];
    }
    else if (output["fleetCapacityReservationSet"] !== undefined &&
        output["fleetCapacityReservationSet"]["item"] !== undefined) {
        contents.FleetCapacityReservations = de_FleetCapacityReservationSet(__getArrayIfSingleItem(output["fleetCapacityReservationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_CreateCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output["capacityReservation"] !== undefined) {
        contents.CapacityReservation = de_CapacityReservation(output["capacityReservation"], context);
    }
    return contents;
};
const de_CreateCarrierGatewayResult = (output, context) => {
    const contents = {};
    if (output["carrierGateway"] !== undefined) {
        contents.CarrierGateway = de_CarrierGateway(output["carrierGateway"], context);
    }
    return contents;
};
const de_CreateClientVpnEndpointResult = (output, context) => {
    const contents = {};
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnEndpointStatus(output["status"], context);
    }
    if (output["dnsName"] !== undefined) {
        contents.DnsName = __expectString(output["dnsName"]);
    }
    return contents;
};
const de_CreateClientVpnRouteResult = (output, context) => {
    const contents = {};
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnRouteStatus(output["status"], context);
    }
    return contents;
};
const de_CreateCoipCidrResult = (output, context) => {
    const contents = {};
    if (output["coipCidr"] !== undefined) {
        contents.CoipCidr = de_CoipCidr(output["coipCidr"], context);
    }
    return contents;
};
const de_CreateCoipPoolResult = (output, context) => {
    const contents = {};
    if (output["coipPool"] !== undefined) {
        contents.CoipPool = de_CoipPool(output["coipPool"], context);
    }
    return contents;
};
const de_CreateCustomerGatewayResult = (output, context) => {
    const contents = {};
    if (output["customerGateway"] !== undefined) {
        contents.CustomerGateway = de_CustomerGateway(output["customerGateway"], context);
    }
    return contents;
};
const de_CreateDefaultSubnetResult = (output, context) => {
    const contents = {};
    if (output["subnet"] !== undefined) {
        contents.Subnet = de_Subnet(output["subnet"], context);
    }
    return contents;
};
const de_CreateDefaultVpcResult = (output, context) => {
    const contents = {};
    if (output["vpc"] !== undefined) {
        contents.Vpc = de_Vpc(output["vpc"], context);
    }
    return contents;
};
const de_CreateDhcpOptionsResult = (output, context) => {
    const contents = {};
    if (output["dhcpOptions"] !== undefined) {
        contents.DhcpOptions = de_DhcpOptions(output["dhcpOptions"], context);
    }
    return contents;
};
const de_CreateEgressOnlyInternetGatewayResult = (output, context) => {
    const contents = {};
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["egressOnlyInternetGateway"] !== undefined) {
        contents.EgressOnlyInternetGateway = de_EgressOnlyInternetGateway(output["egressOnlyInternetGateway"], context);
    }
    return contents;
};
const de_CreateFleetError = (output, context) => {
    const contents = {};
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output["errorCode"] !== undefined) {
        contents.ErrorCode = __expectString(output["errorCode"]);
    }
    if (output["errorMessage"] !== undefined) {
        contents.ErrorMessage = __expectString(output["errorMessage"]);
    }
    return contents;
};
const de_CreateFleetErrorsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CreateFleetError(entry, context);
    });
};
const de_CreateFleetInstance = (output, context) => {
    const contents = {};
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output.instanceIds === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
        contents.InstanceIds = de_InstanceIdsSet(__getArrayIfSingleItem(output["instanceIds"]["item"]), context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    return contents;
};
const de_CreateFleetInstancesSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CreateFleetInstance(entry, context);
    });
};
const de_CreateFleetResult = (output, context) => {
    const contents = {};
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = de_CreateFleetErrorsSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
    }
    if (output.fleetInstanceSet === "") {
        contents.Instances = [];
    }
    else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
        contents.Instances = de_CreateFleetInstancesSet(__getArrayIfSingleItem(output["fleetInstanceSet"]["item"]), context);
    }
    return contents;
};
const de_CreateFlowLogsResult = (output, context) => {
    const contents = {};
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output.flowLogIdSet === "") {
        contents.FlowLogIds = [];
    }
    else if (output["flowLogIdSet"] !== undefined && output["flowLogIdSet"]["item"] !== undefined) {
        contents.FlowLogIds = de_ValueStringList(__getArrayIfSingleItem(output["flowLogIdSet"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_CreateFpgaImageResult = (output, context) => {
    const contents = {};
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    if (output["fpgaImageGlobalId"] !== undefined) {
        contents.FpgaImageGlobalId = __expectString(output["fpgaImageGlobalId"]);
    }
    return contents;
};
const de_CreateImageResult = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
const de_CreateInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const de_CreateInstanceExportTaskResult = (output, context) => {
    const contents = {};
    if (output["exportTask"] !== undefined) {
        contents.ExportTask = de_ExportTask(output["exportTask"], context);
    }
    return contents;
};
const de_CreateInternetGatewayResult = (output, context) => {
    const contents = {};
    if (output["internetGateway"] !== undefined) {
        contents.InternetGateway = de_InternetGateway(output["internetGateway"], context);
    }
    return contents;
};
const de_CreateIpamPoolResult = (output, context) => {
    const contents = {};
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = de_IpamPool(output["ipamPool"], context);
    }
    return contents;
};
const de_CreateIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output["ipamResourceDiscovery"] !== undefined) {
        contents.IpamResourceDiscovery = de_IpamResourceDiscovery(output["ipamResourceDiscovery"], context);
    }
    return contents;
};
const de_CreateIpamResult = (output, context) => {
    const contents = {};
    if (output["ipam"] !== undefined) {
        contents.Ipam = de_Ipam(output["ipam"], context);
    }
    return contents;
};
const de_CreateIpamScopeResult = (output, context) => {
    const contents = {};
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = de_IpamScope(output["ipamScope"], context);
    }
    return contents;
};
const de_CreateLaunchTemplateResult = (output, context) => {
    const contents = {};
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = de_LaunchTemplate(output["launchTemplate"], context);
    }
    if (output["warning"] !== undefined) {
        contents.Warning = de_ValidationWarning(output["warning"], context);
    }
    return contents;
};
const de_CreateLaunchTemplateVersionResult = (output, context) => {
    const contents = {};
    if (output["launchTemplateVersion"] !== undefined) {
        contents.LaunchTemplateVersion = de_LaunchTemplateVersion(output["launchTemplateVersion"], context);
    }
    if (output["warning"] !== undefined) {
        contents.Warning = de_ValidationWarning(output["warning"], context);
    }
    return contents;
};
const de_CreateLocalGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output["route"] !== undefined) {
        contents.Route = de_LocalGatewayRoute(output["route"], context);
    }
    return contents;
};
const de_CreateLocalGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTable"] !== undefined) {
        contents.LocalGatewayRouteTable = de_LocalGatewayRouteTable(output["localGatewayRouteTable"], context);
    }
    return contents;
};
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTableVirtualInterfaceGroupAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociation =
            de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output["localGatewayRouteTableVirtualInterfaceGroupAssociation"], context);
    }
    return contents;
};
const de_CreateLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociation = de_LocalGatewayRouteTableVpcAssociation(output["localGatewayRouteTableVpcAssociation"], context);
    }
    return contents;
};
const de_CreateManagedPrefixListResult = (output, context) => {
    const contents = {};
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const de_CreateNatGatewayResult = (output, context) => {
    const contents = {};
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["natGateway"] !== undefined) {
        contents.NatGateway = de_NatGateway(output["natGateway"], context);
    }
    return contents;
};
const de_CreateNetworkAclResult = (output, context) => {
    const contents = {};
    if (output["networkAcl"] !== undefined) {
        contents.NetworkAcl = de_NetworkAcl(output["networkAcl"], context);
    }
    return contents;
};
const de_CreateNetworkInsightsAccessScopeResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScope"] !== undefined) {
        contents.NetworkInsightsAccessScope = de_NetworkInsightsAccessScope(output["networkInsightsAccessScope"], context);
    }
    if (output["networkInsightsAccessScopeContent"] !== undefined) {
        contents.NetworkInsightsAccessScopeContent = de_NetworkInsightsAccessScopeContent(output["networkInsightsAccessScopeContent"], context);
    }
    return contents;
};
const de_CreateNetworkInsightsPathResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsPath"] !== undefined) {
        contents.NetworkInsightsPath = de_NetworkInsightsPath(output["networkInsightsPath"], context);
    }
    return contents;
};
const de_CreateNetworkInterfacePermissionResult = (output, context) => {
    const contents = {};
    if (output["interfacePermission"] !== undefined) {
        contents.InterfacePermission = de_NetworkInterfacePermission(output["interfacePermission"], context);
    }
    return contents;
};
const de_CreateNetworkInterfaceResult = (output, context) => {
    const contents = {};
    if (output["networkInterface"] !== undefined) {
        contents.NetworkInterface = de_NetworkInterface(output["networkInterface"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreatePlacementGroupResult = (output, context) => {
    const contents = {};
    if (output["placementGroup"] !== undefined) {
        contents.PlacementGroup = de_PlacementGroup(output["placementGroup"], context);
    }
    return contents;
};
const de_CreatePublicIpv4PoolResult = (output, context) => {
    const contents = {};
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    return contents;
};
const de_CreateReplaceRootVolumeTaskResult = (output, context) => {
    const contents = {};
    if (output["replaceRootVolumeTask"] !== undefined) {
        contents.ReplaceRootVolumeTask = de_ReplaceRootVolumeTask(output["replaceRootVolumeTask"], context);
    }
    return contents;
};
const de_CreateReservedInstancesListingResult = (output, context) => {
    const contents = {};
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = de_ReservedInstancesListingList(__getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
const de_CreateRestoreImageTaskResult = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
const de_CreateRouteResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_CreateRouteTableResult = (output, context) => {
    const contents = {};
    if (output["routeTable"] !== undefined) {
        contents.RouteTable = de_RouteTable(output["routeTable"], context);
    }
    return contents;
};
const de_CreateSecurityGroupResult = (output, context) => {
    const contents = {};
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_CreateSnapshotsResult = (output, context) => {
    const contents = {};
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = de_SnapshotSet(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
    }
    return contents;
};
const de_CreateSpotDatafeedSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["spotDatafeedSubscription"] !== undefined) {
        contents.SpotDatafeedSubscription = de_SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
    }
    return contents;
};
const de_CreateStoreImageTaskResult = (output, context) => {
    const contents = {};
    if (output["objectKey"] !== undefined) {
        contents.ObjectKey = __expectString(output["objectKey"]);
    }
    return contents;
};
const de_CreateSubnetCidrReservationResult = (output, context) => {
    const contents = {};
    if (output["subnetCidrReservation"] !== undefined) {
        contents.SubnetCidrReservation = de_SubnetCidrReservation(output["subnetCidrReservation"], context);
    }
    return contents;
};
const de_CreateSubnetResult = (output, context) => {
    const contents = {};
    if (output["subnet"] !== undefined) {
        contents.Subnet = de_Subnet(output["subnet"], context);
    }
    return contents;
};
const de_CreateTrafficMirrorFilterResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilter"] !== undefined) {
        contents.TrafficMirrorFilter = de_TrafficMirrorFilter(output["trafficMirrorFilter"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreateTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilterRule"] !== undefined) {
        contents.TrafficMirrorFilterRule = de_TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreateTrafficMirrorSessionResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorSession"] !== undefined) {
        contents.TrafficMirrorSession = de_TrafficMirrorSession(output["trafficMirrorSession"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreateTrafficMirrorTargetResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorTarget"] !== undefined) {
        contents.TrafficMirrorTarget = de_TrafficMirrorTarget(output["trafficMirrorTarget"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreateTransitGatewayConnectPeerResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayConnectPeer"] !== undefined) {
        contents.TransitGatewayConnectPeer = de_TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
    }
    return contents;
};
const de_CreateTransitGatewayConnectResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayConnect"] !== undefined) {
        contents.TransitGatewayConnect = de_TransitGatewayConnect(output["transitGatewayConnect"], context);
    }
    return contents;
};
const de_CreateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomain"] !== undefined) {
        contents.TransitGatewayMulticastDomain = de_TransitGatewayMulticastDomain(output["transitGatewayMulticastDomain"], context);
    }
    return contents;
};
const de_CreateTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const de_CreateTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPolicyTable"] !== undefined) {
        contents.TransitGatewayPolicyTable = de_TransitGatewayPolicyTable(output["transitGatewayPolicyTable"], context);
    }
    return contents;
};
const de_CreateTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = de_TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
const de_CreateTransitGatewayResult = (output, context) => {
    const contents = {};
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = de_TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
const de_CreateTransitGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output["route"] !== undefined) {
        contents.Route = de_TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
const de_CreateTransitGatewayRouteTableAnnouncementResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableAnnouncement"] !== undefined) {
        contents.TransitGatewayRouteTableAnnouncement = de_TransitGatewayRouteTableAnnouncement(output["transitGatewayRouteTableAnnouncement"], context);
    }
    return contents;
};
const de_CreateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = de_TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
    }
    return contents;
};
const de_CreateTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const de_CreateVerifiedAccessEndpointResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessEndpoint"] !== undefined) {
        contents.VerifiedAccessEndpoint = de_VerifiedAccessEndpoint(output["verifiedAccessEndpoint"], context);
    }
    return contents;
};
const de_CreateVerifiedAccessGroupResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessGroup"] !== undefined) {
        contents.VerifiedAccessGroup = de_VerifiedAccessGroup(output["verifiedAccessGroup"], context);
    }
    return contents;
};
const de_CreateVerifiedAccessInstanceResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessInstance"] !== undefined) {
        contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
    }
    return contents;
};
const de_CreateVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessTrustProvider"] !== undefined) {
        contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(output["verifiedAccessTrustProvider"], context);
    }
    return contents;
};
const de_CreateVolumePermission = (output, context) => {
    const contents = {};
    if (output["group"] !== undefined) {
        contents.Group = __expectString(output["group"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    return contents;
};
const de_CreateVolumePermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CreateVolumePermission(entry, context);
    });
};
const de_CreateVpcEndpointConnectionNotificationResult = (output, context) => {
    const contents = {};
    if (output["connectionNotification"] !== undefined) {
        contents.ConnectionNotification = de_ConnectionNotification(output["connectionNotification"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreateVpcEndpointResult = (output, context) => {
    const contents = {};
    if (output["vpcEndpoint"] !== undefined) {
        contents.VpcEndpoint = de_VpcEndpoint(output["vpcEndpoint"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreateVpcEndpointServiceConfigurationResult = (output, context) => {
    const contents = {};
    if (output["serviceConfiguration"] !== undefined) {
        contents.ServiceConfiguration = de_ServiceConfiguration(output["serviceConfiguration"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_CreateVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = de_VpcPeeringConnection(output["vpcPeeringConnection"], context);
    }
    return contents;
};
const de_CreateVpcResult = (output, context) => {
    const contents = {};
    if (output["vpc"] !== undefined) {
        contents.Vpc = de_Vpc(output["vpc"], context);
    }
    return contents;
};
const de_CreateVpnConnectionResult = (output, context) => {
    const contents = {};
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const de_CreateVpnGatewayResult = (output, context) => {
    const contents = {};
    if (output["vpnGateway"] !== undefined) {
        contents.VpnGateway = de_VpnGateway(output["vpnGateway"], context);
    }
    return contents;
};
const de_CreditSpecification = (output, context) => {
    const contents = {};
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = __expectString(output["cpuCredits"]);
    }
    return contents;
};
const de_CustomerGateway = (output, context) => {
    const contents = {};
    if (output["bgpAsn"] !== undefined) {
        contents.BgpAsn = __expectString(output["bgpAsn"]);
    }
    if (output["customerGatewayId"] !== undefined) {
        contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
    }
    if (output["ipAddress"] !== undefined) {
        contents.IpAddress = __expectString(output["ipAddress"]);
    }
    if (output["certificateArn"] !== undefined) {
        contents.CertificateArn = __expectString(output["certificateArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_CustomerGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomerGateway(entry, context);
    });
};
const de_DataResponse = (output, context) => {
    const contents = {};
    if (output["id"] !== undefined) {
        contents.Id = __expectString(output["id"]);
    }
    if (output["source"] !== undefined) {
        contents.Source = __expectString(output["source"]);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = __expectString(output["destination"]);
    }
    if (output["metric"] !== undefined) {
        contents.Metric = __expectString(output["metric"]);
    }
    if (output["statistic"] !== undefined) {
        contents.Statistic = __expectString(output["statistic"]);
    }
    if (output["period"] !== undefined) {
        contents.Period = __expectString(output["period"]);
    }
    if (output.metricPointSet === "") {
        contents.MetricPoints = [];
    }
    else if (output["metricPointSet"] !== undefined && output["metricPointSet"]["item"] !== undefined) {
        contents.MetricPoints = de_MetricPoints(__getArrayIfSingleItem(output["metricPointSet"]["item"]), context);
    }
    return contents;
};
const de_DataResponses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataResponse(entry, context);
    });
};
const de_DedicatedHostIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_DeleteCarrierGatewayResult = (output, context) => {
    const contents = {};
    if (output["carrierGateway"] !== undefined) {
        contents.CarrierGateway = de_CarrierGateway(output["carrierGateway"], context);
    }
    return contents;
};
const de_DeleteClientVpnEndpointResult = (output, context) => {
    const contents = {};
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnEndpointStatus(output["status"], context);
    }
    return contents;
};
const de_DeleteClientVpnRouteResult = (output, context) => {
    const contents = {};
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnRouteStatus(output["status"], context);
    }
    return contents;
};
const de_DeleteCoipCidrResult = (output, context) => {
    const contents = {};
    if (output["coipCidr"] !== undefined) {
        contents.CoipCidr = de_CoipCidr(output["coipCidr"], context);
    }
    return contents;
};
const de_DeleteCoipPoolResult = (output, context) => {
    const contents = {};
    if (output["coipPool"] !== undefined) {
        contents.CoipPool = de_CoipPool(output["coipPool"], context);
    }
    return contents;
};
const de_DeleteEgressOnlyInternetGatewayResult = (output, context) => {
    const contents = {};
    if (output["returnCode"] !== undefined) {
        contents.ReturnCode = __parseBoolean(output["returnCode"]);
    }
    return contents;
};
const de_DeleteFleetError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_DeleteFleetErrorItem = (output, context) => {
    const contents = {};
    if (output["error"] !== undefined) {
        contents.Error = de_DeleteFleetError(output["error"], context);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    return contents;
};
const de_DeleteFleetErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteFleetErrorItem(entry, context);
    });
};
const de_DeleteFleetsResult = (output, context) => {
    const contents = {};
    if (output.successfulFleetDeletionSet === "") {
        contents.SuccessfulFleetDeletions = [];
    }
    else if (output["successfulFleetDeletionSet"] !== undefined &&
        output["successfulFleetDeletionSet"]["item"] !== undefined) {
        contents.SuccessfulFleetDeletions = de_DeleteFleetSuccessSet(__getArrayIfSingleItem(output["successfulFleetDeletionSet"]["item"]), context);
    }
    if (output.unsuccessfulFleetDeletionSet === "") {
        contents.UnsuccessfulFleetDeletions = [];
    }
    else if (output["unsuccessfulFleetDeletionSet"] !== undefined &&
        output["unsuccessfulFleetDeletionSet"]["item"] !== undefined) {
        contents.UnsuccessfulFleetDeletions = de_DeleteFleetErrorSet(__getArrayIfSingleItem(output["unsuccessfulFleetDeletionSet"]["item"]), context);
    }
    return contents;
};
const de_DeleteFleetSuccessItem = (output, context) => {
    const contents = {};
    if (output["currentFleetState"] !== undefined) {
        contents.CurrentFleetState = __expectString(output["currentFleetState"]);
    }
    if (output["previousFleetState"] !== undefined) {
        contents.PreviousFleetState = __expectString(output["previousFleetState"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    return contents;
};
const de_DeleteFleetSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteFleetSuccessItem(entry, context);
    });
};
const de_DeleteFlowLogsResult = (output, context) => {
    const contents = {};
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_DeleteFpgaImageResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DeleteInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output["instanceEventWindowState"] !== undefined) {
        contents.InstanceEventWindowState = de_InstanceEventWindowStateChange(output["instanceEventWindowState"], context);
    }
    return contents;
};
const de_DeleteIpamPoolResult = (output, context) => {
    const contents = {};
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = de_IpamPool(output["ipamPool"], context);
    }
    return contents;
};
const de_DeleteIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output["ipamResourceDiscovery"] !== undefined) {
        contents.IpamResourceDiscovery = de_IpamResourceDiscovery(output["ipamResourceDiscovery"], context);
    }
    return contents;
};
const de_DeleteIpamResult = (output, context) => {
    const contents = {};
    if (output["ipam"] !== undefined) {
        contents.Ipam = de_Ipam(output["ipam"], context);
    }
    return contents;
};
const de_DeleteIpamScopeResult = (output, context) => {
    const contents = {};
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = de_IpamScope(output["ipamScope"], context);
    }
    return contents;
};
const de_DeleteLaunchTemplateResult = (output, context) => {
    const contents = {};
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = de_LaunchTemplate(output["launchTemplate"], context);
    }
    return contents;
};
const de_DeleteLaunchTemplateVersionsResponseErrorItem = (output, context) => {
    const contents = {};
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = __strictParseLong(output["versionNumber"]);
    }
    if (output["responseError"] !== undefined) {
        contents.ResponseError = de_ResponseError(output["responseError"], context);
    }
    return contents;
};
const de_DeleteLaunchTemplateVersionsResponseErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteLaunchTemplateVersionsResponseErrorItem(entry, context);
    });
};
const de_DeleteLaunchTemplateVersionsResponseSuccessItem = (output, context) => {
    const contents = {};
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = __strictParseLong(output["versionNumber"]);
    }
    return contents;
};
const de_DeleteLaunchTemplateVersionsResponseSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteLaunchTemplateVersionsResponseSuccessItem(entry, context);
    });
};
const de_DeleteLaunchTemplateVersionsResult = (output, context) => {
    const contents = {};
    if (output.successfullyDeletedLaunchTemplateVersionSet === "") {
        contents.SuccessfullyDeletedLaunchTemplateVersions = [];
    }
    else if (output["successfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
        output["successfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined) {
        contents.SuccessfullyDeletedLaunchTemplateVersions = de_DeleteLaunchTemplateVersionsResponseSuccessSet(__getArrayIfSingleItem(output["successfullyDeletedLaunchTemplateVersionSet"]["item"]), context);
    }
    if (output.unsuccessfullyDeletedLaunchTemplateVersionSet === "") {
        contents.UnsuccessfullyDeletedLaunchTemplateVersions = [];
    }
    else if (output["unsuccessfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
        output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined) {
        contents.UnsuccessfullyDeletedLaunchTemplateVersions = de_DeleteLaunchTemplateVersionsResponseErrorSet(__getArrayIfSingleItem(output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"]), context);
    }
    return contents;
};
const de_DeleteLocalGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output["route"] !== undefined) {
        contents.Route = de_LocalGatewayRoute(output["route"], context);
    }
    return contents;
};
const de_DeleteLocalGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTable"] !== undefined) {
        contents.LocalGatewayRouteTable = de_LocalGatewayRouteTable(output["localGatewayRouteTable"], context);
    }
    return contents;
};
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTableVirtualInterfaceGroupAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociation =
            de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output["localGatewayRouteTableVirtualInterfaceGroupAssociation"], context);
    }
    return contents;
};
const de_DeleteLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociation = de_LocalGatewayRouteTableVpcAssociation(output["localGatewayRouteTableVpcAssociation"], context);
    }
    return contents;
};
const de_DeleteManagedPrefixListResult = (output, context) => {
    const contents = {};
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const de_DeleteNatGatewayResult = (output, context) => {
    const contents = {};
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    return contents;
};
const de_DeleteNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    return contents;
};
const de_DeleteNetworkInsightsAccessScopeResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    return contents;
};
const de_DeleteNetworkInsightsAnalysisResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAnalysisId"] !== undefined) {
        contents.NetworkInsightsAnalysisId = __expectString(output["networkInsightsAnalysisId"]);
    }
    return contents;
};
const de_DeleteNetworkInsightsPathResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
    }
    return contents;
};
const de_DeleteNetworkInterfacePermissionResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DeletePublicIpv4PoolResult = (output, context) => {
    const contents = {};
    if (output["returnValue"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["returnValue"]);
    }
    return contents;
};
const de_DeleteQueuedReservedInstancesError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_DeleteQueuedReservedInstancesResult = (output, context) => {
    const contents = {};
    if (output.successfulQueuedPurchaseDeletionSet === "") {
        contents.SuccessfulQueuedPurchaseDeletions = [];
    }
    else if (output["successfulQueuedPurchaseDeletionSet"] !== undefined &&
        output["successfulQueuedPurchaseDeletionSet"]["item"] !== undefined) {
        contents.SuccessfulQueuedPurchaseDeletions = de_SuccessfulQueuedPurchaseDeletionSet(__getArrayIfSingleItem(output["successfulQueuedPurchaseDeletionSet"]["item"]), context);
    }
    if (output.failedQueuedPurchaseDeletionSet === "") {
        contents.FailedQueuedPurchaseDeletions = [];
    }
    else if (output["failedQueuedPurchaseDeletionSet"] !== undefined &&
        output["failedQueuedPurchaseDeletionSet"]["item"] !== undefined) {
        contents.FailedQueuedPurchaseDeletions = de_FailedQueuedPurchaseDeletionSet(__getArrayIfSingleItem(output["failedQueuedPurchaseDeletionSet"]["item"]), context);
    }
    return contents;
};
const de_DeleteSubnetCidrReservationResult = (output, context) => {
    const contents = {};
    if (output["deletedSubnetCidrReservation"] !== undefined) {
        contents.DeletedSubnetCidrReservation = de_SubnetCidrReservation(output["deletedSubnetCidrReservation"], context);
    }
    return contents;
};
const de_DeleteTrafficMirrorFilterResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    return contents;
};
const de_DeleteTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilterRuleId"] !== undefined) {
        contents.TrafficMirrorFilterRuleId = __expectString(output["trafficMirrorFilterRuleId"]);
    }
    return contents;
};
const de_DeleteTrafficMirrorSessionResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorSessionId"] !== undefined) {
        contents.TrafficMirrorSessionId = __expectString(output["trafficMirrorSessionId"]);
    }
    return contents;
};
const de_DeleteTrafficMirrorTargetResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
    }
    return contents;
};
const de_DeleteTransitGatewayConnectPeerResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayConnectPeer"] !== undefined) {
        contents.TransitGatewayConnectPeer = de_TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayConnectResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayConnect"] !== undefined) {
        contents.TransitGatewayConnect = de_TransitGatewayConnect(output["transitGatewayConnect"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomain"] !== undefined) {
        contents.TransitGatewayMulticastDomain = de_TransitGatewayMulticastDomain(output["transitGatewayMulticastDomain"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPolicyTable"] !== undefined) {
        contents.TransitGatewayPolicyTable = de_TransitGatewayPolicyTable(output["transitGatewayPolicyTable"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = de_TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayResult = (output, context) => {
    const contents = {};
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = de_TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output["route"] !== undefined) {
        contents.Route = de_TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayRouteTableAnnouncementResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableAnnouncement"] !== undefined) {
        contents.TransitGatewayRouteTableAnnouncement = de_TransitGatewayRouteTableAnnouncement(output["transitGatewayRouteTableAnnouncement"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = de_TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
    }
    return contents;
};
const de_DeleteTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const de_DeleteVerifiedAccessEndpointResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessEndpoint"] !== undefined) {
        contents.VerifiedAccessEndpoint = de_VerifiedAccessEndpoint(output["verifiedAccessEndpoint"], context);
    }
    return contents;
};
const de_DeleteVerifiedAccessGroupResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessGroup"] !== undefined) {
        contents.VerifiedAccessGroup = de_VerifiedAccessGroup(output["verifiedAccessGroup"], context);
    }
    return contents;
};
const de_DeleteVerifiedAccessInstanceResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessInstance"] !== undefined) {
        contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
    }
    return contents;
};
const de_DeleteVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessTrustProvider"] !== undefined) {
        contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(output["verifiedAccessTrustProvider"], context);
    }
    return contents;
};
const de_DeleteVpcEndpointConnectionNotificationsResult = (output, context) => {
    const contents = {};
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_DeleteVpcEndpointServiceConfigurationsResult = (output, context) => {
    const contents = {};
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_DeleteVpcEndpointsResult = (output, context) => {
    const contents = {};
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_DeleteVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DeprovisionByoipCidrResult = (output, context) => {
    const contents = {};
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const de_DeprovisionedAddressSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_DeprovisionIpamPoolCidrResult = (output, context) => {
    const contents = {};
    if (output["ipamPoolCidr"] !== undefined) {
        contents.IpamPoolCidr = de_IpamPoolCidr(output["ipamPoolCidr"], context);
    }
    return contents;
};
const de_DeprovisionPublicIpv4PoolCidrResult = (output, context) => {
    const contents = {};
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output.deprovisionedAddressSet === "") {
        contents.DeprovisionedAddresses = [];
    }
    else if (output["deprovisionedAddressSet"] !== undefined &&
        output["deprovisionedAddressSet"]["item"] !== undefined) {
        contents.DeprovisionedAddresses = de_DeprovisionedAddressSet(__getArrayIfSingleItem(output["deprovisionedAddressSet"]["item"]), context);
    }
    return contents;
};
const de_DeregisterInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {};
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = de_InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
const de_DeregisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
    const contents = {};
    if (output["deregisteredMulticastGroupMembers"] !== undefined) {
        contents.DeregisteredMulticastGroupMembers = de_TransitGatewayMulticastDeregisteredGroupMembers(output["deregisteredMulticastGroupMembers"], context);
    }
    return contents;
};
const de_DeregisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
    const contents = {};
    if (output["deregisteredMulticastGroupSources"] !== undefined) {
        contents.DeregisteredMulticastGroupSources = de_TransitGatewayMulticastDeregisteredGroupSources(output["deregisteredMulticastGroupSources"], context);
    }
    return contents;
};
const de_DescribeAccountAttributesResult = (output, context) => {
    const contents = {};
    if (output.accountAttributeSet === "") {
        contents.AccountAttributes = [];
    }
    else if (output["accountAttributeSet"] !== undefined && output["accountAttributeSet"]["item"] !== undefined) {
        contents.AccountAttributes = de_AccountAttributeList(__getArrayIfSingleItem(output["accountAttributeSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeAddressesAttributeResult = (output, context) => {
    const contents = {};
    if (output.addressSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
        contents.Addresses = de_AddressSet(__getArrayIfSingleItem(output["addressSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeAddressesResult = (output, context) => {
    const contents = {};
    if (output.addressesSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressesSet"] !== undefined && output["addressesSet"]["item"] !== undefined) {
        contents.Addresses = de_AddressList(__getArrayIfSingleItem(output["addressesSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeAddressTransfersResult = (output, context) => {
    const contents = {};
    if (output.addressTransferSet === "") {
        contents.AddressTransfers = [];
    }
    else if (output["addressTransferSet"] !== undefined && output["addressTransferSet"]["item"] !== undefined) {
        contents.AddressTransfers = de_AddressTransferList(__getArrayIfSingleItem(output["addressTransferSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeAggregateIdFormatResult = (output, context) => {
    const contents = {};
    if (output["useLongIdsAggregated"] !== undefined) {
        contents.UseLongIdsAggregated = __parseBoolean(output["useLongIdsAggregated"]);
    }
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeAvailabilityZonesResult = (output, context) => {
    const contents = {};
    if (output.availabilityZoneInfo === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneInfo"] !== undefined && output["availabilityZoneInfo"]["item"] !== undefined) {
        contents.AvailabilityZones = de_AvailabilityZoneList(__getArrayIfSingleItem(output["availabilityZoneInfo"]["item"]), context);
    }
    return contents;
};
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.subscriptionSet === "") {
        contents.Subscriptions = [];
    }
    else if (output["subscriptionSet"] !== undefined && output["subscriptionSet"]["item"] !== undefined) {
        contents.Subscriptions = de_SubscriptionList(__getArrayIfSingleItem(output["subscriptionSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeBundleTasksResult = (output, context) => {
    const contents = {};
    if (output.bundleInstanceTasksSet === "") {
        contents.BundleTasks = [];
    }
    else if (output["bundleInstanceTasksSet"] !== undefined && output["bundleInstanceTasksSet"]["item"] !== undefined) {
        contents.BundleTasks = de_BundleTaskList(__getArrayIfSingleItem(output["bundleInstanceTasksSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeByoipCidrsResult = (output, context) => {
    const contents = {};
    if (output.byoipCidrSet === "") {
        contents.ByoipCidrs = [];
    }
    else if (output["byoipCidrSet"] !== undefined && output["byoipCidrSet"]["item"] !== undefined) {
        contents.ByoipCidrs = de_ByoipCidrSet(__getArrayIfSingleItem(output["byoipCidrSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeCapacityReservationFleetsResult = (output, context) => {
    const contents = {};
    if (output.capacityReservationFleetSet === "") {
        contents.CapacityReservationFleets = [];
    }
    else if (output["capacityReservationFleetSet"] !== undefined &&
        output["capacityReservationFleetSet"]["item"] !== undefined) {
        contents.CapacityReservationFleets = de_CapacityReservationFleetSet(__getArrayIfSingleItem(output["capacityReservationFleetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeCapacityReservationsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.capacityReservationSet === "") {
        contents.CapacityReservations = [];
    }
    else if (output["capacityReservationSet"] !== undefined && output["capacityReservationSet"]["item"] !== undefined) {
        contents.CapacityReservations = de_CapacityReservationSet(__getArrayIfSingleItem(output["capacityReservationSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeCarrierGatewaysResult = (output, context) => {
    const contents = {};
    if (output.carrierGatewaySet === "") {
        contents.CarrierGateways = [];
    }
    else if (output["carrierGatewaySet"] !== undefined && output["carrierGatewaySet"]["item"] !== undefined) {
        contents.CarrierGateways = de_CarrierGatewaySet(__getArrayIfSingleItem(output["carrierGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeClassicLinkInstancesResult = (output, context) => {
    const contents = {};
    if (output.instancesSet === "") {
        contents.Instances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.Instances = de_ClassicLinkInstanceList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeClientVpnAuthorizationRulesResult = (output, context) => {
    const contents = {};
    if (output.authorizationRule === "") {
        contents.AuthorizationRules = [];
    }
    else if (output["authorizationRule"] !== undefined && output["authorizationRule"]["item"] !== undefined) {
        contents.AuthorizationRules = de_AuthorizationRuleSet(__getArrayIfSingleItem(output["authorizationRule"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeClientVpnConnectionsResult = (output, context) => {
    const contents = {};
    if (output.connections === "") {
        contents.Connections = [];
    }
    else if (output["connections"] !== undefined && output["connections"]["item"] !== undefined) {
        contents.Connections = de_ClientVpnConnectionSet(__getArrayIfSingleItem(output["connections"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeClientVpnEndpointsResult = (output, context) => {
    const contents = {};
    if (output.clientVpnEndpoint === "") {
        contents.ClientVpnEndpoints = [];
    }
    else if (output["clientVpnEndpoint"] !== undefined && output["clientVpnEndpoint"]["item"] !== undefined) {
        contents.ClientVpnEndpoints = de_EndpointSet(__getArrayIfSingleItem(output["clientVpnEndpoint"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeClientVpnRoutesResult = (output, context) => {
    const contents = {};
    if (output.routes === "") {
        contents.Routes = [];
    }
    else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
        contents.Routes = de_ClientVpnRouteSet(__getArrayIfSingleItem(output["routes"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeClientVpnTargetNetworksResult = (output, context) => {
    const contents = {};
    if (output.clientVpnTargetNetworks === "") {
        contents.ClientVpnTargetNetworks = [];
    }
    else if (output["clientVpnTargetNetworks"] !== undefined &&
        output["clientVpnTargetNetworks"]["item"] !== undefined) {
        contents.ClientVpnTargetNetworks = de_TargetNetworkSet(__getArrayIfSingleItem(output["clientVpnTargetNetworks"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeCoipPoolsResult = (output, context) => {
    const contents = {};
    if (output.coipPoolSet === "") {
        contents.CoipPools = [];
    }
    else if (output["coipPoolSet"] !== undefined && output["coipPoolSet"]["item"] !== undefined) {
        contents.CoipPools = de_CoipPoolSet(__getArrayIfSingleItem(output["coipPoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeConversionTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConversionTask(entry, context);
    });
};
const de_DescribeConversionTasksResult = (output, context) => {
    const contents = {};
    if (output.conversionTasks === "") {
        contents.ConversionTasks = [];
    }
    else if (output["conversionTasks"] !== undefined && output["conversionTasks"]["item"] !== undefined) {
        contents.ConversionTasks = de_DescribeConversionTaskList(__getArrayIfSingleItem(output["conversionTasks"]["item"]), context);
    }
    return contents;
};
const de_DescribeCustomerGatewaysResult = (output, context) => {
    const contents = {};
    if (output.customerGatewaySet === "") {
        contents.CustomerGateways = [];
    }
    else if (output["customerGatewaySet"] !== undefined && output["customerGatewaySet"]["item"] !== undefined) {
        contents.CustomerGateways = de_CustomerGatewayList(__getArrayIfSingleItem(output["customerGatewaySet"]["item"]), context);
    }
    return contents;
};
const de_DescribeDhcpOptionsResult = (output, context) => {
    const contents = {};
    if (output.dhcpOptionsSet === "") {
        contents.DhcpOptions = [];
    }
    else if (output["dhcpOptionsSet"] !== undefined && output["dhcpOptionsSet"]["item"] !== undefined) {
        contents.DhcpOptions = de_DhcpOptionsList(__getArrayIfSingleItem(output["dhcpOptionsSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeEgressOnlyInternetGatewaysResult = (output, context) => {
    const contents = {};
    if (output.egressOnlyInternetGatewaySet === "") {
        contents.EgressOnlyInternetGateways = [];
    }
    else if (output["egressOnlyInternetGatewaySet"] !== undefined &&
        output["egressOnlyInternetGatewaySet"]["item"] !== undefined) {
        contents.EgressOnlyInternetGateways = de_EgressOnlyInternetGatewayList(__getArrayIfSingleItem(output["egressOnlyInternetGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeElasticGpusResult = (output, context) => {
    const contents = {};
    if (output.elasticGpuSet === "") {
        contents.ElasticGpuSet = [];
    }
    else if (output["elasticGpuSet"] !== undefined && output["elasticGpuSet"]["item"] !== undefined) {
        contents.ElasticGpuSet = de_ElasticGpuSet(__getArrayIfSingleItem(output["elasticGpuSet"]["item"]), context);
    }
    if (output["maxResults"] !== undefined) {
        contents.MaxResults = __strictParseInt32(output["maxResults"]);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeExportImageTasksResult = (output, context) => {
    const contents = {};
    if (output.exportImageTaskSet === "") {
        contents.ExportImageTasks = [];
    }
    else if (output["exportImageTaskSet"] !== undefined && output["exportImageTaskSet"]["item"] !== undefined) {
        contents.ExportImageTasks = de_ExportImageTaskList(__getArrayIfSingleItem(output["exportImageTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeExportTasksResult = (output, context) => {
    const contents = {};
    if (output.exportTaskSet === "") {
        contents.ExportTasks = [];
    }
    else if (output["exportTaskSet"] !== undefined && output["exportTaskSet"]["item"] !== undefined) {
        contents.ExportTasks = de_ExportTaskList(__getArrayIfSingleItem(output["exportTaskSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeFastLaunchImagesResult = (output, context) => {
    const contents = {};
    if (output.fastLaunchImageSet === "") {
        contents.FastLaunchImages = [];
    }
    else if (output["fastLaunchImageSet"] !== undefined && output["fastLaunchImageSet"]["item"] !== undefined) {
        contents.FastLaunchImages = de_DescribeFastLaunchImagesSuccessSet(__getArrayIfSingleItem(output["fastLaunchImageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeFastLaunchImagesSuccessItem = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = de_FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = de_FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["stateTransitionTime"]));
    }
    return contents;
};
const de_DescribeFastLaunchImagesSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFastLaunchImagesSuccessItem(entry, context);
    });
};
const de_DescribeFastSnapshotRestoresResult = (output, context) => {
    const contents = {};
    if (output.fastSnapshotRestoreSet === "") {
        contents.FastSnapshotRestores = [];
    }
    else if (output["fastSnapshotRestoreSet"] !== undefined && output["fastSnapshotRestoreSet"]["item"] !== undefined) {
        contents.FastSnapshotRestores = de_DescribeFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output["fastSnapshotRestoreSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disabledTime"]));
    }
    return contents;
};
const de_DescribeFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFastSnapshotRestoreSuccessItem(entry, context);
    });
};
const de_DescribeFleetError = (output, context) => {
    const contents = {};
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output["errorCode"] !== undefined) {
        contents.ErrorCode = __expectString(output["errorCode"]);
    }
    if (output["errorMessage"] !== undefined) {
        contents.ErrorMessage = __expectString(output["errorMessage"]);
    }
    return contents;
};
const de_DescribeFleetHistoryResult = (output, context) => {
    const contents = {};
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = de_HistoryRecordSet(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
    }
    if (output["lastEvaluatedTime"] !== undefined) {
        contents.LastEvaluatedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastEvaluatedTime"]));
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
    }
    return contents;
};
const de_DescribeFleetInstancesResult = (output, context) => {
    const contents = {};
    if (output.activeInstanceSet === "") {
        contents.ActiveInstances = [];
    }
    else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
        contents.ActiveInstances = de_ActiveInstanceSet(__getArrayIfSingleItem(output["activeInstanceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    return contents;
};
const de_DescribeFleetsErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFleetError(entry, context);
    });
};
const de_DescribeFleetsInstances = (output, context) => {
    const contents = {};
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output.instanceIds === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
        contents.InstanceIds = de_InstanceIdsSet(__getArrayIfSingleItem(output["instanceIds"]["item"]), context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    return contents;
};
const de_DescribeFleetsInstancesSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFleetsInstances(entry, context);
    });
};
const de_DescribeFleetsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.fleetSet === "") {
        contents.Fleets = [];
    }
    else if (output["fleetSet"] !== undefined && output["fleetSet"]["item"] !== undefined) {
        contents.Fleets = de_FleetSet(__getArrayIfSingleItem(output["fleetSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeFlowLogsResult = (output, context) => {
    const contents = {};
    if (output.flowLogSet === "") {
        contents.FlowLogs = [];
    }
    else if (output["flowLogSet"] !== undefined && output["flowLogSet"]["item"] !== undefined) {
        contents.FlowLogs = de_FlowLogSet(__getArrayIfSingleItem(output["flowLogSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeFpgaImageAttributeResult = (output, context) => {
    const contents = {};
    if (output["fpgaImageAttribute"] !== undefined) {
        contents.FpgaImageAttribute = de_FpgaImageAttribute(output["fpgaImageAttribute"], context);
    }
    return contents;
};
const de_DescribeFpgaImagesResult = (output, context) => {
    const contents = {};
    if (output.fpgaImageSet === "") {
        contents.FpgaImages = [];
    }
    else if (output["fpgaImageSet"] !== undefined && output["fpgaImageSet"]["item"] !== undefined) {
        contents.FpgaImages = de_FpgaImageList(__getArrayIfSingleItem(output["fpgaImageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeHostReservationOfferingsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.offeringSet === "") {
        contents.OfferingSet = [];
    }
    else if (output["offeringSet"] !== undefined && output["offeringSet"]["item"] !== undefined) {
        contents.OfferingSet = de_HostOfferingSet(__getArrayIfSingleItem(output["offeringSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeHostReservationsResult = (output, context) => {
    const contents = {};
    if (output.hostReservationSet === "") {
        contents.HostReservationSet = [];
    }
    else if (output["hostReservationSet"] !== undefined && output["hostReservationSet"]["item"] !== undefined) {
        contents.HostReservationSet = de_HostReservationSet(__getArrayIfSingleItem(output["hostReservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeHostsResult = (output, context) => {
    const contents = {};
    if (output.hostSet === "") {
        contents.Hosts = [];
    }
    else if (output["hostSet"] !== undefined && output["hostSet"]["item"] !== undefined) {
        contents.Hosts = de_HostList(__getArrayIfSingleItem(output["hostSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeIamInstanceProfileAssociationsResult = (output, context) => {
    const contents = {};
    if (output.iamInstanceProfileAssociationSet === "") {
        contents.IamInstanceProfileAssociations = [];
    }
    else if (output["iamInstanceProfileAssociationSet"] !== undefined &&
        output["iamInstanceProfileAssociationSet"]["item"] !== undefined) {
        contents.IamInstanceProfileAssociations = de_IamInstanceProfileAssociationSet(__getArrayIfSingleItem(output["iamInstanceProfileAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeIdentityIdFormatResult = (output, context) => {
    const contents = {};
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeIdFormatResult = (output, context) => {
    const contents = {};
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeImagesResult = (output, context) => {
    const contents = {};
    if (output.imagesSet === "") {
        contents.Images = [];
    }
    else if (output["imagesSet"] !== undefined && output["imagesSet"]["item"] !== undefined) {
        contents.Images = de_ImageList(__getArrayIfSingleItem(output["imagesSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeImportImageTasksResult = (output, context) => {
    const contents = {};
    if (output.importImageTaskSet === "") {
        contents.ImportImageTasks = [];
    }
    else if (output["importImageTaskSet"] !== undefined && output["importImageTaskSet"]["item"] !== undefined) {
        contents.ImportImageTasks = de_ImportImageTaskList(__getArrayIfSingleItem(output["importImageTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeImportSnapshotTasksResult = (output, context) => {
    const contents = {};
    if (output.importSnapshotTaskSet === "") {
        contents.ImportSnapshotTasks = [];
    }
    else if (output["importSnapshotTaskSet"] !== undefined && output["importSnapshotTaskSet"]["item"] !== undefined) {
        contents.ImportSnapshotTasks = de_ImportSnapshotTaskList(__getArrayIfSingleItem(output["importSnapshotTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeInstanceCreditSpecificationsResult = (output, context) => {
    const contents = {};
    if (output.instanceCreditSpecificationSet === "") {
        contents.InstanceCreditSpecifications = [];
    }
    else if (output["instanceCreditSpecificationSet"] !== undefined &&
        output["instanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.InstanceCreditSpecifications = de_InstanceCreditSpecificationList(__getArrayIfSingleItem(output["instanceCreditSpecificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {};
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = de_InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
const de_DescribeInstanceEventWindowsResult = (output, context) => {
    const contents = {};
    if (output.instanceEventWindowSet === "") {
        contents.InstanceEventWindows = [];
    }
    else if (output["instanceEventWindowSet"] !== undefined && output["instanceEventWindowSet"]["item"] !== undefined) {
        contents.InstanceEventWindows = de_InstanceEventWindowSet(__getArrayIfSingleItem(output["instanceEventWindowSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeInstancesResult = (output, context) => {
    const contents = {};
    if (output.reservationSet === "") {
        contents.Reservations = [];
    }
    else if (output["reservationSet"] !== undefined && output["reservationSet"]["item"] !== undefined) {
        contents.Reservations = de_ReservationList(__getArrayIfSingleItem(output["reservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeInstanceStatusResult = (output, context) => {
    const contents = {};
    if (output.instanceStatusSet === "") {
        contents.InstanceStatuses = [];
    }
    else if (output["instanceStatusSet"] !== undefined && output["instanceStatusSet"]["item"] !== undefined) {
        contents.InstanceStatuses = de_InstanceStatusList(__getArrayIfSingleItem(output["instanceStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeInstanceTypeOfferingsResult = (output, context) => {
    const contents = {};
    if (output.instanceTypeOfferingSet === "") {
        contents.InstanceTypeOfferings = [];
    }
    else if (output["instanceTypeOfferingSet"] !== undefined &&
        output["instanceTypeOfferingSet"]["item"] !== undefined) {
        contents.InstanceTypeOfferings = de_InstanceTypeOfferingsList(__getArrayIfSingleItem(output["instanceTypeOfferingSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeInstanceTypesResult = (output, context) => {
    const contents = {};
    if (output.instanceTypeSet === "") {
        contents.InstanceTypes = [];
    }
    else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
        contents.InstanceTypes = de_InstanceTypeInfoList(__getArrayIfSingleItem(output["instanceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeInternetGatewaysResult = (output, context) => {
    const contents = {};
    if (output.internetGatewaySet === "") {
        contents.InternetGateways = [];
    }
    else if (output["internetGatewaySet"] !== undefined && output["internetGatewaySet"]["item"] !== undefined) {
        contents.InternetGateways = de_InternetGatewayList(__getArrayIfSingleItem(output["internetGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeIpamPoolsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamPoolSet === "") {
        contents.IpamPools = [];
    }
    else if (output["ipamPoolSet"] !== undefined && output["ipamPoolSet"]["item"] !== undefined) {
        contents.IpamPools = de_IpamPoolSet(__getArrayIfSingleItem(output["ipamPoolSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeIpamResourceDiscoveriesResult = (output, context) => {
    const contents = {};
    if (output.ipamResourceDiscoverySet === "") {
        contents.IpamResourceDiscoveries = [];
    }
    else if (output["ipamResourceDiscoverySet"] !== undefined &&
        output["ipamResourceDiscoverySet"]["item"] !== undefined) {
        contents.IpamResourceDiscoveries = de_IpamResourceDiscoverySet(__getArrayIfSingleItem(output["ipamResourceDiscoverySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeIpamResourceDiscoveryAssociationsResult = (output, context) => {
    const contents = {};
    if (output.ipamResourceDiscoveryAssociationSet === "") {
        contents.IpamResourceDiscoveryAssociations = [];
    }
    else if (output["ipamResourceDiscoveryAssociationSet"] !== undefined &&
        output["ipamResourceDiscoveryAssociationSet"]["item"] !== undefined) {
        contents.IpamResourceDiscoveryAssociations = de_IpamResourceDiscoveryAssociationSet(__getArrayIfSingleItem(output["ipamResourceDiscoveryAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeIpamScopesResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamScopeSet === "") {
        contents.IpamScopes = [];
    }
    else if (output["ipamScopeSet"] !== undefined && output["ipamScopeSet"]["item"] !== undefined) {
        contents.IpamScopes = de_IpamScopeSet(__getArrayIfSingleItem(output["ipamScopeSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeIpamsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamSet === "") {
        contents.Ipams = [];
    }
    else if (output["ipamSet"] !== undefined && output["ipamSet"]["item"] !== undefined) {
        contents.Ipams = de_IpamSet(__getArrayIfSingleItem(output["ipamSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeIpv6PoolsResult = (output, context) => {
    const contents = {};
    if (output.ipv6PoolSet === "") {
        contents.Ipv6Pools = [];
    }
    else if (output["ipv6PoolSet"] !== undefined && output["ipv6PoolSet"]["item"] !== undefined) {
        contents.Ipv6Pools = de_Ipv6PoolSet(__getArrayIfSingleItem(output["ipv6PoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeKeyPairsResult = (output, context) => {
    const contents = {};
    if (output.keySet === "") {
        contents.KeyPairs = [];
    }
    else if (output["keySet"] !== undefined && output["keySet"]["item"] !== undefined) {
        contents.KeyPairs = de_KeyPairList(__getArrayIfSingleItem(output["keySet"]["item"]), context);
    }
    return contents;
};
const de_DescribeLaunchTemplatesResult = (output, context) => {
    const contents = {};
    if (output.launchTemplates === "") {
        contents.LaunchTemplates = [];
    }
    else if (output["launchTemplates"] !== undefined && output["launchTemplates"]["item"] !== undefined) {
        contents.LaunchTemplates = de_LaunchTemplateSet(__getArrayIfSingleItem(output["launchTemplates"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeLaunchTemplateVersionsResult = (output, context) => {
    const contents = {};
    if (output.launchTemplateVersionSet === "") {
        contents.LaunchTemplateVersions = [];
    }
    else if (output["launchTemplateVersionSet"] !== undefined &&
        output["launchTemplateVersionSet"]["item"] !== undefined) {
        contents.LaunchTemplateVersions = de_LaunchTemplateVersionSet(__getArrayIfSingleItem(output["launchTemplateVersionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeLocalGatewayRouteTablesResult = (output, context) => {
    const contents = {};
    if (output.localGatewayRouteTableSet === "") {
        contents.LocalGatewayRouteTables = [];
    }
    else if (output["localGatewayRouteTableSet"] !== undefined &&
        output["localGatewayRouteTableSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTables = de_LocalGatewayRouteTableSet(__getArrayIfSingleItem(output["localGatewayRouteTableSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = (output, context) => {
    const contents = {};
    if (output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet === "") {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations = [];
    }
    else if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"] !== undefined &&
        output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations =
            de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(__getArrayIfSingleItem(output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeLocalGatewayRouteTableVpcAssociationsResult = (output, context) => {
    const contents = {};
    if (output.localGatewayRouteTableVpcAssociationSet === "") {
        contents.LocalGatewayRouteTableVpcAssociations = [];
    }
    else if (output["localGatewayRouteTableVpcAssociationSet"] !== undefined &&
        output["localGatewayRouteTableVpcAssociationSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociations = de_LocalGatewayRouteTableVpcAssociationSet(__getArrayIfSingleItem(output["localGatewayRouteTableVpcAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeLocalGatewaysResult = (output, context) => {
    const contents = {};
    if (output.localGatewaySet === "") {
        contents.LocalGateways = [];
    }
    else if (output["localGatewaySet"] !== undefined && output["localGatewaySet"]["item"] !== undefined) {
        contents.LocalGateways = de_LocalGatewaySet(__getArrayIfSingleItem(output["localGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeLocalGatewayVirtualInterfaceGroupsResult = (output, context) => {
    const contents = {};
    if (output.localGatewayVirtualInterfaceGroupSet === "") {
        contents.LocalGatewayVirtualInterfaceGroups = [];
    }
    else if (output["localGatewayVirtualInterfaceGroupSet"] !== undefined &&
        output["localGatewayVirtualInterfaceGroupSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroups = de_LocalGatewayVirtualInterfaceGroupSet(__getArrayIfSingleItem(output["localGatewayVirtualInterfaceGroupSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeLocalGatewayVirtualInterfacesResult = (output, context) => {
    const contents = {};
    if (output.localGatewayVirtualInterfaceSet === "") {
        contents.LocalGatewayVirtualInterfaces = [];
    }
    else if (output["localGatewayVirtualInterfaceSet"] !== undefined &&
        output["localGatewayVirtualInterfaceSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaces = de_LocalGatewayVirtualInterfaceSet(__getArrayIfSingleItem(output["localGatewayVirtualInterfaceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeManagedPrefixListsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.prefixListSet === "") {
        contents.PrefixLists = [];
    }
    else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
        contents.PrefixLists = de_ManagedPrefixListSet(__getArrayIfSingleItem(output["prefixListSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeMovingAddressesResult = (output, context) => {
    const contents = {};
    if (output.movingAddressStatusSet === "") {
        contents.MovingAddressStatuses = [];
    }
    else if (output["movingAddressStatusSet"] !== undefined && output["movingAddressStatusSet"]["item"] !== undefined) {
        contents.MovingAddressStatuses = de_MovingAddressStatusSet(__getArrayIfSingleItem(output["movingAddressStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNatGatewaysResult = (output, context) => {
    const contents = {};
    if (output.natGatewaySet === "") {
        contents.NatGateways = [];
    }
    else if (output["natGatewaySet"] !== undefined && output["natGatewaySet"]["item"] !== undefined) {
        contents.NatGateways = de_NatGatewayList(__getArrayIfSingleItem(output["natGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNetworkAclsResult = (output, context) => {
    const contents = {};
    if (output.networkAclSet === "") {
        contents.NetworkAcls = [];
    }
    else if (output["networkAclSet"] !== undefined && output["networkAclSet"]["item"] !== undefined) {
        contents.NetworkAcls = de_NetworkAclList(__getArrayIfSingleItem(output["networkAclSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNetworkInsightsAccessScopeAnalysesResult = (output, context) => {
    const contents = {};
    if (output.networkInsightsAccessScopeAnalysisSet === "") {
        contents.NetworkInsightsAccessScopeAnalyses = [];
    }
    else if (output["networkInsightsAccessScopeAnalysisSet"] !== undefined &&
        output["networkInsightsAccessScopeAnalysisSet"]["item"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalyses = de_NetworkInsightsAccessScopeAnalysisList(__getArrayIfSingleItem(output["networkInsightsAccessScopeAnalysisSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNetworkInsightsAccessScopesResult = (output, context) => {
    const contents = {};
    if (output.networkInsightsAccessScopeSet === "") {
        contents.NetworkInsightsAccessScopes = [];
    }
    else if (output["networkInsightsAccessScopeSet"] !== undefined &&
        output["networkInsightsAccessScopeSet"]["item"] !== undefined) {
        contents.NetworkInsightsAccessScopes = de_NetworkInsightsAccessScopeList(__getArrayIfSingleItem(output["networkInsightsAccessScopeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNetworkInsightsAnalysesResult = (output, context) => {
    const contents = {};
    if (output.networkInsightsAnalysisSet === "") {
        contents.NetworkInsightsAnalyses = [];
    }
    else if (output["networkInsightsAnalysisSet"] !== undefined &&
        output["networkInsightsAnalysisSet"]["item"] !== undefined) {
        contents.NetworkInsightsAnalyses = de_NetworkInsightsAnalysisList(__getArrayIfSingleItem(output["networkInsightsAnalysisSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNetworkInsightsPathsResult = (output, context) => {
    const contents = {};
    if (output.networkInsightsPathSet === "") {
        contents.NetworkInsightsPaths = [];
    }
    else if (output["networkInsightsPathSet"] !== undefined && output["networkInsightsPathSet"]["item"] !== undefined) {
        contents.NetworkInsightsPaths = de_NetworkInsightsPathList(__getArrayIfSingleItem(output["networkInsightsPathSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNetworkInterfaceAttributeResult = (output, context) => {
    const contents = {};
    if (output["attachment"] !== undefined) {
        contents.Attachment = de_NetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = de_AttributeValue(output["description"], context);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = de_AttributeBooleanValue(output["sourceDestCheck"], context);
    }
    return contents;
};
const de_DescribeNetworkInterfacePermissionsResult = (output, context) => {
    const contents = {};
    if (output.networkInterfacePermissions === "") {
        contents.NetworkInterfacePermissions = [];
    }
    else if (output["networkInterfacePermissions"] !== undefined &&
        output["networkInterfacePermissions"]["item"] !== undefined) {
        contents.NetworkInterfacePermissions = de_NetworkInterfacePermissionList(__getArrayIfSingleItem(output["networkInterfacePermissions"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeNetworkInterfacesResult = (output, context) => {
    const contents = {};
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = de_NetworkInterfaceList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribePlacementGroupsResult = (output, context) => {
    const contents = {};
    if (output.placementGroupSet === "") {
        contents.PlacementGroups = [];
    }
    else if (output["placementGroupSet"] !== undefined && output["placementGroupSet"]["item"] !== undefined) {
        contents.PlacementGroups = de_PlacementGroupList(__getArrayIfSingleItem(output["placementGroupSet"]["item"]), context);
    }
    return contents;
};
const de_DescribePrefixListsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.prefixListSet === "") {
        contents.PrefixLists = [];
    }
    else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
        contents.PrefixLists = de_PrefixListSet(__getArrayIfSingleItem(output["prefixListSet"]["item"]), context);
    }
    return contents;
};
const de_DescribePrincipalIdFormatResult = (output, context) => {
    const contents = {};
    if (output.principalSet === "") {
        contents.Principals = [];
    }
    else if (output["principalSet"] !== undefined && output["principalSet"]["item"] !== undefined) {
        contents.Principals = de_PrincipalIdFormatList(__getArrayIfSingleItem(output["principalSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribePublicIpv4PoolsResult = (output, context) => {
    const contents = {};
    if (output.publicIpv4PoolSet === "") {
        contents.PublicIpv4Pools = [];
    }
    else if (output["publicIpv4PoolSet"] !== undefined && output["publicIpv4PoolSet"]["item"] !== undefined) {
        contents.PublicIpv4Pools = de_PublicIpv4PoolSet(__getArrayIfSingleItem(output["publicIpv4PoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeRegionsResult = (output, context) => {
    const contents = {};
    if (output.regionInfo === "") {
        contents.Regions = [];
    }
    else if (output["regionInfo"] !== undefined && output["regionInfo"]["item"] !== undefined) {
        contents.Regions = de_RegionList(__getArrayIfSingleItem(output["regionInfo"]["item"]), context);
    }
    return contents;
};
const de_DescribeReplaceRootVolumeTasksResult = (output, context) => {
    const contents = {};
    if (output.replaceRootVolumeTaskSet === "") {
        contents.ReplaceRootVolumeTasks = [];
    }
    else if (output["replaceRootVolumeTaskSet"] !== undefined &&
        output["replaceRootVolumeTaskSet"]["item"] !== undefined) {
        contents.ReplaceRootVolumeTasks = de_ReplaceRootVolumeTasks(__getArrayIfSingleItem(output["replaceRootVolumeTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeReservedInstancesListingsResult = (output, context) => {
    const contents = {};
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = de_ReservedInstancesListingList(__getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeReservedInstancesModificationsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.reservedInstancesModificationsSet === "") {
        contents.ReservedInstancesModifications = [];
    }
    else if (output["reservedInstancesModificationsSet"] !== undefined &&
        output["reservedInstancesModificationsSet"]["item"] !== undefined) {
        contents.ReservedInstancesModifications = de_ReservedInstancesModificationList(__getArrayIfSingleItem(output["reservedInstancesModificationsSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeReservedInstancesOfferingsResult = (output, context) => {
    const contents = {};
    if (output.reservedInstancesOfferingsSet === "") {
        contents.ReservedInstancesOfferings = [];
    }
    else if (output["reservedInstancesOfferingsSet"] !== undefined &&
        output["reservedInstancesOfferingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesOfferings = de_ReservedInstancesOfferingList(__getArrayIfSingleItem(output["reservedInstancesOfferingsSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeReservedInstancesResult = (output, context) => {
    const contents = {};
    if (output.reservedInstancesSet === "") {
        contents.ReservedInstances = [];
    }
    else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
        contents.ReservedInstances = de_ReservedInstancesList(__getArrayIfSingleItem(output["reservedInstancesSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeRouteTablesResult = (output, context) => {
    const contents = {};
    if (output.routeTableSet === "") {
        contents.RouteTables = [];
    }
    else if (output["routeTableSet"] !== undefined && output["routeTableSet"]["item"] !== undefined) {
        contents.RouteTables = de_RouteTableList(__getArrayIfSingleItem(output["routeTableSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeScheduledInstanceAvailabilityResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.scheduledInstanceAvailabilitySet === "") {
        contents.ScheduledInstanceAvailabilitySet = [];
    }
    else if (output["scheduledInstanceAvailabilitySet"] !== undefined &&
        output["scheduledInstanceAvailabilitySet"]["item"] !== undefined) {
        contents.ScheduledInstanceAvailabilitySet = de_ScheduledInstanceAvailabilitySet(__getArrayIfSingleItem(output["scheduledInstanceAvailabilitySet"]["item"]), context);
    }
    return contents;
};
const de_DescribeScheduledInstancesResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.scheduledInstanceSet === "") {
        contents.ScheduledInstanceSet = [];
    }
    else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
        contents.ScheduledInstanceSet = de_ScheduledInstanceSet(__getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeSecurityGroupReferencesResult = (output, context) => {
    const contents = {};
    if (output.securityGroupReferenceSet === "") {
        contents.SecurityGroupReferenceSet = [];
    }
    else if (output["securityGroupReferenceSet"] !== undefined &&
        output["securityGroupReferenceSet"]["item"] !== undefined) {
        contents.SecurityGroupReferenceSet = de_SecurityGroupReferences(__getArrayIfSingleItem(output["securityGroupReferenceSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeSecurityGroupRulesResult = (output, context) => {
    const contents = {};
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = de_SecurityGroupRuleList(__getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeSecurityGroupsResult = (output, context) => {
    const contents = {};
    if (output.securityGroupInfo === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupInfo"] !== undefined && output["securityGroupInfo"]["item"] !== undefined) {
        contents.SecurityGroups = de_SecurityGroupList(__getArrayIfSingleItem(output["securityGroupInfo"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeSnapshotAttributeResult = (output, context) => {
    const contents = {};
    if (output.createVolumePermission === "") {
        contents.CreateVolumePermissions = [];
    }
    else if (output["createVolumePermission"] !== undefined && output["createVolumePermission"]["item"] !== undefined) {
        contents.CreateVolumePermissions = de_CreateVolumePermissionList(__getArrayIfSingleItem(output["createVolumePermission"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    return contents;
};
const de_DescribeSnapshotsResult = (output, context) => {
    const contents = {};
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = de_SnapshotList(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeSnapshotTierStatusResult = (output, context) => {
    const contents = {};
    if (output.snapshotTierStatusSet === "") {
        contents.SnapshotTierStatuses = [];
    }
    else if (output["snapshotTierStatusSet"] !== undefined && output["snapshotTierStatusSet"]["item"] !== undefined) {
        contents.SnapshotTierStatuses = de_snapshotTierStatusSet(__getArrayIfSingleItem(output["snapshotTierStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeSpotDatafeedSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["spotDatafeedSubscription"] !== undefined) {
        contents.SpotDatafeedSubscription = de_SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
    }
    return contents;
};
const de_DescribeSpotFleetInstancesResponse = (output, context) => {
    const contents = {};
    if (output.activeInstanceSet === "") {
        contents.ActiveInstances = [];
    }
    else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
        contents.ActiveInstances = de_ActiveInstanceSet(__getArrayIfSingleItem(output["activeInstanceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
const de_DescribeSpotFleetRequestHistoryResponse = (output, context) => {
    const contents = {};
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = de_HistoryRecords(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
    }
    if (output["lastEvaluatedTime"] !== undefined) {
        contents.LastEvaluatedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastEvaluatedTime"]));
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
    }
    return contents;
};
const de_DescribeSpotFleetRequestsResponse = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.spotFleetRequestConfigSet === "") {
        contents.SpotFleetRequestConfigs = [];
    }
    else if (output["spotFleetRequestConfigSet"] !== undefined &&
        output["spotFleetRequestConfigSet"]["item"] !== undefined) {
        contents.SpotFleetRequestConfigs = de_SpotFleetRequestConfigSet(__getArrayIfSingleItem(output["spotFleetRequestConfigSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeSpotInstanceRequestsResult = (output, context) => {
    const contents = {};
    if (output.spotInstanceRequestSet === "") {
        contents.SpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.SpotInstanceRequests = de_SpotInstanceRequestList(__getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeSpotPriceHistoryResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.spotPriceHistorySet === "") {
        contents.SpotPriceHistory = [];
    }
    else if (output["spotPriceHistorySet"] !== undefined && output["spotPriceHistorySet"]["item"] !== undefined) {
        contents.SpotPriceHistory = de_SpotPriceHistoryList(__getArrayIfSingleItem(output["spotPriceHistorySet"]["item"]), context);
    }
    return contents;
};
const de_DescribeStaleSecurityGroupsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.staleSecurityGroupSet === "") {
        contents.StaleSecurityGroupSet = [];
    }
    else if (output["staleSecurityGroupSet"] !== undefined && output["staleSecurityGroupSet"]["item"] !== undefined) {
        contents.StaleSecurityGroupSet = de_StaleSecurityGroupSet(__getArrayIfSingleItem(output["staleSecurityGroupSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeStoreImageTasksResult = (output, context) => {
    const contents = {};
    if (output.storeImageTaskResultSet === "") {
        contents.StoreImageTaskResults = [];
    }
    else if (output["storeImageTaskResultSet"] !== undefined &&
        output["storeImageTaskResultSet"]["item"] !== undefined) {
        contents.StoreImageTaskResults = de_StoreImageTaskResultSet(__getArrayIfSingleItem(output["storeImageTaskResultSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeSubnetsResult = (output, context) => {
    const contents = {};
    if (output.subnetSet === "") {
        contents.Subnets = [];
    }
    else if (output["subnetSet"] !== undefined && output["subnetSet"]["item"] !== undefined) {
        contents.Subnets = de_SubnetList(__getArrayIfSingleItem(output["subnetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTagsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagDescriptionList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeTrafficMirrorFiltersResult = (output, context) => {
    const contents = {};
    if (output.trafficMirrorFilterSet === "") {
        contents.TrafficMirrorFilters = [];
    }
    else if (output["trafficMirrorFilterSet"] !== undefined && output["trafficMirrorFilterSet"]["item"] !== undefined) {
        contents.TrafficMirrorFilters = de_TrafficMirrorFilterSet(__getArrayIfSingleItem(output["trafficMirrorFilterSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTrafficMirrorSessionsResult = (output, context) => {
    const contents = {};
    if (output.trafficMirrorSessionSet === "") {
        contents.TrafficMirrorSessions = [];
    }
    else if (output["trafficMirrorSessionSet"] !== undefined &&
        output["trafficMirrorSessionSet"]["item"] !== undefined) {
        contents.TrafficMirrorSessions = de_TrafficMirrorSessionSet(__getArrayIfSingleItem(output["trafficMirrorSessionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTrafficMirrorTargetsResult = (output, context) => {
    const contents = {};
    if (output.trafficMirrorTargetSet === "") {
        contents.TrafficMirrorTargets = [];
    }
    else if (output["trafficMirrorTargetSet"] !== undefined && output["trafficMirrorTargetSet"]["item"] !== undefined) {
        contents.TrafficMirrorTargets = de_TrafficMirrorTargetSet(__getArrayIfSingleItem(output["trafficMirrorTargetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayAttachmentsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayAttachments === "") {
        contents.TransitGatewayAttachments = [];
    }
    else if (output["transitGatewayAttachments"] !== undefined &&
        output["transitGatewayAttachments"]["item"] !== undefined) {
        contents.TransitGatewayAttachments = de_TransitGatewayAttachmentList(__getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayConnectPeersResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayConnectPeerSet === "") {
        contents.TransitGatewayConnectPeers = [];
    }
    else if (output["transitGatewayConnectPeerSet"] !== undefined &&
        output["transitGatewayConnectPeerSet"]["item"] !== undefined) {
        contents.TransitGatewayConnectPeers = de_TransitGatewayConnectPeerList(__getArrayIfSingleItem(output["transitGatewayConnectPeerSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayConnectsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayConnectSet === "") {
        contents.TransitGatewayConnects = [];
    }
    else if (output["transitGatewayConnectSet"] !== undefined &&
        output["transitGatewayConnectSet"]["item"] !== undefined) {
        contents.TransitGatewayConnects = de_TransitGatewayConnectList(__getArrayIfSingleItem(output["transitGatewayConnectSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayMulticastDomainsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayMulticastDomains === "") {
        contents.TransitGatewayMulticastDomains = [];
    }
    else if (output["transitGatewayMulticastDomains"] !== undefined &&
        output["transitGatewayMulticastDomains"]["item"] !== undefined) {
        contents.TransitGatewayMulticastDomains = de_TransitGatewayMulticastDomainList(__getArrayIfSingleItem(output["transitGatewayMulticastDomains"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayPeeringAttachmentsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayPeeringAttachments === "") {
        contents.TransitGatewayPeeringAttachments = [];
    }
    else if (output["transitGatewayPeeringAttachments"] !== undefined &&
        output["transitGatewayPeeringAttachments"]["item"] !== undefined) {
        contents.TransitGatewayPeeringAttachments = de_TransitGatewayPeeringAttachmentList(__getArrayIfSingleItem(output["transitGatewayPeeringAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayPolicyTablesResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayPolicyTables === "") {
        contents.TransitGatewayPolicyTables = [];
    }
    else if (output["transitGatewayPolicyTables"] !== undefined &&
        output["transitGatewayPolicyTables"]["item"] !== undefined) {
        contents.TransitGatewayPolicyTables = de_TransitGatewayPolicyTableList(__getArrayIfSingleItem(output["transitGatewayPolicyTables"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayRouteTableAnnouncementsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayRouteTableAnnouncements === "") {
        contents.TransitGatewayRouteTableAnnouncements = [];
    }
    else if (output["transitGatewayRouteTableAnnouncements"] !== undefined &&
        output["transitGatewayRouteTableAnnouncements"]["item"] !== undefined) {
        contents.TransitGatewayRouteTableAnnouncements = de_TransitGatewayRouteTableAnnouncementList(__getArrayIfSingleItem(output["transitGatewayRouteTableAnnouncements"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayRouteTablesResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayRouteTables === "") {
        contents.TransitGatewayRouteTables = [];
    }
    else if (output["transitGatewayRouteTables"] !== undefined &&
        output["transitGatewayRouteTables"]["item"] !== undefined) {
        contents.TransitGatewayRouteTables = de_TransitGatewayRouteTableList(__getArrayIfSingleItem(output["transitGatewayRouteTables"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewaysResult = (output, context) => {
    const contents = {};
    if (output.transitGatewaySet === "") {
        contents.TransitGateways = [];
    }
    else if (output["transitGatewaySet"] !== undefined && output["transitGatewaySet"]["item"] !== undefined) {
        contents.TransitGateways = de_TransitGatewayList(__getArrayIfSingleItem(output["transitGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTransitGatewayVpcAttachmentsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayVpcAttachments === "") {
        contents.TransitGatewayVpcAttachments = [];
    }
    else if (output["transitGatewayVpcAttachments"] !== undefined &&
        output["transitGatewayVpcAttachments"]["item"] !== undefined) {
        contents.TransitGatewayVpcAttachments = de_TransitGatewayVpcAttachmentList(__getArrayIfSingleItem(output["transitGatewayVpcAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeTrunkInterfaceAssociationsResult = (output, context) => {
    const contents = {};
    if (output.interfaceAssociationSet === "") {
        contents.InterfaceAssociations = [];
    }
    else if (output["interfaceAssociationSet"] !== undefined &&
        output["interfaceAssociationSet"]["item"] !== undefined) {
        contents.InterfaceAssociations = de_TrunkInterfaceAssociationList(__getArrayIfSingleItem(output["interfaceAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVerifiedAccessEndpointsResult = (output, context) => {
    const contents = {};
    if (output.verifiedAccessEndpointSet === "") {
        contents.VerifiedAccessEndpoints = [];
    }
    else if (output["verifiedAccessEndpointSet"] !== undefined &&
        output["verifiedAccessEndpointSet"]["item"] !== undefined) {
        contents.VerifiedAccessEndpoints = de_VerifiedAccessEndpointList(__getArrayIfSingleItem(output["verifiedAccessEndpointSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVerifiedAccessGroupsResult = (output, context) => {
    const contents = {};
    if (output.verifiedAccessGroupSet === "") {
        contents.VerifiedAccessGroups = [];
    }
    else if (output["verifiedAccessGroupSet"] !== undefined && output["verifiedAccessGroupSet"]["item"] !== undefined) {
        contents.VerifiedAccessGroups = de_VerifiedAccessGroupList(__getArrayIfSingleItem(output["verifiedAccessGroupSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult = (output, context) => {
    const contents = {};
    if (output.loggingConfigurationSet === "") {
        contents.LoggingConfigurations = [];
    }
    else if (output["loggingConfigurationSet"] !== undefined &&
        output["loggingConfigurationSet"]["item"] !== undefined) {
        contents.LoggingConfigurations = de_VerifiedAccessInstanceLoggingConfigurationList(__getArrayIfSingleItem(output["loggingConfigurationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVerifiedAccessInstancesResult = (output, context) => {
    const contents = {};
    if (output.verifiedAccessInstanceSet === "") {
        contents.VerifiedAccessInstances = [];
    }
    else if (output["verifiedAccessInstanceSet"] !== undefined &&
        output["verifiedAccessInstanceSet"]["item"] !== undefined) {
        contents.VerifiedAccessInstances = de_VerifiedAccessInstanceList(__getArrayIfSingleItem(output["verifiedAccessInstanceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVerifiedAccessTrustProvidersResult = (output, context) => {
    const contents = {};
    if (output.verifiedAccessTrustProviderSet === "") {
        contents.VerifiedAccessTrustProviders = [];
    }
    else if (output["verifiedAccessTrustProviderSet"] !== undefined &&
        output["verifiedAccessTrustProviderSet"]["item"] !== undefined) {
        contents.VerifiedAccessTrustProviders = de_VerifiedAccessTrustProviderList(__getArrayIfSingleItem(output["verifiedAccessTrustProviderSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVolumeAttributeResult = (output, context) => {
    const contents = {};
    if (output["autoEnableIO"] !== undefined) {
        contents.AutoEnableIO = de_AttributeBooleanValue(output["autoEnableIO"], context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    return contents;
};
const de_DescribeVolumesModificationsResult = (output, context) => {
    const contents = {};
    if (output.volumeModificationSet === "") {
        contents.VolumesModifications = [];
    }
    else if (output["volumeModificationSet"] !== undefined && output["volumeModificationSet"]["item"] !== undefined) {
        contents.VolumesModifications = de_VolumeModificationList(__getArrayIfSingleItem(output["volumeModificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVolumesResult = (output, context) => {
    const contents = {};
    if (output.volumeSet === "") {
        contents.Volumes = [];
    }
    else if (output["volumeSet"] !== undefined && output["volumeSet"]["item"] !== undefined) {
        contents.Volumes = de_VolumeList(__getArrayIfSingleItem(output["volumeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVolumeStatusResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.volumeStatusSet === "") {
        contents.VolumeStatuses = [];
    }
    else if (output["volumeStatusSet"] !== undefined && output["volumeStatusSet"]["item"] !== undefined) {
        contents.VolumeStatuses = de_VolumeStatusList(__getArrayIfSingleItem(output["volumeStatusSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeVpcAttributeResult = (output, context) => {
    const contents = {};
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["enableDnsHostnames"] !== undefined) {
        contents.EnableDnsHostnames = de_AttributeBooleanValue(output["enableDnsHostnames"], context);
    }
    if (output["enableDnsSupport"] !== undefined) {
        contents.EnableDnsSupport = de_AttributeBooleanValue(output["enableDnsSupport"], context);
    }
    if (output["enableNetworkAddressUsageMetrics"] !== undefined) {
        contents.EnableNetworkAddressUsageMetrics = de_AttributeBooleanValue(output["enableNetworkAddressUsageMetrics"], context);
    }
    return contents;
};
const de_DescribeVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.vpcs === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcs"] !== undefined && output["vpcs"]["item"] !== undefined) {
        contents.Vpcs = de_ClassicLinkDnsSupportList(__getArrayIfSingleItem(output["vpcs"]["item"]), context);
    }
    return contents;
};
const de_DescribeVpcClassicLinkResult = (output, context) => {
    const contents = {};
    if (output.vpcSet === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
        contents.Vpcs = de_VpcClassicLinkList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeVpcEndpointConnectionNotificationsResult = (output, context) => {
    const contents = {};
    if (output.connectionNotificationSet === "") {
        contents.ConnectionNotificationSet = [];
    }
    else if (output["connectionNotificationSet"] !== undefined &&
        output["connectionNotificationSet"]["item"] !== undefined) {
        contents.ConnectionNotificationSet = de_ConnectionNotificationSet(__getArrayIfSingleItem(output["connectionNotificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpcEndpointConnectionsResult = (output, context) => {
    const contents = {};
    if (output.vpcEndpointConnectionSet === "") {
        contents.VpcEndpointConnections = [];
    }
    else if (output["vpcEndpointConnectionSet"] !== undefined &&
        output["vpcEndpointConnectionSet"]["item"] !== undefined) {
        contents.VpcEndpointConnections = de_VpcEndpointConnectionSet(__getArrayIfSingleItem(output["vpcEndpointConnectionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpcEndpointServiceConfigurationsResult = (output, context) => {
    const contents = {};
    if (output.serviceConfigurationSet === "") {
        contents.ServiceConfigurations = [];
    }
    else if (output["serviceConfigurationSet"] !== undefined &&
        output["serviceConfigurationSet"]["item"] !== undefined) {
        contents.ServiceConfigurations = de_ServiceConfigurationSet(__getArrayIfSingleItem(output["serviceConfigurationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpcEndpointServicePermissionsResult = (output, context) => {
    const contents = {};
    if (output.allowedPrincipals === "") {
        contents.AllowedPrincipals = [];
    }
    else if (output["allowedPrincipals"] !== undefined && output["allowedPrincipals"]["item"] !== undefined) {
        contents.AllowedPrincipals = de_AllowedPrincipalSet(__getArrayIfSingleItem(output["allowedPrincipals"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpcEndpointServicesResult = (output, context) => {
    const contents = {};
    if (output.serviceNameSet === "") {
        contents.ServiceNames = [];
    }
    else if (output["serviceNameSet"] !== undefined && output["serviceNameSet"]["item"] !== undefined) {
        contents.ServiceNames = de_ValueStringList(__getArrayIfSingleItem(output["serviceNameSet"]["item"]), context);
    }
    if (output.serviceDetailSet === "") {
        contents.ServiceDetails = [];
    }
    else if (output["serviceDetailSet"] !== undefined && output["serviceDetailSet"]["item"] !== undefined) {
        contents.ServiceDetails = de_ServiceDetailSet(__getArrayIfSingleItem(output["serviceDetailSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpcEndpointsResult = (output, context) => {
    const contents = {};
    if (output.vpcEndpointSet === "") {
        contents.VpcEndpoints = [];
    }
    else if (output["vpcEndpointSet"] !== undefined && output["vpcEndpointSet"]["item"] !== undefined) {
        contents.VpcEndpoints = de_VpcEndpointSet(__getArrayIfSingleItem(output["vpcEndpointSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpcPeeringConnectionsResult = (output, context) => {
    const contents = {};
    if (output.vpcPeeringConnectionSet === "") {
        contents.VpcPeeringConnections = [];
    }
    else if (output["vpcPeeringConnectionSet"] !== undefined &&
        output["vpcPeeringConnectionSet"]["item"] !== undefined) {
        contents.VpcPeeringConnections = de_VpcPeeringConnectionList(__getArrayIfSingleItem(output["vpcPeeringConnectionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpcsResult = (output, context) => {
    const contents = {};
    if (output.vpcSet === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
        contents.Vpcs = de_VpcList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_DescribeVpnConnectionsResult = (output, context) => {
    const contents = {};
    if (output.vpnConnectionSet === "") {
        contents.VpnConnections = [];
    }
    else if (output["vpnConnectionSet"] !== undefined && output["vpnConnectionSet"]["item"] !== undefined) {
        contents.VpnConnections = de_VpnConnectionList(__getArrayIfSingleItem(output["vpnConnectionSet"]["item"]), context);
    }
    return contents;
};
const de_DescribeVpnGatewaysResult = (output, context) => {
    const contents = {};
    if (output.vpnGatewaySet === "") {
        contents.VpnGateways = [];
    }
    else if (output["vpnGatewaySet"] !== undefined && output["vpnGatewaySet"]["item"] !== undefined) {
        contents.VpnGateways = de_VpnGatewayList(__getArrayIfSingleItem(output["vpnGatewaySet"]["item"]), context);
    }
    return contents;
};
const de_DestinationOptionsResponse = (output, context) => {
    const contents = {};
    if (output["fileFormat"] !== undefined) {
        contents.FileFormat = __expectString(output["fileFormat"]);
    }
    if (output["hiveCompatiblePartitions"] !== undefined) {
        contents.HiveCompatiblePartitions = __parseBoolean(output["hiveCompatiblePartitions"]);
    }
    if (output["perHourPartition"] !== undefined) {
        contents.PerHourPartition = __parseBoolean(output["perHourPartition"]);
    }
    return contents;
};
const de_DetachClassicLinkVpcResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DetachVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessTrustProvider"] !== undefined) {
        contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(output["verifiedAccessTrustProvider"], context);
    }
    if (output["verifiedAccessInstance"] !== undefined) {
        contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
    }
    return contents;
};
const de_DeviceOptions = (output, context) => {
    const contents = {};
    if (output["tenantId"] !== undefined) {
        contents.TenantId = __expectString(output["tenantId"]);
    }
    return contents;
};
const de_DhcpConfiguration = (output, context) => {
    const contents = {};
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output.valueSet === "") {
        contents.Values = [];
    }
    else if (output["valueSet"] !== undefined && output["valueSet"]["item"] !== undefined) {
        contents.Values = de_DhcpConfigurationValueList(__getArrayIfSingleItem(output["valueSet"]["item"]), context);
    }
    return contents;
};
const de_DhcpConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DhcpConfiguration(entry, context);
    });
};
const de_DhcpConfigurationValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeValue(entry, context);
    });
};
const de_DhcpOptions = (output, context) => {
    const contents = {};
    if (output.dhcpConfigurationSet === "") {
        contents.DhcpConfigurations = [];
    }
    else if (output["dhcpConfigurationSet"] !== undefined && output["dhcpConfigurationSet"]["item"] !== undefined) {
        contents.DhcpConfigurations = de_DhcpConfigurationList(__getArrayIfSingleItem(output["dhcpConfigurationSet"]["item"]), context);
    }
    if (output["dhcpOptionsId"] !== undefined) {
        contents.DhcpOptionsId = __expectString(output["dhcpOptionsId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_DhcpOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DhcpOptions(entry, context);
    });
};
const de_DirectoryServiceAuthentication = (output, context) => {
    const contents = {};
    if (output["directoryId"] !== undefined) {
        contents.DirectoryId = __expectString(output["directoryId"]);
    }
    return contents;
};
const de_DisableAddressTransferResult = (output, context) => {
    const contents = {};
    if (output["addressTransfer"] !== undefined) {
        contents.AddressTransfer = de_AddressTransfer(output["addressTransfer"], context);
    }
    return contents;
};
const de_DisableAwsNetworkPerformanceMetricSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["output"] !== undefined) {
        contents.Output = __parseBoolean(output["output"]);
    }
    return contents;
};
const de_DisableEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {};
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
const de_DisableFastLaunchResult = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = de_FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = de_FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["stateTransitionTime"]));
    }
    return contents;
};
const de_DisableFastSnapshotRestoreErrorItem = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output.fastSnapshotRestoreStateErrorSet === "") {
        contents.FastSnapshotRestoreStateErrors = [];
    }
    else if (output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
        output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined) {
        contents.FastSnapshotRestoreStateErrors = de_DisableFastSnapshotRestoreStateErrorSet(__getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]), context);
    }
    return contents;
};
const de_DisableFastSnapshotRestoreErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DisableFastSnapshotRestoreErrorItem(entry, context);
    });
};
const de_DisableFastSnapshotRestoresResult = (output, context) => {
    const contents = {};
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = de_DisableFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_DisableFastSnapshotRestoreErrorSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_DisableFastSnapshotRestoreStateError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_DisableFastSnapshotRestoreStateErrorItem = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = de_DisableFastSnapshotRestoreStateError(output["error"], context);
    }
    return contents;
};
const de_DisableFastSnapshotRestoreStateErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DisableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};
const de_DisableFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disabledTime"]));
    }
    return contents;
};
const de_DisableFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DisableFastSnapshotRestoreSuccessItem(entry, context);
    });
};
const de_DisableImageDeprecationResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DisableIpamOrganizationAdminAccountResult = (output, context) => {
    const contents = {};
    if (output["success"] !== undefined) {
        contents.Success = __parseBoolean(output["success"]);
    }
    return contents;
};
const de_DisableSerialConsoleAccessResult = (output, context) => {
    const contents = {};
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
const de_DisableTransitGatewayRouteTablePropagationResult = (output, context) => {
    const contents = {};
    if (output["propagation"] !== undefined) {
        contents.Propagation = de_TransitGatewayPropagation(output["propagation"], context);
    }
    return contents;
};
const de_DisableVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DisableVpcClassicLinkResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DisassociateClientVpnTargetNetworkResult = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_AssociationStatus(output["status"], context);
    }
    return contents;
};
const de_DisassociateEnclaveCertificateIamRoleResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_DisassociateIamInstanceProfileResult = (output, context) => {
    const contents = {};
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = de_IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
const de_DisassociateInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const de_DisassociateIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output["ipamResourceDiscoveryAssociation"] !== undefined) {
        contents.IpamResourceDiscoveryAssociation = de_IpamResourceDiscoveryAssociation(output["ipamResourceDiscoveryAssociation"], context);
    }
    return contents;
};
const de_DisassociateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output.natGatewayAddressSet === "") {
        contents.NatGatewayAddresses = [];
    }
    else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
        contents.NatGatewayAddresses = de_NatGatewayAddressList(__getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]), context);
    }
    return contents;
};
const de_DisassociateSubnetCidrBlockResult = (output, context) => {
    const contents = {};
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = de_SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    return contents;
};
const de_DisassociateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output["associations"] !== undefined) {
        contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const de_DisassociateTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_TransitGatewayPolicyTableAssociation(output["association"], context);
    }
    return contents;
};
const de_DisassociateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_TransitGatewayAssociation(output["association"], context);
    }
    return contents;
};
const de_DisassociateTrunkInterfaceResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
const de_DisassociateVpcCidrBlockResult = (output, context) => {
    const contents = {};
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = de_VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["cidrBlockAssociation"] !== undefined) {
        contents.CidrBlockAssociation = de_VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_DiskImageDescription = (output, context) => {
    const contents = {};
    if (output["checksum"] !== undefined) {
        contents.Checksum = __expectString(output["checksum"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = __expectString(output["format"]);
    }
    if (output["importManifestUrl"] !== undefined) {
        contents.ImportManifestUrl = __expectString(output["importManifestUrl"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = __strictParseLong(output["size"]);
    }
    return contents;
};
const de_DiskImageVolumeDescription = (output, context) => {
    const contents = {};
    if (output["id"] !== undefined) {
        contents.Id = __expectString(output["id"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = __strictParseLong(output["size"]);
    }
    return contents;
};
const de_DiskInfo = (output, context) => {
    const contents = {};
    if (output["sizeInGB"] !== undefined) {
        contents.SizeInGB = __strictParseLong(output["sizeInGB"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    return contents;
};
const de_DiskInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DiskInfo(entry, context);
    });
};
const de_DnsEntry = (output, context) => {
    const contents = {};
    if (output["dnsName"] !== undefined) {
        contents.DnsName = __expectString(output["dnsName"]);
    }
    if (output["hostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["hostedZoneId"]);
    }
    return contents;
};
const de_DnsEntrySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DnsEntry(entry, context);
    });
};
const de_DnsOptions = (output, context) => {
    const contents = {};
    if (output["dnsRecordIpType"] !== undefined) {
        contents.DnsRecordIpType = __expectString(output["dnsRecordIpType"]);
    }
    if (output["privateDnsOnlyForInboundResolverEndpoint"] !== undefined) {
        contents.PrivateDnsOnlyForInboundResolverEndpoint = __parseBoolean(output["privateDnsOnlyForInboundResolverEndpoint"]);
    }
    return contents;
};
const de_EbsBlockDevice = (output, context) => {
    const contents = {};
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["iops"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = __expectString(output["volumeType"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = __strictParseInt32(output["throughput"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    return contents;
};
const de_EbsInfo = (output, context) => {
    const contents = {};
    if (output["ebsOptimizedSupport"] !== undefined) {
        contents.EbsOptimizedSupport = __expectString(output["ebsOptimizedSupport"]);
    }
    if (output["encryptionSupport"] !== undefined) {
        contents.EncryptionSupport = __expectString(output["encryptionSupport"]);
    }
    if (output["ebsOptimizedInfo"] !== undefined) {
        contents.EbsOptimizedInfo = de_EbsOptimizedInfo(output["ebsOptimizedInfo"], context);
    }
    if (output["nvmeSupport"] !== undefined) {
        contents.NvmeSupport = __expectString(output["nvmeSupport"]);
    }
    return contents;
};
const de_EbsInstanceBlockDevice = (output, context) => {
    const contents = {};
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    return contents;
};
const de_EbsOptimizedInfo = (output, context) => {
    const contents = {};
    if (output["baselineBandwidthInMbps"] !== undefined) {
        contents.BaselineBandwidthInMbps = __strictParseInt32(output["baselineBandwidthInMbps"]);
    }
    if (output["baselineThroughputInMBps"] !== undefined) {
        contents.BaselineThroughputInMBps = __strictParseFloat(output["baselineThroughputInMBps"]);
    }
    if (output["baselineIops"] !== undefined) {
        contents.BaselineIops = __strictParseInt32(output["baselineIops"]);
    }
    if (output["maximumBandwidthInMbps"] !== undefined) {
        contents.MaximumBandwidthInMbps = __strictParseInt32(output["maximumBandwidthInMbps"]);
    }
    if (output["maximumThroughputInMBps"] !== undefined) {
        contents.MaximumThroughputInMBps = __strictParseFloat(output["maximumThroughputInMBps"]);
    }
    if (output["maximumIops"] !== undefined) {
        contents.MaximumIops = __strictParseInt32(output["maximumIops"]);
    }
    return contents;
};
const de_EfaInfo = (output, context) => {
    const contents = {};
    if (output["maximumEfaInterfaces"] !== undefined) {
        contents.MaximumEfaInterfaces = __strictParseInt32(output["maximumEfaInterfaces"]);
    }
    return contents;
};
const de_EgressOnlyInternetGateway = (output, context) => {
    const contents = {};
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = de_InternetGatewayAttachmentList(__getArrayIfSingleItem(output["attachmentSet"]["item"]), context);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_EgressOnlyInternetGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EgressOnlyInternetGateway(entry, context);
    });
};
const de_ElasticGpuAssociation = (output, context) => {
    const contents = {};
    if (output["elasticGpuId"] !== undefined) {
        contents.ElasticGpuId = __expectString(output["elasticGpuId"]);
    }
    if (output["elasticGpuAssociationId"] !== undefined) {
        contents.ElasticGpuAssociationId = __expectString(output["elasticGpuAssociationId"]);
    }
    if (output["elasticGpuAssociationState"] !== undefined) {
        contents.ElasticGpuAssociationState = __expectString(output["elasticGpuAssociationState"]);
    }
    if (output["elasticGpuAssociationTime"] !== undefined) {
        contents.ElasticGpuAssociationTime = __expectString(output["elasticGpuAssociationTime"]);
    }
    return contents;
};
const de_ElasticGpuAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticGpuAssociation(entry, context);
    });
};
const de_ElasticGpuHealth = (output, context) => {
    const contents = {};
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_ElasticGpus = (output, context) => {
    const contents = {};
    if (output["elasticGpuId"] !== undefined) {
        contents.ElasticGpuId = __expectString(output["elasticGpuId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["elasticGpuType"] !== undefined) {
        contents.ElasticGpuType = __expectString(output["elasticGpuType"]);
    }
    if (output["elasticGpuHealth"] !== undefined) {
        contents.ElasticGpuHealth = de_ElasticGpuHealth(output["elasticGpuHealth"], context);
    }
    if (output["elasticGpuState"] !== undefined) {
        contents.ElasticGpuState = __expectString(output["elasticGpuState"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ElasticGpuSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticGpus(entry, context);
    });
};
const de_ElasticGpuSpecificationResponse = (output, context) => {
    const contents = {};
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    return contents;
};
const de_ElasticGpuSpecificationResponseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticGpuSpecificationResponse(entry, context);
    });
};
const de_ElasticInferenceAcceleratorAssociation = (output, context) => {
    const contents = {};
    if (output["elasticInferenceAcceleratorArn"] !== undefined) {
        contents.ElasticInferenceAcceleratorArn = __expectString(output["elasticInferenceAcceleratorArn"]);
    }
    if (output["elasticInferenceAcceleratorAssociationId"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationId = __expectString(output["elasticInferenceAcceleratorAssociationId"]);
    }
    if (output["elasticInferenceAcceleratorAssociationState"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationState = __expectString(output["elasticInferenceAcceleratorAssociationState"]);
    }
    if (output["elasticInferenceAcceleratorAssociationTime"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["elasticInferenceAcceleratorAssociationTime"]));
    }
    return contents;
};
const de_ElasticInferenceAcceleratorAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticInferenceAcceleratorAssociation(entry, context);
    });
};
const de_EnableAddressTransferResult = (output, context) => {
    const contents = {};
    if (output["addressTransfer"] !== undefined) {
        contents.AddressTransfer = de_AddressTransfer(output["addressTransfer"], context);
    }
    return contents;
};
const de_EnableAwsNetworkPerformanceMetricSubscriptionResult = (output, context) => {
    const contents = {};
    if (output["output"] !== undefined) {
        contents.Output = __parseBoolean(output["output"]);
    }
    return contents;
};
const de_EnableEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {};
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
const de_EnableFastLaunchResult = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = de_FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = de_FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["stateTransitionTime"]));
    }
    return contents;
};
const de_EnableFastSnapshotRestoreErrorItem = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output.fastSnapshotRestoreStateErrorSet === "") {
        contents.FastSnapshotRestoreStateErrors = [];
    }
    else if (output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
        output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined) {
        contents.FastSnapshotRestoreStateErrors = de_EnableFastSnapshotRestoreStateErrorSet(__getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]), context);
    }
    return contents;
};
const de_EnableFastSnapshotRestoreErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnableFastSnapshotRestoreErrorItem(entry, context);
    });
};
const de_EnableFastSnapshotRestoresResult = (output, context) => {
    const contents = {};
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = de_EnableFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_EnableFastSnapshotRestoreErrorSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_EnableFastSnapshotRestoreStateError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_EnableFastSnapshotRestoreStateErrorItem = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = de_EnableFastSnapshotRestoreStateError(output["error"], context);
    }
    return contents;
};
const de_EnableFastSnapshotRestoreStateErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};
const de_EnableFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disabledTime"]));
    }
    return contents;
};
const de_EnableFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnableFastSnapshotRestoreSuccessItem(entry, context);
    });
};
const de_EnableImageDeprecationResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_EnableIpamOrganizationAdminAccountResult = (output, context) => {
    const contents = {};
    if (output["success"] !== undefined) {
        contents.Success = __parseBoolean(output["success"]);
    }
    return contents;
};
const de_EnableReachabilityAnalyzerOrganizationSharingResult = (output, context) => {
    const contents = {};
    if (output["returnValue"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["returnValue"]);
    }
    return contents;
};
const de_EnableSerialConsoleAccessResult = (output, context) => {
    const contents = {};
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
const de_EnableTransitGatewayRouteTablePropagationResult = (output, context) => {
    const contents = {};
    if (output["propagation"] !== undefined) {
        contents.Propagation = de_TransitGatewayPropagation(output["propagation"], context);
    }
    return contents;
};
const de_EnableVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_EnableVpcClassicLinkResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_EnclaveOptions = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
const de_EndpointSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnEndpoint(entry, context);
    });
};
const de_ErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationError(entry, context);
    });
};
const de_EventInformation = (output, context) => {
    const contents = {};
    if (output["eventDescription"] !== undefined) {
        contents.EventDescription = __expectString(output["eventDescription"]);
    }
    if (output["eventSubType"] !== undefined) {
        contents.EventSubType = __expectString(output["eventSubType"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
const de_ExcludedInstanceTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Explanation = (output, context) => {
    const contents = {};
    if (output["acl"] !== undefined) {
        contents.Acl = de_AnalysisComponent(output["acl"], context);
    }
    if (output["aclRule"] !== undefined) {
        contents.AclRule = de_AnalysisAclRule(output["aclRule"], context);
    }
    if (output["address"] !== undefined) {
        contents.Address = __expectString(output["address"]);
    }
    if (output.addressSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
        contents.Addresses = de_IpAddressList(__getArrayIfSingleItem(output["addressSet"]["item"]), context);
    }
    if (output["attachedTo"] !== undefined) {
        contents.AttachedTo = de_AnalysisComponent(output["attachedTo"], context);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = de_ValueStringList(__getArrayIfSingleItem(output["availabilityZoneSet"]["item"]), context);
    }
    if (output.cidrSet === "") {
        contents.Cidrs = [];
    }
    else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
        contents.Cidrs = de_ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
    }
    if (output["component"] !== undefined) {
        contents.Component = de_AnalysisComponent(output["component"], context);
    }
    if (output["customerGateway"] !== undefined) {
        contents.CustomerGateway = de_AnalysisComponent(output["customerGateway"], context);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = de_AnalysisComponent(output["destination"], context);
    }
    if (output["destinationVpc"] !== undefined) {
        contents.DestinationVpc = de_AnalysisComponent(output["destinationVpc"], context);
    }
    if (output["direction"] !== undefined) {
        contents.Direction = __expectString(output["direction"]);
    }
    if (output["explanationCode"] !== undefined) {
        contents.ExplanationCode = __expectString(output["explanationCode"]);
    }
    if (output["ingressRouteTable"] !== undefined) {
        contents.IngressRouteTable = de_AnalysisComponent(output["ingressRouteTable"], context);
    }
    if (output["internetGateway"] !== undefined) {
        contents.InternetGateway = de_AnalysisComponent(output["internetGateway"], context);
    }
    if (output["loadBalancerArn"] !== undefined) {
        contents.LoadBalancerArn = __expectString(output["loadBalancerArn"]);
    }
    if (output["classicLoadBalancerListener"] !== undefined) {
        contents.ClassicLoadBalancerListener = de_AnalysisLoadBalancerListener(output["classicLoadBalancerListener"], context);
    }
    if (output["loadBalancerListenerPort"] !== undefined) {
        contents.LoadBalancerListenerPort = __strictParseInt32(output["loadBalancerListenerPort"]);
    }
    if (output["loadBalancerTarget"] !== undefined) {
        contents.LoadBalancerTarget = de_AnalysisLoadBalancerTarget(output["loadBalancerTarget"], context);
    }
    if (output["loadBalancerTargetGroup"] !== undefined) {
        contents.LoadBalancerTargetGroup = de_AnalysisComponent(output["loadBalancerTargetGroup"], context);
    }
    if (output.loadBalancerTargetGroupSet === "") {
        contents.LoadBalancerTargetGroups = [];
    }
    else if (output["loadBalancerTargetGroupSet"] !== undefined &&
        output["loadBalancerTargetGroupSet"]["item"] !== undefined) {
        contents.LoadBalancerTargetGroups = de_AnalysisComponentList(__getArrayIfSingleItem(output["loadBalancerTargetGroupSet"]["item"]), context);
    }
    if (output["loadBalancerTargetPort"] !== undefined) {
        contents.LoadBalancerTargetPort = __strictParseInt32(output["loadBalancerTargetPort"]);
    }
    if (output["elasticLoadBalancerListener"] !== undefined) {
        contents.ElasticLoadBalancerListener = de_AnalysisComponent(output["elasticLoadBalancerListener"], context);
    }
    if (output["missingComponent"] !== undefined) {
        contents.MissingComponent = __expectString(output["missingComponent"]);
    }
    if (output["natGateway"] !== undefined) {
        contents.NatGateway = de_AnalysisComponent(output["natGateway"], context);
    }
    if (output["networkInterface"] !== undefined) {
        contents.NetworkInterface = de_AnalysisComponent(output["networkInterface"], context);
    }
    if (output["packetField"] !== undefined) {
        contents.PacketField = __expectString(output["packetField"]);
    }
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = de_AnalysisComponent(output["vpcPeeringConnection"], context);
    }
    if (output["port"] !== undefined) {
        contents.Port = __strictParseInt32(output["port"]);
    }
    if (output.portRangeSet === "") {
        contents.PortRanges = [];
    }
    else if (output["portRangeSet"] !== undefined && output["portRangeSet"]["item"] !== undefined) {
        contents.PortRanges = de_PortRangeList(__getArrayIfSingleItem(output["portRangeSet"]["item"]), context);
    }
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = de_AnalysisComponent(output["prefixList"], context);
    }
    if (output.protocolSet === "") {
        contents.Protocols = [];
    }
    else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
        contents.Protocols = de_StringList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
    }
    if (output["routeTableRoute"] !== undefined) {
        contents.RouteTableRoute = de_AnalysisRouteTableRoute(output["routeTableRoute"], context);
    }
    if (output["routeTable"] !== undefined) {
        contents.RouteTable = de_AnalysisComponent(output["routeTable"], context);
    }
    if (output["securityGroup"] !== undefined) {
        contents.SecurityGroup = de_AnalysisComponent(output["securityGroup"], context);
    }
    if (output["securityGroupRule"] !== undefined) {
        contents.SecurityGroupRule = de_AnalysisSecurityGroupRule(output["securityGroupRule"], context);
    }
    if (output.securityGroupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
        contents.SecurityGroups = de_AnalysisComponentList(__getArrayIfSingleItem(output["securityGroupSet"]["item"]), context);
    }
    if (output["sourceVpc"] !== undefined) {
        contents.SourceVpc = de_AnalysisComponent(output["sourceVpc"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = de_AnalysisComponent(output["subnet"], context);
    }
    if (output["subnetRouteTable"] !== undefined) {
        contents.SubnetRouteTable = de_AnalysisComponent(output["subnetRouteTable"], context);
    }
    if (output["vpc"] !== undefined) {
        contents.Vpc = de_AnalysisComponent(output["vpc"], context);
    }
    if (output["vpcEndpoint"] !== undefined) {
        contents.VpcEndpoint = de_AnalysisComponent(output["vpcEndpoint"], context);
    }
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = de_AnalysisComponent(output["vpnConnection"], context);
    }
    if (output["vpnGateway"] !== undefined) {
        contents.VpnGateway = de_AnalysisComponent(output["vpnGateway"], context);
    }
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = de_AnalysisComponent(output["transitGateway"], context);
    }
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = de_AnalysisComponent(output["transitGatewayRouteTable"], context);
    }
    if (output["transitGatewayRouteTableRoute"] !== undefined) {
        contents.TransitGatewayRouteTableRoute = de_TransitGatewayRouteTableRoute(output["transitGatewayRouteTableRoute"], context);
    }
    if (output["transitGatewayAttachment"] !== undefined) {
        contents.TransitGatewayAttachment = de_AnalysisComponent(output["transitGatewayAttachment"], context);
    }
    if (output["componentAccount"] !== undefined) {
        contents.ComponentAccount = __expectString(output["componentAccount"]);
    }
    if (output["componentRegion"] !== undefined) {
        contents.ComponentRegion = __expectString(output["componentRegion"]);
    }
    if (output["firewallStatelessRule"] !== undefined) {
        contents.FirewallStatelessRule = de_FirewallStatelessRule(output["firewallStatelessRule"], context);
    }
    if (output["firewallStatefulRule"] !== undefined) {
        contents.FirewallStatefulRule = de_FirewallStatefulRule(output["firewallStatefulRule"], context);
    }
    return contents;
};
const de_ExplanationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Explanation(entry, context);
    });
};
const de_ExportClientVpnClientCertificateRevocationListResult = (output, context) => {
    const contents = {};
    if (output["certificateRevocationList"] !== undefined) {
        contents.CertificateRevocationList = __expectString(output["certificateRevocationList"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_ClientCertificateRevocationListStatus(output["status"], context);
    }
    return contents;
};
const de_ExportClientVpnClientConfigurationResult = (output, context) => {
    const contents = {};
    if (output["clientConfiguration"] !== undefined) {
        contents.ClientConfiguration = __expectString(output["clientConfiguration"]);
    }
    return contents;
};
const de_ExportImageResult = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["diskImageFormat"] !== undefined) {
        contents.DiskImageFormat = __expectString(output["diskImageFormat"]);
    }
    if (output["exportImageTaskId"] !== undefined) {
        contents.ExportImageTaskId = __expectString(output["exportImageTaskId"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["roleName"] !== undefined) {
        contents.RoleName = __expectString(output["roleName"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["s3ExportLocation"] !== undefined) {
        contents.S3ExportLocation = de_ExportTaskS3Location(output["s3ExportLocation"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ExportImageTask = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["exportImageTaskId"] !== undefined) {
        contents.ExportImageTaskId = __expectString(output["exportImageTaskId"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["s3ExportLocation"] !== undefined) {
        contents.S3ExportLocation = de_ExportTaskS3Location(output["s3ExportLocation"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ExportImageTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportImageTask(entry, context);
    });
};
const de_ExportTask = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["exportTaskId"] !== undefined) {
        contents.ExportTaskId = __expectString(output["exportTaskId"]);
    }
    if (output["exportToS3"] !== undefined) {
        contents.ExportToS3Task = de_ExportToS3Task(output["exportToS3"], context);
    }
    if (output["instanceExport"] !== undefined) {
        contents.InstanceExportDetails = de_InstanceExportDetails(output["instanceExport"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ExportTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportTask(entry, context);
    });
};
const de_ExportTaskS3Location = (output, context) => {
    const contents = {};
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["s3Bucket"]);
    }
    if (output["s3Prefix"] !== undefined) {
        contents.S3Prefix = __expectString(output["s3Prefix"]);
    }
    return contents;
};
const de_ExportToS3Task = (output, context) => {
    const contents = {};
    if (output["containerFormat"] !== undefined) {
        contents.ContainerFormat = __expectString(output["containerFormat"]);
    }
    if (output["diskImageFormat"] !== undefined) {
        contents.DiskImageFormat = __expectString(output["diskImageFormat"]);
    }
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["s3Bucket"]);
    }
    if (output["s3Key"] !== undefined) {
        contents.S3Key = __expectString(output["s3Key"]);
    }
    return contents;
};
const de_ExportTransitGatewayRoutesResult = (output, context) => {
    const contents = {};
    if (output["s3Location"] !== undefined) {
        contents.S3Location = __expectString(output["s3Location"]);
    }
    return contents;
};
const de_FailedCapacityReservationFleetCancellationResult = (output, context) => {
    const contents = {};
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["cancelCapacityReservationFleetError"] !== undefined) {
        contents.CancelCapacityReservationFleetError = de_CancelCapacityReservationFleetError(output["cancelCapacityReservationFleetError"], context);
    }
    return contents;
};
const de_FailedCapacityReservationFleetCancellationResultSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FailedCapacityReservationFleetCancellationResult(entry, context);
    });
};
const de_FailedQueuedPurchaseDeletion = (output, context) => {
    const contents = {};
    if (output["error"] !== undefined) {
        contents.Error = de_DeleteQueuedReservedInstancesError(output["error"], context);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
const de_FailedQueuedPurchaseDeletionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FailedQueuedPurchaseDeletion(entry, context);
    });
};
const de_FastLaunchLaunchTemplateSpecificationResponse = (output, context) => {
    const contents = {};
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = __expectString(output["version"]);
    }
    return contents;
};
const de_FastLaunchSnapshotConfigurationResponse = (output, context) => {
    const contents = {};
    if (output["targetResourceCount"] !== undefined) {
        contents.TargetResourceCount = __strictParseInt32(output["targetResourceCount"]);
    }
    return contents;
};
const de_FederatedAuthentication = (output, context) => {
    const contents = {};
    if (output["samlProviderArn"] !== undefined) {
        contents.SamlProviderArn = __expectString(output["samlProviderArn"]);
    }
    if (output["selfServiceSamlProviderArn"] !== undefined) {
        contents.SelfServiceSamlProviderArn = __expectString(output["selfServiceSamlProviderArn"]);
    }
    return contents;
};
const de_FilterPortRange = (output, context) => {
    const contents = {};
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    return contents;
};
const de_FirewallStatefulRule = (output, context) => {
    const contents = {};
    if (output["ruleGroupArn"] !== undefined) {
        contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
    }
    if (output.sourceSet === "") {
        contents.Sources = [];
    }
    else if (output["sourceSet"] !== undefined && output["sourceSet"]["item"] !== undefined) {
        contents.Sources = de_ValueStringList(__getArrayIfSingleItem(output["sourceSet"]["item"]), context);
    }
    if (output.destinationSet === "") {
        contents.Destinations = [];
    }
    else if (output["destinationSet"] !== undefined && output["destinationSet"]["item"] !== undefined) {
        contents.Destinations = de_ValueStringList(__getArrayIfSingleItem(output["destinationSet"]["item"]), context);
    }
    if (output.sourcePortSet === "") {
        contents.SourcePorts = [];
    }
    else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
        contents.SourcePorts = de_PortRangeList(__getArrayIfSingleItem(output["sourcePortSet"]["item"]), context);
    }
    if (output.destinationPortSet === "") {
        contents.DestinationPorts = [];
    }
    else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
        contents.DestinationPorts = de_PortRangeList(__getArrayIfSingleItem(output["destinationPortSet"]["item"]), context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["direction"] !== undefined) {
        contents.Direction = __expectString(output["direction"]);
    }
    return contents;
};
const de_FirewallStatelessRule = (output, context) => {
    const contents = {};
    if (output["ruleGroupArn"] !== undefined) {
        contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
    }
    if (output.sourceSet === "") {
        contents.Sources = [];
    }
    else if (output["sourceSet"] !== undefined && output["sourceSet"]["item"] !== undefined) {
        contents.Sources = de_ValueStringList(__getArrayIfSingleItem(output["sourceSet"]["item"]), context);
    }
    if (output.destinationSet === "") {
        contents.Destinations = [];
    }
    else if (output["destinationSet"] !== undefined && output["destinationSet"]["item"] !== undefined) {
        contents.Destinations = de_ValueStringList(__getArrayIfSingleItem(output["destinationSet"]["item"]), context);
    }
    if (output.sourcePortSet === "") {
        contents.SourcePorts = [];
    }
    else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
        contents.SourcePorts = de_PortRangeList(__getArrayIfSingleItem(output["sourcePortSet"]["item"]), context);
    }
    if (output.destinationPortSet === "") {
        contents.DestinationPorts = [];
    }
    else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
        contents.DestinationPorts = de_PortRangeList(__getArrayIfSingleItem(output["destinationPortSet"]["item"]), context);
    }
    if (output.protocolSet === "") {
        contents.Protocols = [];
    }
    else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
        contents.Protocols = de_ProtocolIntList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = __strictParseInt32(output["priority"]);
    }
    return contents;
};
const de_FleetCapacityReservation = (output, context) => {
    const contents = {};
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["instancePlatform"] !== undefined) {
        contents.InstancePlatform = __expectString(output["instancePlatform"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
    }
    if (output["weight"] !== undefined) {
        contents.Weight = __strictParseFloat(output["weight"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = __strictParseInt32(output["priority"]);
    }
    return contents;
};
const de_FleetCapacityReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetCapacityReservation(entry, context);
    });
};
const de_FleetData = (output, context) => {
    const contents = {};
    if (output["activityStatus"] !== undefined) {
        contents.ActivityStatus = __expectString(output["activityStatus"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    if (output["fleetState"] !== undefined) {
        contents.FleetState = __expectString(output["fleetState"]);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["excessCapacityTerminationPolicy"] !== undefined) {
        contents.ExcessCapacityTerminationPolicy = __expectString(output["excessCapacityTerminationPolicy"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]);
    }
    if (output["fulfilledOnDemandCapacity"] !== undefined) {
        contents.FulfilledOnDemandCapacity = __strictParseFloat(output["fulfilledOnDemandCapacity"]);
    }
    if (output.launchTemplateConfigs === "") {
        contents.LaunchTemplateConfigs = [];
    }
    else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
        contents.LaunchTemplateConfigs = de_FleetLaunchTemplateConfigList(__getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]), context);
    }
    if (output["targetCapacitySpecification"] !== undefined) {
        contents.TargetCapacitySpecification = de_TargetCapacitySpecification(output["targetCapacitySpecification"], context);
    }
    if (output["terminateInstancesWithExpiration"] !== undefined) {
        contents.TerminateInstancesWithExpiration = __parseBoolean(output["terminateInstancesWithExpiration"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
    }
    if (output["replaceUnhealthyInstances"] !== undefined) {
        contents.ReplaceUnhealthyInstances = __parseBoolean(output["replaceUnhealthyInstances"]);
    }
    if (output["spotOptions"] !== undefined) {
        contents.SpotOptions = de_SpotOptions(output["spotOptions"], context);
    }
    if (output["onDemandOptions"] !== undefined) {
        contents.OnDemandOptions = de_OnDemandOptions(output["onDemandOptions"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = de_DescribeFleetsErrorSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
    }
    if (output.fleetInstanceSet === "") {
        contents.Instances = [];
    }
    else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
        contents.Instances = de_DescribeFleetsInstancesSet(__getArrayIfSingleItem(output["fleetInstanceSet"]["item"]), context);
    }
    if (output["context"] !== undefined) {
        contents.Context = __expectString(output["context"]);
    }
    return contents;
};
const de_FleetLaunchTemplateConfig = (output, context) => {
    const contents = {};
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = de_FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output.overrides === "") {
        contents.Overrides = [];
    }
    else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
        contents.Overrides = de_FleetLaunchTemplateOverridesList(__getArrayIfSingleItem(output["overrides"]["item"]), context);
    }
    return contents;
};
const de_FleetLaunchTemplateConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetLaunchTemplateConfig(entry, context);
    });
};
const de_FleetLaunchTemplateOverrides = (output, context) => {
    const contents = {};
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["maxPrice"] !== undefined) {
        contents.MaxPrice = __expectString(output["maxPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = __strictParseFloat(output["priority"]);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = de_PlacementResponse(output["placement"], context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
const de_FleetLaunchTemplateOverridesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetLaunchTemplateOverrides(entry, context);
    });
};
const de_FleetLaunchTemplateSpecification = (output, context) => {
    const contents = {};
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = __expectString(output["version"]);
    }
    return contents;
};
const de_FleetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetData(entry, context);
    });
};
const de_FleetSpotCapacityRebalance = (output, context) => {
    const contents = {};
    if (output["replacementStrategy"] !== undefined) {
        contents.ReplacementStrategy = __expectString(output["replacementStrategy"]);
    }
    if (output["terminationDelay"] !== undefined) {
        contents.TerminationDelay = __strictParseInt32(output["terminationDelay"]);
    }
    return contents;
};
const de_FleetSpotMaintenanceStrategies = (output, context) => {
    const contents = {};
    if (output["capacityRebalance"] !== undefined) {
        contents.CapacityRebalance = de_FleetSpotCapacityRebalance(output["capacityRebalance"], context);
    }
    return contents;
};
const de_FlowLog = (output, context) => {
    const contents = {};
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output["deliverLogsErrorMessage"] !== undefined) {
        contents.DeliverLogsErrorMessage = __expectString(output["deliverLogsErrorMessage"]);
    }
    if (output["deliverLogsPermissionArn"] !== undefined) {
        contents.DeliverLogsPermissionArn = __expectString(output["deliverLogsPermissionArn"]);
    }
    if (output["deliverCrossAccountRole"] !== undefined) {
        contents.DeliverCrossAccountRole = __expectString(output["deliverCrossAccountRole"]);
    }
    if (output["deliverLogsStatus"] !== undefined) {
        contents.DeliverLogsStatus = __expectString(output["deliverLogsStatus"]);
    }
    if (output["flowLogId"] !== undefined) {
        contents.FlowLogId = __expectString(output["flowLogId"]);
    }
    if (output["flowLogStatus"] !== undefined) {
        contents.FlowLogStatus = __expectString(output["flowLogStatus"]);
    }
    if (output["logGroupName"] !== undefined) {
        contents.LogGroupName = __expectString(output["logGroupName"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["trafficType"] !== undefined) {
        contents.TrafficType = __expectString(output["trafficType"]);
    }
    if (output["logDestinationType"] !== undefined) {
        contents.LogDestinationType = __expectString(output["logDestinationType"]);
    }
    if (output["logDestination"] !== undefined) {
        contents.LogDestination = __expectString(output["logDestination"]);
    }
    if (output["logFormat"] !== undefined) {
        contents.LogFormat = __expectString(output["logFormat"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["maxAggregationInterval"] !== undefined) {
        contents.MaxAggregationInterval = __strictParseInt32(output["maxAggregationInterval"]);
    }
    if (output["destinationOptions"] !== undefined) {
        contents.DestinationOptions = de_DestinationOptionsResponse(output["destinationOptions"], context);
    }
    return contents;
};
const de_FlowLogSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowLog(entry, context);
    });
};
const de_FpgaDeviceInfo = (output, context) => {
    const contents = {};
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = __expectString(output["manufacturer"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = de_FpgaDeviceMemoryInfo(output["memoryInfo"], context);
    }
    return contents;
};
const de_FpgaDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FpgaDeviceInfo(entry, context);
    });
};
const de_FpgaDeviceMemoryInfo = (output, context) => {
    const contents = {};
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = __strictParseInt32(output["sizeInMiB"]);
    }
    return contents;
};
const de_FpgaImage = (output, context) => {
    const contents = {};
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    if (output["fpgaImageGlobalId"] !== undefined) {
        contents.FpgaImageGlobalId = __expectString(output["fpgaImageGlobalId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["shellVersion"] !== undefined) {
        contents.ShellVersion = __expectString(output["shellVersion"]);
    }
    if (output["pciId"] !== undefined) {
        contents.PciId = de_PciId(output["pciId"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = de_FpgaImageState(output["state"], context);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateTime"]));
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output.tags === "") {
        contents.Tags = [];
    }
    else if (output["tags"] !== undefined && output["tags"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tags"]["item"]), context);
    }
    if (output["public"] !== undefined) {
        contents.Public = __parseBoolean(output["public"]);
    }
    if (output["dataRetentionSupport"] !== undefined) {
        contents.DataRetentionSupport = __parseBoolean(output["dataRetentionSupport"]);
    }
    if (output.instanceTypes === "") {
        contents.InstanceTypes = [];
    }
    else if (output["instanceTypes"] !== undefined && output["instanceTypes"]["item"] !== undefined) {
        contents.InstanceTypes = de_InstanceTypesList(__getArrayIfSingleItem(output["instanceTypes"]["item"]), context);
    }
    return contents;
};
const de_FpgaImageAttribute = (output, context) => {
    const contents = {};
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.loadPermissions === "") {
        contents.LoadPermissions = [];
    }
    else if (output["loadPermissions"] !== undefined && output["loadPermissions"]["item"] !== undefined) {
        contents.LoadPermissions = de_LoadPermissionList(__getArrayIfSingleItem(output["loadPermissions"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    return contents;
};
const de_FpgaImageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FpgaImage(entry, context);
    });
};
const de_FpgaImageState = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_FpgaInfo = (output, context) => {
    const contents = {};
    if (output.fpgas === "") {
        contents.Fpgas = [];
    }
    else if (output["fpgas"] !== undefined && output["fpgas"]["item"] !== undefined) {
        contents.Fpgas = de_FpgaDeviceInfoList(__getArrayIfSingleItem(output["fpgas"]["item"]), context);
    }
    if (output["totalFpgaMemoryInMiB"] !== undefined) {
        contents.TotalFpgaMemoryInMiB = __strictParseInt32(output["totalFpgaMemoryInMiB"]);
    }
    return contents;
};
const de_GetAssociatedEnclaveCertificateIamRolesResult = (output, context) => {
    const contents = {};
    if (output.associatedRoleSet === "") {
        contents.AssociatedRoles = [];
    }
    else if (output["associatedRoleSet"] !== undefined && output["associatedRoleSet"]["item"] !== undefined) {
        contents.AssociatedRoles = de_AssociatedRolesList(__getArrayIfSingleItem(output["associatedRoleSet"]["item"]), context);
    }
    return contents;
};
const de_GetAssociatedIpv6PoolCidrsResult = (output, context) => {
    const contents = {};
    if (output.ipv6CidrAssociationSet === "") {
        contents.Ipv6CidrAssociations = [];
    }
    else if (output["ipv6CidrAssociationSet"] !== undefined && output["ipv6CidrAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrAssociations = de_Ipv6CidrAssociationSet(__getArrayIfSingleItem(output["ipv6CidrAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetAwsNetworkPerformanceDataResult = (output, context) => {
    const contents = {};
    if (output.dataResponseSet === "") {
        contents.DataResponses = [];
    }
    else if (output["dataResponseSet"] !== undefined && output["dataResponseSet"]["item"] !== undefined) {
        contents.DataResponses = de_DataResponses(__getArrayIfSingleItem(output["dataResponseSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetCapacityReservationUsageResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.instanceUsageSet === "") {
        contents.InstanceUsages = [];
    }
    else if (output["instanceUsageSet"] !== undefined && output["instanceUsageSet"]["item"] !== undefined) {
        contents.InstanceUsages = de_InstanceUsageSet(__getArrayIfSingleItem(output["instanceUsageSet"]["item"]), context);
    }
    return contents;
};
const de_GetCoipPoolUsageResult = (output, context) => {
    const contents = {};
    if (output["coipPoolId"] !== undefined) {
        contents.CoipPoolId = __expectString(output["coipPoolId"]);
    }
    if (output.coipAddressUsageSet === "") {
        contents.CoipAddressUsages = [];
    }
    else if (output["coipAddressUsageSet"] !== undefined && output["coipAddressUsageSet"]["item"] !== undefined) {
        contents.CoipAddressUsages = de_CoipAddressUsageSet(__getArrayIfSingleItem(output["coipAddressUsageSet"]["item"]), context);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    return contents;
};
const de_GetConsoleOutputResult = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["output"] !== undefined) {
        contents.Output = __expectString(output["output"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
    }
    return contents;
};
const de_GetConsoleScreenshotResult = (output, context) => {
    const contents = {};
    if (output["imageData"] !== undefined) {
        contents.ImageData = __expectString(output["imageData"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
const de_GetDefaultCreditSpecificationResult = (output, context) => {
    const contents = {};
    if (output["instanceFamilyCreditSpecification"] !== undefined) {
        contents.InstanceFamilyCreditSpecification = de_InstanceFamilyCreditSpecification(output["instanceFamilyCreditSpecification"], context);
    }
    return contents;
};
const de_GetEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {};
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    return contents;
};
const de_GetEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {};
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
const de_GetFlowLogsIntegrationTemplateResult = (output, context) => {
    const contents = {};
    if (output["result"] !== undefined) {
        contents.Result = __expectString(output["result"]);
    }
    return contents;
};
const de_GetGroupsForCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.capacityReservationGroupSet === "") {
        contents.CapacityReservationGroups = [];
    }
    else if (output["capacityReservationGroupSet"] !== undefined &&
        output["capacityReservationGroupSet"]["item"] !== undefined) {
        contents.CapacityReservationGroups = de_CapacityReservationGroupSet(__getArrayIfSingleItem(output["capacityReservationGroupSet"]["item"]), context);
    }
    return contents;
};
const de_GetHostReservationPurchasePreviewResult = (output, context) => {
    const contents = {};
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output.purchase === "") {
        contents.Purchase = [];
    }
    else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
        contents.Purchase = de_PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
    }
    if (output["totalHourlyPrice"] !== undefined) {
        contents.TotalHourlyPrice = __expectString(output["totalHourlyPrice"]);
    }
    if (output["totalUpfrontPrice"] !== undefined) {
        contents.TotalUpfrontPrice = __expectString(output["totalUpfrontPrice"]);
    }
    return contents;
};
const de_GetInstanceTypesFromInstanceRequirementsResult = (output, context) => {
    const contents = {};
    if (output.instanceTypeSet === "") {
        contents.InstanceTypes = [];
    }
    else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
        contents.InstanceTypes = de_InstanceTypeInfoFromInstanceRequirementsSet(__getArrayIfSingleItem(output["instanceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetInstanceUefiDataResult = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["uefiData"] !== undefined) {
        contents.UefiData = __expectString(output["uefiData"]);
    }
    return contents;
};
const de_GetIpamAddressHistoryResult = (output, context) => {
    const contents = {};
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = de_IpamAddressHistoryRecordSet(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetIpamDiscoveredAccountsResult = (output, context) => {
    const contents = {};
    if (output.ipamDiscoveredAccountSet === "") {
        contents.IpamDiscoveredAccounts = [];
    }
    else if (output["ipamDiscoveredAccountSet"] !== undefined &&
        output["ipamDiscoveredAccountSet"]["item"] !== undefined) {
        contents.IpamDiscoveredAccounts = de_IpamDiscoveredAccountSet(__getArrayIfSingleItem(output["ipamDiscoveredAccountSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetIpamDiscoveredResourceCidrsResult = (output, context) => {
    const contents = {};
    if (output.ipamDiscoveredResourceCidrSet === "") {
        contents.IpamDiscoveredResourceCidrs = [];
    }
    else if (output["ipamDiscoveredResourceCidrSet"] !== undefined &&
        output["ipamDiscoveredResourceCidrSet"]["item"] !== undefined) {
        contents.IpamDiscoveredResourceCidrs = de_IpamDiscoveredResourceCidrSet(__getArrayIfSingleItem(output["ipamDiscoveredResourceCidrSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetIpamPoolAllocationsResult = (output, context) => {
    const contents = {};
    if (output.ipamPoolAllocationSet === "") {
        contents.IpamPoolAllocations = [];
    }
    else if (output["ipamPoolAllocationSet"] !== undefined && output["ipamPoolAllocationSet"]["item"] !== undefined) {
        contents.IpamPoolAllocations = de_IpamPoolAllocationSet(__getArrayIfSingleItem(output["ipamPoolAllocationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetIpamPoolCidrsResult = (output, context) => {
    const contents = {};
    if (output.ipamPoolCidrSet === "") {
        contents.IpamPoolCidrs = [];
    }
    else if (output["ipamPoolCidrSet"] !== undefined && output["ipamPoolCidrSet"]["item"] !== undefined) {
        contents.IpamPoolCidrs = de_IpamPoolCidrSet(__getArrayIfSingleItem(output["ipamPoolCidrSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetIpamResourceCidrsResult = (output, context) => {
    const contents = {};
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamResourceCidrSet === "") {
        contents.IpamResourceCidrs = [];
    }
    else if (output["ipamResourceCidrSet"] !== undefined && output["ipamResourceCidrSet"]["item"] !== undefined) {
        contents.IpamResourceCidrs = de_IpamResourceCidrSet(__getArrayIfSingleItem(output["ipamResourceCidrSet"]["item"]), context);
    }
    return contents;
};
const de_GetLaunchTemplateDataResult = (output, context) => {
    const contents = {};
    if (output["launchTemplateData"] !== undefined) {
        contents.LaunchTemplateData = de_ResponseLaunchTemplateData(output["launchTemplateData"], context);
    }
    return contents;
};
const de_GetManagedPrefixListAssociationsResult = (output, context) => {
    const contents = {};
    if (output.prefixListAssociationSet === "") {
        contents.PrefixListAssociations = [];
    }
    else if (output["prefixListAssociationSet"] !== undefined &&
        output["prefixListAssociationSet"]["item"] !== undefined) {
        contents.PrefixListAssociations = de_PrefixListAssociationSet(__getArrayIfSingleItem(output["prefixListAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetManagedPrefixListEntriesResult = (output, context) => {
    const contents = {};
    if (output.entrySet === "") {
        contents.Entries = [];
    }
    else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
        contents.Entries = de_PrefixListEntrySet(__getArrayIfSingleItem(output["entrySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetNetworkInsightsAccessScopeAnalysisFindingsResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["analysisStatus"] !== undefined) {
        contents.AnalysisStatus = __expectString(output["analysisStatus"]);
    }
    if (output.analysisFindingSet === "") {
        contents.AnalysisFindings = [];
    }
    else if (output["analysisFindingSet"] !== undefined && output["analysisFindingSet"]["item"] !== undefined) {
        contents.AnalysisFindings = de_AccessScopeAnalysisFindingList(__getArrayIfSingleItem(output["analysisFindingSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetNetworkInsightsAccessScopeContentResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeContent"] !== undefined) {
        contents.NetworkInsightsAccessScopeContent = de_NetworkInsightsAccessScopeContent(output["networkInsightsAccessScopeContent"], context);
    }
    return contents;
};
const de_GetPasswordDataResult = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["passwordData"] !== undefined) {
        contents.PasswordData = __expectString(output["passwordData"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
    }
    return contents;
};
const de_GetReservedInstancesExchangeQuoteResult = (output, context) => {
    const contents = {};
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["isValidExchange"] !== undefined) {
        contents.IsValidExchange = __parseBoolean(output["isValidExchange"]);
    }
    if (output["outputReservedInstancesWillExpireAt"] !== undefined) {
        contents.OutputReservedInstancesWillExpireAt = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["outputReservedInstancesWillExpireAt"]));
    }
    if (output["paymentDue"] !== undefined) {
        contents.PaymentDue = __expectString(output["paymentDue"]);
    }
    if (output["reservedInstanceValueRollup"] !== undefined) {
        contents.ReservedInstanceValueRollup = de_ReservationValue(output["reservedInstanceValueRollup"], context);
    }
    if (output.reservedInstanceValueSet === "") {
        contents.ReservedInstanceValueSet = [];
    }
    else if (output["reservedInstanceValueSet"] !== undefined &&
        output["reservedInstanceValueSet"]["item"] !== undefined) {
        contents.ReservedInstanceValueSet = de_ReservedInstanceReservationValueSet(__getArrayIfSingleItem(output["reservedInstanceValueSet"]["item"]), context);
    }
    if (output["targetConfigurationValueRollup"] !== undefined) {
        contents.TargetConfigurationValueRollup = de_ReservationValue(output["targetConfigurationValueRollup"], context);
    }
    if (output.targetConfigurationValueSet === "") {
        contents.TargetConfigurationValueSet = [];
    }
    else if (output["targetConfigurationValueSet"] !== undefined &&
        output["targetConfigurationValueSet"]["item"] !== undefined) {
        contents.TargetConfigurationValueSet = de_TargetReservationValueSet(__getArrayIfSingleItem(output["targetConfigurationValueSet"]["item"]), context);
    }
    if (output["validationFailureReason"] !== undefined) {
        contents.ValidationFailureReason = __expectString(output["validationFailureReason"]);
    }
    return contents;
};
const de_GetSerialConsoleAccessStatusResult = (output, context) => {
    const contents = {};
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
const de_GetSpotPlacementScoresResult = (output, context) => {
    const contents = {};
    if (output.spotPlacementScoreSet === "") {
        contents.SpotPlacementScores = [];
    }
    else if (output["spotPlacementScoreSet"] !== undefined && output["spotPlacementScoreSet"]["item"] !== undefined) {
        contents.SpotPlacementScores = de_SpotPlacementScores(__getArrayIfSingleItem(output["spotPlacementScoreSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetSubnetCidrReservationsResult = (output, context) => {
    const contents = {};
    if (output.subnetIpv4CidrReservationSet === "") {
        contents.SubnetIpv4CidrReservations = [];
    }
    else if (output["subnetIpv4CidrReservationSet"] !== undefined &&
        output["subnetIpv4CidrReservationSet"]["item"] !== undefined) {
        contents.SubnetIpv4CidrReservations = de_SubnetCidrReservationList(__getArrayIfSingleItem(output["subnetIpv4CidrReservationSet"]["item"]), context);
    }
    if (output.subnetIpv6CidrReservationSet === "") {
        contents.SubnetIpv6CidrReservations = [];
    }
    else if (output["subnetIpv6CidrReservationSet"] !== undefined &&
        output["subnetIpv6CidrReservationSet"]["item"] !== undefined) {
        contents.SubnetIpv6CidrReservations = de_SubnetCidrReservationList(__getArrayIfSingleItem(output["subnetIpv6CidrReservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetTransitGatewayAttachmentPropagationsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayAttachmentPropagations === "") {
        contents.TransitGatewayAttachmentPropagations = [];
    }
    else if (output["transitGatewayAttachmentPropagations"] !== undefined &&
        output["transitGatewayAttachmentPropagations"]["item"] !== undefined) {
        contents.TransitGatewayAttachmentPropagations = de_TransitGatewayAttachmentPropagationList(__getArrayIfSingleItem(output["transitGatewayAttachmentPropagations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {};
    if (output.multicastDomainAssociations === "") {
        contents.MulticastDomainAssociations = [];
    }
    else if (output["multicastDomainAssociations"] !== undefined &&
        output["multicastDomainAssociations"]["item"] !== undefined) {
        contents.MulticastDomainAssociations = de_TransitGatewayMulticastDomainAssociationList(__getArrayIfSingleItem(output["multicastDomainAssociations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetTransitGatewayPolicyTableAssociationsResult = (output, context) => {
    const contents = {};
    if (output.associations === "") {
        contents.Associations = [];
    }
    else if (output["associations"] !== undefined && output["associations"]["item"] !== undefined) {
        contents.Associations = de_TransitGatewayPolicyTableAssociationList(__getArrayIfSingleItem(output["associations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetTransitGatewayPolicyTableEntriesResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayPolicyTableEntries === "") {
        contents.TransitGatewayPolicyTableEntries = [];
    }
    else if (output["transitGatewayPolicyTableEntries"] !== undefined &&
        output["transitGatewayPolicyTableEntries"]["item"] !== undefined) {
        contents.TransitGatewayPolicyTableEntries = de_TransitGatewayPolicyTableEntryList(__getArrayIfSingleItem(output["transitGatewayPolicyTableEntries"]["item"]), context);
    }
    return contents;
};
const de_GetTransitGatewayPrefixListReferencesResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayPrefixListReferenceSet === "") {
        contents.TransitGatewayPrefixListReferences = [];
    }
    else if (output["transitGatewayPrefixListReferenceSet"] !== undefined &&
        output["transitGatewayPrefixListReferenceSet"]["item"] !== undefined) {
        contents.TransitGatewayPrefixListReferences = de_TransitGatewayPrefixListReferenceSet(__getArrayIfSingleItem(output["transitGatewayPrefixListReferenceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetTransitGatewayRouteTableAssociationsResult = (output, context) => {
    const contents = {};
    if (output.associations === "") {
        contents.Associations = [];
    }
    else if (output["associations"] !== undefined && output["associations"]["item"] !== undefined) {
        contents.Associations = de_TransitGatewayRouteTableAssociationList(__getArrayIfSingleItem(output["associations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetTransitGatewayRouteTablePropagationsResult = (output, context) => {
    const contents = {};
    if (output.transitGatewayRouteTablePropagations === "") {
        contents.TransitGatewayRouteTablePropagations = [];
    }
    else if (output["transitGatewayRouteTablePropagations"] !== undefined &&
        output["transitGatewayRouteTablePropagations"]["item"] !== undefined) {
        contents.TransitGatewayRouteTablePropagations = de_TransitGatewayRouteTablePropagationList(__getArrayIfSingleItem(output["transitGatewayRouteTablePropagations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetVerifiedAccessEndpointPolicyResult = (output, context) => {
    const contents = {};
    if (output["policyEnabled"] !== undefined) {
        contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
    }
    if (output["policyDocument"] !== undefined) {
        contents.PolicyDocument = __expectString(output["policyDocument"]);
    }
    return contents;
};
const de_GetVerifiedAccessGroupPolicyResult = (output, context) => {
    const contents = {};
    if (output["policyEnabled"] !== undefined) {
        contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
    }
    if (output["policyDocument"] !== undefined) {
        contents.PolicyDocument = __expectString(output["policyDocument"]);
    }
    return contents;
};
const de_GetVpnConnectionDeviceSampleConfigurationResult = (output, context) => {
    const contents = {};
    if (output["vpnConnectionDeviceSampleConfiguration"] !== undefined) {
        contents.VpnConnectionDeviceSampleConfiguration = __expectString(output["vpnConnectionDeviceSampleConfiguration"]);
    }
    return contents;
};
const de_GetVpnConnectionDeviceTypesResult = (output, context) => {
    const contents = {};
    if (output.vpnConnectionDeviceTypeSet === "") {
        contents.VpnConnectionDeviceTypes = [];
    }
    else if (output["vpnConnectionDeviceTypeSet"] !== undefined &&
        output["vpnConnectionDeviceTypeSet"]["item"] !== undefined) {
        contents.VpnConnectionDeviceTypes = de_VpnConnectionDeviceTypeList(__getArrayIfSingleItem(output["vpnConnectionDeviceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_GetVpnTunnelReplacementStatusResult = (output, context) => {
    const contents = {};
    if (output["vpnConnectionId"] !== undefined) {
        contents.VpnConnectionId = __expectString(output["vpnConnectionId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["customerGatewayId"] !== undefined) {
        contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
    }
    if (output["vpnGatewayId"] !== undefined) {
        contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
    }
    if (output["vpnTunnelOutsideIpAddress"] !== undefined) {
        contents.VpnTunnelOutsideIpAddress = __expectString(output["vpnTunnelOutsideIpAddress"]);
    }
    if (output["maintenanceDetails"] !== undefined) {
        contents.MaintenanceDetails = de_MaintenanceDetails(output["maintenanceDetails"], context);
    }
    return contents;
};
const de_GpuDeviceInfo = (output, context) => {
    const contents = {};
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = __expectString(output["manufacturer"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = de_GpuDeviceMemoryInfo(output["memoryInfo"], context);
    }
    return contents;
};
const de_GpuDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GpuDeviceInfo(entry, context);
    });
};
const de_GpuDeviceMemoryInfo = (output, context) => {
    const contents = {};
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = __strictParseInt32(output["sizeInMiB"]);
    }
    return contents;
};
const de_GpuInfo = (output, context) => {
    const contents = {};
    if (output.gpus === "") {
        contents.Gpus = [];
    }
    else if (output["gpus"] !== undefined && output["gpus"]["item"] !== undefined) {
        contents.Gpus = de_GpuDeviceInfoList(__getArrayIfSingleItem(output["gpus"]["item"]), context);
    }
    if (output["totalGpuMemoryInMiB"] !== undefined) {
        contents.TotalGpuMemoryInMiB = __strictParseInt32(output["totalGpuMemoryInMiB"]);
    }
    return contents;
};
const de_GroupIdentifier = (output, context) => {
    const contents = {};
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    return contents;
};
const de_GroupIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupIdentifier(entry, context);
    });
};
const de_GroupIdentifierSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupIdentifier(entry, context);
    });
};
const de_GroupIdStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_HibernationOptions = (output, context) => {
    const contents = {};
    if (output["configured"] !== undefined) {
        contents.Configured = __parseBoolean(output["configured"]);
    }
    return contents;
};
const de_HistoryRecord = (output, context) => {
    const contents = {};
    if (output["eventInformation"] !== undefined) {
        contents.EventInformation = de_EventInformation(output["eventInformation"], context);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
    }
    return contents;
};
const de_HistoryRecordEntry = (output, context) => {
    const contents = {};
    if (output["eventInformation"] !== undefined) {
        contents.EventInformation = de_EventInformation(output["eventInformation"], context);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
    }
    return contents;
};
const de_HistoryRecords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoryRecord(entry, context);
    });
};
const de_HistoryRecordSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoryRecordEntry(entry, context);
    });
};
const de_Host = (output, context) => {
    const contents = {};
    if (output["autoPlacement"] !== undefined) {
        contents.AutoPlacement = __expectString(output["autoPlacement"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["availableCapacity"] !== undefined) {
        contents.AvailableCapacity = de_AvailableCapacity(output["availableCapacity"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = __expectString(output["hostId"]);
    }
    if (output["hostProperties"] !== undefined) {
        contents.HostProperties = de_HostProperties(output["hostProperties"], context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = __expectString(output["hostReservationId"]);
    }
    if (output.instances === "") {
        contents.Instances = [];
    }
    else if (output["instances"] !== undefined && output["instances"]["item"] !== undefined) {
        contents.Instances = de_HostInstanceList(__getArrayIfSingleItem(output["instances"]["item"]), context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["allocationTime"] !== undefined) {
        contents.AllocationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["allocationTime"]));
    }
    if (output["releaseTime"] !== undefined) {
        contents.ReleaseTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["releaseTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["hostRecovery"] !== undefined) {
        contents.HostRecovery = __expectString(output["hostRecovery"]);
    }
    if (output["allowsMultipleInstanceTypes"] !== undefined) {
        contents.AllowsMultipleInstanceTypes = __expectString(output["allowsMultipleInstanceTypes"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["memberOfServiceLinkedResourceGroup"] !== undefined) {
        contents.MemberOfServiceLinkedResourceGroup = __parseBoolean(output["memberOfServiceLinkedResourceGroup"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["hostMaintenance"] !== undefined) {
        contents.HostMaintenance = __expectString(output["hostMaintenance"]);
    }
    return contents;
};
const de_HostInstance = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
const de_HostInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostInstance(entry, context);
    });
};
const de_HostList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Host(entry, context);
    });
};
const de_HostOffering = (output, context) => {
    const contents = {};
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["duration"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = __expectString(output["offeringId"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = __expectString(output["paymentOption"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
    }
    return contents;
};
const de_HostOfferingSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostOffering(entry, context);
    });
};
const de_HostProperties = (output, context) => {
    const contents = {};
    if (output["cores"] !== undefined) {
        contents.Cores = __strictParseInt32(output["cores"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["sockets"] !== undefined) {
        contents.Sockets = __strictParseInt32(output["sockets"]);
    }
    if (output["totalVCpus"] !== undefined) {
        contents.TotalVCpus = __strictParseInt32(output["totalVCpus"]);
    }
    return contents;
};
const de_HostReservation = (output, context) => {
    const contents = {};
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["duration"]);
    }
    if (output["end"] !== undefined) {
        contents.End = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["end"]));
    }
    if (output.hostIdSet === "") {
        contents.HostIdSet = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIdSet = de_ResponseHostIdSet(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = __expectString(output["hostReservationId"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = __expectString(output["offeringId"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = __expectString(output["paymentOption"]);
    }
    if (output["start"] !== undefined) {
        contents.Start = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["start"]));
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_HostReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostReservation(entry, context);
    });
};
const de_IamInstanceProfile = (output, context) => {
    const contents = {};
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["id"] !== undefined) {
        contents.Id = __expectString(output["id"]);
    }
    return contents;
};
const de_IamInstanceProfileAssociation = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = de_IamInstanceProfile(output["iamInstanceProfile"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
    }
    return contents;
};
const de_IamInstanceProfileAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IamInstanceProfileAssociation(entry, context);
    });
};
const de_IamInstanceProfileSpecification = (output, context) => {
    const contents = {};
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
const de_IcmpTypeCode = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __strictParseInt32(output["code"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __strictParseInt32(output["type"]);
    }
    return contents;
};
const de_IdFormat = (output, context) => {
    const contents = {};
    if (output["deadline"] !== undefined) {
        contents.Deadline = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["deadline"]));
    }
    if (output["resource"] !== undefined) {
        contents.Resource = __expectString(output["resource"]);
    }
    if (output["useLongIds"] !== undefined) {
        contents.UseLongIds = __parseBoolean(output["useLongIds"]);
    }
    return contents;
};
const de_IdFormatList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IdFormat(entry, context);
    });
};
const de_IKEVersionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IKEVersionsListValue(entry, context);
    });
};
const de_IKEVersionsListValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_Image = (output, context) => {
    const contents = {};
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output["creationDate"] !== undefined) {
        contents.CreationDate = __expectString(output["creationDate"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["imageLocation"] !== undefined) {
        contents.ImageLocation = __expectString(output["imageLocation"]);
    }
    if (output["imageType"] !== undefined) {
        contents.ImageType = __expectString(output["imageType"]);
    }
    if (output["isPublic"] !== undefined) {
        contents.Public = __parseBoolean(output["isPublic"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["imageOwnerId"] !== undefined) {
        contents.OwnerId = __expectString(output["imageOwnerId"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["platformDetails"] !== undefined) {
        contents.PlatformDetails = __expectString(output["platformDetails"]);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["imageState"] !== undefined) {
        contents.State = __expectString(output["imageState"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = de_BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = __parseBoolean(output["enaSupport"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["imageOwnerAlias"] !== undefined) {
        contents.ImageOwnerAlias = __expectString(output["imageOwnerAlias"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = __expectString(output["rootDeviceName"]);
    }
    if (output["rootDeviceType"] !== undefined) {
        contents.RootDeviceType = __expectString(output["rootDeviceType"]);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = __expectString(output["sriovNetSupport"]);
    }
    if (output["stateReason"] !== undefined) {
        contents.StateReason = de_StateReason(output["stateReason"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["virtualizationType"] !== undefined) {
        contents.VirtualizationType = __expectString(output["virtualizationType"]);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = __expectString(output["bootMode"]);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = __expectString(output["tpmSupport"]);
    }
    if (output["deprecationTime"] !== undefined) {
        contents.DeprecationTime = __expectString(output["deprecationTime"]);
    }
    if (output["imdsSupport"] !== undefined) {
        contents.ImdsSupport = __expectString(output["imdsSupport"]);
    }
    return contents;
};
const de_ImageAttribute = (output, context) => {
    const contents = {};
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = de_BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output.launchPermission === "") {
        contents.LaunchPermissions = [];
    }
    else if (output["launchPermission"] !== undefined && output["launchPermission"]["item"] !== undefined) {
        contents.LaunchPermissions = de_LaunchPermissionList(__getArrayIfSingleItem(output["launchPermission"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = de_AttributeValue(output["description"], context);
    }
    if (output["kernel"] !== undefined) {
        contents.KernelId = de_AttributeValue(output["kernel"], context);
    }
    if (output["ramdisk"] !== undefined) {
        contents.RamdiskId = de_AttributeValue(output["ramdisk"], context);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = de_AttributeValue(output["sriovNetSupport"], context);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = de_AttributeValue(output["bootMode"], context);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = de_AttributeValue(output["tpmSupport"], context);
    }
    if (output["uefiData"] !== undefined) {
        contents.UefiData = de_AttributeValue(output["uefiData"], context);
    }
    if (output["lastLaunchedTime"] !== undefined) {
        contents.LastLaunchedTime = de_AttributeValue(output["lastLaunchedTime"], context);
    }
    if (output["imdsSupport"] !== undefined) {
        contents.ImdsSupport = de_AttributeValue(output["imdsSupport"], context);
    }
    return contents;
};
const de_ImageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Image(entry, context);
    });
};
const de_ImageRecycleBinInfo = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["recycleBinEnterTime"] !== undefined) {
        contents.RecycleBinEnterTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinEnterTime"]));
    }
    if (output["recycleBinExitTime"] !== undefined) {
        contents.RecycleBinExitTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinExitTime"]));
    }
    return contents;
};
const de_ImageRecycleBinInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageRecycleBinInfo(entry, context);
    });
};
const de_ImportClientVpnClientCertificateRevocationListResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ImportImageLicenseConfigurationResponse = (output, context) => {
    const contents = {};
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
    }
    return contents;
};
const de_ImportImageLicenseSpecificationListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportImageLicenseConfigurationResponse(entry, context);
    });
};
const de_ImportImageResult = (output, context) => {
    const contents = {};
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["licenseType"] !== undefined) {
        contents.LicenseType = __expectString(output["licenseType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output.snapshotDetailSet === "") {
        contents.SnapshotDetails = [];
    }
    else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
        contents.SnapshotDetails = de_SnapshotDetailList(__getArrayIfSingleItem(output["snapshotDetailSet"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.licenseSpecifications === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
        contents.LicenseSpecifications = de_ImportImageLicenseSpecificationListResponse(__getArrayIfSingleItem(output["licenseSpecifications"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    return contents;
};
const de_ImportImageTask = (output, context) => {
    const contents = {};
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["licenseType"] !== undefined) {
        contents.LicenseType = __expectString(output["licenseType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output.snapshotDetailSet === "") {
        contents.SnapshotDetails = [];
    }
    else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
        contents.SnapshotDetails = de_SnapshotDetailList(__getArrayIfSingleItem(output["snapshotDetailSet"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.licenseSpecifications === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
        contents.LicenseSpecifications = de_ImportImageLicenseSpecificationListResponse(__getArrayIfSingleItem(output["licenseSpecifications"]["item"]), context);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = __expectString(output["bootMode"]);
    }
    return contents;
};
const de_ImportImageTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportImageTask(entry, context);
    });
};
const de_ImportInstanceResult = (output, context) => {
    const contents = {};
    if (output["conversionTask"] !== undefined) {
        contents.ConversionTask = de_ConversionTask(output["conversionTask"], context);
    }
    return contents;
};
const de_ImportInstanceTaskDetails = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output.volumes === "") {
        contents.Volumes = [];
    }
    else if (output["volumes"] !== undefined && output["volumes"]["item"] !== undefined) {
        contents.Volumes = de_ImportInstanceVolumeDetailSet(__getArrayIfSingleItem(output["volumes"]["item"]), context);
    }
    return contents;
};
const de_ImportInstanceVolumeDetailItem = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["bytesConverted"] !== undefined) {
        contents.BytesConverted = __strictParseLong(output["bytesConverted"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["image"] !== undefined) {
        contents.Image = de_DiskImageDescription(output["image"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["volume"] !== undefined) {
        contents.Volume = de_DiskImageVolumeDescription(output["volume"], context);
    }
    return contents;
};
const de_ImportInstanceVolumeDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportInstanceVolumeDetailItem(entry, context);
    });
};
const de_ImportKeyPairResult = (output, context) => {
    const contents = {};
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = __expectString(output["keyPairId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ImportSnapshotResult = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["snapshotTaskDetail"] !== undefined) {
        contents.SnapshotTaskDetail = de_SnapshotTaskDetail(output["snapshotTaskDetail"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ImportSnapshotTask = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["snapshotTaskDetail"] !== undefined) {
        contents.SnapshotTaskDetail = de_SnapshotTaskDetail(output["snapshotTaskDetail"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ImportSnapshotTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportSnapshotTask(entry, context);
    });
};
const de_ImportVolumeResult = (output, context) => {
    const contents = {};
    if (output["conversionTask"] !== undefined) {
        contents.ConversionTask = de_ConversionTask(output["conversionTask"], context);
    }
    return contents;
};
const de_ImportVolumeTaskDetails = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["bytesConverted"] !== undefined) {
        contents.BytesConverted = __strictParseLong(output["bytesConverted"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["image"] !== undefined) {
        contents.Image = de_DiskImageDescription(output["image"], context);
    }
    if (output["volume"] !== undefined) {
        contents.Volume = de_DiskImageVolumeDescription(output["volume"], context);
    }
    return contents;
};
const de_InferenceAcceleratorInfo = (output, context) => {
    const contents = {};
    if (output.accelerators === "") {
        contents.Accelerators = [];
    }
    else if (output["accelerators"] !== undefined && output["accelerators"]["member"] !== undefined) {
        contents.Accelerators = de_InferenceDeviceInfoList(__getArrayIfSingleItem(output["accelerators"]["member"]), context);
    }
    return contents;
};
const de_InferenceDeviceInfo = (output, context) => {
    const contents = {};
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = __expectString(output["manufacturer"]);
    }
    return contents;
};
const de_InferenceDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceDeviceInfo(entry, context);
    });
};
const de_InsideCidrBlocksStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Instance = (output, context) => {
    const contents = {};
    if (output["amiLaunchIndex"] !== undefined) {
        contents.AmiLaunchIndex = __strictParseInt32(output["amiLaunchIndex"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["launchTime"] !== undefined) {
        contents.LaunchTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["launchTime"]));
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = de_Monitoring(output["monitoring"], context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = de_Placement(output["placement"], context);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["dnsName"] !== undefined) {
        contents.PublicDnsName = __expectString(output["dnsName"]);
    }
    if (output["ipAddress"] !== undefined) {
        contents.PublicIpAddress = __expectString(output["ipAddress"]);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["instanceState"] !== undefined) {
        contents.State = de_InstanceState(output["instanceState"], context);
    }
    if (output["reason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["reason"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = de_InstanceBlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = __parseBoolean(output["enaSupport"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = de_IamInstanceProfile(output["iamInstanceProfile"], context);
    }
    if (output["instanceLifecycle"] !== undefined) {
        contents.InstanceLifecycle = __expectString(output["instanceLifecycle"]);
    }
    if (output.elasticGpuAssociationSet === "") {
        contents.ElasticGpuAssociations = [];
    }
    else if (output["elasticGpuAssociationSet"] !== undefined &&
        output["elasticGpuAssociationSet"]["item"] !== undefined) {
        contents.ElasticGpuAssociations = de_ElasticGpuAssociationList(__getArrayIfSingleItem(output["elasticGpuAssociationSet"]["item"]), context);
    }
    if (output.elasticInferenceAcceleratorAssociationSet === "") {
        contents.ElasticInferenceAcceleratorAssociations = [];
    }
    else if (output["elasticInferenceAcceleratorAssociationSet"] !== undefined &&
        output["elasticInferenceAcceleratorAssociationSet"]["item"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociations = de_ElasticInferenceAcceleratorAssociationList(__getArrayIfSingleItem(output["elasticInferenceAcceleratorAssociationSet"]["item"]), context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = de_InstanceNetworkInterfaceList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = __expectString(output["rootDeviceName"]);
    }
    if (output["rootDeviceType"] !== undefined) {
        contents.RootDeviceType = __expectString(output["rootDeviceType"]);
    }
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = __expectString(output["sriovNetSupport"]);
    }
    if (output["stateReason"] !== undefined) {
        contents.StateReason = de_StateReason(output["stateReason"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["virtualizationType"] !== undefined) {
        contents.VirtualizationType = __expectString(output["virtualizationType"]);
    }
    if (output["cpuOptions"] !== undefined) {
        contents.CpuOptions = de_CpuOptions(output["cpuOptions"], context);
    }
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["capacityReservationSpecification"] !== undefined) {
        contents.CapacityReservationSpecification = de_CapacityReservationSpecificationResponse(output["capacityReservationSpecification"], context);
    }
    if (output["hibernationOptions"] !== undefined) {
        contents.HibernationOptions = de_HibernationOptions(output["hibernationOptions"], context);
    }
    if (output.licenseSet === "") {
        contents.Licenses = [];
    }
    else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
        contents.Licenses = de_LicenseList(__getArrayIfSingleItem(output["licenseSet"]["item"]), context);
    }
    if (output["metadataOptions"] !== undefined) {
        contents.MetadataOptions = de_InstanceMetadataOptionsResponse(output["metadataOptions"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = de_EnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = __expectString(output["bootMode"]);
    }
    if (output["platformDetails"] !== undefined) {
        contents.PlatformDetails = __expectString(output["platformDetails"]);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    if (output["usageOperationUpdateTime"] !== undefined) {
        contents.UsageOperationUpdateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["usageOperationUpdateTime"]));
    }
    if (output["privateDnsNameOptions"] !== undefined) {
        contents.PrivateDnsNameOptions = de_PrivateDnsNameOptionsResponse(output["privateDnsNameOptions"], context);
    }
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = __expectString(output["tpmSupport"]);
    }
    if (output["maintenanceOptions"] !== undefined) {
        contents.MaintenanceOptions = de_InstanceMaintenanceOptions(output["maintenanceOptions"], context);
    }
    if (output["currentInstanceBootMode"] !== undefined) {
        contents.CurrentInstanceBootMode = __expectString(output["currentInstanceBootMode"]);
    }
    return contents;
};
const de_InstanceAttribute = (output, context) => {
    const contents = {};
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = de_InstanceBlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["disableApiTermination"] !== undefined) {
        contents.DisableApiTermination = de_AttributeBooleanValue(output["disableApiTermination"], context);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = de_AttributeBooleanValue(output["enaSupport"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = de_EnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = de_AttributeBooleanValue(output["ebsOptimized"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
        contents.InstanceInitiatedShutdownBehavior = de_AttributeValue(output["instanceInitiatedShutdownBehavior"], context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = de_AttributeValue(output["instanceType"], context);
    }
    if (output["kernel"] !== undefined) {
        contents.KernelId = de_AttributeValue(output["kernel"], context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["ramdisk"] !== undefined) {
        contents.RamdiskId = de_AttributeValue(output["ramdisk"], context);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = de_AttributeValue(output["rootDeviceName"], context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = de_AttributeBooleanValue(output["sourceDestCheck"], context);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = de_AttributeValue(output["sriovNetSupport"], context);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = de_AttributeValue(output["userData"], context);
    }
    if (output["disableApiStop"] !== undefined) {
        contents.DisableApiStop = de_AttributeBooleanValue(output["disableApiStop"], context);
    }
    return contents;
};
const de_InstanceBlockDeviceMapping = (output, context) => {
    const contents = {};
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = de_EbsInstanceBlockDevice(output["ebs"], context);
    }
    return contents;
};
const de_InstanceBlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceBlockDeviceMapping(entry, context);
    });
};
const de_InstanceCapacity = (output, context) => {
    const contents = {};
    if (output["availableCapacity"] !== undefined) {
        contents.AvailableCapacity = __strictParseInt32(output["availableCapacity"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["totalCapacity"] !== undefined) {
        contents.TotalCapacity = __strictParseInt32(output["totalCapacity"]);
    }
    return contents;
};
const de_InstanceCount = (output, context) => {
    const contents = {};
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_InstanceCountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceCount(entry, context);
    });
};
const de_InstanceCreditSpecification = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = __expectString(output["cpuCredits"]);
    }
    return contents;
};
const de_InstanceCreditSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceCreditSpecification(entry, context);
    });
};
const de_InstanceEventWindow = (output, context) => {
    const contents = {};
    if (output["instanceEventWindowId"] !== undefined) {
        contents.InstanceEventWindowId = __expectString(output["instanceEventWindowId"]);
    }
    if (output.timeRangeSet === "") {
        contents.TimeRanges = [];
    }
    else if (output["timeRangeSet"] !== undefined && output["timeRangeSet"]["item"] !== undefined) {
        contents.TimeRanges = de_InstanceEventWindowTimeRangeList(__getArrayIfSingleItem(output["timeRangeSet"]["item"]), context);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["cronExpression"] !== undefined) {
        contents.CronExpression = __expectString(output["cronExpression"]);
    }
    if (output["associationTarget"] !== undefined) {
        contents.AssociationTarget = de_InstanceEventWindowAssociationTarget(output["associationTarget"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_InstanceEventWindowAssociationTarget = (output, context) => {
    const contents = {};
    if (output.instanceIdSet === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
        contents.InstanceIds = de_InstanceIdList(__getArrayIfSingleItem(output["instanceIdSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.dedicatedHostIdSet === "") {
        contents.DedicatedHostIds = [];
    }
    else if (output["dedicatedHostIdSet"] !== undefined && output["dedicatedHostIdSet"]["item"] !== undefined) {
        contents.DedicatedHostIds = de_DedicatedHostIdList(__getArrayIfSingleItem(output["dedicatedHostIdSet"]["item"]), context);
    }
    return contents;
};
const de_InstanceEventWindowSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceEventWindow(entry, context);
    });
};
const de_InstanceEventWindowStateChange = (output, context) => {
    const contents = {};
    if (output["instanceEventWindowId"] !== undefined) {
        contents.InstanceEventWindowId = __expectString(output["instanceEventWindowId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_InstanceEventWindowTimeRange = (output, context) => {
    const contents = {};
    if (output["startWeekDay"] !== undefined) {
        contents.StartWeekDay = __expectString(output["startWeekDay"]);
    }
    if (output["startHour"] !== undefined) {
        contents.StartHour = __strictParseInt32(output["startHour"]);
    }
    if (output["endWeekDay"] !== undefined) {
        contents.EndWeekDay = __expectString(output["endWeekDay"]);
    }
    if (output["endHour"] !== undefined) {
        contents.EndHour = __strictParseInt32(output["endHour"]);
    }
    return contents;
};
const de_InstanceEventWindowTimeRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceEventWindowTimeRange(entry, context);
    });
};
const de_InstanceExportDetails = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["targetEnvironment"] !== undefined) {
        contents.TargetEnvironment = __expectString(output["targetEnvironment"]);
    }
    return contents;
};
const de_InstanceFamilyCreditSpecification = (output, context) => {
    const contents = {};
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = __expectString(output["cpuCredits"]);
    }
    return contents;
};
const de_InstanceGenerationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_InstanceIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_InstanceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_InstanceIdsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_InstanceIpv4Prefix = (output, context) => {
    const contents = {};
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
    }
    return contents;
};
const de_InstanceIpv4PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceIpv4Prefix(entry, context);
    });
};
const de_InstanceIpv6Address = (output, context) => {
    const contents = {};
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    return contents;
};
const de_InstanceIpv6AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceIpv6Address(entry, context);
    });
};
const de_InstanceIpv6Prefix = (output, context) => {
    const contents = {};
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
    }
    return contents;
};
const de_InstanceIpv6PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceIpv6Prefix(entry, context);
    });
};
const de_InstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
};
const de_InstanceMaintenanceOptions = (output, context) => {
    const contents = {};
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = __expectString(output["autoRecovery"]);
    }
    return contents;
};
const de_InstanceMetadataOptionsResponse = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["httpTokens"] !== undefined) {
        contents.HttpTokens = __expectString(output["httpTokens"]);
    }
    if (output["httpPutResponseHopLimit"] !== undefined) {
        contents.HttpPutResponseHopLimit = __strictParseInt32(output["httpPutResponseHopLimit"]);
    }
    if (output["httpEndpoint"] !== undefined) {
        contents.HttpEndpoint = __expectString(output["httpEndpoint"]);
    }
    if (output["httpProtocolIpv6"] !== undefined) {
        contents.HttpProtocolIpv6 = __expectString(output["httpProtocolIpv6"]);
    }
    if (output["instanceMetadataTags"] !== undefined) {
        contents.InstanceMetadataTags = __expectString(output["instanceMetadataTags"]);
    }
    return contents;
};
const de_InstanceMonitoring = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = de_Monitoring(output["monitoring"], context);
    }
    return contents;
};
const de_InstanceMonitoringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceMonitoring(entry, context);
    });
};
const de_InstanceNetworkInterface = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_InstanceNetworkInterfaceAssociation(output["association"], context);
    }
    if (output["attachment"] !== undefined) {
        contents.Attachment = de_InstanceNetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = de_InstanceIpv6AddressList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["macAddress"] !== undefined) {
        contents.MacAddress = __expectString(output["macAddress"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = de_InstancePrivateIpAddressList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["interfaceType"]);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = de_InstanceIpv4PrefixList(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = de_InstanceIpv6PrefixList(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
    }
    return contents;
};
const de_InstanceNetworkInterfaceAssociation = (output, context) => {
    const contents = {};
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["ipOwnerId"] !== undefined) {
        contents.IpOwnerId = __expectString(output["ipOwnerId"]);
    }
    if (output["publicDnsName"] !== undefined) {
        contents.PublicDnsName = __expectString(output["publicDnsName"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    return contents;
};
const de_InstanceNetworkInterfaceAttachment = (output, context) => {
    const contents = {};
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    return contents;
};
const de_InstanceNetworkInterfaceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceNetworkInterface(entry, context);
    });
};
const de_InstanceNetworkInterfaceSpecification = (output, context) => {
    const contents = {};
    if (output["associatePublicIpAddress"] !== undefined) {
        contents.AssociatePublicIpAddress = __parseBoolean(output["associatePublicIpAddress"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output.SecurityGroupId === "") {
        contents.Groups = [];
    }
    else if (output["SecurityGroupId"] !== undefined && output["SecurityGroupId"]["SecurityGroupId"] !== undefined) {
        contents.Groups = de_SecurityGroupIdStringList(__getArrayIfSingleItem(output["SecurityGroupId"]["SecurityGroupId"]), context);
    }
    if (output["ipv6AddressCount"] !== undefined) {
        contents.Ipv6AddressCount = __strictParseInt32(output["ipv6AddressCount"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = de_InstanceIpv6AddressList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = de_PrivateIpAddressSpecificationList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["secondaryPrivateIpAddressCount"] !== undefined) {
        contents.SecondaryPrivateIpAddressCount = __strictParseInt32(output["secondaryPrivateIpAddressCount"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["AssociateCarrierIpAddress"] !== undefined) {
        contents.AssociateCarrierIpAddress = __parseBoolean(output["AssociateCarrierIpAddress"]);
    }
    if (output["InterfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["InterfaceType"]);
    }
    if (output["NetworkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["NetworkCardIndex"]);
    }
    if (output.Ipv4Prefix === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["Ipv4Prefix"] !== undefined && output["Ipv4Prefix"]["item"] !== undefined) {
        contents.Ipv4Prefixes = de_Ipv4PrefixList(__getArrayIfSingleItem(output["Ipv4Prefix"]["item"]), context);
    }
    if (output["Ipv4PrefixCount"] !== undefined) {
        contents.Ipv4PrefixCount = __strictParseInt32(output["Ipv4PrefixCount"]);
    }
    if (output.Ipv6Prefix === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["Ipv6Prefix"] !== undefined && output["Ipv6Prefix"]["item"] !== undefined) {
        contents.Ipv6Prefixes = de_Ipv6PrefixList(__getArrayIfSingleItem(output["Ipv6Prefix"]["item"]), context);
    }
    if (output["Ipv6PrefixCount"] !== undefined) {
        contents.Ipv6PrefixCount = __strictParseInt32(output["Ipv6PrefixCount"]);
    }
    return contents;
};
const de_InstanceNetworkInterfaceSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceNetworkInterfaceSpecification(entry, context);
    });
};
const de_InstancePrivateIpAddress = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_InstanceNetworkInterfaceAssociation(output["association"], context);
    }
    if (output["primary"] !== undefined) {
        contents.Primary = __parseBoolean(output["primary"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
const de_InstancePrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstancePrivateIpAddress(entry, context);
    });
};
const de_InstanceRequirements = (output, context) => {
    const contents = {};
    if (output["vCpuCount"] !== undefined) {
        contents.VCpuCount = de_VCpuCountRange(output["vCpuCount"], context);
    }
    if (output["memoryMiB"] !== undefined) {
        contents.MemoryMiB = de_MemoryMiB(output["memoryMiB"], context);
    }
    if (output.cpuManufacturerSet === "") {
        contents.CpuManufacturers = [];
    }
    else if (output["cpuManufacturerSet"] !== undefined && output["cpuManufacturerSet"]["item"] !== undefined) {
        contents.CpuManufacturers = de_CpuManufacturerSet(__getArrayIfSingleItem(output["cpuManufacturerSet"]["item"]), context);
    }
    if (output["memoryGiBPerVCpu"] !== undefined) {
        contents.MemoryGiBPerVCpu = de_MemoryGiBPerVCpu(output["memoryGiBPerVCpu"], context);
    }
    if (output.excludedInstanceTypeSet === "") {
        contents.ExcludedInstanceTypes = [];
    }
    else if (output["excludedInstanceTypeSet"] !== undefined &&
        output["excludedInstanceTypeSet"]["item"] !== undefined) {
        contents.ExcludedInstanceTypes = de_ExcludedInstanceTypeSet(__getArrayIfSingleItem(output["excludedInstanceTypeSet"]["item"]), context);
    }
    if (output.instanceGenerationSet === "") {
        contents.InstanceGenerations = [];
    }
    else if (output["instanceGenerationSet"] !== undefined && output["instanceGenerationSet"]["item"] !== undefined) {
        contents.InstanceGenerations = de_InstanceGenerationSet(__getArrayIfSingleItem(output["instanceGenerationSet"]["item"]), context);
    }
    if (output["spotMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.SpotMaxPricePercentageOverLowestPrice = __strictParseInt32(output["spotMaxPricePercentageOverLowestPrice"]);
    }
    if (output["onDemandMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.OnDemandMaxPricePercentageOverLowestPrice = __strictParseInt32(output["onDemandMaxPricePercentageOverLowestPrice"]);
    }
    if (output["bareMetal"] !== undefined) {
        contents.BareMetal = __expectString(output["bareMetal"]);
    }
    if (output["burstablePerformance"] !== undefined) {
        contents.BurstablePerformance = __expectString(output["burstablePerformance"]);
    }
    if (output["requireHibernateSupport"] !== undefined) {
        contents.RequireHibernateSupport = __parseBoolean(output["requireHibernateSupport"]);
    }
    if (output["networkInterfaceCount"] !== undefined) {
        contents.NetworkInterfaceCount = de_NetworkInterfaceCount(output["networkInterfaceCount"], context);
    }
    if (output["localStorage"] !== undefined) {
        contents.LocalStorage = __expectString(output["localStorage"]);
    }
    if (output.localStorageTypeSet === "") {
        contents.LocalStorageTypes = [];
    }
    else if (output["localStorageTypeSet"] !== undefined && output["localStorageTypeSet"]["item"] !== undefined) {
        contents.LocalStorageTypes = de_LocalStorageTypeSet(__getArrayIfSingleItem(output["localStorageTypeSet"]["item"]), context);
    }
    if (output["totalLocalStorageGB"] !== undefined) {
        contents.TotalLocalStorageGB = de_TotalLocalStorageGB(output["totalLocalStorageGB"], context);
    }
    if (output["baselineEbsBandwidthMbps"] !== undefined) {
        contents.BaselineEbsBandwidthMbps = de_BaselineEbsBandwidthMbps(output["baselineEbsBandwidthMbps"], context);
    }
    if (output.acceleratorTypeSet === "") {
        contents.AcceleratorTypes = [];
    }
    else if (output["acceleratorTypeSet"] !== undefined && output["acceleratorTypeSet"]["item"] !== undefined) {
        contents.AcceleratorTypes = de_AcceleratorTypeSet(__getArrayIfSingleItem(output["acceleratorTypeSet"]["item"]), context);
    }
    if (output["acceleratorCount"] !== undefined) {
        contents.AcceleratorCount = de_AcceleratorCount(output["acceleratorCount"], context);
    }
    if (output.acceleratorManufacturerSet === "") {
        contents.AcceleratorManufacturers = [];
    }
    else if (output["acceleratorManufacturerSet"] !== undefined &&
        output["acceleratorManufacturerSet"]["item"] !== undefined) {
        contents.AcceleratorManufacturers = de_AcceleratorManufacturerSet(__getArrayIfSingleItem(output["acceleratorManufacturerSet"]["item"]), context);
    }
    if (output.acceleratorNameSet === "") {
        contents.AcceleratorNames = [];
    }
    else if (output["acceleratorNameSet"] !== undefined && output["acceleratorNameSet"]["item"] !== undefined) {
        contents.AcceleratorNames = de_AcceleratorNameSet(__getArrayIfSingleItem(output["acceleratorNameSet"]["item"]), context);
    }
    if (output["acceleratorTotalMemoryMiB"] !== undefined) {
        contents.AcceleratorTotalMemoryMiB = de_AcceleratorTotalMemoryMiB(output["acceleratorTotalMemoryMiB"], context);
    }
    if (output["networkBandwidthGbps"] !== undefined) {
        contents.NetworkBandwidthGbps = de_NetworkBandwidthGbps(output["networkBandwidthGbps"], context);
    }
    if (output.allowedInstanceTypeSet === "") {
        contents.AllowedInstanceTypes = [];
    }
    else if (output["allowedInstanceTypeSet"] !== undefined && output["allowedInstanceTypeSet"]["item"] !== undefined) {
        contents.AllowedInstanceTypes = de_AllowedInstanceTypeSet(__getArrayIfSingleItem(output["allowedInstanceTypeSet"]["item"]), context);
    }
    return contents;
};
const de_InstanceState = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __strictParseInt32(output["code"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
const de_InstanceStateChange = (output, context) => {
    const contents = {};
    if (output["currentState"] !== undefined) {
        contents.CurrentState = de_InstanceState(output["currentState"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["previousState"] !== undefined) {
        contents.PreviousState = de_InstanceState(output["previousState"], context);
    }
    return contents;
};
const de_InstanceStateChangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStateChange(entry, context);
    });
};
const de_InstanceStatus = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output.eventsSet === "") {
        contents.Events = [];
    }
    else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
        contents.Events = de_InstanceStatusEventList(__getArrayIfSingleItem(output["eventsSet"]["item"]), context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceState"] !== undefined) {
        contents.InstanceState = de_InstanceState(output["instanceState"], context);
    }
    if (output["instanceStatus"] !== undefined) {
        contents.InstanceStatus = de_InstanceStatusSummary(output["instanceStatus"], context);
    }
    if (output["systemStatus"] !== undefined) {
        contents.SystemStatus = de_InstanceStatusSummary(output["systemStatus"], context);
    }
    return contents;
};
const de_InstanceStatusDetails = (output, context) => {
    const contents = {};
    if (output["impairedSince"] !== undefined) {
        contents.ImpairedSince = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["impairedSince"]));
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_InstanceStatusDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStatusDetails(entry, context);
    });
};
const de_InstanceStatusEvent = (output, context) => {
    const contents = {};
    if (output["instanceEventId"] !== undefined) {
        contents.InstanceEventId = __expectString(output["instanceEventId"]);
    }
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["notAfter"] !== undefined) {
        contents.NotAfter = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notAfter"]));
    }
    if (output["notBefore"] !== undefined) {
        contents.NotBefore = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notBefore"]));
    }
    if (output["notBeforeDeadline"] !== undefined) {
        contents.NotBeforeDeadline = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notBeforeDeadline"]));
    }
    return contents;
};
const de_InstanceStatusEventList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStatusEvent(entry, context);
    });
};
const de_InstanceStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStatus(entry, context);
    });
};
const de_InstanceStatusSummary = (output, context) => {
    const contents = {};
    if (output.details === "") {
        contents.Details = [];
    }
    else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
        contents.Details = de_InstanceStatusDetailsList(__getArrayIfSingleItem(output["details"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_InstanceStorageInfo = (output, context) => {
    const contents = {};
    if (output["totalSizeInGB"] !== undefined) {
        contents.TotalSizeInGB = __strictParseLong(output["totalSizeInGB"]);
    }
    if (output.disks === "") {
        contents.Disks = [];
    }
    else if (output["disks"] !== undefined && output["disks"]["item"] !== undefined) {
        contents.Disks = de_DiskInfoList(__getArrayIfSingleItem(output["disks"]["item"]), context);
    }
    if (output["nvmeSupport"] !== undefined) {
        contents.NvmeSupport = __expectString(output["nvmeSupport"]);
    }
    if (output["encryptionSupport"] !== undefined) {
        contents.EncryptionSupport = __expectString(output["encryptionSupport"]);
    }
    return contents;
};
const de_InstanceTagKeySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_InstanceTagNotificationAttribute = (output, context) => {
    const contents = {};
    if (output.instanceTagKeySet === "") {
        contents.InstanceTagKeys = [];
    }
    else if (output["instanceTagKeySet"] !== undefined && output["instanceTagKeySet"]["item"] !== undefined) {
        contents.InstanceTagKeys = de_InstanceTagKeySet(__getArrayIfSingleItem(output["instanceTagKeySet"]["item"]), context);
    }
    if (output["includeAllTagsOfInstance"] !== undefined) {
        contents.IncludeAllTagsOfInstance = __parseBoolean(output["includeAllTagsOfInstance"]);
    }
    return contents;
};
const de_InstanceTypeInfo = (output, context) => {
    const contents = {};
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["currentGeneration"] !== undefined) {
        contents.CurrentGeneration = __parseBoolean(output["currentGeneration"]);
    }
    if (output["freeTierEligible"] !== undefined) {
        contents.FreeTierEligible = __parseBoolean(output["freeTierEligible"]);
    }
    if (output.supportedUsageClasses === "") {
        contents.SupportedUsageClasses = [];
    }
    else if (output["supportedUsageClasses"] !== undefined && output["supportedUsageClasses"]["item"] !== undefined) {
        contents.SupportedUsageClasses = de_UsageClassTypeList(__getArrayIfSingleItem(output["supportedUsageClasses"]["item"]), context);
    }
    if (output.supportedRootDeviceTypes === "") {
        contents.SupportedRootDeviceTypes = [];
    }
    else if (output["supportedRootDeviceTypes"] !== undefined &&
        output["supportedRootDeviceTypes"]["item"] !== undefined) {
        contents.SupportedRootDeviceTypes = de_RootDeviceTypeList(__getArrayIfSingleItem(output["supportedRootDeviceTypes"]["item"]), context);
    }
    if (output.supportedVirtualizationTypes === "") {
        contents.SupportedVirtualizationTypes = [];
    }
    else if (output["supportedVirtualizationTypes"] !== undefined &&
        output["supportedVirtualizationTypes"]["item"] !== undefined) {
        contents.SupportedVirtualizationTypes = de_VirtualizationTypeList(__getArrayIfSingleItem(output["supportedVirtualizationTypes"]["item"]), context);
    }
    if (output["bareMetal"] !== undefined) {
        contents.BareMetal = __parseBoolean(output["bareMetal"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["processorInfo"] !== undefined) {
        contents.ProcessorInfo = de_ProcessorInfo(output["processorInfo"], context);
    }
    if (output["vCpuInfo"] !== undefined) {
        contents.VCpuInfo = de_VCpuInfo(output["vCpuInfo"], context);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = de_MemoryInfo(output["memoryInfo"], context);
    }
    if (output["instanceStorageSupported"] !== undefined) {
        contents.InstanceStorageSupported = __parseBoolean(output["instanceStorageSupported"]);
    }
    if (output["instanceStorageInfo"] !== undefined) {
        contents.InstanceStorageInfo = de_InstanceStorageInfo(output["instanceStorageInfo"], context);
    }
    if (output["ebsInfo"] !== undefined) {
        contents.EbsInfo = de_EbsInfo(output["ebsInfo"], context);
    }
    if (output["networkInfo"] !== undefined) {
        contents.NetworkInfo = de_NetworkInfo(output["networkInfo"], context);
    }
    if (output["gpuInfo"] !== undefined) {
        contents.GpuInfo = de_GpuInfo(output["gpuInfo"], context);
    }
    if (output["fpgaInfo"] !== undefined) {
        contents.FpgaInfo = de_FpgaInfo(output["fpgaInfo"], context);
    }
    if (output["placementGroupInfo"] !== undefined) {
        contents.PlacementGroupInfo = de_PlacementGroupInfo(output["placementGroupInfo"], context);
    }
    if (output["inferenceAcceleratorInfo"] !== undefined) {
        contents.InferenceAcceleratorInfo = de_InferenceAcceleratorInfo(output["inferenceAcceleratorInfo"], context);
    }
    if (output["hibernationSupported"] !== undefined) {
        contents.HibernationSupported = __parseBoolean(output["hibernationSupported"]);
    }
    if (output["burstablePerformanceSupported"] !== undefined) {
        contents.BurstablePerformanceSupported = __parseBoolean(output["burstablePerformanceSupported"]);
    }
    if (output["dedicatedHostsSupported"] !== undefined) {
        contents.DedicatedHostsSupported = __parseBoolean(output["dedicatedHostsSupported"]);
    }
    if (output["autoRecoverySupported"] !== undefined) {
        contents.AutoRecoverySupported = __parseBoolean(output["autoRecoverySupported"]);
    }
    if (output.supportedBootModes === "") {
        contents.SupportedBootModes = [];
    }
    else if (output["supportedBootModes"] !== undefined && output["supportedBootModes"]["item"] !== undefined) {
        contents.SupportedBootModes = de_BootModeTypeList(__getArrayIfSingleItem(output["supportedBootModes"]["item"]), context);
    }
    return contents;
};
const de_InstanceTypeInfoFromInstanceRequirements = (output, context) => {
    const contents = {};
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    return contents;
};
const de_InstanceTypeInfoFromInstanceRequirementsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTypeInfoFromInstanceRequirements(entry, context);
    });
};
const de_InstanceTypeInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTypeInfo(entry, context);
    });
};
const de_InstanceTypeOffering = (output, context) => {
    const contents = {};
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["locationType"] !== undefined) {
        contents.LocationType = __expectString(output["locationType"]);
    }
    if (output["location"] !== undefined) {
        contents.Location = __expectString(output["location"]);
    }
    return contents;
};
const de_InstanceTypeOfferingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTypeOffering(entry, context);
    });
};
const de_InstanceTypesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_InstanceUsage = (output, context) => {
    const contents = {};
    if (output["accountId"] !== undefined) {
        contents.AccountId = __expectString(output["accountId"]);
    }
    if (output["usedInstanceCount"] !== undefined) {
        contents.UsedInstanceCount = __strictParseInt32(output["usedInstanceCount"]);
    }
    return contents;
};
const de_InstanceUsageSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceUsage(entry, context);
    });
};
const de_InternetGateway = (output, context) => {
    const contents = {};
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = de_InternetGatewayAttachmentList(__getArrayIfSingleItem(output["attachmentSet"]["item"]), context);
    }
    if (output["internetGatewayId"] !== undefined) {
        contents.InternetGatewayId = __expectString(output["internetGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_InternetGatewayAttachment = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_InternetGatewayAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InternetGatewayAttachment(entry, context);
    });
};
const de_InternetGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InternetGateway(entry, context);
    });
};
const de_IpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Ipam = (output, context) => {
    const contents = {};
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamId"] !== undefined) {
        contents.IpamId = __expectString(output["ipamId"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = __expectString(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = __expectString(output["ipamRegion"]);
    }
    if (output["publicDefaultScopeId"] !== undefined) {
        contents.PublicDefaultScopeId = __expectString(output["publicDefaultScopeId"]);
    }
    if (output["privateDefaultScopeId"] !== undefined) {
        contents.PrivateDefaultScopeId = __expectString(output["privateDefaultScopeId"]);
    }
    if (output["scopeCount"] !== undefined) {
        contents.ScopeCount = __strictParseInt32(output["scopeCount"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.operatingRegionSet === "") {
        contents.OperatingRegions = [];
    }
    else if (output["operatingRegionSet"] !== undefined && output["operatingRegionSet"]["item"] !== undefined) {
        contents.OperatingRegions = de_IpamOperatingRegionSet(__getArrayIfSingleItem(output["operatingRegionSet"]["item"]), context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["defaultResourceDiscoveryId"] !== undefined) {
        contents.DefaultResourceDiscoveryId = __expectString(output["defaultResourceDiscoveryId"]);
    }
    if (output["defaultResourceDiscoveryAssociationId"] !== undefined) {
        contents.DefaultResourceDiscoveryAssociationId = __expectString(output["defaultResourceDiscoveryAssociationId"]);
    }
    if (output["resourceDiscoveryAssociationCount"] !== undefined) {
        contents.ResourceDiscoveryAssociationCount = __strictParseInt32(output["resourceDiscoveryAssociationCount"]);
    }
    return contents;
};
const de_IpamAddressHistoryRecord = (output, context) => {
    const contents = {};
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = __expectString(output["resourceRegion"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceCidr"] !== undefined) {
        contents.ResourceCidr = __expectString(output["resourceCidr"]);
    }
    if (output["resourceName"] !== undefined) {
        contents.ResourceName = __expectString(output["resourceName"]);
    }
    if (output["resourceComplianceStatus"] !== undefined) {
        contents.ResourceComplianceStatus = __expectString(output["resourceComplianceStatus"]);
    }
    if (output["resourceOverlapStatus"] !== undefined) {
        contents.ResourceOverlapStatus = __expectString(output["resourceOverlapStatus"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["sampledStartTime"] !== undefined) {
        contents.SampledStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["sampledStartTime"]));
    }
    if (output["sampledEndTime"] !== undefined) {
        contents.SampledEndTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["sampledEndTime"]));
    }
    return contents;
};
const de_IpamAddressHistoryRecordSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamAddressHistoryRecord(entry, context);
    });
};
const de_IpamDiscoveredAccount = (output, context) => {
    const contents = {};
    if (output["accountId"] !== undefined) {
        contents.AccountId = __expectString(output["accountId"]);
    }
    if (output["discoveryRegion"] !== undefined) {
        contents.DiscoveryRegion = __expectString(output["discoveryRegion"]);
    }
    if (output["failureReason"] !== undefined) {
        contents.FailureReason = de_IpamDiscoveryFailureReason(output["failureReason"], context);
    }
    if (output["lastAttemptedDiscoveryTime"] !== undefined) {
        contents.LastAttemptedDiscoveryTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastAttemptedDiscoveryTime"]));
    }
    if (output["lastSuccessfulDiscoveryTime"] !== undefined) {
        contents.LastSuccessfulDiscoveryTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastSuccessfulDiscoveryTime"]));
    }
    return contents;
};
const de_IpamDiscoveredAccountSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamDiscoveredAccount(entry, context);
    });
};
const de_IpamDiscoveredResourceCidr = (output, context) => {
    const contents = {};
    if (output["ipamResourceDiscoveryId"] !== undefined) {
        contents.IpamResourceDiscoveryId = __expectString(output["ipamResourceDiscoveryId"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = __expectString(output["resourceRegion"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["resourceCidr"] !== undefined) {
        contents.ResourceCidr = __expectString(output["resourceCidr"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.resourceTagSet === "") {
        contents.ResourceTags = [];
    }
    else if (output["resourceTagSet"] !== undefined && output["resourceTagSet"]["item"] !== undefined) {
        contents.ResourceTags = de_IpamResourceTagList(__getArrayIfSingleItem(output["resourceTagSet"]["item"]), context);
    }
    if (output["ipUsage"] !== undefined) {
        contents.IpUsage = __strictParseFloat(output["ipUsage"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["sampleTime"] !== undefined) {
        contents.SampleTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["sampleTime"]));
    }
    return contents;
};
const de_IpamDiscoveredResourceCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamDiscoveredResourceCidr(entry, context);
    });
};
const de_IpamDiscoveryFailureReason = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_IpamOperatingRegion = (output, context) => {
    const contents = {};
    if (output["regionName"] !== undefined) {
        contents.RegionName = __expectString(output["regionName"]);
    }
    return contents;
};
const de_IpamOperatingRegionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamOperatingRegion(entry, context);
    });
};
const de_IpamPool = (output, context) => {
    const contents = {};
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamPoolId"] !== undefined) {
        contents.IpamPoolId = __expectString(output["ipamPoolId"]);
    }
    if (output["sourceIpamPoolId"] !== undefined) {
        contents.SourceIpamPoolId = __expectString(output["sourceIpamPoolId"]);
    }
    if (output["ipamPoolArn"] !== undefined) {
        contents.IpamPoolArn = __expectString(output["ipamPoolArn"]);
    }
    if (output["ipamScopeArn"] !== undefined) {
        contents.IpamScopeArn = __expectString(output["ipamScopeArn"]);
    }
    if (output["ipamScopeType"] !== undefined) {
        contents.IpamScopeType = __expectString(output["ipamScopeType"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = __expectString(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = __expectString(output["ipamRegion"]);
    }
    if (output["locale"] !== undefined) {
        contents.Locale = __expectString(output["locale"]);
    }
    if (output["poolDepth"] !== undefined) {
        contents.PoolDepth = __strictParseInt32(output["poolDepth"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateMessage"] !== undefined) {
        contents.StateMessage = __expectString(output["stateMessage"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["autoImport"] !== undefined) {
        contents.AutoImport = __parseBoolean(output["autoImport"]);
    }
    if (output["publiclyAdvertisable"] !== undefined) {
        contents.PubliclyAdvertisable = __parseBoolean(output["publiclyAdvertisable"]);
    }
    if (output["addressFamily"] !== undefined) {
        contents.AddressFamily = __expectString(output["addressFamily"]);
    }
    if (output["allocationMinNetmaskLength"] !== undefined) {
        contents.AllocationMinNetmaskLength = __strictParseInt32(output["allocationMinNetmaskLength"]);
    }
    if (output["allocationMaxNetmaskLength"] !== undefined) {
        contents.AllocationMaxNetmaskLength = __strictParseInt32(output["allocationMaxNetmaskLength"]);
    }
    if (output["allocationDefaultNetmaskLength"] !== undefined) {
        contents.AllocationDefaultNetmaskLength = __strictParseInt32(output["allocationDefaultNetmaskLength"]);
    }
    if (output.allocationResourceTagSet === "") {
        contents.AllocationResourceTags = [];
    }
    else if (output["allocationResourceTagSet"] !== undefined &&
        output["allocationResourceTagSet"]["item"] !== undefined) {
        contents.AllocationResourceTags = de_IpamResourceTagList(__getArrayIfSingleItem(output["allocationResourceTagSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = __expectString(output["awsService"]);
    }
    if (output["publicIpSource"] !== undefined) {
        contents.PublicIpSource = __expectString(output["publicIpSource"]);
    }
    return contents;
};
const de_IpamPoolAllocation = (output, context) => {
    const contents = {};
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["ipamPoolAllocationId"] !== undefined) {
        contents.IpamPoolAllocationId = __expectString(output["ipamPoolAllocationId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = __expectString(output["resourceRegion"]);
    }
    if (output["resourceOwner"] !== undefined) {
        contents.ResourceOwner = __expectString(output["resourceOwner"]);
    }
    return contents;
};
const de_IpamPoolAllocationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPoolAllocation(entry, context);
    });
};
const de_IpamPoolCidr = (output, context) => {
    const contents = {};
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["failureReason"] !== undefined) {
        contents.FailureReason = de_IpamPoolCidrFailureReason(output["failureReason"], context);
    }
    if (output["ipamPoolCidrId"] !== undefined) {
        contents.IpamPoolCidrId = __expectString(output["ipamPoolCidrId"]);
    }
    if (output["netmaskLength"] !== undefined) {
        contents.NetmaskLength = __strictParseInt32(output["netmaskLength"]);
    }
    return contents;
};
const de_IpamPoolCidrFailureReason = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_IpamPoolCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPoolCidr(entry, context);
    });
};
const de_IpamPoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPool(entry, context);
    });
};
const de_IpamResourceCidr = (output, context) => {
    const contents = {};
    if (output["ipamId"] !== undefined) {
        contents.IpamId = __expectString(output["ipamId"]);
    }
    if (output["ipamScopeId"] !== undefined) {
        contents.IpamScopeId = __expectString(output["ipamScopeId"]);
    }
    if (output["ipamPoolId"] !== undefined) {
        contents.IpamPoolId = __expectString(output["ipamPoolId"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = __expectString(output["resourceRegion"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceName"] !== undefined) {
        contents.ResourceName = __expectString(output["resourceName"]);
    }
    if (output["resourceCidr"] !== undefined) {
        contents.ResourceCidr = __expectString(output["resourceCidr"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.resourceTagSet === "") {
        contents.ResourceTags = [];
    }
    else if (output["resourceTagSet"] !== undefined && output["resourceTagSet"]["item"] !== undefined) {
        contents.ResourceTags = de_IpamResourceTagList(__getArrayIfSingleItem(output["resourceTagSet"]["item"]), context);
    }
    if (output["ipUsage"] !== undefined) {
        contents.IpUsage = __strictParseFloat(output["ipUsage"]);
    }
    if (output["complianceStatus"] !== undefined) {
        contents.ComplianceStatus = __expectString(output["complianceStatus"]);
    }
    if (output["managementState"] !== undefined) {
        contents.ManagementState = __expectString(output["managementState"]);
    }
    if (output["overlapStatus"] !== undefined) {
        contents.OverlapStatus = __expectString(output["overlapStatus"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_IpamResourceCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceCidr(entry, context);
    });
};
const de_IpamResourceDiscovery = (output, context) => {
    const contents = {};
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamResourceDiscoveryId"] !== undefined) {
        contents.IpamResourceDiscoveryId = __expectString(output["ipamResourceDiscoveryId"]);
    }
    if (output["ipamResourceDiscoveryArn"] !== undefined) {
        contents.IpamResourceDiscoveryArn = __expectString(output["ipamResourceDiscoveryArn"]);
    }
    if (output["ipamResourceDiscoveryRegion"] !== undefined) {
        contents.IpamResourceDiscoveryRegion = __expectString(output["ipamResourceDiscoveryRegion"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.operatingRegionSet === "") {
        contents.OperatingRegions = [];
    }
    else if (output["operatingRegionSet"] !== undefined && output["operatingRegionSet"]["item"] !== undefined) {
        contents.OperatingRegions = de_IpamOperatingRegionSet(__getArrayIfSingleItem(output["operatingRegionSet"]["item"]), context);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["isDefault"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_IpamResourceDiscoveryAssociation = (output, context) => {
    const contents = {};
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamResourceDiscoveryAssociationId"] !== undefined) {
        contents.IpamResourceDiscoveryAssociationId = __expectString(output["ipamResourceDiscoveryAssociationId"]);
    }
    if (output["ipamResourceDiscoveryAssociationArn"] !== undefined) {
        contents.IpamResourceDiscoveryAssociationArn = __expectString(output["ipamResourceDiscoveryAssociationArn"]);
    }
    if (output["ipamResourceDiscoveryId"] !== undefined) {
        contents.IpamResourceDiscoveryId = __expectString(output["ipamResourceDiscoveryId"]);
    }
    if (output["ipamId"] !== undefined) {
        contents.IpamId = __expectString(output["ipamId"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = __expectString(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = __expectString(output["ipamRegion"]);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["isDefault"]);
    }
    if (output["resourceDiscoveryStatus"] !== undefined) {
        contents.ResourceDiscoveryStatus = __expectString(output["resourceDiscoveryStatus"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_IpamResourceDiscoveryAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceDiscoveryAssociation(entry, context);
    });
};
const de_IpamResourceDiscoverySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceDiscovery(entry, context);
    });
};
const de_IpamResourceTag = (output, context) => {
    const contents = {};
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_IpamResourceTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceTag(entry, context);
    });
};
const de_IpamScope = (output, context) => {
    const contents = {};
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamScopeId"] !== undefined) {
        contents.IpamScopeId = __expectString(output["ipamScopeId"]);
    }
    if (output["ipamScopeArn"] !== undefined) {
        contents.IpamScopeArn = __expectString(output["ipamScopeArn"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = __expectString(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = __expectString(output["ipamRegion"]);
    }
    if (output["ipamScopeType"] !== undefined) {
        contents.IpamScopeType = __expectString(output["ipamScopeType"]);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["isDefault"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["poolCount"] !== undefined) {
        contents.PoolCount = __strictParseInt32(output["poolCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_IpamScopeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamScope(entry, context);
    });
};
const de_IpamSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipam(entry, context);
    });
};
const de_IpPermission = (output, context) => {
    const contents = {};
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = __expectString(output["ipProtocol"]);
    }
    if (output.ipRanges === "") {
        contents.IpRanges = [];
    }
    else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
        contents.IpRanges = de_IpRangeList(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
    }
    if (output.ipv6Ranges === "") {
        contents.Ipv6Ranges = [];
    }
    else if (output["ipv6Ranges"] !== undefined && output["ipv6Ranges"]["item"] !== undefined) {
        contents.Ipv6Ranges = de_Ipv6RangeList(__getArrayIfSingleItem(output["ipv6Ranges"]["item"]), context);
    }
    if (output.prefixListIds === "") {
        contents.PrefixListIds = [];
    }
    else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
        contents.PrefixListIds = de_PrefixListIdList(__getArrayIfSingleItem(output["prefixListIds"]["item"]), context);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    if (output.groups === "") {
        contents.UserIdGroupPairs = [];
    }
    else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
        contents.UserIdGroupPairs = de_UserIdGroupPairList(__getArrayIfSingleItem(output["groups"]["item"]), context);
    }
    return contents;
};
const de_IpPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpPermission(entry, context);
    });
};
const de_IpPrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_IpRange = (output, context) => {
    const contents = {};
    if (output["cidrIp"] !== undefined) {
        contents.CidrIp = __expectString(output["cidrIp"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
const de_IpRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpRange(entry, context);
    });
};
const de_IpRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Ipv4PrefixesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv4PrefixSpecification(entry, context);
    });
};
const de_Ipv4PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv4PrefixSpecificationRequest(entry, context);
    });
};
const de_Ipv4PrefixListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv4PrefixSpecificationResponse(entry, context);
    });
};
const de_Ipv4PrefixSpecification = (output, context) => {
    const contents = {};
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
    }
    return contents;
};
const de_Ipv4PrefixSpecificationRequest = (output, context) => {
    const contents = {};
    if (output["Ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["Ipv4Prefix"]);
    }
    return contents;
};
const de_Ipv4PrefixSpecificationResponse = (output, context) => {
    const contents = {};
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
    }
    return contents;
};
const de_Ipv6AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Ipv6CidrAssociation = (output, context) => {
    const contents = {};
    if (output["ipv6Cidr"] !== undefined) {
        contents.Ipv6Cidr = __expectString(output["ipv6Cidr"]);
    }
    if (output["associatedResource"] !== undefined) {
        contents.AssociatedResource = __expectString(output["associatedResource"]);
    }
    return contents;
};
const de_Ipv6CidrAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6CidrAssociation(entry, context);
    });
};
const de_Ipv6CidrBlock = (output, context) => {
    const contents = {};
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    return contents;
};
const de_Ipv6CidrBlockSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6CidrBlock(entry, context);
    });
};
const de_Ipv6Pool = (output, context) => {
    const contents = {};
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.poolCidrBlockSet === "") {
        contents.PoolCidrBlocks = [];
    }
    else if (output["poolCidrBlockSet"] !== undefined && output["poolCidrBlockSet"]["item"] !== undefined) {
        contents.PoolCidrBlocks = de_PoolCidrBlocksSet(__getArrayIfSingleItem(output["poolCidrBlockSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_Ipv6PoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6Pool(entry, context);
    });
};
const de_Ipv6PrefixesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6PrefixSpecification(entry, context);
    });
};
const de_Ipv6PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6PrefixSpecificationRequest(entry, context);
    });
};
const de_Ipv6PrefixListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6PrefixSpecificationResponse(entry, context);
    });
};
const de_Ipv6PrefixSpecification = (output, context) => {
    const contents = {};
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
    }
    return contents;
};
const de_Ipv6PrefixSpecificationRequest = (output, context) => {
    const contents = {};
    if (output["Ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["Ipv6Prefix"]);
    }
    return contents;
};
const de_Ipv6PrefixSpecificationResponse = (output, context) => {
    const contents = {};
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
    }
    return contents;
};
const de_Ipv6Range = (output, context) => {
    const contents = {};
    if (output["cidrIpv6"] !== undefined) {
        contents.CidrIpv6 = __expectString(output["cidrIpv6"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
const de_Ipv6RangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6Range(entry, context);
    });
};
const de_KeyPair = (output, context) => {
    const contents = {};
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
    }
    if (output["keyMaterial"] !== undefined) {
        contents.KeyMaterial = __expectString(output["keyMaterial"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = __expectString(output["keyPairId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_KeyPairInfo = (output, context) => {
    const contents = {};
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = __expectString(output["keyPairId"]);
    }
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["keyType"] !== undefined) {
        contents.KeyType = __expectString(output["keyType"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["publicKey"] !== undefined) {
        contents.PublicKey = __expectString(output["publicKey"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    return contents;
};
const de_KeyPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyPairInfo(entry, context);
    });
};
const de_LastError = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    return contents;
};
const de_LaunchPermission = (output, context) => {
    const contents = {};
    if (output["group"] !== undefined) {
        contents.Group = __expectString(output["group"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["organizationArn"] !== undefined) {
        contents.OrganizationArn = __expectString(output["organizationArn"]);
    }
    if (output["organizationalUnitArn"] !== undefined) {
        contents.OrganizationalUnitArn = __expectString(output["organizationalUnitArn"]);
    }
    return contents;
};
const de_LaunchPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchPermission(entry, context);
    });
};
const de_LaunchSpecification = (output, context) => {
    const contents = {};
    if (output["userData"] !== undefined) {
        contents.UserData = __expectString(output["userData"]);
    }
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["addressingType"] !== undefined) {
        contents.AddressingType = __expectString(output["addressingType"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = de_BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = de_IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = de_InstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = de_SpotPlacement(output["placement"], context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = de_RunInstancesMonitoringEnabled(output["monitoring"], context);
    }
    return contents;
};
const de_LaunchSpecsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotFleetLaunchSpecification(entry, context);
    });
};
const de_LaunchTemplate = (output, context) => {
    const contents = {};
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["createdBy"] !== undefined) {
        contents.CreatedBy = __expectString(output["createdBy"]);
    }
    if (output["defaultVersionNumber"] !== undefined) {
        contents.DefaultVersionNumber = __strictParseLong(output["defaultVersionNumber"]);
    }
    if (output["latestVersionNumber"] !== undefined) {
        contents.LatestVersionNumber = __strictParseLong(output["latestVersionNumber"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_LaunchTemplateAndOverridesResponse = (output, context) => {
    const contents = {};
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = de_FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output["overrides"] !== undefined) {
        contents.Overrides = de_FleetLaunchTemplateOverrides(output["overrides"], context);
    }
    return contents;
};
const de_LaunchTemplateBlockDeviceMapping = (output, context) => {
    const contents = {};
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["virtualName"] !== undefined) {
        contents.VirtualName = __expectString(output["virtualName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = de_LaunchTemplateEbsBlockDevice(output["ebs"], context);
    }
    if (output["noDevice"] !== undefined) {
        contents.NoDevice = __expectString(output["noDevice"]);
    }
    return contents;
};
const de_LaunchTemplateBlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateBlockDeviceMapping(entry, context);
    });
};
const de_LaunchTemplateCapacityReservationSpecificationResponse = (output, context) => {
    const contents = {};
    if (output["capacityReservationPreference"] !== undefined) {
        contents.CapacityReservationPreference = __expectString(output["capacityReservationPreference"]);
    }
    if (output["capacityReservationTarget"] !== undefined) {
        contents.CapacityReservationTarget = de_CapacityReservationTargetResponse(output["capacityReservationTarget"], context);
    }
    return contents;
};
const de_LaunchTemplateConfig = (output, context) => {
    const contents = {};
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = de_FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output.overrides === "") {
        contents.Overrides = [];
    }
    else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
        contents.Overrides = de_LaunchTemplateOverridesList(__getArrayIfSingleItem(output["overrides"]["item"]), context);
    }
    return contents;
};
const de_LaunchTemplateConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateConfig(entry, context);
    });
};
const de_LaunchTemplateCpuOptions = (output, context) => {
    const contents = {};
    if (output["coreCount"] !== undefined) {
        contents.CoreCount = __strictParseInt32(output["coreCount"]);
    }
    if (output["threadsPerCore"] !== undefined) {
        contents.ThreadsPerCore = __strictParseInt32(output["threadsPerCore"]);
    }
    if (output["amdSevSnp"] !== undefined) {
        contents.AmdSevSnp = __expectString(output["amdSevSnp"]);
    }
    return contents;
};
const de_LaunchTemplateEbsBlockDevice = (output, context) => {
    const contents = {};
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["iops"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = __expectString(output["volumeType"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = __strictParseInt32(output["throughput"]);
    }
    return contents;
};
const de_LaunchTemplateElasticInferenceAcceleratorResponse = (output, context) => {
    const contents = {};
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    return contents;
};
const de_LaunchTemplateElasticInferenceAcceleratorResponseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateElasticInferenceAcceleratorResponse(entry, context);
    });
};
const de_LaunchTemplateEnclaveOptions = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
const de_LaunchTemplateHibernationOptions = (output, context) => {
    const contents = {};
    if (output["configured"] !== undefined) {
        contents.Configured = __parseBoolean(output["configured"]);
    }
    return contents;
};
const de_LaunchTemplateIamInstanceProfileSpecification = (output, context) => {
    const contents = {};
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
const de_LaunchTemplateInstanceMaintenanceOptions = (output, context) => {
    const contents = {};
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = __expectString(output["autoRecovery"]);
    }
    return contents;
};
const de_LaunchTemplateInstanceMarketOptions = (output, context) => {
    const contents = {};
    if (output["marketType"] !== undefined) {
        contents.MarketType = __expectString(output["marketType"]);
    }
    if (output["spotOptions"] !== undefined) {
        contents.SpotOptions = de_LaunchTemplateSpotMarketOptions(output["spotOptions"], context);
    }
    return contents;
};
const de_LaunchTemplateInstanceMetadataOptions = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["httpTokens"] !== undefined) {
        contents.HttpTokens = __expectString(output["httpTokens"]);
    }
    if (output["httpPutResponseHopLimit"] !== undefined) {
        contents.HttpPutResponseHopLimit = __strictParseInt32(output["httpPutResponseHopLimit"]);
    }
    if (output["httpEndpoint"] !== undefined) {
        contents.HttpEndpoint = __expectString(output["httpEndpoint"]);
    }
    if (output["httpProtocolIpv6"] !== undefined) {
        contents.HttpProtocolIpv6 = __expectString(output["httpProtocolIpv6"]);
    }
    if (output["instanceMetadataTags"] !== undefined) {
        contents.InstanceMetadataTags = __expectString(output["instanceMetadataTags"]);
    }
    return contents;
};
const de_LaunchTemplateInstanceNetworkInterfaceSpecification = (output, context) => {
    const contents = {};
    if (output["associateCarrierIpAddress"] !== undefined) {
        contents.AssociateCarrierIpAddress = __parseBoolean(output["associateCarrierIpAddress"]);
    }
    if (output["associatePublicIpAddress"] !== undefined) {
        contents.AssociatePublicIpAddress = __parseBoolean(output["associatePublicIpAddress"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["groupId"] !== undefined) {
        contents.Groups = de_GroupIdStringList(__getArrayIfSingleItem(output["groupSet"]["groupId"]), context);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["interfaceType"]);
    }
    if (output["ipv6AddressCount"] !== undefined) {
        contents.Ipv6AddressCount = __strictParseInt32(output["ipv6AddressCount"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = de_InstanceIpv6AddressList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = de_PrivateIpAddressSpecificationList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["secondaryPrivateIpAddressCount"] !== undefined) {
        contents.SecondaryPrivateIpAddressCount = __strictParseInt32(output["secondaryPrivateIpAddressCount"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = de_Ipv4PrefixListResponse(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output["ipv4PrefixCount"] !== undefined) {
        contents.Ipv4PrefixCount = __strictParseInt32(output["ipv4PrefixCount"]);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = de_Ipv6PrefixListResponse(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
    }
    if (output["ipv6PrefixCount"] !== undefined) {
        contents.Ipv6PrefixCount = __strictParseInt32(output["ipv6PrefixCount"]);
    }
    return contents;
};
const de_LaunchTemplateInstanceNetworkInterfaceSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateInstanceNetworkInterfaceSpecification(entry, context);
    });
};
const de_LaunchTemplateLicenseConfiguration = (output, context) => {
    const contents = {};
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
    }
    return contents;
};
const de_LaunchTemplateLicenseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateLicenseConfiguration(entry, context);
    });
};
const de_LaunchTemplateOverrides = (output, context) => {
    const contents = {};
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = __strictParseFloat(output["priority"]);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
const de_LaunchTemplateOverridesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateOverrides(entry, context);
    });
};
const de_LaunchTemplatePlacement = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["affinity"] !== undefined) {
        contents.Affinity = __expectString(output["affinity"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = __expectString(output["hostId"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["spreadDomain"] !== undefined) {
        contents.SpreadDomain = __expectString(output["spreadDomain"]);
    }
    if (output["hostResourceGroupArn"] !== undefined) {
        contents.HostResourceGroupArn = __expectString(output["hostResourceGroupArn"]);
    }
    if (output["partitionNumber"] !== undefined) {
        contents.PartitionNumber = __strictParseInt32(output["partitionNumber"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    return contents;
};
const de_LaunchTemplatePrivateDnsNameOptions = (output, context) => {
    const contents = {};
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = __expectString(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
const de_LaunchTemplateSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplate(entry, context);
    });
};
const de_LaunchTemplatesMonitoring = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
const de_LaunchTemplateSpotMarketOptions = (output, context) => {
    const contents = {};
    if (output["maxPrice"] !== undefined) {
        contents.MaxPrice = __expectString(output["maxPrice"]);
    }
    if (output["spotInstanceType"] !== undefined) {
        contents.SpotInstanceType = __expectString(output["spotInstanceType"]);
    }
    if (output["blockDurationMinutes"] !== undefined) {
        contents.BlockDurationMinutes = __strictParseInt32(output["blockDurationMinutes"]);
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    return contents;
};
const de_LaunchTemplateTagSpecification = (output, context) => {
    const contents = {};
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_LaunchTemplateTagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateTagSpecification(entry, context);
    });
};
const de_LaunchTemplateVersion = (output, context) => {
    const contents = {};
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = __strictParseLong(output["versionNumber"]);
    }
    if (output["versionDescription"] !== undefined) {
        contents.VersionDescription = __expectString(output["versionDescription"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["createdBy"] !== undefined) {
        contents.CreatedBy = __expectString(output["createdBy"]);
    }
    if (output["defaultVersion"] !== undefined) {
        contents.DefaultVersion = __parseBoolean(output["defaultVersion"]);
    }
    if (output["launchTemplateData"] !== undefined) {
        contents.LaunchTemplateData = de_ResponseLaunchTemplateData(output["launchTemplateData"], context);
    }
    return contents;
};
const de_LaunchTemplateVersionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateVersion(entry, context);
    });
};
const de_LicenseConfiguration = (output, context) => {
    const contents = {};
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
    }
    return contents;
};
const de_LicenseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LicenseConfiguration(entry, context);
    });
};
const de_ListImagesInRecycleBinResult = (output, context) => {
    const contents = {};
    if (output.imageSet === "") {
        contents.Images = [];
    }
    else if (output["imageSet"] !== undefined && output["imageSet"]["item"] !== undefined) {
        contents.Images = de_ImageRecycleBinInfoList(__getArrayIfSingleItem(output["imageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_ListSnapshotsInRecycleBinResult = (output, context) => {
    const contents = {};
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = de_SnapshotRecycleBinInfoList(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_LoadBalancersConfig = (output, context) => {
    const contents = {};
    if (output["classicLoadBalancersConfig"] !== undefined) {
        contents.ClassicLoadBalancersConfig = de_ClassicLoadBalancersConfig(output["classicLoadBalancersConfig"], context);
    }
    if (output["targetGroupsConfig"] !== undefined) {
        contents.TargetGroupsConfig = de_TargetGroupsConfig(output["targetGroupsConfig"], context);
    }
    return contents;
};
const de_LoadPermission = (output, context) => {
    const contents = {};
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["group"] !== undefined) {
        contents.Group = __expectString(output["group"]);
    }
    return contents;
};
const de_LoadPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadPermission(entry, context);
    });
};
const de_LocalGateway = (output, context) => {
    const contents = {};
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_LocalGatewayRoute = (output, context) => {
    const contents = {};
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["coipPoolId"] !== undefined) {
        contents.CoipPoolId = __expectString(output["coipPoolId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["destinationPrefixListId"] !== undefined) {
        contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
    }
    return contents;
};
const de_LocalGatewayRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRoute(entry, context);
    });
};
const de_LocalGatewayRouteTable = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["mode"] !== undefined) {
        contents.Mode = __expectString(output["mode"]);
    }
    if (output["stateReason"] !== undefined) {
        contents.StateReason = de_StateReason(output["stateReason"], context);
    }
    return contents;
};
const de_LocalGatewayRouteTableSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRouteTable(entry, context);
    });
};
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = __expectString(output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"]);
    }
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry, context);
    });
};
const de_LocalGatewayRouteTableVpcAssociation = (output, context) => {
    const contents = {};
    if (output["localGatewayRouteTableVpcAssociationId"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociationId = __expectString(output["localGatewayRouteTableVpcAssociationId"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_LocalGatewayRouteTableVpcAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRouteTableVpcAssociation(entry, context);
    });
};
const de_LocalGatewaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGateway(entry, context);
    });
};
const de_LocalGatewayVirtualInterface = (output, context) => {
    const contents = {};
    if (output["localGatewayVirtualInterfaceId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceId = __expectString(output["localGatewayVirtualInterfaceId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["vlan"] !== undefined) {
        contents.Vlan = __strictParseInt32(output["vlan"]);
    }
    if (output["localAddress"] !== undefined) {
        contents.LocalAddress = __expectString(output["localAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = __expectString(output["peerAddress"]);
    }
    if (output["localBgpAsn"] !== undefined) {
        contents.LocalBgpAsn = __strictParseInt32(output["localBgpAsn"]);
    }
    if (output["peerBgpAsn"] !== undefined) {
        contents.PeerBgpAsn = __strictParseInt32(output["peerBgpAsn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_LocalGatewayVirtualInterfaceGroup = (output, context) => {
    const contents = {};
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output.localGatewayVirtualInterfaceIdSet === "") {
        contents.LocalGatewayVirtualInterfaceIds = [];
    }
    else if (output["localGatewayVirtualInterfaceIdSet"] !== undefined &&
        output["localGatewayVirtualInterfaceIdSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceIds = de_LocalGatewayVirtualInterfaceIdSet(__getArrayIfSingleItem(output["localGatewayVirtualInterfaceIdSet"]["item"]), context);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_LocalGatewayVirtualInterfaceGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayVirtualInterfaceGroup(entry, context);
    });
};
const de_LocalGatewayVirtualInterfaceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_LocalGatewayVirtualInterfaceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayVirtualInterface(entry, context);
    });
};
const de_LocalStorageTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_MaintenanceDetails = (output, context) => {
    const contents = {};
    if (output["pendingMaintenance"] !== undefined) {
        contents.PendingMaintenance = __expectString(output["pendingMaintenance"]);
    }
    if (output["maintenanceAutoAppliedAfter"] !== undefined) {
        contents.MaintenanceAutoAppliedAfter = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["maintenanceAutoAppliedAfter"]));
    }
    if (output["lastMaintenanceApplied"] !== undefined) {
        contents.LastMaintenanceApplied = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastMaintenanceApplied"]));
    }
    return contents;
};
const de_ManagedPrefixList = (output, context) => {
    const contents = {};
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["addressFamily"] !== undefined) {
        contents.AddressFamily = __expectString(output["addressFamily"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateMessage"] !== undefined) {
        contents.StateMessage = __expectString(output["stateMessage"]);
    }
    if (output["prefixListArn"] !== undefined) {
        contents.PrefixListArn = __expectString(output["prefixListArn"]);
    }
    if (output["prefixListName"] !== undefined) {
        contents.PrefixListName = __expectString(output["prefixListName"]);
    }
    if (output["maxEntries"] !== undefined) {
        contents.MaxEntries = __strictParseInt32(output["maxEntries"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = __strictParseLong(output["version"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
const de_ManagedPrefixListSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedPrefixList(entry, context);
    });
};
const de_MemoryGiBPerVCpu = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseFloat(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseFloat(output["max"]);
    }
    return contents;
};
const de_MemoryInfo = (output, context) => {
    const contents = {};
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = __strictParseLong(output["sizeInMiB"]);
    }
    return contents;
};
const de_MemoryMiB = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
const de_MetricPoint = (output, context) => {
    const contents = {};
    if (output["startDate"] !== undefined) {
        contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
    }
    if (output["value"] !== undefined) {
        contents.Value = __strictParseFloat(output["value"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_MetricPoints = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricPoint(entry, context);
    });
};
const de_ModifyAddressAttributeResult = (output, context) => {
    const contents = {};
    if (output["address"] !== undefined) {
        contents.Address = de_AddressAttribute(output["address"], context);
    }
    return contents;
};
const de_ModifyAvailabilityZoneGroupResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyCapacityReservationFleetResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyClientVpnEndpointResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyDefaultCreditSpecificationResult = (output, context) => {
    const contents = {};
    if (output["instanceFamilyCreditSpecification"] !== undefined) {
        contents.InstanceFamilyCreditSpecification = de_InstanceFamilyCreditSpecification(output["instanceFamilyCreditSpecification"], context);
    }
    return contents;
};
const de_ModifyEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {};
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    return contents;
};
const de_ModifyFleetResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyFpgaImageAttributeResult = (output, context) => {
    const contents = {};
    if (output["fpgaImageAttribute"] !== undefined) {
        contents.FpgaImageAttribute = de_FpgaImageAttribute(output["fpgaImageAttribute"], context);
    }
    return contents;
};
const de_ModifyHostsResult = (output, context) => {
    const contents = {};
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = de_ResponseHostIdList(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemList(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_ModifyInstanceCapacityReservationAttributesResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyInstanceCreditSpecificationResult = (output, context) => {
    const contents = {};
    if (output.successfulInstanceCreditSpecificationSet === "") {
        contents.SuccessfulInstanceCreditSpecifications = [];
    }
    else if (output["successfulInstanceCreditSpecificationSet"] !== undefined &&
        output["successfulInstanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.SuccessfulInstanceCreditSpecifications = de_SuccessfulInstanceCreditSpecificationSet(__getArrayIfSingleItem(output["successfulInstanceCreditSpecificationSet"]["item"]), context);
    }
    if (output.unsuccessfulInstanceCreditSpecificationSet === "") {
        contents.UnsuccessfulInstanceCreditSpecifications = [];
    }
    else if (output["unsuccessfulInstanceCreditSpecificationSet"] !== undefined &&
        output["unsuccessfulInstanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.UnsuccessfulInstanceCreditSpecifications = de_UnsuccessfulInstanceCreditSpecificationSet(__getArrayIfSingleItem(output["unsuccessfulInstanceCreditSpecificationSet"]["item"]), context);
    }
    return contents;
};
const de_ModifyInstanceEventStartTimeResult = (output, context) => {
    const contents = {};
    if (output["event"] !== undefined) {
        contents.Event = de_InstanceStatusEvent(output["event"], context);
    }
    return contents;
};
const de_ModifyInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const de_ModifyInstanceMaintenanceOptionsResult = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = __expectString(output["autoRecovery"]);
    }
    return contents;
};
const de_ModifyInstanceMetadataOptionsResult = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceMetadataOptions"] !== undefined) {
        contents.InstanceMetadataOptions = de_InstanceMetadataOptionsResponse(output["instanceMetadataOptions"], context);
    }
    return contents;
};
const de_ModifyInstancePlacementResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyIpamPoolResult = (output, context) => {
    const contents = {};
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = de_IpamPool(output["ipamPool"], context);
    }
    return contents;
};
const de_ModifyIpamResourceCidrResult = (output, context) => {
    const contents = {};
    if (output["ipamResourceCidr"] !== undefined) {
        contents.IpamResourceCidr = de_IpamResourceCidr(output["ipamResourceCidr"], context);
    }
    return contents;
};
const de_ModifyIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output["ipamResourceDiscovery"] !== undefined) {
        contents.IpamResourceDiscovery = de_IpamResourceDiscovery(output["ipamResourceDiscovery"], context);
    }
    return contents;
};
const de_ModifyIpamResult = (output, context) => {
    const contents = {};
    if (output["ipam"] !== undefined) {
        contents.Ipam = de_Ipam(output["ipam"], context);
    }
    return contents;
};
const de_ModifyIpamScopeResult = (output, context) => {
    const contents = {};
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = de_IpamScope(output["ipamScope"], context);
    }
    return contents;
};
const de_ModifyLaunchTemplateResult = (output, context) => {
    const contents = {};
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = de_LaunchTemplate(output["launchTemplate"], context);
    }
    return contents;
};
const de_ModifyLocalGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output["route"] !== undefined) {
        contents.Route = de_LocalGatewayRoute(output["route"], context);
    }
    return contents;
};
const de_ModifyManagedPrefixListResult = (output, context) => {
    const contents = {};
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const de_ModifyPrivateDnsNameOptionsResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyReservedInstancesResult = (output, context) => {
    const contents = {};
    if (output["reservedInstancesModificationId"] !== undefined) {
        contents.ReservedInstancesModificationId = __expectString(output["reservedInstancesModificationId"]);
    }
    return contents;
};
const de_ModifySecurityGroupRulesResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifySnapshotTierResult = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["tieringStartTime"] !== undefined) {
        contents.TieringStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["tieringStartTime"]));
    }
    return contents;
};
const de_ModifySpotFleetRequestResponse = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyTrafficMirrorFilterNetworkServicesResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilter"] !== undefined) {
        contents.TrafficMirrorFilter = de_TrafficMirrorFilter(output["trafficMirrorFilter"], context);
    }
    return contents;
};
const de_ModifyTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilterRule"] !== undefined) {
        contents.TrafficMirrorFilterRule = de_TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
    }
    return contents;
};
const de_ModifyTrafficMirrorSessionResult = (output, context) => {
    const contents = {};
    if (output["trafficMirrorSession"] !== undefined) {
        contents.TrafficMirrorSession = de_TrafficMirrorSession(output["trafficMirrorSession"], context);
    }
    return contents;
};
const de_ModifyTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = de_TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
const de_ModifyTransitGatewayResult = (output, context) => {
    const contents = {};
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = de_TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
const de_ModifyTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const de_ModifyVerifiedAccessEndpointPolicyResult = (output, context) => {
    const contents = {};
    if (output["policyEnabled"] !== undefined) {
        contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
    }
    if (output["policyDocument"] !== undefined) {
        contents.PolicyDocument = __expectString(output["policyDocument"]);
    }
    return contents;
};
const de_ModifyVerifiedAccessEndpointResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessEndpoint"] !== undefined) {
        contents.VerifiedAccessEndpoint = de_VerifiedAccessEndpoint(output["verifiedAccessEndpoint"], context);
    }
    return contents;
};
const de_ModifyVerifiedAccessGroupPolicyResult = (output, context) => {
    const contents = {};
    if (output["policyEnabled"] !== undefined) {
        contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
    }
    if (output["policyDocument"] !== undefined) {
        contents.PolicyDocument = __expectString(output["policyDocument"]);
    }
    return contents;
};
const de_ModifyVerifiedAccessGroupResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessGroup"] !== undefined) {
        contents.VerifiedAccessGroup = de_VerifiedAccessGroup(output["verifiedAccessGroup"], context);
    }
    return contents;
};
const de_ModifyVerifiedAccessInstanceLoggingConfigurationResult = (output, context) => {
    const contents = {};
    if (output["loggingConfiguration"] !== undefined) {
        contents.LoggingConfiguration = de_VerifiedAccessInstanceLoggingConfiguration(output["loggingConfiguration"], context);
    }
    return contents;
};
const de_ModifyVerifiedAccessInstanceResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessInstance"] !== undefined) {
        contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
    }
    return contents;
};
const de_ModifyVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output["verifiedAccessTrustProvider"] !== undefined) {
        contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(output["verifiedAccessTrustProvider"], context);
    }
    return contents;
};
const de_ModifyVolumeResult = (output, context) => {
    const contents = {};
    if (output["volumeModification"] !== undefined) {
        contents.VolumeModification = de_VolumeModification(output["volumeModification"], context);
    }
    return contents;
};
const de_ModifyVpcEndpointConnectionNotificationResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyVpcEndpointResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyVpcEndpointServiceConfigurationResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyVpcEndpointServicePayerResponsibilityResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyVpcEndpointServicePermissionsResult = (output, context) => {
    const contents = {};
    if (output.addedPrincipalSet === "") {
        contents.AddedPrincipals = [];
    }
    else if (output["addedPrincipalSet"] !== undefined && output["addedPrincipalSet"]["item"] !== undefined) {
        contents.AddedPrincipals = de_AddedPrincipalSet(__getArrayIfSingleItem(output["addedPrincipalSet"]["item"]), context);
    }
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyVpcPeeringConnectionOptionsResult = (output, context) => {
    const contents = {};
    if (output["accepterPeeringConnectionOptions"] !== undefined) {
        contents.AccepterPeeringConnectionOptions = de_PeeringConnectionOptions(output["accepterPeeringConnectionOptions"], context);
    }
    if (output["requesterPeeringConnectionOptions"] !== undefined) {
        contents.RequesterPeeringConnectionOptions = de_PeeringConnectionOptions(output["requesterPeeringConnectionOptions"], context);
    }
    return contents;
};
const de_ModifyVpcTenancyResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ModifyVpnConnectionOptionsResult = (output, context) => {
    const contents = {};
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const de_ModifyVpnConnectionResult = (output, context) => {
    const contents = {};
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const de_ModifyVpnTunnelCertificateResult = (output, context) => {
    const contents = {};
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const de_ModifyVpnTunnelOptionsResult = (output, context) => {
    const contents = {};
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const de_Monitoring = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_MonitorInstancesResult = (output, context) => {
    const contents = {};
    if (output.instancesSet === "") {
        contents.InstanceMonitorings = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.InstanceMonitorings = de_InstanceMonitoringList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const de_MoveAddressToVpcResult = (output, context) => {
    const contents = {};
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_MoveByoipCidrToIpamResult = (output, context) => {
    const contents = {};
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const de_MovingAddressStatus = (output, context) => {
    const contents = {};
    if (output["moveStatus"] !== undefined) {
        contents.MoveStatus = __expectString(output["moveStatus"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    return contents;
};
const de_MovingAddressStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MovingAddressStatus(entry, context);
    });
};
const de_NatGateway = (output, context) => {
    const contents = {};
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["deleteTime"] !== undefined) {
        contents.DeleteTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["deleteTime"]));
    }
    if (output["failureCode"] !== undefined) {
        contents.FailureCode = __expectString(output["failureCode"]);
    }
    if (output["failureMessage"] !== undefined) {
        contents.FailureMessage = __expectString(output["failureMessage"]);
    }
    if (output.natGatewayAddressSet === "") {
        contents.NatGatewayAddresses = [];
    }
    else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
        contents.NatGatewayAddresses = de_NatGatewayAddressList(__getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]), context);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output["provisionedBandwidth"] !== undefined) {
        contents.ProvisionedBandwidth = de_ProvisionedBandwidth(output["provisionedBandwidth"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["connectivityType"] !== undefined) {
        contents.ConnectivityType = __expectString(output["connectivityType"]);
    }
    return contents;
};
const de_NatGatewayAddress = (output, context) => {
    const contents = {};
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["privateIp"] !== undefined) {
        contents.PrivateIp = __expectString(output["privateIp"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["isPrimary"] !== undefined) {
        contents.IsPrimary = __parseBoolean(output["isPrimary"]);
    }
    if (output["failureMessage"] !== undefined) {
        contents.FailureMessage = __expectString(output["failureMessage"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_NatGatewayAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NatGatewayAddress(entry, context);
    });
};
const de_NatGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NatGateway(entry, context);
    });
};
const de_NetworkAcl = (output, context) => {
    const contents = {};
    if (output.associationSet === "") {
        contents.Associations = [];
    }
    else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
        contents.Associations = de_NetworkAclAssociationList(__getArrayIfSingleItem(output["associationSet"]["item"]), context);
    }
    if (output.entrySet === "") {
        contents.Entries = [];
    }
    else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
        contents.Entries = de_NetworkAclEntryList(__getArrayIfSingleItem(output["entrySet"]["item"]), context);
    }
    if (output["default"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["default"]);
    }
    if (output["networkAclId"] !== undefined) {
        contents.NetworkAclId = __expectString(output["networkAclId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
const de_NetworkAclAssociation = (output, context) => {
    const contents = {};
    if (output["networkAclAssociationId"] !== undefined) {
        contents.NetworkAclAssociationId = __expectString(output["networkAclAssociationId"]);
    }
    if (output["networkAclId"] !== undefined) {
        contents.NetworkAclId = __expectString(output["networkAclId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    return contents;
};
const de_NetworkAclAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkAclAssociation(entry, context);
    });
};
const de_NetworkAclEntry = (output, context) => {
    const contents = {};
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["egress"] !== undefined) {
        contents.Egress = __parseBoolean(output["egress"]);
    }
    if (output["icmpTypeCode"] !== undefined) {
        contents.IcmpTypeCode = de_IcmpTypeCode(output["icmpTypeCode"], context);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = de_PortRange(output["portRange"], context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = __strictParseInt32(output["ruleNumber"]);
    }
    return contents;
};
const de_NetworkAclEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkAclEntry(entry, context);
    });
};
const de_NetworkAclList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkAcl(entry, context);
    });
};
const de_NetworkBandwidthGbps = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseFloat(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseFloat(output["max"]);
    }
    return contents;
};
const de_NetworkCardInfo = (output, context) => {
    const contents = {};
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    if (output["networkPerformance"] !== undefined) {
        contents.NetworkPerformance = __expectString(output["networkPerformance"]);
    }
    if (output["maximumNetworkInterfaces"] !== undefined) {
        contents.MaximumNetworkInterfaces = __strictParseInt32(output["maximumNetworkInterfaces"]);
    }
    return contents;
};
const de_NetworkCardInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkCardInfo(entry, context);
    });
};
const de_NetworkInfo = (output, context) => {
    const contents = {};
    if (output["networkPerformance"] !== undefined) {
        contents.NetworkPerformance = __expectString(output["networkPerformance"]);
    }
    if (output["maximumNetworkInterfaces"] !== undefined) {
        contents.MaximumNetworkInterfaces = __strictParseInt32(output["maximumNetworkInterfaces"]);
    }
    if (output["maximumNetworkCards"] !== undefined) {
        contents.MaximumNetworkCards = __strictParseInt32(output["maximumNetworkCards"]);
    }
    if (output["defaultNetworkCardIndex"] !== undefined) {
        contents.DefaultNetworkCardIndex = __strictParseInt32(output["defaultNetworkCardIndex"]);
    }
    if (output.networkCards === "") {
        contents.NetworkCards = [];
    }
    else if (output["networkCards"] !== undefined && output["networkCards"]["item"] !== undefined) {
        contents.NetworkCards = de_NetworkCardInfoList(__getArrayIfSingleItem(output["networkCards"]["item"]), context);
    }
    if (output["ipv4AddressesPerInterface"] !== undefined) {
        contents.Ipv4AddressesPerInterface = __strictParseInt32(output["ipv4AddressesPerInterface"]);
    }
    if (output["ipv6AddressesPerInterface"] !== undefined) {
        contents.Ipv6AddressesPerInterface = __strictParseInt32(output["ipv6AddressesPerInterface"]);
    }
    if (output["ipv6Supported"] !== undefined) {
        contents.Ipv6Supported = __parseBoolean(output["ipv6Supported"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = __expectString(output["enaSupport"]);
    }
    if (output["efaSupported"] !== undefined) {
        contents.EfaSupported = __parseBoolean(output["efaSupported"]);
    }
    if (output["efaInfo"] !== undefined) {
        contents.EfaInfo = de_EfaInfo(output["efaInfo"], context);
    }
    if (output["encryptionInTransitSupported"] !== undefined) {
        contents.EncryptionInTransitSupported = __parseBoolean(output["encryptionInTransitSupported"]);
    }
    if (output["enaSrdSupported"] !== undefined) {
        contents.EnaSrdSupported = __parseBoolean(output["enaSrdSupported"]);
    }
    return contents;
};
const de_NetworkInsightsAccessScope = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output["networkInsightsAccessScopeArn"] !== undefined) {
        contents.NetworkInsightsAccessScopeArn = __expectString(output["networkInsightsAccessScopeArn"]);
    }
    if (output["createdDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createdDate"]));
    }
    if (output["updatedDate"] !== undefined) {
        contents.UpdatedDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updatedDate"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_NetworkInsightsAccessScopeAnalysis = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["networkInsightsAccessScopeAnalysisArn"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisArn = __expectString(output["networkInsightsAccessScopeAnalysisArn"]);
    }
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["warningMessage"] !== undefined) {
        contents.WarningMessage = __expectString(output["warningMessage"]);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
    }
    if (output["findingsFound"] !== undefined) {
        contents.FindingsFound = __expectString(output["findingsFound"]);
    }
    if (output["analyzedEniCount"] !== undefined) {
        contents.AnalyzedEniCount = __strictParseInt32(output["analyzedEniCount"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_NetworkInsightsAccessScopeAnalysisList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsAccessScopeAnalysis(entry, context);
    });
};
const de_NetworkInsightsAccessScopeContent = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output.matchPathSet === "") {
        contents.MatchPaths = [];
    }
    else if (output["matchPathSet"] !== undefined && output["matchPathSet"]["item"] !== undefined) {
        contents.MatchPaths = de_AccessScopePathList(__getArrayIfSingleItem(output["matchPathSet"]["item"]), context);
    }
    if (output.excludePathSet === "") {
        contents.ExcludePaths = [];
    }
    else if (output["excludePathSet"] !== undefined && output["excludePathSet"]["item"] !== undefined) {
        contents.ExcludePaths = de_AccessScopePathList(__getArrayIfSingleItem(output["excludePathSet"]["item"]), context);
    }
    return contents;
};
const de_NetworkInsightsAccessScopeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsAccessScope(entry, context);
    });
};
const de_NetworkInsightsAnalysis = (output, context) => {
    const contents = {};
    if (output["networkInsightsAnalysisId"] !== undefined) {
        contents.NetworkInsightsAnalysisId = __expectString(output["networkInsightsAnalysisId"]);
    }
    if (output["networkInsightsAnalysisArn"] !== undefined) {
        contents.NetworkInsightsAnalysisArn = __expectString(output["networkInsightsAnalysisArn"]);
    }
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
    }
    if (output.additionalAccountSet === "") {
        contents.AdditionalAccounts = [];
    }
    else if (output["additionalAccountSet"] !== undefined && output["additionalAccountSet"]["item"] !== undefined) {
        contents.AdditionalAccounts = de_ValueStringList(__getArrayIfSingleItem(output["additionalAccountSet"]["item"]), context);
    }
    if (output.filterInArnSet === "") {
        contents.FilterInArns = [];
    }
    else if (output["filterInArnSet"] !== undefined && output["filterInArnSet"]["item"] !== undefined) {
        contents.FilterInArns = de_ArnList(__getArrayIfSingleItem(output["filterInArnSet"]["item"]), context);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["warningMessage"] !== undefined) {
        contents.WarningMessage = __expectString(output["warningMessage"]);
    }
    if (output["networkPathFound"] !== undefined) {
        contents.NetworkPathFound = __parseBoolean(output["networkPathFound"]);
    }
    if (output.forwardPathComponentSet === "") {
        contents.ForwardPathComponents = [];
    }
    else if (output["forwardPathComponentSet"] !== undefined &&
        output["forwardPathComponentSet"]["item"] !== undefined) {
        contents.ForwardPathComponents = de_PathComponentList(__getArrayIfSingleItem(output["forwardPathComponentSet"]["item"]), context);
    }
    if (output.returnPathComponentSet === "") {
        contents.ReturnPathComponents = [];
    }
    else if (output["returnPathComponentSet"] !== undefined && output["returnPathComponentSet"]["item"] !== undefined) {
        contents.ReturnPathComponents = de_PathComponentList(__getArrayIfSingleItem(output["returnPathComponentSet"]["item"]), context);
    }
    if (output.explanationSet === "") {
        contents.Explanations = [];
    }
    else if (output["explanationSet"] !== undefined && output["explanationSet"]["item"] !== undefined) {
        contents.Explanations = de_ExplanationList(__getArrayIfSingleItem(output["explanationSet"]["item"]), context);
    }
    if (output.alternatePathHintSet === "") {
        contents.AlternatePathHints = [];
    }
    else if (output["alternatePathHintSet"] !== undefined && output["alternatePathHintSet"]["item"] !== undefined) {
        contents.AlternatePathHints = de_AlternatePathHintList(__getArrayIfSingleItem(output["alternatePathHintSet"]["item"]), context);
    }
    if (output.suggestedAccountSet === "") {
        contents.SuggestedAccounts = [];
    }
    else if (output["suggestedAccountSet"] !== undefined && output["suggestedAccountSet"]["item"] !== undefined) {
        contents.SuggestedAccounts = de_ValueStringList(__getArrayIfSingleItem(output["suggestedAccountSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_NetworkInsightsAnalysisList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsAnalysis(entry, context);
    });
};
const de_NetworkInsightsPath = (output, context) => {
    const contents = {};
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
    }
    if (output["networkInsightsPathArn"] !== undefined) {
        contents.NetworkInsightsPathArn = __expectString(output["networkInsightsPathArn"]);
    }
    if (output["createdDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createdDate"]));
    }
    if (output["source"] !== undefined) {
        contents.Source = __expectString(output["source"]);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = __expectString(output["destination"]);
    }
    if (output["sourceArn"] !== undefined) {
        contents.SourceArn = __expectString(output["sourceArn"]);
    }
    if (output["destinationArn"] !== undefined) {
        contents.DestinationArn = __expectString(output["destinationArn"]);
    }
    if (output["sourceIp"] !== undefined) {
        contents.SourceIp = __expectString(output["sourceIp"]);
    }
    if (output["destinationIp"] !== undefined) {
        contents.DestinationIp = __expectString(output["destinationIp"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["destinationPort"] !== undefined) {
        contents.DestinationPort = __strictParseInt32(output["destinationPort"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["filterAtSource"] !== undefined) {
        contents.FilterAtSource = de_PathFilter(output["filterAtSource"], context);
    }
    if (output["filterAtDestination"] !== undefined) {
        contents.FilterAtDestination = de_PathFilter(output["filterAtDestination"], context);
    }
    return contents;
};
const de_NetworkInsightsPathList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsPath(entry, context);
    });
};
const de_NetworkInterface = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_NetworkInterfaceAssociation(output["association"], context);
    }
    if (output["attachment"] !== undefined) {
        contents.Attachment = de_NetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["interfaceType"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = de_NetworkInterfaceIpv6AddressesList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["macAddress"] !== undefined) {
        contents.MacAddress = __expectString(output["macAddress"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = de_NetworkInterfacePrivateIpAddressList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = de_Ipv4PrefixesList(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = de_Ipv6PrefixesList(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
    }
    if (output["requesterId"] !== undefined) {
        contents.RequesterId = __expectString(output["requesterId"]);
    }
    if (output["requesterManaged"] !== undefined) {
        contents.RequesterManaged = __parseBoolean(output["requesterManaged"]);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output.tagSet === "") {
        contents.TagSet = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.TagSet = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["denyAllIgwTraffic"] !== undefined) {
        contents.DenyAllIgwTraffic = __parseBoolean(output["denyAllIgwTraffic"]);
    }
    if (output["ipv6Native"] !== undefined) {
        contents.Ipv6Native = __parseBoolean(output["ipv6Native"]);
    }
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    return contents;
};
const de_NetworkInterfaceAssociation = (output, context) => {
    const contents = {};
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["ipOwnerId"] !== undefined) {
        contents.IpOwnerId = __expectString(output["ipOwnerId"]);
    }
    if (output["publicDnsName"] !== undefined) {
        contents.PublicDnsName = __expectString(output["publicDnsName"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    return contents;
};
const de_NetworkInterfaceAttachment = (output, context) => {
    const contents = {};
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceOwnerId"] !== undefined) {
        contents.InstanceOwnerId = __expectString(output["instanceOwnerId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["enaSrdSpecification"] !== undefined) {
        contents.EnaSrdSpecification = de_AttachmentEnaSrdSpecification(output["enaSrdSpecification"], context);
    }
    return contents;
};
const de_NetworkInterfaceCount = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
const de_NetworkInterfaceIpv6Address = (output, context) => {
    const contents = {};
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    return contents;
};
const de_NetworkInterfaceIpv6AddressesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterfaceIpv6Address(entry, context);
    });
};
const de_NetworkInterfaceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterface(entry, context);
    });
};
const de_NetworkInterfacePermission = (output, context) => {
    const contents = {};
    if (output["networkInterfacePermissionId"] !== undefined) {
        contents.NetworkInterfacePermissionId = __expectString(output["networkInterfacePermissionId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["awsAccountId"] !== undefined) {
        contents.AwsAccountId = __expectString(output["awsAccountId"]);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = __expectString(output["awsService"]);
    }
    if (output["permission"] !== undefined) {
        contents.Permission = __expectString(output["permission"]);
    }
    if (output["permissionState"] !== undefined) {
        contents.PermissionState = de_NetworkInterfacePermissionState(output["permissionState"], context);
    }
    return contents;
};
const de_NetworkInterfacePermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterfacePermission(entry, context);
    });
};
const de_NetworkInterfacePermissionState = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
const de_NetworkInterfacePrivateIpAddress = (output, context) => {
    const contents = {};
    if (output["association"] !== undefined) {
        contents.Association = de_NetworkInterfaceAssociation(output["association"], context);
    }
    if (output["primary"] !== undefined) {
        contents.Primary = __parseBoolean(output["primary"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
const de_NetworkInterfacePrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterfacePrivateIpAddress(entry, context);
    });
};
const de_OccurrenceDaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __strictParseInt32(entry);
    });
};
const de_OidcOptions = (output, context) => {
    const contents = {};
    if (output["issuer"] !== undefined) {
        contents.Issuer = __expectString(output["issuer"]);
    }
    if (output["authorizationEndpoint"] !== undefined) {
        contents.AuthorizationEndpoint = __expectString(output["authorizationEndpoint"]);
    }
    if (output["tokenEndpoint"] !== undefined) {
        contents.TokenEndpoint = __expectString(output["tokenEndpoint"]);
    }
    if (output["userInfoEndpoint"] !== undefined) {
        contents.UserInfoEndpoint = __expectString(output["userInfoEndpoint"]);
    }
    if (output["clientId"] !== undefined) {
        contents.ClientId = __expectString(output["clientId"]);
    }
    if (output["clientSecret"] !== undefined) {
        contents.ClientSecret = __expectString(output["clientSecret"]);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = __expectString(output["scope"]);
    }
    return contents;
};
const de_OnDemandOptions = (output, context) => {
    const contents = {};
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["capacityReservationOptions"] !== undefined) {
        contents.CapacityReservationOptions = de_CapacityReservationOptions(output["capacityReservationOptions"], context);
    }
    if (output["singleInstanceType"] !== undefined) {
        contents.SingleInstanceType = __parseBoolean(output["singleInstanceType"]);
    }
    if (output["singleAvailabilityZone"] !== undefined) {
        contents.SingleAvailabilityZone = __parseBoolean(output["singleAvailabilityZone"]);
    }
    if (output["minTargetCapacity"] !== undefined) {
        contents.MinTargetCapacity = __strictParseInt32(output["minTargetCapacity"]);
    }
    if (output["maxTotalPrice"] !== undefined) {
        contents.MaxTotalPrice = __expectString(output["maxTotalPrice"]);
    }
    return contents;
};
const de_PacketHeaderStatement = (output, context) => {
    const contents = {};
    if (output.sourceAddressSet === "") {
        contents.SourceAddresses = [];
    }
    else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
        contents.SourceAddresses = de_ValueStringList(__getArrayIfSingleItem(output["sourceAddressSet"]["item"]), context);
    }
    if (output.destinationAddressSet === "") {
        contents.DestinationAddresses = [];
    }
    else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
        contents.DestinationAddresses = de_ValueStringList(__getArrayIfSingleItem(output["destinationAddressSet"]["item"]), context);
    }
    if (output.sourcePortSet === "") {
        contents.SourcePorts = [];
    }
    else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
        contents.SourcePorts = de_ValueStringList(__getArrayIfSingleItem(output["sourcePortSet"]["item"]), context);
    }
    if (output.destinationPortSet === "") {
        contents.DestinationPorts = [];
    }
    else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
        contents.DestinationPorts = de_ValueStringList(__getArrayIfSingleItem(output["destinationPortSet"]["item"]), context);
    }
    if (output.sourcePrefixListSet === "") {
        contents.SourcePrefixLists = [];
    }
    else if (output["sourcePrefixListSet"] !== undefined && output["sourcePrefixListSet"]["item"] !== undefined) {
        contents.SourcePrefixLists = de_ValueStringList(__getArrayIfSingleItem(output["sourcePrefixListSet"]["item"]), context);
    }
    if (output.destinationPrefixListSet === "") {
        contents.DestinationPrefixLists = [];
    }
    else if (output["destinationPrefixListSet"] !== undefined &&
        output["destinationPrefixListSet"]["item"] !== undefined) {
        contents.DestinationPrefixLists = de_ValueStringList(__getArrayIfSingleItem(output["destinationPrefixListSet"]["item"]), context);
    }
    if (output.protocolSet === "") {
        contents.Protocols = [];
    }
    else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
        contents.Protocols = de_ProtocolList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
    }
    return contents;
};
const de_PathComponent = (output, context) => {
    const contents = {};
    if (output["sequenceNumber"] !== undefined) {
        contents.SequenceNumber = __strictParseInt32(output["sequenceNumber"]);
    }
    if (output["aclRule"] !== undefined) {
        contents.AclRule = de_AnalysisAclRule(output["aclRule"], context);
    }
    if (output["attachedTo"] !== undefined) {
        contents.AttachedTo = de_AnalysisComponent(output["attachedTo"], context);
    }
    if (output["component"] !== undefined) {
        contents.Component = de_AnalysisComponent(output["component"], context);
    }
    if (output["destinationVpc"] !== undefined) {
        contents.DestinationVpc = de_AnalysisComponent(output["destinationVpc"], context);
    }
    if (output["outboundHeader"] !== undefined) {
        contents.OutboundHeader = de_AnalysisPacketHeader(output["outboundHeader"], context);
    }
    if (output["inboundHeader"] !== undefined) {
        contents.InboundHeader = de_AnalysisPacketHeader(output["inboundHeader"], context);
    }
    if (output["routeTableRoute"] !== undefined) {
        contents.RouteTableRoute = de_AnalysisRouteTableRoute(output["routeTableRoute"], context);
    }
    if (output["securityGroupRule"] !== undefined) {
        contents.SecurityGroupRule = de_AnalysisSecurityGroupRule(output["securityGroupRule"], context);
    }
    if (output["sourceVpc"] !== undefined) {
        contents.SourceVpc = de_AnalysisComponent(output["sourceVpc"], context);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = de_AnalysisComponent(output["subnet"], context);
    }
    if (output["vpc"] !== undefined) {
        contents.Vpc = de_AnalysisComponent(output["vpc"], context);
    }
    if (output.additionalDetailSet === "") {
        contents.AdditionalDetails = [];
    }
    else if (output["additionalDetailSet"] !== undefined && output["additionalDetailSet"]["item"] !== undefined) {
        contents.AdditionalDetails = de_AdditionalDetailList(__getArrayIfSingleItem(output["additionalDetailSet"]["item"]), context);
    }
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = de_AnalysisComponent(output["transitGateway"], context);
    }
    if (output["transitGatewayRouteTableRoute"] !== undefined) {
        contents.TransitGatewayRouteTableRoute = de_TransitGatewayRouteTableRoute(output["transitGatewayRouteTableRoute"], context);
    }
    if (output.explanationSet === "") {
        contents.Explanations = [];
    }
    else if (output["explanationSet"] !== undefined && output["explanationSet"]["item"] !== undefined) {
        contents.Explanations = de_ExplanationList(__getArrayIfSingleItem(output["explanationSet"]["item"]), context);
    }
    if (output["elasticLoadBalancerListener"] !== undefined) {
        contents.ElasticLoadBalancerListener = de_AnalysisComponent(output["elasticLoadBalancerListener"], context);
    }
    if (output["firewallStatelessRule"] !== undefined) {
        contents.FirewallStatelessRule = de_FirewallStatelessRule(output["firewallStatelessRule"], context);
    }
    if (output["firewallStatefulRule"] !== undefined) {
        contents.FirewallStatefulRule = de_FirewallStatefulRule(output["firewallStatefulRule"], context);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    return contents;
};
const de_PathComponentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PathComponent(entry, context);
    });
};
const de_PathFilter = (output, context) => {
    const contents = {};
    if (output["sourceAddress"] !== undefined) {
        contents.SourceAddress = __expectString(output["sourceAddress"]);
    }
    if (output["sourcePortRange"] !== undefined) {
        contents.SourcePortRange = de_FilterPortRange(output["sourcePortRange"], context);
    }
    if (output["destinationAddress"] !== undefined) {
        contents.DestinationAddress = __expectString(output["destinationAddress"]);
    }
    if (output["destinationPortRange"] !== undefined) {
        contents.DestinationPortRange = de_FilterPortRange(output["destinationPortRange"], context);
    }
    return contents;
};
const de_PathStatement = (output, context) => {
    const contents = {};
    if (output["packetHeaderStatement"] !== undefined) {
        contents.PacketHeaderStatement = de_PacketHeaderStatement(output["packetHeaderStatement"], context);
    }
    if (output["resourceStatement"] !== undefined) {
        contents.ResourceStatement = de_ResourceStatement(output["resourceStatement"], context);
    }
    return contents;
};
const de_PciId = (output, context) => {
    const contents = {};
    if (output["DeviceId"] !== undefined) {
        contents.DeviceId = __expectString(output["DeviceId"]);
    }
    if (output["VendorId"] !== undefined) {
        contents.VendorId = __expectString(output["VendorId"]);
    }
    if (output["SubsystemId"] !== undefined) {
        contents.SubsystemId = __expectString(output["SubsystemId"]);
    }
    if (output["SubsystemVendorId"] !== undefined) {
        contents.SubsystemVendorId = __expectString(output["SubsystemVendorId"]);
    }
    return contents;
};
const de_PeeringAttachmentStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_PeeringConnectionOptions = (output, context) => {
    const contents = {};
    if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
        contents.AllowDnsResolutionFromRemoteVpc = __parseBoolean(output["allowDnsResolutionFromRemoteVpc"]);
    }
    if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
        contents.AllowEgressFromLocalClassicLinkToRemoteVpc = __parseBoolean(output["allowEgressFromLocalClassicLinkToRemoteVpc"]);
    }
    if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
        contents.AllowEgressFromLocalVpcToRemoteClassicLink = __parseBoolean(output["allowEgressFromLocalVpcToRemoteClassicLink"]);
    }
    return contents;
};
const de_PeeringTgwInfo = (output, context) => {
    const contents = {};
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["coreNetworkId"] !== undefined) {
        contents.CoreNetworkId = __expectString(output["coreNetworkId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["region"] !== undefined) {
        contents.Region = __expectString(output["region"]);
    }
    return contents;
};
const de_Phase1DHGroupNumbersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase1DHGroupNumbersListValue(entry, context);
    });
};
const de_Phase1DHGroupNumbersListValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __strictParseInt32(output["value"]);
    }
    return contents;
};
const de_Phase1EncryptionAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase1EncryptionAlgorithmsListValue(entry, context);
    });
};
const de_Phase1EncryptionAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_Phase1IntegrityAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase1IntegrityAlgorithmsListValue(entry, context);
    });
};
const de_Phase1IntegrityAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_Phase2DHGroupNumbersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase2DHGroupNumbersListValue(entry, context);
    });
};
const de_Phase2DHGroupNumbersListValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __strictParseInt32(output["value"]);
    }
    return contents;
};
const de_Phase2EncryptionAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase2EncryptionAlgorithmsListValue(entry, context);
    });
};
const de_Phase2EncryptionAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_Phase2IntegrityAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase2IntegrityAlgorithmsListValue(entry, context);
    });
};
const de_Phase2IntegrityAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_Placement = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["affinity"] !== undefined) {
        contents.Affinity = __expectString(output["affinity"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["partitionNumber"] !== undefined) {
        contents.PartitionNumber = __strictParseInt32(output["partitionNumber"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = __expectString(output["hostId"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["spreadDomain"] !== undefined) {
        contents.SpreadDomain = __expectString(output["spreadDomain"]);
    }
    if (output["hostResourceGroupArn"] !== undefined) {
        contents.HostResourceGroupArn = __expectString(output["hostResourceGroupArn"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    return contents;
};
const de_PlacementGroup = (output, context) => {
    const contents = {};
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["strategy"] !== undefined) {
        contents.Strategy = __expectString(output["strategy"]);
    }
    if (output["partitionCount"] !== undefined) {
        contents.PartitionCount = __strictParseInt32(output["partitionCount"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["groupArn"] !== undefined) {
        contents.GroupArn = __expectString(output["groupArn"]);
    }
    if (output["spreadLevel"] !== undefined) {
        contents.SpreadLevel = __expectString(output["spreadLevel"]);
    }
    return contents;
};
const de_PlacementGroupInfo = (output, context) => {
    const contents = {};
    if (output.supportedStrategies === "") {
        contents.SupportedStrategies = [];
    }
    else if (output["supportedStrategies"] !== undefined && output["supportedStrategies"]["item"] !== undefined) {
        contents.SupportedStrategies = de_PlacementGroupStrategyList(__getArrayIfSingleItem(output["supportedStrategies"]["item"]), context);
    }
    return contents;
};
const de_PlacementGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlacementGroup(entry, context);
    });
};
const de_PlacementGroupStrategyList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_PlacementResponse = (output, context) => {
    const contents = {};
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    return contents;
};
const de_PoolCidrBlock = (output, context) => {
    const contents = {};
    if (output["poolCidrBlock"] !== undefined) {
        contents.Cidr = __expectString(output["poolCidrBlock"]);
    }
    return contents;
};
const de_PoolCidrBlocksSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PoolCidrBlock(entry, context);
    });
};
const de_PortRange = (output, context) => {
    const contents = {};
    if (output["from"] !== undefined) {
        contents.From = __strictParseInt32(output["from"]);
    }
    if (output["to"] !== undefined) {
        contents.To = __strictParseInt32(output["to"]);
    }
    return contents;
};
const de_PortRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PortRange(entry, context);
    });
};
const de_PrefixList = (output, context) => {
    const contents = {};
    if (output.cidrSet === "") {
        contents.Cidrs = [];
    }
    else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
        contents.Cidrs = de_ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["prefixListName"] !== undefined) {
        contents.PrefixListName = __expectString(output["prefixListName"]);
    }
    return contents;
};
const de_PrefixListAssociation = (output, context) => {
    const contents = {};
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceOwner"] !== undefined) {
        contents.ResourceOwner = __expectString(output["resourceOwner"]);
    }
    return contents;
};
const de_PrefixListAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixListAssociation(entry, context);
    });
};
const de_PrefixListEntry = (output, context) => {
    const contents = {};
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
const de_PrefixListEntrySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixListEntry(entry, context);
    });
};
const de_PrefixListId = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    return contents;
};
const de_PrefixListIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixListId(entry, context);
    });
};
const de_PrefixListIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_PrefixListSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixList(entry, context);
    });
};
const de_PriceSchedule = (output, context) => {
    const contents = {};
    if (output["active"] !== undefined) {
        contents.Active = __parseBoolean(output["active"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["price"] !== undefined) {
        contents.Price = __strictParseFloat(output["price"]);
    }
    if (output["term"] !== undefined) {
        contents.Term = __strictParseLong(output["term"]);
    }
    return contents;
};
const de_PriceScheduleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PriceSchedule(entry, context);
    });
};
const de_PricingDetail = (output, context) => {
    const contents = {};
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["price"] !== undefined) {
        contents.Price = __strictParseFloat(output["price"]);
    }
    return contents;
};
const de_PricingDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PricingDetail(entry, context);
    });
};
const de_PrincipalIdFormat = (output, context) => {
    const contents = {};
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
const de_PrincipalIdFormatList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrincipalIdFormat(entry, context);
    });
};
const de_PrivateDnsDetails = (output, context) => {
    const contents = {};
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    return contents;
};
const de_PrivateDnsDetailsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrivateDnsDetails(entry, context);
    });
};
const de_PrivateDnsNameConfiguration = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
const de_PrivateDnsNameOptionsOnLaunch = (output, context) => {
    const contents = {};
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = __expectString(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
const de_PrivateDnsNameOptionsResponse = (output, context) => {
    const contents = {};
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = __expectString(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
const de_PrivateIpAddressSpecification = (output, context) => {
    const contents = {};
    if (output["primary"] !== undefined) {
        contents.Primary = __parseBoolean(output["primary"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
const de_PrivateIpAddressSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrivateIpAddressSpecification(entry, context);
    });
};
const de_ProcessorInfo = (output, context) => {
    const contents = {};
    if (output.supportedArchitectures === "") {
        contents.SupportedArchitectures = [];
    }
    else if (output["supportedArchitectures"] !== undefined && output["supportedArchitectures"]["item"] !== undefined) {
        contents.SupportedArchitectures = de_ArchitectureTypeList(__getArrayIfSingleItem(output["supportedArchitectures"]["item"]), context);
    }
    if (output["sustainedClockSpeedInGhz"] !== undefined) {
        contents.SustainedClockSpeedInGhz = __strictParseFloat(output["sustainedClockSpeedInGhz"]);
    }
    if (output.supportedFeatures === "") {
        contents.SupportedFeatures = [];
    }
    else if (output["supportedFeatures"] !== undefined && output["supportedFeatures"]["item"] !== undefined) {
        contents.SupportedFeatures = de_SupportedAdditionalProcessorFeatureList(__getArrayIfSingleItem(output["supportedFeatures"]["item"]), context);
    }
    return contents;
};
const de_ProductCode = (output, context) => {
    const contents = {};
    if (output["productCode"] !== undefined) {
        contents.ProductCodeId = __expectString(output["productCode"]);
    }
    if (output["type"] !== undefined) {
        contents.ProductCodeType = __expectString(output["type"]);
    }
    return contents;
};
const de_ProductCodeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductCode(entry, context);
    });
};
const de_PropagatingVgw = (output, context) => {
    const contents = {};
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    return contents;
};
const de_PropagatingVgwList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PropagatingVgw(entry, context);
    });
};
const de_ProtocolIntList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __strictParseInt32(entry);
    });
};
const de_ProtocolList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_ProvisionByoipCidrResult = (output, context) => {
    const contents = {};
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const de_ProvisionedBandwidth = (output, context) => {
    const contents = {};
    if (output["provisionTime"] !== undefined) {
        contents.ProvisionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["provisionTime"]));
    }
    if (output["provisioned"] !== undefined) {
        contents.Provisioned = __expectString(output["provisioned"]);
    }
    if (output["requestTime"] !== undefined) {
        contents.RequestTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["requestTime"]));
    }
    if (output["requested"] !== undefined) {
        contents.Requested = __expectString(output["requested"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_ProvisionIpamPoolCidrResult = (output, context) => {
    const contents = {};
    if (output["ipamPoolCidr"] !== undefined) {
        contents.IpamPoolCidr = de_IpamPoolCidr(output["ipamPoolCidr"], context);
    }
    return contents;
};
const de_ProvisionPublicIpv4PoolCidrResult = (output, context) => {
    const contents = {};
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output["poolAddressRange"] !== undefined) {
        contents.PoolAddressRange = de_PublicIpv4PoolRange(output["poolAddressRange"], context);
    }
    return contents;
};
const de_PtrUpdateStatus = (output, context) => {
    const contents = {};
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["reason"] !== undefined) {
        contents.Reason = __expectString(output["reason"]);
    }
    return contents;
};
const de_PublicIpv4Pool = (output, context) => {
    const contents = {};
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.poolAddressRangeSet === "") {
        contents.PoolAddressRanges = [];
    }
    else if (output["poolAddressRangeSet"] !== undefined && output["poolAddressRangeSet"]["item"] !== undefined) {
        contents.PoolAddressRanges = de_PublicIpv4PoolRangeSet(__getArrayIfSingleItem(output["poolAddressRangeSet"]["item"]), context);
    }
    if (output["totalAddressCount"] !== undefined) {
        contents.TotalAddressCount = __strictParseInt32(output["totalAddressCount"]);
    }
    if (output["totalAvailableAddressCount"] !== undefined) {
        contents.TotalAvailableAddressCount = __strictParseInt32(output["totalAvailableAddressCount"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_PublicIpv4PoolRange = (output, context) => {
    const contents = {};
    if (output["firstAddress"] !== undefined) {
        contents.FirstAddress = __expectString(output["firstAddress"]);
    }
    if (output["lastAddress"] !== undefined) {
        contents.LastAddress = __expectString(output["lastAddress"]);
    }
    if (output["addressCount"] !== undefined) {
        contents.AddressCount = __strictParseInt32(output["addressCount"]);
    }
    if (output["availableAddressCount"] !== undefined) {
        contents.AvailableAddressCount = __strictParseInt32(output["availableAddressCount"]);
    }
    return contents;
};
const de_PublicIpv4PoolRangeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PublicIpv4PoolRange(entry, context);
    });
};
const de_PublicIpv4PoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PublicIpv4Pool(entry, context);
    });
};
const de_Purchase = (output, context) => {
    const contents = {};
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["duration"]);
    }
    if (output.hostIdSet === "") {
        contents.HostIdSet = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIdSet = de_ResponseHostIdSet(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = __expectString(output["hostReservationId"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = __expectString(output["paymentOption"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
    }
    return contents;
};
const de_PurchasedScheduledInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledInstance(entry, context);
    });
};
const de_PurchaseHostReservationResult = (output, context) => {
    const contents = {};
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output.purchase === "") {
        contents.Purchase = [];
    }
    else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
        contents.Purchase = de_PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
    }
    if (output["totalHourlyPrice"] !== undefined) {
        contents.TotalHourlyPrice = __expectString(output["totalHourlyPrice"]);
    }
    if (output["totalUpfrontPrice"] !== undefined) {
        contents.TotalUpfrontPrice = __expectString(output["totalUpfrontPrice"]);
    }
    return contents;
};
const de_PurchaseReservedInstancesOfferingResult = (output, context) => {
    const contents = {};
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
const de_PurchaseScheduledInstancesResult = (output, context) => {
    const contents = {};
    if (output.scheduledInstanceSet === "") {
        contents.ScheduledInstanceSet = [];
    }
    else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
        contents.ScheduledInstanceSet = de_PurchasedScheduledInstanceSet(__getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]), context);
    }
    return contents;
};
const de_PurchaseSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Purchase(entry, context);
    });
};
const de_RecurringCharge = (output, context) => {
    const contents = {};
    if (output["amount"] !== undefined) {
        contents.Amount = __strictParseFloat(output["amount"]);
    }
    if (output["frequency"] !== undefined) {
        contents.Frequency = __expectString(output["frequency"]);
    }
    return contents;
};
const de_RecurringChargesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecurringCharge(entry, context);
    });
};
const de_ReferencedSecurityGroup = (output, context) => {
    const contents = {};
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["peeringStatus"] !== undefined) {
        contents.PeeringStatus = __expectString(output["peeringStatus"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const de_Region = (output, context) => {
    const contents = {};
    if (output["regionEndpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["regionEndpoint"]);
    }
    if (output["regionName"] !== undefined) {
        contents.RegionName = __expectString(output["regionName"]);
    }
    if (output["optInStatus"] !== undefined) {
        contents.OptInStatus = __expectString(output["optInStatus"]);
    }
    return contents;
};
const de_RegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Region(entry, context);
    });
};
const de_RegisterImageResult = (output, context) => {
    const contents = {};
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
const de_RegisterInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {};
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = de_InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
const de_RegisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
    const contents = {};
    if (output["registeredMulticastGroupMembers"] !== undefined) {
        contents.RegisteredMulticastGroupMembers = de_TransitGatewayMulticastRegisteredGroupMembers(output["registeredMulticastGroupMembers"], context);
    }
    return contents;
};
const de_RegisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
    const contents = {};
    if (output["registeredMulticastGroupSources"] !== undefined) {
        contents.RegisteredMulticastGroupSources = de_TransitGatewayMulticastRegisteredGroupSources(output["registeredMulticastGroupSources"], context);
    }
    return contents;
};
const de_RejectTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {};
    if (output["associations"] !== undefined) {
        contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const de_RejectTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const de_RejectTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const de_RejectVpcEndpointConnectionsResult = (output, context) => {
    const contents = {};
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_RejectVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ReleaseHostsResult = (output, context) => {
    const contents = {};
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = de_ResponseHostIdList(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = de_UnsuccessfulItemList(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const de_ReleaseIpamPoolAllocationResult = (output, context) => {
    const contents = {};
    if (output["success"] !== undefined) {
        contents.Success = __parseBoolean(output["success"]);
    }
    return contents;
};
const de_ReplaceIamInstanceProfileAssociationResult = (output, context) => {
    const contents = {};
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = de_IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
const de_ReplaceNetworkAclAssociationResult = (output, context) => {
    const contents = {};
    if (output["newAssociationId"] !== undefined) {
        contents.NewAssociationId = __expectString(output["newAssociationId"]);
    }
    return contents;
};
const de_ReplaceRootVolumeTask = (output, context) => {
    const contents = {};
    if (output["replaceRootVolumeTaskId"] !== undefined) {
        contents.ReplaceRootVolumeTaskId = __expectString(output["replaceRootVolumeTaskId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["taskState"] !== undefined) {
        contents.TaskState = __expectString(output["taskState"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectString(output["startTime"]);
    }
    if (output["completeTime"] !== undefined) {
        contents.CompleteTime = __expectString(output["completeTime"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["deleteReplacedRootVolume"] !== undefined) {
        contents.DeleteReplacedRootVolume = __parseBoolean(output["deleteReplacedRootVolume"]);
    }
    return contents;
};
const de_ReplaceRootVolumeTasks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplaceRootVolumeTask(entry, context);
    });
};
const de_ReplaceRouteTableAssociationResult = (output, context) => {
    const contents = {};
    if (output["newAssociationId"] !== undefined) {
        contents.NewAssociationId = __expectString(output["newAssociationId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = de_RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
const de_ReplaceTransitGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output["route"] !== undefined) {
        contents.Route = de_TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
const de_ReplaceVpnTunnelResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_RequestSpotFleetResponse = (output, context) => {
    const contents = {};
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
const de_RequestSpotInstancesResult = (output, context) => {
    const contents = {};
    if (output.spotInstanceRequestSet === "") {
        contents.SpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.SpotInstanceRequests = de_SpotInstanceRequestList(__getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]), context);
    }
    return contents;
};
const de_Reservation = (output, context) => {
    const contents = {};
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output.instancesSet === "") {
        contents.Instances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.Instances = de_InstanceList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["requesterId"] !== undefined) {
        contents.RequesterId = __expectString(output["requesterId"]);
    }
    if (output["reservationId"] !== undefined) {
        contents.ReservationId = __expectString(output["reservationId"]);
    }
    return contents;
};
const de_ReservationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Reservation(entry, context);
    });
};
const de_ReservationValue = (output, context) => {
    const contents = {};
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["remainingTotalValue"] !== undefined) {
        contents.RemainingTotalValue = __expectString(output["remainingTotalValue"]);
    }
    if (output["remainingUpfrontValue"] !== undefined) {
        contents.RemainingUpfrontValue = __expectString(output["remainingUpfrontValue"]);
    }
    return contents;
};
const de_ReservedInstanceReservationValue = (output, context) => {
    const contents = {};
    if (output["reservationValue"] !== undefined) {
        contents.ReservationValue = de_ReservationValue(output["reservationValue"], context);
    }
    if (output["reservedInstanceId"] !== undefined) {
        contents.ReservedInstanceId = __expectString(output["reservedInstanceId"]);
    }
    return contents;
};
const de_ReservedInstanceReservationValueSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstanceReservationValue(entry, context);
    });
};
const de_ReservedInstances = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseLong(output["duration"]);
    }
    if (output["end"] !== undefined) {
        contents.End = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["end"]));
    }
    if (output["fixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["fixedPrice"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    if (output["start"] !== undefined) {
        contents.Start = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["start"]));
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["usagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["usagePrice"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
    }
    if (output["offeringClass"] !== undefined) {
        contents.OfferingClass = __expectString(output["offeringClass"]);
    }
    if (output["offeringType"] !== undefined) {
        contents.OfferingType = __expectString(output["offeringType"]);
    }
    if (output.recurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
        contents.RecurringCharges = de_RecurringChargesList(__getArrayIfSingleItem(output["recurringCharges"]["item"]), context);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = __expectString(output["scope"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ReservedInstancesConfiguration = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = __expectString(output["scope"]);
    }
    return contents;
};
const de_ReservedInstancesId = (output, context) => {
    const contents = {};
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
const de_ReservedInstancesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstances(entry, context);
    });
};
const de_ReservedInstancesListing = (output, context) => {
    const contents = {};
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
    }
    if (output.instanceCounts === "") {
        contents.InstanceCounts = [];
    }
    else if (output["instanceCounts"] !== undefined && output["instanceCounts"]["item"] !== undefined) {
        contents.InstanceCounts = de_InstanceCountList(__getArrayIfSingleItem(output["instanceCounts"]["item"]), context);
    }
    if (output.priceSchedules === "") {
        contents.PriceSchedules = [];
    }
    else if (output["priceSchedules"] !== undefined && output["priceSchedules"]["item"] !== undefined) {
        contents.PriceSchedules = de_PriceScheduleList(__getArrayIfSingleItem(output["priceSchedules"]["item"]), context);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    if (output["reservedInstancesListingId"] !== undefined) {
        contents.ReservedInstancesListingId = __expectString(output["reservedInstancesListingId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["updateDate"] !== undefined) {
        contents.UpdateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateDate"]));
    }
    return contents;
};
const de_ReservedInstancesListingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesListing(entry, context);
    });
};
const de_ReservedInstancesModification = (output, context) => {
    const contents = {};
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
    }
    if (output["effectiveDate"] !== undefined) {
        contents.EffectiveDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["effectiveDate"]));
    }
    if (output.modificationResultSet === "") {
        contents.ModificationResults = [];
    }
    else if (output["modificationResultSet"] !== undefined && output["modificationResultSet"]["item"] !== undefined) {
        contents.ModificationResults = de_ReservedInstancesModificationResultList(__getArrayIfSingleItem(output["modificationResultSet"]["item"]), context);
    }
    if (output.reservedInstancesSet === "") {
        contents.ReservedInstancesIds = [];
    }
    else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
        contents.ReservedInstancesIds = de_ReservedIntancesIds(__getArrayIfSingleItem(output["reservedInstancesSet"]["item"]), context);
    }
    if (output["reservedInstancesModificationId"] !== undefined) {
        contents.ReservedInstancesModificationId = __expectString(output["reservedInstancesModificationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["updateDate"] !== undefined) {
        contents.UpdateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateDate"]));
    }
    return contents;
};
const de_ReservedInstancesModificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesModification(entry, context);
    });
};
const de_ReservedInstancesModificationResult = (output, context) => {
    const contents = {};
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    if (output["targetConfiguration"] !== undefined) {
        contents.TargetConfiguration = de_ReservedInstancesConfiguration(output["targetConfiguration"], context);
    }
    return contents;
};
const de_ReservedInstancesModificationResultList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesModificationResult(entry, context);
    });
};
const de_ReservedInstancesOffering = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseLong(output["duration"]);
    }
    if (output["fixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["fixedPrice"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["reservedInstancesOfferingId"] !== undefined) {
        contents.ReservedInstancesOfferingId = __expectString(output["reservedInstancesOfferingId"]);
    }
    if (output["usagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["usagePrice"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
    }
    if (output["marketplace"] !== undefined) {
        contents.Marketplace = __parseBoolean(output["marketplace"]);
    }
    if (output["offeringClass"] !== undefined) {
        contents.OfferingClass = __expectString(output["offeringClass"]);
    }
    if (output["offeringType"] !== undefined) {
        contents.OfferingType = __expectString(output["offeringType"]);
    }
    if (output.pricingDetailsSet === "") {
        contents.PricingDetails = [];
    }
    else if (output["pricingDetailsSet"] !== undefined && output["pricingDetailsSet"]["item"] !== undefined) {
        contents.PricingDetails = de_PricingDetailsList(__getArrayIfSingleItem(output["pricingDetailsSet"]["item"]), context);
    }
    if (output.recurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
        contents.RecurringCharges = de_RecurringChargesList(__getArrayIfSingleItem(output["recurringCharges"]["item"]), context);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = __expectString(output["scope"]);
    }
    return contents;
};
const de_ReservedInstancesOfferingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesOffering(entry, context);
    });
};
const de_ReservedIntancesIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesId(entry, context);
    });
};
const de_ResetAddressAttributeResult = (output, context) => {
    const contents = {};
    if (output["address"] !== undefined) {
        contents.Address = de_AddressAttribute(output["address"], context);
    }
    return contents;
};
const de_ResetEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {};
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    return contents;
};
const de_ResetFpgaImageAttributeResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_ResourceStatement = (output, context) => {
    const contents = {};
    if (output.resourceSet === "") {
        contents.Resources = [];
    }
    else if (output["resourceSet"] !== undefined && output["resourceSet"]["item"] !== undefined) {
        contents.Resources = de_ValueStringList(__getArrayIfSingleItem(output["resourceSet"]["item"]), context);
    }
    if (output.resourceTypeSet === "") {
        contents.ResourceTypes = [];
    }
    else if (output["resourceTypeSet"] !== undefined && output["resourceTypeSet"]["item"] !== undefined) {
        contents.ResourceTypes = de_ValueStringList(__getArrayIfSingleItem(output["resourceTypeSet"]["item"]), context);
    }
    return contents;
};
const de_ResponseError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ResponseHostIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_ResponseHostIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_ResponseLaunchTemplateData = (output, context) => {
    const contents = {};
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = de_LaunchTemplateIamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output.blockDeviceMappingSet === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMappingSet"] !== undefined && output["blockDeviceMappingSet"]["item"] !== undefined) {
        contents.BlockDeviceMappings = de_LaunchTemplateBlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMappingSet"]["item"]), context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = de_LaunchTemplateInstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = de_LaunchTemplatesMonitoring(output["monitoring"], context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = de_LaunchTemplatePlacement(output["placement"], context);
    }
    if (output["ramDiskId"] !== undefined) {
        contents.RamDiskId = __expectString(output["ramDiskId"]);
    }
    if (output["disableApiTermination"] !== undefined) {
        contents.DisableApiTermination = __parseBoolean(output["disableApiTermination"]);
    }
    if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
        contents.InstanceInitiatedShutdownBehavior = __expectString(output["instanceInitiatedShutdownBehavior"]);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = __expectString(output["userData"]);
    }
    if (output.tagSpecificationSet === "") {
        contents.TagSpecifications = [];
    }
    else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
        contents.TagSpecifications = de_LaunchTemplateTagSpecificationList(__getArrayIfSingleItem(output["tagSpecificationSet"]["item"]), context);
    }
    if (output.elasticGpuSpecificationSet === "") {
        contents.ElasticGpuSpecifications = [];
    }
    else if (output["elasticGpuSpecificationSet"] !== undefined &&
        output["elasticGpuSpecificationSet"]["item"] !== undefined) {
        contents.ElasticGpuSpecifications = de_ElasticGpuSpecificationResponseList(__getArrayIfSingleItem(output["elasticGpuSpecificationSet"]["item"]), context);
    }
    if (output.elasticInferenceAcceleratorSet === "") {
        contents.ElasticInferenceAccelerators = [];
    }
    else if (output["elasticInferenceAcceleratorSet"] !== undefined &&
        output["elasticInferenceAcceleratorSet"]["item"] !== undefined) {
        contents.ElasticInferenceAccelerators = de_LaunchTemplateElasticInferenceAcceleratorResponseList(__getArrayIfSingleItem(output["elasticInferenceAcceleratorSet"]["item"]), context);
    }
    if (output.securityGroupIdSet === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
        contents.SecurityGroupIds = de_ValueStringList(__getArrayIfSingleItem(output["securityGroupIdSet"]["item"]), context);
    }
    if (output.securityGroupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
        contents.SecurityGroups = de_ValueStringList(__getArrayIfSingleItem(output["securityGroupSet"]["item"]), context);
    }
    if (output["instanceMarketOptions"] !== undefined) {
        contents.InstanceMarketOptions = de_LaunchTemplateInstanceMarketOptions(output["instanceMarketOptions"], context);
    }
    if (output["creditSpecification"] !== undefined) {
        contents.CreditSpecification = de_CreditSpecification(output["creditSpecification"], context);
    }
    if (output["cpuOptions"] !== undefined) {
        contents.CpuOptions = de_LaunchTemplateCpuOptions(output["cpuOptions"], context);
    }
    if (output["capacityReservationSpecification"] !== undefined) {
        contents.CapacityReservationSpecification = de_LaunchTemplateCapacityReservationSpecificationResponse(output["capacityReservationSpecification"], context);
    }
    if (output.licenseSet === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
        contents.LicenseSpecifications = de_LaunchTemplateLicenseList(__getArrayIfSingleItem(output["licenseSet"]["item"]), context);
    }
    if (output["hibernationOptions"] !== undefined) {
        contents.HibernationOptions = de_LaunchTemplateHibernationOptions(output["hibernationOptions"], context);
    }
    if (output["metadataOptions"] !== undefined) {
        contents.MetadataOptions = de_LaunchTemplateInstanceMetadataOptions(output["metadataOptions"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = de_LaunchTemplateEnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
    }
    if (output["privateDnsNameOptions"] !== undefined) {
        contents.PrivateDnsNameOptions = de_LaunchTemplatePrivateDnsNameOptions(output["privateDnsNameOptions"], context);
    }
    if (output["maintenanceOptions"] !== undefined) {
        contents.MaintenanceOptions = de_LaunchTemplateInstanceMaintenanceOptions(output["maintenanceOptions"], context);
    }
    if (output["disableApiStop"] !== undefined) {
        contents.DisableApiStop = __parseBoolean(output["disableApiStop"]);
    }
    return contents;
};
const de_RestoreAddressToClassicResult = (output, context) => {
    const contents = {};
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_RestoreImageFromRecycleBinResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_RestoreManagedPrefixListVersionResult = (output, context) => {
    const contents = {};
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const de_RestoreSnapshotFromRecycleBinResult = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    return contents;
};
const de_RestoreSnapshotTierResult = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["restoreStartTime"] !== undefined) {
        contents.RestoreStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["restoreStartTime"]));
    }
    if (output["restoreDuration"] !== undefined) {
        contents.RestoreDuration = __strictParseInt32(output["restoreDuration"]);
    }
    if (output["isPermanentRestore"] !== undefined) {
        contents.IsPermanentRestore = __parseBoolean(output["isPermanentRestore"]);
    }
    return contents;
};
const de_RevokeClientVpnIngressResult = (output, context) => {
    const contents = {};
    if (output["status"] !== undefined) {
        contents.Status = de_ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
const de_RevokeSecurityGroupEgressResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.unknownIpPermissionSet === "") {
        contents.UnknownIpPermissions = [];
    }
    else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
        contents.UnknownIpPermissions = de_IpPermissionList(__getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]), context);
    }
    return contents;
};
const de_RevokeSecurityGroupIngressResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.unknownIpPermissionSet === "") {
        contents.UnknownIpPermissions = [];
    }
    else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
        contents.UnknownIpPermissions = de_IpPermissionList(__getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]), context);
    }
    return contents;
};
const de_RootDeviceTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Route = (output, context) => {
    const contents = {};
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["destinationIpv6CidrBlock"] !== undefined) {
        contents.DestinationIpv6CidrBlock = __expectString(output["destinationIpv6CidrBlock"]);
    }
    if (output["destinationPrefixListId"] !== undefined) {
        contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceOwnerId"] !== undefined) {
        contents.InstanceOwnerId = __expectString(output["instanceOwnerId"]);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["carrierGatewayId"] !== undefined) {
        contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = __expectString(output["origin"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    if (output["coreNetworkArn"] !== undefined) {
        contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
    }
    return contents;
};
const de_RouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Route(entry, context);
    });
};
const de_RouteTable = (output, context) => {
    const contents = {};
    if (output.associationSet === "") {
        contents.Associations = [];
    }
    else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
        contents.Associations = de_RouteTableAssociationList(__getArrayIfSingleItem(output["associationSet"]["item"]), context);
    }
    if (output.propagatingVgwSet === "") {
        contents.PropagatingVgws = [];
    }
    else if (output["propagatingVgwSet"] !== undefined && output["propagatingVgwSet"]["item"] !== undefined) {
        contents.PropagatingVgws = de_PropagatingVgwList(__getArrayIfSingleItem(output["propagatingVgwSet"]["item"]), context);
    }
    if (output["routeTableId"] !== undefined) {
        contents.RouteTableId = __expectString(output["routeTableId"]);
    }
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = de_RouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
const de_RouteTableAssociation = (output, context) => {
    const contents = {};
    if (output["main"] !== undefined) {
        contents.Main = __parseBoolean(output["main"]);
    }
    if (output["routeTableAssociationId"] !== undefined) {
        contents.RouteTableAssociationId = __expectString(output["routeTableAssociationId"]);
    }
    if (output["routeTableId"] !== undefined) {
        contents.RouteTableId = __expectString(output["routeTableId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = de_RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
const de_RouteTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteTableAssociation(entry, context);
    });
};
const de_RouteTableAssociationState = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
const de_RouteTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteTable(entry, context);
    });
};
const de_RuleGroupRuleOptionsPair = (output, context) => {
    const contents = {};
    if (output["ruleGroupArn"] !== undefined) {
        contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
    }
    if (output.ruleOptionSet === "") {
        contents.RuleOptions = [];
    }
    else if (output["ruleOptionSet"] !== undefined && output["ruleOptionSet"]["item"] !== undefined) {
        contents.RuleOptions = de_RuleOptionList(__getArrayIfSingleItem(output["ruleOptionSet"]["item"]), context);
    }
    return contents;
};
const de_RuleGroupRuleOptionsPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleGroupRuleOptionsPair(entry, context);
    });
};
const de_RuleGroupTypePair = (output, context) => {
    const contents = {};
    if (output["ruleGroupArn"] !== undefined) {
        contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
    }
    if (output["ruleGroupType"] !== undefined) {
        contents.RuleGroupType = __expectString(output["ruleGroupType"]);
    }
    return contents;
};
const de_RuleGroupTypePairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleGroupTypePair(entry, context);
    });
};
const de_RuleOption = (output, context) => {
    const contents = {};
    if (output["keyword"] !== undefined) {
        contents.Keyword = __expectString(output["keyword"]);
    }
    if (output.settingSet === "") {
        contents.Settings = [];
    }
    else if (output["settingSet"] !== undefined && output["settingSet"]["item"] !== undefined) {
        contents.Settings = de_StringList(__getArrayIfSingleItem(output["settingSet"]["item"]), context);
    }
    return contents;
};
const de_RuleOptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleOption(entry, context);
    });
};
const de_RunInstancesMonitoringEnabled = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
const de_RunScheduledInstancesResult = (output, context) => {
    const contents = {};
    if (output.instanceIdSet === "") {
        contents.InstanceIdSet = [];
    }
    else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
        contents.InstanceIdSet = de_InstanceIdSet(__getArrayIfSingleItem(output["instanceIdSet"]["item"]), context);
    }
    return contents;
};
const de_S3Storage = (output, context) => {
    const contents = {};
    if (output["AWSAccessKeyId"] !== undefined) {
        contents.AWSAccessKeyId = __expectString(output["AWSAccessKeyId"]);
    }
    if (output["bucket"] !== undefined) {
        contents.Bucket = __expectString(output["bucket"]);
    }
    if (output["prefix"] !== undefined) {
        contents.Prefix = __expectString(output["prefix"]);
    }
    if (output["uploadPolicy"] !== undefined) {
        contents.UploadPolicy = context.base64Decoder(output["uploadPolicy"]);
    }
    if (output["uploadPolicySignature"] !== undefined) {
        contents.UploadPolicySignature = __expectString(output["uploadPolicySignature"]);
    }
    return contents;
};
const de_ScheduledInstance = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["networkPlatform"] !== undefined) {
        contents.NetworkPlatform = __expectString(output["networkPlatform"]);
    }
    if (output["nextSlotStartTime"] !== undefined) {
        contents.NextSlotStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["nextSlotStartTime"]));
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["previousSlotEndTime"] !== undefined) {
        contents.PreviousSlotEndTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["previousSlotEndTime"]));
    }
    if (output["recurrence"] !== undefined) {
        contents.Recurrence = de_ScheduledInstanceRecurrence(output["recurrence"], context);
    }
    if (output["scheduledInstanceId"] !== undefined) {
        contents.ScheduledInstanceId = __expectString(output["scheduledInstanceId"]);
    }
    if (output["slotDurationInHours"] !== undefined) {
        contents.SlotDurationInHours = __strictParseInt32(output["slotDurationInHours"]);
    }
    if (output["termEndDate"] !== undefined) {
        contents.TermEndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["termEndDate"]));
    }
    if (output["termStartDate"] !== undefined) {
        contents.TermStartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["termStartDate"]));
    }
    if (output["totalScheduledInstanceHours"] !== undefined) {
        contents.TotalScheduledInstanceHours = __strictParseInt32(output["totalScheduledInstanceHours"]);
    }
    return contents;
};
const de_ScheduledInstanceAvailability = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]);
    }
    if (output["firstSlotStartTime"] !== undefined) {
        contents.FirstSlotStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["firstSlotStartTime"]));
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["maxTermDurationInDays"] !== undefined) {
        contents.MaxTermDurationInDays = __strictParseInt32(output["maxTermDurationInDays"]);
    }
    if (output["minTermDurationInDays"] !== undefined) {
        contents.MinTermDurationInDays = __strictParseInt32(output["minTermDurationInDays"]);
    }
    if (output["networkPlatform"] !== undefined) {
        contents.NetworkPlatform = __expectString(output["networkPlatform"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["purchaseToken"] !== undefined) {
        contents.PurchaseToken = __expectString(output["purchaseToken"]);
    }
    if (output["recurrence"] !== undefined) {
        contents.Recurrence = de_ScheduledInstanceRecurrence(output["recurrence"], context);
    }
    if (output["slotDurationInHours"] !== undefined) {
        contents.SlotDurationInHours = __strictParseInt32(output["slotDurationInHours"]);
    }
    if (output["totalScheduledInstanceHours"] !== undefined) {
        contents.TotalScheduledInstanceHours = __strictParseInt32(output["totalScheduledInstanceHours"]);
    }
    return contents;
};
const de_ScheduledInstanceAvailabilitySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledInstanceAvailability(entry, context);
    });
};
const de_ScheduledInstanceRecurrence = (output, context) => {
    const contents = {};
    if (output["frequency"] !== undefined) {
        contents.Frequency = __expectString(output["frequency"]);
    }
    if (output["interval"] !== undefined) {
        contents.Interval = __strictParseInt32(output["interval"]);
    }
    if (output.occurrenceDaySet === "") {
        contents.OccurrenceDaySet = [];
    }
    else if (output["occurrenceDaySet"] !== undefined && output["occurrenceDaySet"]["item"] !== undefined) {
        contents.OccurrenceDaySet = de_OccurrenceDaySet(__getArrayIfSingleItem(output["occurrenceDaySet"]["item"]), context);
    }
    if (output["occurrenceRelativeToEnd"] !== undefined) {
        contents.OccurrenceRelativeToEnd = __parseBoolean(output["occurrenceRelativeToEnd"]);
    }
    if (output["occurrenceUnit"] !== undefined) {
        contents.OccurrenceUnit = __expectString(output["occurrenceUnit"]);
    }
    return contents;
};
const de_ScheduledInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledInstance(entry, context);
    });
};
const de_SearchLocalGatewayRoutesResult = (output, context) => {
    const contents = {};
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = de_LocalGatewayRouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_SearchTransitGatewayMulticastGroupsResult = (output, context) => {
    const contents = {};
    if (output.multicastGroups === "") {
        contents.MulticastGroups = [];
    }
    else if (output["multicastGroups"] !== undefined && output["multicastGroups"]["item"] !== undefined) {
        contents.MulticastGroups = de_TransitGatewayMulticastGroupList(__getArrayIfSingleItem(output["multicastGroups"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
const de_SearchTransitGatewayRoutesResult = (output, context) => {
    const contents = {};
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = de_TransitGatewayRouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
    }
    if (output["additionalRoutesAvailable"] !== undefined) {
        contents.AdditionalRoutesAvailable = __parseBoolean(output["additionalRoutesAvailable"]);
    }
    return contents;
};
const de_SecurityGroup = (output, context) => {
    const contents = {};
    if (output["groupDescription"] !== undefined) {
        contents.Description = __expectString(output["groupDescription"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output.ipPermissions === "") {
        contents.IpPermissions = [];
    }
    else if (output["ipPermissions"] !== undefined && output["ipPermissions"]["item"] !== undefined) {
        contents.IpPermissions = de_IpPermissionList(__getArrayIfSingleItem(output["ipPermissions"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output.ipPermissionsEgress === "") {
        contents.IpPermissionsEgress = [];
    }
    else if (output["ipPermissionsEgress"] !== undefined && output["ipPermissionsEgress"]["item"] !== undefined) {
        contents.IpPermissionsEgress = de_IpPermissionList(__getArrayIfSingleItem(output["ipPermissionsEgress"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_SecurityGroupIdentifier = (output, context) => {
    const contents = {};
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    return contents;
};
const de_SecurityGroupIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SecurityGroupIdStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SecurityGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroup(entry, context);
    });
};
const de_SecurityGroupReference = (output, context) => {
    const contents = {};
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["referencingVpcId"] !== undefined) {
        contents.ReferencingVpcId = __expectString(output["referencingVpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const de_SecurityGroupReferences = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupReference(entry, context);
    });
};
const de_SecurityGroupRule = (output, context) => {
    const contents = {};
    if (output["securityGroupRuleId"] !== undefined) {
        contents.SecurityGroupRuleId = __expectString(output["securityGroupRuleId"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupOwnerId"] !== undefined) {
        contents.GroupOwnerId = __expectString(output["groupOwnerId"]);
    }
    if (output["isEgress"] !== undefined) {
        contents.IsEgress = __parseBoolean(output["isEgress"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = __expectString(output["ipProtocol"]);
    }
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    if (output["cidrIpv4"] !== undefined) {
        contents.CidrIpv4 = __expectString(output["cidrIpv4"]);
    }
    if (output["cidrIpv6"] !== undefined) {
        contents.CidrIpv6 = __expectString(output["cidrIpv6"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["referencedGroupInfo"] !== undefined) {
        contents.ReferencedGroupInfo = de_ReferencedSecurityGroup(output["referencedGroupInfo"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_SecurityGroupRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupRule(entry, context);
    });
};
const de_ServiceConfiguration = (output, context) => {
    const contents = {};
    if (output.serviceType === "") {
        contents.ServiceType = [];
    }
    else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
        contents.ServiceType = de_ServiceTypeDetailSet(__getArrayIfSingleItem(output["serviceType"]["item"]), context);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    if (output["serviceState"] !== undefined) {
        contents.ServiceState = __expectString(output["serviceState"]);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = de_ValueStringList(__getArrayIfSingleItem(output["availabilityZoneSet"]["item"]), context);
    }
    if (output["acceptanceRequired"] !== undefined) {
        contents.AcceptanceRequired = __parseBoolean(output["acceptanceRequired"]);
    }
    if (output["managesVpcEndpoints"] !== undefined) {
        contents.ManagesVpcEndpoints = __parseBoolean(output["managesVpcEndpoints"]);
    }
    if (output.networkLoadBalancerArnSet === "") {
        contents.NetworkLoadBalancerArns = [];
    }
    else if (output["networkLoadBalancerArnSet"] !== undefined &&
        output["networkLoadBalancerArnSet"]["item"] !== undefined) {
        contents.NetworkLoadBalancerArns = de_ValueStringList(__getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]), context);
    }
    if (output.gatewayLoadBalancerArnSet === "") {
        contents.GatewayLoadBalancerArns = [];
    }
    else if (output["gatewayLoadBalancerArnSet"] !== undefined &&
        output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
        contents.GatewayLoadBalancerArns = de_ValueStringList(__getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]), context);
    }
    if (output.supportedIpAddressTypeSet === "") {
        contents.SupportedIpAddressTypes = [];
    }
    else if (output["supportedIpAddressTypeSet"] !== undefined &&
        output["supportedIpAddressTypeSet"]["item"] !== undefined) {
        contents.SupportedIpAddressTypes = de_SupportedIpAddressTypes(__getArrayIfSingleItem(output["supportedIpAddressTypeSet"]["item"]), context);
    }
    if (output.baseEndpointDnsNameSet === "") {
        contents.BaseEndpointDnsNames = [];
    }
    else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
        contents.BaseEndpointDnsNames = de_ValueStringList(__getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]), context);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateDnsNameConfiguration"] !== undefined) {
        contents.PrivateDnsNameConfiguration = de_PrivateDnsNameConfiguration(output["privateDnsNameConfiguration"], context);
    }
    if (output["payerResponsibility"] !== undefined) {
        contents.PayerResponsibility = __expectString(output["payerResponsibility"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_ServiceConfigurationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceConfiguration(entry, context);
    });
};
const de_ServiceDetail = (output, context) => {
    const contents = {};
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output.serviceType === "") {
        contents.ServiceType = [];
    }
    else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
        contents.ServiceType = de_ServiceTypeDetailSet(__getArrayIfSingleItem(output["serviceType"]["item"]), context);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = de_ValueStringList(__getArrayIfSingleItem(output["availabilityZoneSet"]["item"]), context);
    }
    if (output["owner"] !== undefined) {
        contents.Owner = __expectString(output["owner"]);
    }
    if (output.baseEndpointDnsNameSet === "") {
        contents.BaseEndpointDnsNames = [];
    }
    else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
        contents.BaseEndpointDnsNames = de_ValueStringList(__getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]), context);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output.privateDnsNameSet === "") {
        contents.PrivateDnsNames = [];
    }
    else if (output["privateDnsNameSet"] !== undefined && output["privateDnsNameSet"]["item"] !== undefined) {
        contents.PrivateDnsNames = de_PrivateDnsDetailsSet(__getArrayIfSingleItem(output["privateDnsNameSet"]["item"]), context);
    }
    if (output["vpcEndpointPolicySupported"] !== undefined) {
        contents.VpcEndpointPolicySupported = __parseBoolean(output["vpcEndpointPolicySupported"]);
    }
    if (output["acceptanceRequired"] !== undefined) {
        contents.AcceptanceRequired = __parseBoolean(output["acceptanceRequired"]);
    }
    if (output["managesVpcEndpoints"] !== undefined) {
        contents.ManagesVpcEndpoints = __parseBoolean(output["managesVpcEndpoints"]);
    }
    if (output["payerResponsibility"] !== undefined) {
        contents.PayerResponsibility = __expectString(output["payerResponsibility"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["privateDnsNameVerificationState"] !== undefined) {
        contents.PrivateDnsNameVerificationState = __expectString(output["privateDnsNameVerificationState"]);
    }
    if (output.supportedIpAddressTypeSet === "") {
        contents.SupportedIpAddressTypes = [];
    }
    else if (output["supportedIpAddressTypeSet"] !== undefined &&
        output["supportedIpAddressTypeSet"]["item"] !== undefined) {
        contents.SupportedIpAddressTypes = de_SupportedIpAddressTypes(__getArrayIfSingleItem(output["supportedIpAddressTypeSet"]["item"]), context);
    }
    return contents;
};
const de_ServiceDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceDetail(entry, context);
    });
};
const de_ServiceTypeDetail = (output, context) => {
    const contents = {};
    if (output["serviceType"] !== undefined) {
        contents.ServiceType = __expectString(output["serviceType"]);
    }
    return contents;
};
const de_ServiceTypeDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceTypeDetail(entry, context);
    });
};
const de_Snapshot = (output, context) => {
    const contents = {};
    if (output["dataEncryptionKeyId"] !== undefined) {
        contents.DataEncryptionKeyId = __expectString(output["dataEncryptionKeyId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StateMessage = __expectString(output["statusMessage"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["storageTier"] !== undefined) {
        contents.StorageTier = __expectString(output["storageTier"]);
    }
    if (output["restoreExpiryTime"] !== undefined) {
        contents.RestoreExpiryTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["restoreExpiryTime"]));
    }
    return contents;
};
const de_SnapshotDetail = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["diskImageSize"] !== undefined) {
        contents.DiskImageSize = __strictParseFloat(output["diskImageSize"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = __expectString(output["format"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["url"] !== undefined) {
        contents.Url = __expectString(output["url"]);
    }
    if (output["userBucket"] !== undefined) {
        contents.UserBucket = de_UserBucketDetails(output["userBucket"], context);
    }
    return contents;
};
const de_SnapshotDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotDetail(entry, context);
    });
};
const de_SnapshotInfo = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    return contents;
};
const de_SnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Snapshot(entry, context);
    });
};
const de_SnapshotRecycleBinInfo = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["recycleBinEnterTime"] !== undefined) {
        contents.RecycleBinEnterTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinEnterTime"]));
    }
    if (output["recycleBinExitTime"] !== undefined) {
        contents.RecycleBinExitTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinExitTime"]));
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    return contents;
};
const de_SnapshotRecycleBinInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotRecycleBinInfo(entry, context);
    });
};
const de_SnapshotSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotInfo(entry, context);
    });
};
const de_SnapshotTaskDetail = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["diskImageSize"] !== undefined) {
        contents.DiskImageSize = __strictParseFloat(output["diskImageSize"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = __expectString(output["format"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["url"] !== undefined) {
        contents.Url = __expectString(output["url"]);
    }
    if (output["userBucket"] !== undefined) {
        contents.UserBucket = de_UserBucketDetails(output["userBucket"], context);
    }
    return contents;
};
const de_SnapshotTierStatus = (output, context) => {
    const contents = {};
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["storageTier"] !== undefined) {
        contents.StorageTier = __expectString(output["storageTier"]);
    }
    if (output["lastTieringStartTime"] !== undefined) {
        contents.LastTieringStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastTieringStartTime"]));
    }
    if (output["lastTieringProgress"] !== undefined) {
        contents.LastTieringProgress = __strictParseInt32(output["lastTieringProgress"]);
    }
    if (output["lastTieringOperationStatus"] !== undefined) {
        contents.LastTieringOperationStatus = __expectString(output["lastTieringOperationStatus"]);
    }
    if (output["lastTieringOperationStatusDetail"] !== undefined) {
        contents.LastTieringOperationStatusDetail = __expectString(output["lastTieringOperationStatusDetail"]);
    }
    if (output["archivalCompleteTime"] !== undefined) {
        contents.ArchivalCompleteTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["archivalCompleteTime"]));
    }
    if (output["restoreExpiryTime"] !== undefined) {
        contents.RestoreExpiryTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["restoreExpiryTime"]));
    }
    return contents;
};
const de_snapshotTierStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotTierStatus(entry, context);
    });
};
const de_SpotCapacityRebalance = (output, context) => {
    const contents = {};
    if (output["replacementStrategy"] !== undefined) {
        contents.ReplacementStrategy = __expectString(output["replacementStrategy"]);
    }
    if (output["terminationDelay"] !== undefined) {
        contents.TerminationDelay = __strictParseInt32(output["terminationDelay"]);
    }
    return contents;
};
const de_SpotDatafeedSubscription = (output, context) => {
    const contents = {};
    if (output["bucket"] !== undefined) {
        contents.Bucket = __expectString(output["bucket"]);
    }
    if (output["fault"] !== undefined) {
        contents.Fault = de_SpotInstanceStateFault(output["fault"], context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["prefix"] !== undefined) {
        contents.Prefix = __expectString(output["prefix"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_SpotFleetLaunchSpecification = (output, context) => {
    const contents = {};
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["addressingType"] !== undefined) {
        contents.AddressingType = __expectString(output["addressingType"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = de_BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = de_IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = de_SpotFleetMonitoring(output["monitoring"], context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = de_InstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = de_SpotPlacement(output["placement"], context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = __expectString(output["userData"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]);
    }
    if (output.tagSpecificationSet === "") {
        contents.TagSpecifications = [];
    }
    else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
        contents.TagSpecifications = de_SpotFleetTagSpecificationList(__getArrayIfSingleItem(output["tagSpecificationSet"]["item"]), context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
const de_SpotFleetMonitoring = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
const de_SpotFleetRequestConfig = (output, context) => {
    const contents = {};
    if (output["activityStatus"] !== undefined) {
        contents.ActivityStatus = __expectString(output["activityStatus"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["spotFleetRequestConfig"] !== undefined) {
        contents.SpotFleetRequestConfig = de_SpotFleetRequestConfigData(output["spotFleetRequestConfig"], context);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    if (output["spotFleetRequestState"] !== undefined) {
        contents.SpotFleetRequestState = __expectString(output["spotFleetRequestState"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_SpotFleetRequestConfigData = (output, context) => {
    const contents = {};
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["onDemandAllocationStrategy"] !== undefined) {
        contents.OnDemandAllocationStrategy = __expectString(output["onDemandAllocationStrategy"]);
    }
    if (output["spotMaintenanceStrategies"] !== undefined) {
        contents.SpotMaintenanceStrategies = de_SpotMaintenanceStrategies(output["spotMaintenanceStrategies"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["excessCapacityTerminationPolicy"] !== undefined) {
        contents.ExcessCapacityTerminationPolicy = __expectString(output["excessCapacityTerminationPolicy"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]);
    }
    if (output["onDemandFulfilledCapacity"] !== undefined) {
        contents.OnDemandFulfilledCapacity = __strictParseFloat(output["onDemandFulfilledCapacity"]);
    }
    if (output["iamFleetRole"] !== undefined) {
        contents.IamFleetRole = __expectString(output["iamFleetRole"]);
    }
    if (output.launchSpecifications === "") {
        contents.LaunchSpecifications = [];
    }
    else if (output["launchSpecifications"] !== undefined && output["launchSpecifications"]["item"] !== undefined) {
        contents.LaunchSpecifications = de_LaunchSpecsList(__getArrayIfSingleItem(output["launchSpecifications"]["item"]), context);
    }
    if (output.launchTemplateConfigs === "") {
        contents.LaunchTemplateConfigs = [];
    }
    else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
        contents.LaunchTemplateConfigs = de_LaunchTemplateConfigList(__getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]), context);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["targetCapacity"] !== undefined) {
        contents.TargetCapacity = __strictParseInt32(output["targetCapacity"]);
    }
    if (output["onDemandTargetCapacity"] !== undefined) {
        contents.OnDemandTargetCapacity = __strictParseInt32(output["onDemandTargetCapacity"]);
    }
    if (output["onDemandMaxTotalPrice"] !== undefined) {
        contents.OnDemandMaxTotalPrice = __expectString(output["onDemandMaxTotalPrice"]);
    }
    if (output["spotMaxTotalPrice"] !== undefined) {
        contents.SpotMaxTotalPrice = __expectString(output["spotMaxTotalPrice"]);
    }
    if (output["terminateInstancesWithExpiration"] !== undefined) {
        contents.TerminateInstancesWithExpiration = __parseBoolean(output["terminateInstancesWithExpiration"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
    }
    if (output["replaceUnhealthyInstances"] !== undefined) {
        contents.ReplaceUnhealthyInstances = __parseBoolean(output["replaceUnhealthyInstances"]);
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    if (output["loadBalancersConfig"] !== undefined) {
        contents.LoadBalancersConfig = de_LoadBalancersConfig(output["loadBalancersConfig"], context);
    }
    if (output["instancePoolsToUseCount"] !== undefined) {
        contents.InstancePoolsToUseCount = __strictParseInt32(output["instancePoolsToUseCount"]);
    }
    if (output["context"] !== undefined) {
        contents.Context = __expectString(output["context"]);
    }
    if (output["targetCapacityUnitType"] !== undefined) {
        contents.TargetCapacityUnitType = __expectString(output["targetCapacityUnitType"]);
    }
    if (output.TagSpecification === "") {
        contents.TagSpecifications = [];
    }
    else if (output["TagSpecification"] !== undefined && output["TagSpecification"]["item"] !== undefined) {
        contents.TagSpecifications = de_TagSpecificationList(__getArrayIfSingleItem(output["TagSpecification"]["item"]), context);
    }
    return contents;
};
const de_SpotFleetRequestConfigSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotFleetRequestConfig(entry, context);
    });
};
const de_SpotFleetTagSpecification = (output, context) => {
    const contents = {};
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.tag === "") {
        contents.Tags = [];
    }
    else if (output["tag"] !== undefined && output["tag"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tag"]["item"]), context);
    }
    return contents;
};
const de_SpotFleetTagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotFleetTagSpecification(entry, context);
    });
};
const de_SpotInstanceRequest = (output, context) => {
    const contents = {};
    if (output["actualBlockHourlyPrice"] !== undefined) {
        contents.ActualBlockHourlyPrice = __expectString(output["actualBlockHourlyPrice"]);
    }
    if (output["availabilityZoneGroup"] !== undefined) {
        contents.AvailabilityZoneGroup = __expectString(output["availabilityZoneGroup"]);
    }
    if (output["blockDurationMinutes"] !== undefined) {
        contents.BlockDurationMinutes = __strictParseInt32(output["blockDurationMinutes"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["fault"] !== undefined) {
        contents.Fault = de_SpotInstanceStateFault(output["fault"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["launchGroup"] !== undefined) {
        contents.LaunchGroup = __expectString(output["launchGroup"]);
    }
    if (output["launchSpecification"] !== undefined) {
        contents.LaunchSpecification = de_LaunchSpecification(output["launchSpecification"], context);
    }
    if (output["launchedAvailabilityZone"] !== undefined) {
        contents.LaunchedAvailabilityZone = __expectString(output["launchedAvailabilityZone"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_SpotInstanceStatus(output["status"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    return contents;
};
const de_SpotInstanceRequestList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotInstanceRequest(entry, context);
    });
};
const de_SpotInstanceStateFault = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_SpotInstanceStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateTime"]));
    }
    return contents;
};
const de_SpotMaintenanceStrategies = (output, context) => {
    const contents = {};
    if (output["capacityRebalance"] !== undefined) {
        contents.CapacityRebalance = de_SpotCapacityRebalance(output["capacityRebalance"], context);
    }
    return contents;
};
const de_SpotOptions = (output, context) => {
    const contents = {};
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["maintenanceStrategies"] !== undefined) {
        contents.MaintenanceStrategies = de_FleetSpotMaintenanceStrategies(output["maintenanceStrategies"], context);
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    if (output["instancePoolsToUseCount"] !== undefined) {
        contents.InstancePoolsToUseCount = __strictParseInt32(output["instancePoolsToUseCount"]);
    }
    if (output["singleInstanceType"] !== undefined) {
        contents.SingleInstanceType = __parseBoolean(output["singleInstanceType"]);
    }
    if (output["singleAvailabilityZone"] !== undefined) {
        contents.SingleAvailabilityZone = __parseBoolean(output["singleAvailabilityZone"]);
    }
    if (output["minTargetCapacity"] !== undefined) {
        contents.MinTargetCapacity = __strictParseInt32(output["minTargetCapacity"]);
    }
    if (output["maxTotalPrice"] !== undefined) {
        contents.MaxTotalPrice = __expectString(output["maxTotalPrice"]);
    }
    return contents;
};
const de_SpotPlacement = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    return contents;
};
const de_SpotPlacementScore = (output, context) => {
    const contents = {};
    if (output["region"] !== undefined) {
        contents.Region = __expectString(output["region"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["score"] !== undefined) {
        contents.Score = __strictParseInt32(output["score"]);
    }
    return contents;
};
const de_SpotPlacementScores = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotPlacementScore(entry, context);
    });
};
const de_SpotPrice = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
    }
    return contents;
};
const de_SpotPriceHistoryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotPrice(entry, context);
    });
};
const de_StaleIpPermission = (output, context) => {
    const contents = {};
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = __expectString(output["ipProtocol"]);
    }
    if (output.ipRanges === "") {
        contents.IpRanges = [];
    }
    else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
        contents.IpRanges = de_IpRanges(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
    }
    if (output.prefixListIds === "") {
        contents.PrefixListIds = [];
    }
    else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
        contents.PrefixListIds = de_PrefixListIdSet(__getArrayIfSingleItem(output["prefixListIds"]["item"]), context);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    if (output.groups === "") {
        contents.UserIdGroupPairs = [];
    }
    else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
        contents.UserIdGroupPairs = de_UserIdGroupPairSet(__getArrayIfSingleItem(output["groups"]["item"]), context);
    }
    return contents;
};
const de_StaleIpPermissionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StaleIpPermission(entry, context);
    });
};
const de_StaleSecurityGroup = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output.staleIpPermissions === "") {
        contents.StaleIpPermissions = [];
    }
    else if (output["staleIpPermissions"] !== undefined && output["staleIpPermissions"]["item"] !== undefined) {
        contents.StaleIpPermissions = de_StaleIpPermissionSet(__getArrayIfSingleItem(output["staleIpPermissions"]["item"]), context);
    }
    if (output.staleIpPermissionsEgress === "") {
        contents.StaleIpPermissionsEgress = [];
    }
    else if (output["staleIpPermissionsEgress"] !== undefined &&
        output["staleIpPermissionsEgress"]["item"] !== undefined) {
        contents.StaleIpPermissionsEgress = de_StaleIpPermissionSet(__getArrayIfSingleItem(output["staleIpPermissionsEgress"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_StaleSecurityGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StaleSecurityGroup(entry, context);
    });
};
const de_StartInstancesResult = (output, context) => {
    const contents = {};
    if (output.instancesSet === "") {
        contents.StartingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.StartingInstances = de_InstanceStateChangeList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const de_StartNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAccessScopeAnalysis"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysis = de_NetworkInsightsAccessScopeAnalysis(output["networkInsightsAccessScopeAnalysis"], context);
    }
    return contents;
};
const de_StartNetworkInsightsAnalysisResult = (output, context) => {
    const contents = {};
    if (output["networkInsightsAnalysis"] !== undefined) {
        contents.NetworkInsightsAnalysis = de_NetworkInsightsAnalysis(output["networkInsightsAnalysis"], context);
    }
    return contents;
};
const de_StartVpcEndpointServicePrivateDnsVerificationResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_StateReason = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_StopInstancesResult = (output, context) => {
    const contents = {};
    if (output.instancesSet === "") {
        contents.StoppingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.StoppingInstances = de_InstanceStateChangeList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const de_Storage = (output, context) => {
    const contents = {};
    if (output["S3"] !== undefined) {
        contents.S3 = de_S3Storage(output["S3"], context);
    }
    return contents;
};
const de_StoreImageTaskResult = (output, context) => {
    const contents = {};
    if (output["amiId"] !== undefined) {
        contents.AmiId = __expectString(output["amiId"]);
    }
    if (output["taskStartTime"] !== undefined) {
        contents.TaskStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["taskStartTime"]));
    }
    if (output["bucket"] !== undefined) {
        contents.Bucket = __expectString(output["bucket"]);
    }
    if (output["s3objectKey"] !== undefined) {
        contents.S3objectKey = __expectString(output["s3objectKey"]);
    }
    if (output["progressPercentage"] !== undefined) {
        contents.ProgressPercentage = __strictParseInt32(output["progressPercentage"]);
    }
    if (output["storeTaskState"] !== undefined) {
        contents.StoreTaskState = __expectString(output["storeTaskState"]);
    }
    if (output["storeTaskFailureReason"] !== undefined) {
        contents.StoreTaskFailureReason = __expectString(output["storeTaskFailureReason"]);
    }
    return contents;
};
const de_StoreImageTaskResultSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StoreImageTaskResult(entry, context);
    });
};
const de_StringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Subnet = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["availableIpAddressCount"] !== undefined) {
        contents.AvailableIpAddressCount = __strictParseInt32(output["availableIpAddressCount"]);
    }
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["defaultForAz"] !== undefined) {
        contents.DefaultForAz = __parseBoolean(output["defaultForAz"]);
    }
    if (output["enableLniAtDeviceIndex"] !== undefined) {
        contents.EnableLniAtDeviceIndex = __strictParseInt32(output["enableLniAtDeviceIndex"]);
    }
    if (output["mapPublicIpOnLaunch"] !== undefined) {
        contents.MapPublicIpOnLaunch = __parseBoolean(output["mapPublicIpOnLaunch"]);
    }
    if (output["mapCustomerOwnedIpOnLaunch"] !== undefined) {
        contents.MapCustomerOwnedIpOnLaunch = __parseBoolean(output["mapCustomerOwnedIpOnLaunch"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["assignIpv6AddressOnCreation"] !== undefined) {
        contents.AssignIpv6AddressOnCreation = __parseBoolean(output["assignIpv6AddressOnCreation"]);
    }
    if (output.ipv6CidrBlockAssociationSet === "") {
        contents.Ipv6CidrBlockAssociationSet = [];
    }
    else if (output["ipv6CidrBlockAssociationSet"] !== undefined &&
        output["ipv6CidrBlockAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockAssociationSet = de_SubnetIpv6CidrBlockAssociationSet(__getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["subnetArn"] !== undefined) {
        contents.SubnetArn = __expectString(output["subnetArn"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["enableDns64"] !== undefined) {
        contents.EnableDns64 = __parseBoolean(output["enableDns64"]);
    }
    if (output["ipv6Native"] !== undefined) {
        contents.Ipv6Native = __parseBoolean(output["ipv6Native"]);
    }
    if (output["privateDnsNameOptionsOnLaunch"] !== undefined) {
        contents.PrivateDnsNameOptionsOnLaunch = de_PrivateDnsNameOptionsOnLaunch(output["privateDnsNameOptionsOnLaunch"], context);
    }
    return contents;
};
const de_SubnetAssociation = (output, context) => {
    const contents = {};
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_SubnetAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubnetAssociation(entry, context);
    });
};
const de_SubnetCidrBlockState = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
const de_SubnetCidrReservation = (output, context) => {
    const contents = {};
    if (output["subnetCidrReservationId"] !== undefined) {
        contents.SubnetCidrReservationId = __expectString(output["subnetCidrReservationId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["reservationType"] !== undefined) {
        contents.ReservationType = __expectString(output["reservationType"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_SubnetCidrReservationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubnetCidrReservation(entry, context);
    });
};
const de_SubnetIpv6CidrBlockAssociation = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    if (output["ipv6CidrBlockState"] !== undefined) {
        contents.Ipv6CidrBlockState = de_SubnetCidrBlockState(output["ipv6CidrBlockState"], context);
    }
    return contents;
};
const de_SubnetIpv6CidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubnetIpv6CidrBlockAssociation(entry, context);
    });
};
const de_SubnetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Subnet(entry, context);
    });
};
const de_Subscription = (output, context) => {
    const contents = {};
    if (output["source"] !== undefined) {
        contents.Source = __expectString(output["source"]);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = __expectString(output["destination"]);
    }
    if (output["metric"] !== undefined) {
        contents.Metric = __expectString(output["metric"]);
    }
    if (output["statistic"] !== undefined) {
        contents.Statistic = __expectString(output["statistic"]);
    }
    if (output["period"] !== undefined) {
        contents.Period = __expectString(output["period"]);
    }
    return contents;
};
const de_SubscriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Subscription(entry, context);
    });
};
const de_SuccessfulInstanceCreditSpecificationItem = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
const de_SuccessfulInstanceCreditSpecificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};
const de_SuccessfulQueuedPurchaseDeletion = (output, context) => {
    const contents = {};
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
const de_SuccessfulQueuedPurchaseDeletionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SuccessfulQueuedPurchaseDeletion(entry, context);
    });
};
const de_SupportedAdditionalProcessorFeatureList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SupportedIpAddressTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_TagDescription = (output, context) => {
    const contents = {};
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
const de_TagDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TagDescription(entry, context);
    });
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry, context);
    });
};
const de_TagSpecification = (output, context) => {
    const contents = {};
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined && output["Tag"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["Tag"]["item"]), context);
    }
    return contents;
};
const de_TagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TagSpecification(entry, context);
    });
};
const de_TargetCapacitySpecification = (output, context) => {
    const contents = {};
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]);
    }
    if (output["onDemandTargetCapacity"] !== undefined) {
        contents.OnDemandTargetCapacity = __strictParseInt32(output["onDemandTargetCapacity"]);
    }
    if (output["spotTargetCapacity"] !== undefined) {
        contents.SpotTargetCapacity = __strictParseInt32(output["spotTargetCapacity"]);
    }
    if (output["defaultTargetCapacityType"] !== undefined) {
        contents.DefaultTargetCapacityType = __expectString(output["defaultTargetCapacityType"]);
    }
    if (output["targetCapacityUnitType"] !== undefined) {
        contents.TargetCapacityUnitType = __expectString(output["targetCapacityUnitType"]);
    }
    return contents;
};
const de_TargetConfiguration = (output, context) => {
    const contents = {};
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = __expectString(output["offeringId"]);
    }
    return contents;
};
const de_TargetGroup = (output, context) => {
    const contents = {};
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    return contents;
};
const de_TargetGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetGroup(entry, context);
    });
};
const de_TargetGroupsConfig = (output, context) => {
    const contents = {};
    if (output.targetGroups === "") {
        contents.TargetGroups = [];
    }
    else if (output["targetGroups"] !== undefined && output["targetGroups"]["item"] !== undefined) {
        contents.TargetGroups = de_TargetGroups(__getArrayIfSingleItem(output["targetGroups"]["item"]), context);
    }
    return contents;
};
const de_TargetNetwork = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["targetNetworkId"] !== undefined) {
        contents.TargetNetworkId = __expectString(output["targetNetworkId"]);
    }
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_AssociationStatus(output["status"], context);
    }
    if (output.securityGroups === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroups"] !== undefined && output["securityGroups"]["item"] !== undefined) {
        contents.SecurityGroups = de_ValueStringList(__getArrayIfSingleItem(output["securityGroups"]["item"]), context);
    }
    return contents;
};
const de_TargetNetworkSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetNetwork(entry, context);
    });
};
const de_TargetReservationValue = (output, context) => {
    const contents = {};
    if (output["reservationValue"] !== undefined) {
        contents.ReservationValue = de_ReservationValue(output["reservationValue"], context);
    }
    if (output["targetConfiguration"] !== undefined) {
        contents.TargetConfiguration = de_TargetConfiguration(output["targetConfiguration"], context);
    }
    return contents;
};
const de_TargetReservationValueSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetReservationValue(entry, context);
    });
};
const de_TerminateClientVpnConnectionsResult = (output, context) => {
    const contents = {};
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["username"] !== undefined) {
        contents.Username = __expectString(output["username"]);
    }
    if (output.connectionStatuses === "") {
        contents.ConnectionStatuses = [];
    }
    else if (output["connectionStatuses"] !== undefined && output["connectionStatuses"]["item"] !== undefined) {
        contents.ConnectionStatuses = de_TerminateConnectionStatusSet(__getArrayIfSingleItem(output["connectionStatuses"]["item"]), context);
    }
    return contents;
};
const de_TerminateConnectionStatus = (output, context) => {
    const contents = {};
    if (output["connectionId"] !== undefined) {
        contents.ConnectionId = __expectString(output["connectionId"]);
    }
    if (output["previousStatus"] !== undefined) {
        contents.PreviousStatus = de_ClientVpnConnectionStatus(output["previousStatus"], context);
    }
    if (output["currentStatus"] !== undefined) {
        contents.CurrentStatus = de_ClientVpnConnectionStatus(output["currentStatus"], context);
    }
    return contents;
};
const de_TerminateConnectionStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TerminateConnectionStatus(entry, context);
    });
};
const de_TerminateInstancesResult = (output, context) => {
    const contents = {};
    if (output.instancesSet === "") {
        contents.TerminatingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.TerminatingInstances = de_InstanceStateChangeList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const de_ThreadsPerCoreList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __strictParseInt32(entry);
    });
};
const de_ThroughResourcesStatement = (output, context) => {
    const contents = {};
    if (output["resourceStatement"] !== undefined) {
        contents.ResourceStatement = de_ResourceStatement(output["resourceStatement"], context);
    }
    return contents;
};
const de_ThroughResourcesStatementList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThroughResourcesStatement(entry, context);
    });
};
const de_TotalLocalStorageGB = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseFloat(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseFloat(output["max"]);
    }
    return contents;
};
const de_TrafficMirrorFilter = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    if (output.ingressFilterRuleSet === "") {
        contents.IngressFilterRules = [];
    }
    else if (output["ingressFilterRuleSet"] !== undefined && output["ingressFilterRuleSet"]["item"] !== undefined) {
        contents.IngressFilterRules = de_TrafficMirrorFilterRuleList(__getArrayIfSingleItem(output["ingressFilterRuleSet"]["item"]), context);
    }
    if (output.egressFilterRuleSet === "") {
        contents.EgressFilterRules = [];
    }
    else if (output["egressFilterRuleSet"] !== undefined && output["egressFilterRuleSet"]["item"] !== undefined) {
        contents.EgressFilterRules = de_TrafficMirrorFilterRuleList(__getArrayIfSingleItem(output["egressFilterRuleSet"]["item"]), context);
    }
    if (output.networkServiceSet === "") {
        contents.NetworkServices = [];
    }
    else if (output["networkServiceSet"] !== undefined && output["networkServiceSet"]["item"] !== undefined) {
        contents.NetworkServices = de_TrafficMirrorNetworkServiceList(__getArrayIfSingleItem(output["networkServiceSet"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TrafficMirrorFilterRule = (output, context) => {
    const contents = {};
    if (output["trafficMirrorFilterRuleId"] !== undefined) {
        contents.TrafficMirrorFilterRuleId = __expectString(output["trafficMirrorFilterRuleId"]);
    }
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    if (output["trafficDirection"] !== undefined) {
        contents.TrafficDirection = __expectString(output["trafficDirection"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = __strictParseInt32(output["ruleNumber"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __strictParseInt32(output["protocol"]);
    }
    if (output["destinationPortRange"] !== undefined) {
        contents.DestinationPortRange = de_TrafficMirrorPortRange(output["destinationPortRange"], context);
    }
    if (output["sourcePortRange"] !== undefined) {
        contents.SourcePortRange = de_TrafficMirrorPortRange(output["sourcePortRange"], context);
    }
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["sourceCidrBlock"] !== undefined) {
        contents.SourceCidrBlock = __expectString(output["sourceCidrBlock"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
const de_TrafficMirrorFilterRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorFilterRule(entry, context);
    });
};
const de_TrafficMirrorFilterSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorFilter(entry, context);
    });
};
const de_TrafficMirrorNetworkServiceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_TrafficMirrorPortRange = (output, context) => {
    const contents = {};
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    return contents;
};
const de_TrafficMirrorSession = (output, context) => {
    const contents = {};
    if (output["trafficMirrorSessionId"] !== undefined) {
        contents.TrafficMirrorSessionId = __expectString(output["trafficMirrorSessionId"]);
    }
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
    }
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["packetLength"] !== undefined) {
        contents.PacketLength = __strictParseInt32(output["packetLength"]);
    }
    if (output["sessionNumber"] !== undefined) {
        contents.SessionNumber = __strictParseInt32(output["sessionNumber"]);
    }
    if (output["virtualNetworkId"] !== undefined) {
        contents.VirtualNetworkId = __strictParseInt32(output["virtualNetworkId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TrafficMirrorSessionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorSession(entry, context);
    });
};
const de_TrafficMirrorTarget = (output, context) => {
    const contents = {};
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["networkLoadBalancerArn"] !== undefined) {
        contents.NetworkLoadBalancerArn = __expectString(output["networkLoadBalancerArn"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["gatewayLoadBalancerEndpointId"] !== undefined) {
        contents.GatewayLoadBalancerEndpointId = __expectString(output["gatewayLoadBalancerEndpointId"]);
    }
    return contents;
};
const de_TrafficMirrorTargetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorTarget(entry, context);
    });
};
const de_TransitGateway = (output, context) => {
    const contents = {};
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["transitGatewayArn"] !== undefined) {
        contents.TransitGatewayArn = __expectString(output["transitGatewayArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = de_TransitGatewayOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayAssociation = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_TransitGatewayAttachment = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["transitGatewayOwnerId"] !== undefined) {
        contents.TransitGatewayOwnerId = __expectString(output["transitGatewayOwnerId"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["association"] !== undefined) {
        contents.Association = de_TransitGatewayAttachmentAssociation(output["association"], context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayAttachmentAssociation = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_TransitGatewayAttachmentBgpConfiguration = (output, context) => {
    const contents = {};
    if (output["transitGatewayAsn"] !== undefined) {
        contents.TransitGatewayAsn = __strictParseLong(output["transitGatewayAsn"]);
    }
    if (output["peerAsn"] !== undefined) {
        contents.PeerAsn = __strictParseLong(output["peerAsn"]);
    }
    if (output["transitGatewayAddress"] !== undefined) {
        contents.TransitGatewayAddress = __expectString(output["transitGatewayAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = __expectString(output["peerAddress"]);
    }
    if (output["bgpStatus"] !== undefined) {
        contents.BgpStatus = __expectString(output["bgpStatus"]);
    }
    return contents;
};
const de_TransitGatewayAttachmentBgpConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayAttachmentBgpConfiguration(entry, context);
    });
};
const de_TransitGatewayAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayAttachment(entry, context);
    });
};
const de_TransitGatewayAttachmentPropagation = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_TransitGatewayAttachmentPropagationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayAttachmentPropagation(entry, context);
    });
};
const de_TransitGatewayConnect = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transportTransitGatewayAttachmentId"] !== undefined) {
        contents.TransportTransitGatewayAttachmentId = __expectString(output["transportTransitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = de_TransitGatewayConnectOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayConnectList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayConnect(entry, context);
    });
};
const de_TransitGatewayConnectOptions = (output, context) => {
    const contents = {};
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    return contents;
};
const de_TransitGatewayConnectPeer = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayConnectPeerId"] !== undefined) {
        contents.TransitGatewayConnectPeerId = __expectString(output["transitGatewayConnectPeerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output["connectPeerConfiguration"] !== undefined) {
        contents.ConnectPeerConfiguration = de_TransitGatewayConnectPeerConfiguration(output["connectPeerConfiguration"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayConnectPeerConfiguration = (output, context) => {
    const contents = {};
    if (output["transitGatewayAddress"] !== undefined) {
        contents.TransitGatewayAddress = __expectString(output["transitGatewayAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = __expectString(output["peerAddress"]);
    }
    if (output.insideCidrBlocks === "") {
        contents.InsideCidrBlocks = [];
    }
    else if (output["insideCidrBlocks"] !== undefined && output["insideCidrBlocks"]["item"] !== undefined) {
        contents.InsideCidrBlocks = de_InsideCidrBlocksStringList(__getArrayIfSingleItem(output["insideCidrBlocks"]["item"]), context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output.bgpConfigurations === "") {
        contents.BgpConfigurations = [];
    }
    else if (output["bgpConfigurations"] !== undefined && output["bgpConfigurations"]["item"] !== undefined) {
        contents.BgpConfigurations = de_TransitGatewayAttachmentBgpConfigurationList(__getArrayIfSingleItem(output["bgpConfigurations"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayConnectPeerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayConnectPeer(entry, context);
    });
};
const de_TransitGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGateway(entry, context);
    });
};
const de_TransitGatewayMulticastDeregisteredGroupMembers = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.deregisteredNetworkInterfaceIds === "") {
        contents.DeregisteredNetworkInterfaceIds = [];
    }
    else if (output["deregisteredNetworkInterfaceIds"] !== undefined &&
        output["deregisteredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.DeregisteredNetworkInterfaceIds = de_ValueStringList(__getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
const de_TransitGatewayMulticastDeregisteredGroupSources = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.deregisteredNetworkInterfaceIds === "") {
        contents.DeregisteredNetworkInterfaceIds = [];
    }
    else if (output["deregisteredNetworkInterfaceIds"] !== undefined &&
        output["deregisteredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.DeregisteredNetworkInterfaceIds = de_ValueStringList(__getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
const de_TransitGatewayMulticastDomain = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["transitGatewayMulticastDomainArn"] !== undefined) {
        contents.TransitGatewayMulticastDomainArn = __expectString(output["transitGatewayMulticastDomainArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["options"] !== undefined) {
        contents.Options = de_TransitGatewayMulticastDomainOptions(output["options"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayMulticastDomainAssociation = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = de_SubnetAssociation(output["subnet"], context);
    }
    return contents;
};
const de_TransitGatewayMulticastDomainAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayMulticastDomainAssociation(entry, context);
    });
};
const de_TransitGatewayMulticastDomainAssociations = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output.subnets === "") {
        contents.Subnets = [];
    }
    else if (output["subnets"] !== undefined && output["subnets"]["item"] !== undefined) {
        contents.Subnets = de_SubnetAssociationList(__getArrayIfSingleItem(output["subnets"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayMulticastDomainList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayMulticastDomain(entry, context);
    });
};
const de_TransitGatewayMulticastDomainOptions = (output, context) => {
    const contents = {};
    if (output["igmpv2Support"] !== undefined) {
        contents.Igmpv2Support = __expectString(output["igmpv2Support"]);
    }
    if (output["staticSourcesSupport"] !== undefined) {
        contents.StaticSourcesSupport = __expectString(output["staticSourcesSupport"]);
    }
    if (output["autoAcceptSharedAssociations"] !== undefined) {
        contents.AutoAcceptSharedAssociations = __expectString(output["autoAcceptSharedAssociations"]);
    }
    return contents;
};
const de_TransitGatewayMulticastGroup = (output, context) => {
    const contents = {};
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["groupMember"] !== undefined) {
        contents.GroupMember = __parseBoolean(output["groupMember"]);
    }
    if (output["groupSource"] !== undefined) {
        contents.GroupSource = __parseBoolean(output["groupSource"]);
    }
    if (output["memberType"] !== undefined) {
        contents.MemberType = __expectString(output["memberType"]);
    }
    if (output["sourceType"] !== undefined) {
        contents.SourceType = __expectString(output["sourceType"]);
    }
    return contents;
};
const de_TransitGatewayMulticastGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayMulticastGroup(entry, context);
    });
};
const de_TransitGatewayMulticastRegisteredGroupMembers = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.registeredNetworkInterfaceIds === "") {
        contents.RegisteredNetworkInterfaceIds = [];
    }
    else if (output["registeredNetworkInterfaceIds"] !== undefined &&
        output["registeredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.RegisteredNetworkInterfaceIds = de_ValueStringList(__getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
const de_TransitGatewayMulticastRegisteredGroupSources = (output, context) => {
    const contents = {};
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.registeredNetworkInterfaceIds === "") {
        contents.RegisteredNetworkInterfaceIds = [];
    }
    else if (output["registeredNetworkInterfaceIds"] !== undefined &&
        output["registeredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.RegisteredNetworkInterfaceIds = de_ValueStringList(__getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
const de_TransitGatewayOptions = (output, context) => {
    const contents = {};
    if (output["amazonSideAsn"] !== undefined) {
        contents.AmazonSideAsn = __strictParseLong(output["amazonSideAsn"]);
    }
    if (output.transitGatewayCidrBlocks === "") {
        contents.TransitGatewayCidrBlocks = [];
    }
    else if (output["transitGatewayCidrBlocks"] !== undefined &&
        output["transitGatewayCidrBlocks"]["item"] !== undefined) {
        contents.TransitGatewayCidrBlocks = de_ValueStringList(__getArrayIfSingleItem(output["transitGatewayCidrBlocks"]["item"]), context);
    }
    if (output["autoAcceptSharedAttachments"] !== undefined) {
        contents.AutoAcceptSharedAttachments = __expectString(output["autoAcceptSharedAttachments"]);
    }
    if (output["defaultRouteTableAssociation"] !== undefined) {
        contents.DefaultRouteTableAssociation = __expectString(output["defaultRouteTableAssociation"]);
    }
    if (output["associationDefaultRouteTableId"] !== undefined) {
        contents.AssociationDefaultRouteTableId = __expectString(output["associationDefaultRouteTableId"]);
    }
    if (output["defaultRouteTablePropagation"] !== undefined) {
        contents.DefaultRouteTablePropagation = __expectString(output["defaultRouteTablePropagation"]);
    }
    if (output["propagationDefaultRouteTableId"] !== undefined) {
        contents.PropagationDefaultRouteTableId = __expectString(output["propagationDefaultRouteTableId"]);
    }
    if (output["vpnEcmpSupport"] !== undefined) {
        contents.VpnEcmpSupport = __expectString(output["vpnEcmpSupport"]);
    }
    if (output["dnsSupport"] !== undefined) {
        contents.DnsSupport = __expectString(output["dnsSupport"]);
    }
    if (output["multicastSupport"] !== undefined) {
        contents.MulticastSupport = __expectString(output["multicastSupport"]);
    }
    return contents;
};
const de_TransitGatewayPeeringAttachment = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["accepterTransitGatewayAttachmentId"] !== undefined) {
        contents.AccepterTransitGatewayAttachmentId = __expectString(output["accepterTransitGatewayAttachmentId"]);
    }
    if (output["requesterTgwInfo"] !== undefined) {
        contents.RequesterTgwInfo = de_PeeringTgwInfo(output["requesterTgwInfo"], context);
    }
    if (output["accepterTgwInfo"] !== undefined) {
        contents.AccepterTgwInfo = de_PeeringTgwInfo(output["accepterTgwInfo"], context);
    }
    if (output["options"] !== undefined) {
        contents.Options = de_TransitGatewayPeeringAttachmentOptions(output["options"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_PeeringAttachmentStatus(output["status"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayPeeringAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPeeringAttachment(entry, context);
    });
};
const de_TransitGatewayPeeringAttachmentOptions = (output, context) => {
    const contents = {};
    if (output["dynamicRouting"] !== undefined) {
        contents.DynamicRouting = __expectString(output["dynamicRouting"]);
    }
    return contents;
};
const de_TransitGatewayPolicyRule = (output, context) => {
    const contents = {};
    if (output["sourceCidrBlock"] !== undefined) {
        contents.SourceCidrBlock = __expectString(output["sourceCidrBlock"]);
    }
    if (output["sourcePortRange"] !== undefined) {
        contents.SourcePortRange = __expectString(output["sourcePortRange"]);
    }
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["destinationPortRange"] !== undefined) {
        contents.DestinationPortRange = __expectString(output["destinationPortRange"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["metaData"] !== undefined) {
        contents.MetaData = de_TransitGatewayPolicyRuleMetaData(output["metaData"], context);
    }
    return contents;
};
const de_TransitGatewayPolicyRuleMetaData = (output, context) => {
    const contents = {};
    if (output["metaDataKey"] !== undefined) {
        contents.MetaDataKey = __expectString(output["metaDataKey"]);
    }
    if (output["metaDataValue"] !== undefined) {
        contents.MetaDataValue = __expectString(output["metaDataValue"]);
    }
    return contents;
};
const de_TransitGatewayPolicyTable = (output, context) => {
    const contents = {};
    if (output["transitGatewayPolicyTableId"] !== undefined) {
        contents.TransitGatewayPolicyTableId = __expectString(output["transitGatewayPolicyTableId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayPolicyTableAssociation = (output, context) => {
    const contents = {};
    if (output["transitGatewayPolicyTableId"] !== undefined) {
        contents.TransitGatewayPolicyTableId = __expectString(output["transitGatewayPolicyTableId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_TransitGatewayPolicyTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPolicyTableAssociation(entry, context);
    });
};
const de_TransitGatewayPolicyTableEntry = (output, context) => {
    const contents = {};
    if (output["policyRuleNumber"] !== undefined) {
        contents.PolicyRuleNumber = __expectString(output["policyRuleNumber"]);
    }
    if (output["policyRule"] !== undefined) {
        contents.PolicyRule = de_TransitGatewayPolicyRule(output["policyRule"], context);
    }
    if (output["targetRouteTableId"] !== undefined) {
        contents.TargetRouteTableId = __expectString(output["targetRouteTableId"]);
    }
    return contents;
};
const de_TransitGatewayPolicyTableEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPolicyTableEntry(entry, context);
    });
};
const de_TransitGatewayPolicyTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPolicyTable(entry, context);
    });
};
const de_TransitGatewayPrefixListAttachment = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    return contents;
};
const de_TransitGatewayPrefixListReference = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["prefixListOwnerId"] !== undefined) {
        contents.PrefixListOwnerId = __expectString(output["prefixListOwnerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["blackhole"] !== undefined) {
        contents.Blackhole = __parseBoolean(output["blackhole"]);
    }
    if (output["transitGatewayAttachment"] !== undefined) {
        contents.TransitGatewayAttachment = de_TransitGatewayPrefixListAttachment(output["transitGatewayAttachment"], context);
    }
    return contents;
};
const de_TransitGatewayPrefixListReferenceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPrefixListReference(entry, context);
    });
};
const de_TransitGatewayPropagation = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
        contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
    }
    return contents;
};
const de_TransitGatewayRoute = (output, context) => {
    const contents = {};
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
        contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
    }
    if (output.transitGatewayAttachments === "") {
        contents.TransitGatewayAttachments = [];
    }
    else if (output["transitGatewayAttachments"] !== undefined &&
        output["transitGatewayAttachments"]["item"] !== undefined) {
        contents.TransitGatewayAttachments = de_TransitGatewayRouteAttachmentList(__getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]), context);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_TransitGatewayRouteAttachment = (output, context) => {
    const contents = {};
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    return contents;
};
const de_TransitGatewayRouteAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteAttachment(entry, context);
    });
};
const de_TransitGatewayRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRoute(entry, context);
    });
};
const de_TransitGatewayRouteTable = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["defaultAssociationRouteTable"] !== undefined) {
        contents.DefaultAssociationRouteTable = __parseBoolean(output["defaultAssociationRouteTable"]);
    }
    if (output["defaultPropagationRouteTable"] !== undefined) {
        contents.DefaultPropagationRouteTable = __parseBoolean(output["defaultPropagationRouteTable"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayRouteTableAnnouncement = (output, context) => {
    const contents = {};
    if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
        contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["coreNetworkId"] !== undefined) {
        contents.CoreNetworkId = __expectString(output["coreNetworkId"]);
    }
    if (output["peerTransitGatewayId"] !== undefined) {
        contents.PeerTransitGatewayId = __expectString(output["peerTransitGatewayId"]);
    }
    if (output["peerCoreNetworkId"] !== undefined) {
        contents.PeerCoreNetworkId = __expectString(output["peerCoreNetworkId"]);
    }
    if (output["peeringAttachmentId"] !== undefined) {
        contents.PeeringAttachmentId = __expectString(output["peeringAttachmentId"]);
    }
    if (output["announcementDirection"] !== undefined) {
        contents.AnnouncementDirection = __expectString(output["announcementDirection"]);
    }
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayRouteTableAnnouncementList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTableAnnouncement(entry, context);
    });
};
const de_TransitGatewayRouteTableAssociation = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_TransitGatewayRouteTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTableAssociation(entry, context);
    });
};
const de_TransitGatewayRouteTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTable(entry, context);
    });
};
const de_TransitGatewayRouteTablePropagation = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
        contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
    }
    return contents;
};
const de_TransitGatewayRouteTablePropagationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTablePropagation(entry, context);
    });
};
const de_TransitGatewayRouteTableRoute = (output, context) => {
    const contents = {};
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["routeOrigin"] !== undefined) {
        contents.RouteOrigin = __expectString(output["routeOrigin"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    return contents;
};
const de_TransitGatewayVpcAttachment = (output, context) => {
    const contents = {};
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["vpcOwnerId"] !== undefined) {
        contents.VpcOwnerId = __expectString(output["vpcOwnerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.subnetIds === "") {
        contents.SubnetIds = [];
    }
    else if (output["subnetIds"] !== undefined && output["subnetIds"]["item"] !== undefined) {
        contents.SubnetIds = de_ValueStringList(__getArrayIfSingleItem(output["subnetIds"]["item"]), context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = de_TransitGatewayVpcAttachmentOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TransitGatewayVpcAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayVpcAttachment(entry, context);
    });
};
const de_TransitGatewayVpcAttachmentOptions = (output, context) => {
    const contents = {};
    if (output["dnsSupport"] !== undefined) {
        contents.DnsSupport = __expectString(output["dnsSupport"]);
    }
    if (output["ipv6Support"] !== undefined) {
        contents.Ipv6Support = __expectString(output["ipv6Support"]);
    }
    if (output["applianceModeSupport"] !== undefined) {
        contents.ApplianceModeSupport = __expectString(output["applianceModeSupport"]);
    }
    return contents;
};
const de_TrunkInterfaceAssociation = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["branchInterfaceId"] !== undefined) {
        contents.BranchInterfaceId = __expectString(output["branchInterfaceId"]);
    }
    if (output["trunkInterfaceId"] !== undefined) {
        contents.TrunkInterfaceId = __expectString(output["trunkInterfaceId"]);
    }
    if (output["interfaceProtocol"] !== undefined) {
        contents.InterfaceProtocol = __expectString(output["interfaceProtocol"]);
    }
    if (output["vlanId"] !== undefined) {
        contents.VlanId = __strictParseInt32(output["vlanId"]);
    }
    if (output["greKey"] !== undefined) {
        contents.GreKey = __strictParseInt32(output["greKey"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_TrunkInterfaceAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrunkInterfaceAssociation(entry, context);
    });
};
const de_TunnelOption = (output, context) => {
    const contents = {};
    if (output["outsideIpAddress"] !== undefined) {
        contents.OutsideIpAddress = __expectString(output["outsideIpAddress"]);
    }
    if (output["tunnelInsideCidr"] !== undefined) {
        contents.TunnelInsideCidr = __expectString(output["tunnelInsideCidr"]);
    }
    if (output["tunnelInsideIpv6Cidr"] !== undefined) {
        contents.TunnelInsideIpv6Cidr = __expectString(output["tunnelInsideIpv6Cidr"]);
    }
    if (output["preSharedKey"] !== undefined) {
        contents.PreSharedKey = __expectString(output["preSharedKey"]);
    }
    if (output["phase1LifetimeSeconds"] !== undefined) {
        contents.Phase1LifetimeSeconds = __strictParseInt32(output["phase1LifetimeSeconds"]);
    }
    if (output["phase2LifetimeSeconds"] !== undefined) {
        contents.Phase2LifetimeSeconds = __strictParseInt32(output["phase2LifetimeSeconds"]);
    }
    if (output["rekeyMarginTimeSeconds"] !== undefined) {
        contents.RekeyMarginTimeSeconds = __strictParseInt32(output["rekeyMarginTimeSeconds"]);
    }
    if (output["rekeyFuzzPercentage"] !== undefined) {
        contents.RekeyFuzzPercentage = __strictParseInt32(output["rekeyFuzzPercentage"]);
    }
    if (output["replayWindowSize"] !== undefined) {
        contents.ReplayWindowSize = __strictParseInt32(output["replayWindowSize"]);
    }
    if (output["dpdTimeoutSeconds"] !== undefined) {
        contents.DpdTimeoutSeconds = __strictParseInt32(output["dpdTimeoutSeconds"]);
    }
    if (output["dpdTimeoutAction"] !== undefined) {
        contents.DpdTimeoutAction = __expectString(output["dpdTimeoutAction"]);
    }
    if (output.phase1EncryptionAlgorithmSet === "") {
        contents.Phase1EncryptionAlgorithms = [];
    }
    else if (output["phase1EncryptionAlgorithmSet"] !== undefined &&
        output["phase1EncryptionAlgorithmSet"]["item"] !== undefined) {
        contents.Phase1EncryptionAlgorithms = de_Phase1EncryptionAlgorithmsList(__getArrayIfSingleItem(output["phase1EncryptionAlgorithmSet"]["item"]), context);
    }
    if (output.phase2EncryptionAlgorithmSet === "") {
        contents.Phase2EncryptionAlgorithms = [];
    }
    else if (output["phase2EncryptionAlgorithmSet"] !== undefined &&
        output["phase2EncryptionAlgorithmSet"]["item"] !== undefined) {
        contents.Phase2EncryptionAlgorithms = de_Phase2EncryptionAlgorithmsList(__getArrayIfSingleItem(output["phase2EncryptionAlgorithmSet"]["item"]), context);
    }
    if (output.phase1IntegrityAlgorithmSet === "") {
        contents.Phase1IntegrityAlgorithms = [];
    }
    else if (output["phase1IntegrityAlgorithmSet"] !== undefined &&
        output["phase1IntegrityAlgorithmSet"]["item"] !== undefined) {
        contents.Phase1IntegrityAlgorithms = de_Phase1IntegrityAlgorithmsList(__getArrayIfSingleItem(output["phase1IntegrityAlgorithmSet"]["item"]), context);
    }
    if (output.phase2IntegrityAlgorithmSet === "") {
        contents.Phase2IntegrityAlgorithms = [];
    }
    else if (output["phase2IntegrityAlgorithmSet"] !== undefined &&
        output["phase2IntegrityAlgorithmSet"]["item"] !== undefined) {
        contents.Phase2IntegrityAlgorithms = de_Phase2IntegrityAlgorithmsList(__getArrayIfSingleItem(output["phase2IntegrityAlgorithmSet"]["item"]), context);
    }
    if (output.phase1DHGroupNumberSet === "") {
        contents.Phase1DHGroupNumbers = [];
    }
    else if (output["phase1DHGroupNumberSet"] !== undefined && output["phase1DHGroupNumberSet"]["item"] !== undefined) {
        contents.Phase1DHGroupNumbers = de_Phase1DHGroupNumbersList(__getArrayIfSingleItem(output["phase1DHGroupNumberSet"]["item"]), context);
    }
    if (output.phase2DHGroupNumberSet === "") {
        contents.Phase2DHGroupNumbers = [];
    }
    else if (output["phase2DHGroupNumberSet"] !== undefined && output["phase2DHGroupNumberSet"]["item"] !== undefined) {
        contents.Phase2DHGroupNumbers = de_Phase2DHGroupNumbersList(__getArrayIfSingleItem(output["phase2DHGroupNumberSet"]["item"]), context);
    }
    if (output.ikeVersionSet === "") {
        contents.IkeVersions = [];
    }
    else if (output["ikeVersionSet"] !== undefined && output["ikeVersionSet"]["item"] !== undefined) {
        contents.IkeVersions = de_IKEVersionsList(__getArrayIfSingleItem(output["ikeVersionSet"]["item"]), context);
    }
    if (output["startupAction"] !== undefined) {
        contents.StartupAction = __expectString(output["startupAction"]);
    }
    if (output["logOptions"] !== undefined) {
        contents.LogOptions = de_VpnTunnelLogOptions(output["logOptions"], context);
    }
    if (output["enableTunnelLifecycleControl"] !== undefined) {
        contents.EnableTunnelLifecycleControl = __parseBoolean(output["enableTunnelLifecycleControl"]);
    }
    return contents;
};
const de_TunnelOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TunnelOption(entry, context);
    });
};
const de_UnassignIpv6AddressesResult = (output, context) => {
    const contents = {};
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output.unassignedIpv6Addresses === "") {
        contents.UnassignedIpv6Addresses = [];
    }
    else if (output["unassignedIpv6Addresses"] !== undefined &&
        output["unassignedIpv6Addresses"]["item"] !== undefined) {
        contents.UnassignedIpv6Addresses = de_Ipv6AddressList(__getArrayIfSingleItem(output["unassignedIpv6Addresses"]["item"]), context);
    }
    if (output.unassignedIpv6PrefixSet === "") {
        contents.UnassignedIpv6Prefixes = [];
    }
    else if (output["unassignedIpv6PrefixSet"] !== undefined &&
        output["unassignedIpv6PrefixSet"]["item"] !== undefined) {
        contents.UnassignedIpv6Prefixes = de_IpPrefixList(__getArrayIfSingleItem(output["unassignedIpv6PrefixSet"]["item"]), context);
    }
    return contents;
};
const de_UnassignPrivateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output.natGatewayAddressSet === "") {
        contents.NatGatewayAddresses = [];
    }
    else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
        contents.NatGatewayAddresses = de_NatGatewayAddressList(__getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]), context);
    }
    return contents;
};
const de_UnmonitorInstancesResult = (output, context) => {
    const contents = {};
    if (output.instancesSet === "") {
        contents.InstanceMonitorings = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.InstanceMonitorings = de_InstanceMonitoringList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const de_UnsuccessfulInstanceCreditSpecificationItem = (output, context) => {
    const contents = {};
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = de_UnsuccessfulInstanceCreditSpecificationItemError(output["error"], context);
    }
    return contents;
};
const de_UnsuccessfulInstanceCreditSpecificationItemError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_UnsuccessfulInstanceCreditSpecificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};
const de_UnsuccessfulItem = (output, context) => {
    const contents = {};
    if (output["error"] !== undefined) {
        contents.Error = de_UnsuccessfulItemError(output["error"], context);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    return contents;
};
const de_UnsuccessfulItemError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_UnsuccessfulItemList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulItem(entry, context);
    });
};
const de_UnsuccessfulItemSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulItem(entry, context);
    });
};
const de_UpdateSecurityGroupRuleDescriptionsEgressResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_UpdateSecurityGroupRuleDescriptionsIngressResult = (output, context) => {
    const contents = {};
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
const de_UsageClassTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_UserBucketDetails = (output, context) => {
    const contents = {};
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["s3Bucket"]);
    }
    if (output["s3Key"] !== undefined) {
        contents.S3Key = __expectString(output["s3Key"]);
    }
    return contents;
};
const de_UserIdGroupPair = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["peeringStatus"] !== undefined) {
        contents.PeeringStatus = __expectString(output["peeringStatus"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const de_UserIdGroupPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserIdGroupPair(entry, context);
    });
};
const de_UserIdGroupPairSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserIdGroupPair(entry, context);
    });
};
const de_ValidationError = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_ValidationWarning = (output, context) => {
    const contents = {};
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = de_ErrorSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
    }
    return contents;
};
const de_ValueStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_VCpuCountRange = (output, context) => {
    const contents = {};
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
const de_VCpuInfo = (output, context) => {
    const contents = {};
    if (output["defaultVCpus"] !== undefined) {
        contents.DefaultVCpus = __strictParseInt32(output["defaultVCpus"]);
    }
    if (output["defaultCores"] !== undefined) {
        contents.DefaultCores = __strictParseInt32(output["defaultCores"]);
    }
    if (output["defaultThreadsPerCore"] !== undefined) {
        contents.DefaultThreadsPerCore = __strictParseInt32(output["defaultThreadsPerCore"]);
    }
    if (output.validCores === "") {
        contents.ValidCores = [];
    }
    else if (output["validCores"] !== undefined && output["validCores"]["item"] !== undefined) {
        contents.ValidCores = de_CoreCountList(__getArrayIfSingleItem(output["validCores"]["item"]), context);
    }
    if (output.validThreadsPerCore === "") {
        contents.ValidThreadsPerCore = [];
    }
    else if (output["validThreadsPerCore"] !== undefined && output["validThreadsPerCore"]["item"] !== undefined) {
        contents.ValidThreadsPerCore = de_ThreadsPerCoreList(__getArrayIfSingleItem(output["validThreadsPerCore"]["item"]), context);
    }
    return contents;
};
const de_VerifiedAccessEndpoint = (output, context) => {
    const contents = {};
    if (output["verifiedAccessInstanceId"] !== undefined) {
        contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
    }
    if (output["verifiedAccessGroupId"] !== undefined) {
        contents.VerifiedAccessGroupId = __expectString(output["verifiedAccessGroupId"]);
    }
    if (output["verifiedAccessEndpointId"] !== undefined) {
        contents.VerifiedAccessEndpointId = __expectString(output["verifiedAccessEndpointId"]);
    }
    if (output["applicationDomain"] !== undefined) {
        contents.ApplicationDomain = __expectString(output["applicationDomain"]);
    }
    if (output["endpointType"] !== undefined) {
        contents.EndpointType = __expectString(output["endpointType"]);
    }
    if (output["attachmentType"] !== undefined) {
        contents.AttachmentType = __expectString(output["attachmentType"]);
    }
    if (output["domainCertificateArn"] !== undefined) {
        contents.DomainCertificateArn = __expectString(output["domainCertificateArn"]);
    }
    if (output["endpointDomain"] !== undefined) {
        contents.EndpointDomain = __expectString(output["endpointDomain"]);
    }
    if (output["deviceValidationDomain"] !== undefined) {
        contents.DeviceValidationDomain = __expectString(output["deviceValidationDomain"]);
    }
    if (output.securityGroupIdSet === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
        contents.SecurityGroupIds = de_SecurityGroupIdList(__getArrayIfSingleItem(output["securityGroupIdSet"]["item"]), context);
    }
    if (output["loadBalancerOptions"] !== undefined) {
        contents.LoadBalancerOptions = de_VerifiedAccessEndpointLoadBalancerOptions(output["loadBalancerOptions"], context);
    }
    if (output["networkInterfaceOptions"] !== undefined) {
        contents.NetworkInterfaceOptions = de_VerifiedAccessEndpointEniOptions(output["networkInterfaceOptions"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_VerifiedAccessEndpointStatus(output["status"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectString(output["creationTime"]);
    }
    if (output["lastUpdatedTime"] !== undefined) {
        contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
    }
    if (output["deletionTime"] !== undefined) {
        contents.DeletionTime = __expectString(output["deletionTime"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_VerifiedAccessEndpointEniOptions = (output, context) => {
    const contents = {};
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["port"] !== undefined) {
        contents.Port = __strictParseInt32(output["port"]);
    }
    return contents;
};
const de_VerifiedAccessEndpointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessEndpoint(entry, context);
    });
};
const de_VerifiedAccessEndpointLoadBalancerOptions = (output, context) => {
    const contents = {};
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["port"] !== undefined) {
        contents.Port = __strictParseInt32(output["port"]);
    }
    if (output["loadBalancerArn"] !== undefined) {
        contents.LoadBalancerArn = __expectString(output["loadBalancerArn"]);
    }
    if (output.subnetIdSet === "") {
        contents.SubnetIds = [];
    }
    else if (output["subnetIdSet"] !== undefined && output["subnetIdSet"]["item"] !== undefined) {
        contents.SubnetIds = de_VerifiedAccessEndpointSubnetIdList(__getArrayIfSingleItem(output["subnetIdSet"]["item"]), context);
    }
    return contents;
};
const de_VerifiedAccessEndpointStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_VerifiedAccessEndpointSubnetIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_VerifiedAccessGroup = (output, context) => {
    const contents = {};
    if (output["verifiedAccessGroupId"] !== undefined) {
        contents.VerifiedAccessGroupId = __expectString(output["verifiedAccessGroupId"]);
    }
    if (output["verifiedAccessInstanceId"] !== undefined) {
        contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["owner"] !== undefined) {
        contents.Owner = __expectString(output["owner"]);
    }
    if (output["verifiedAccessGroupArn"] !== undefined) {
        contents.VerifiedAccessGroupArn = __expectString(output["verifiedAccessGroupArn"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectString(output["creationTime"]);
    }
    if (output["lastUpdatedTime"] !== undefined) {
        contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
    }
    if (output["deletionTime"] !== undefined) {
        contents.DeletionTime = __expectString(output["deletionTime"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_VerifiedAccessGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessGroup(entry, context);
    });
};
const de_VerifiedAccessInstance = (output, context) => {
    const contents = {};
    if (output["verifiedAccessInstanceId"] !== undefined) {
        contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.verifiedAccessTrustProviderSet === "") {
        contents.VerifiedAccessTrustProviders = [];
    }
    else if (output["verifiedAccessTrustProviderSet"] !== undefined &&
        output["verifiedAccessTrustProviderSet"]["item"] !== undefined) {
        contents.VerifiedAccessTrustProviders = de_VerifiedAccessTrustProviderCondensedList(__getArrayIfSingleItem(output["verifiedAccessTrustProviderSet"]["item"]), context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectString(output["creationTime"]);
    }
    if (output["lastUpdatedTime"] !== undefined) {
        contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_VerifiedAccessInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessInstance(entry, context);
    });
};
const de_VerifiedAccessInstanceLoggingConfiguration = (output, context) => {
    const contents = {};
    if (output["verifiedAccessInstanceId"] !== undefined) {
        contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
    }
    if (output["accessLogs"] !== undefined) {
        contents.AccessLogs = de_VerifiedAccessLogs(output["accessLogs"], context);
    }
    return contents;
};
const de_VerifiedAccessInstanceLoggingConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessInstanceLoggingConfiguration(entry, context);
    });
};
const de_VerifiedAccessLogCloudWatchLogsDestination = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    if (output["deliveryStatus"] !== undefined) {
        contents.DeliveryStatus = de_VerifiedAccessLogDeliveryStatus(output["deliveryStatus"], context);
    }
    if (output["logGroup"] !== undefined) {
        contents.LogGroup = __expectString(output["logGroup"]);
    }
    return contents;
};
const de_VerifiedAccessLogDeliveryStatus = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_VerifiedAccessLogKinesisDataFirehoseDestination = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    if (output["deliveryStatus"] !== undefined) {
        contents.DeliveryStatus = de_VerifiedAccessLogDeliveryStatus(output["deliveryStatus"], context);
    }
    if (output["deliveryStream"] !== undefined) {
        contents.DeliveryStream = __expectString(output["deliveryStream"]);
    }
    return contents;
};
const de_VerifiedAccessLogs = (output, context) => {
    const contents = {};
    if (output["s3"] !== undefined) {
        contents.S3 = de_VerifiedAccessLogS3Destination(output["s3"], context);
    }
    if (output["cloudWatchLogs"] !== undefined) {
        contents.CloudWatchLogs = de_VerifiedAccessLogCloudWatchLogsDestination(output["cloudWatchLogs"], context);
    }
    if (output["kinesisDataFirehose"] !== undefined) {
        contents.KinesisDataFirehose = de_VerifiedAccessLogKinesisDataFirehoseDestination(output["kinesisDataFirehose"], context);
    }
    return contents;
};
const de_VerifiedAccessLogS3Destination = (output, context) => {
    const contents = {};
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    if (output["deliveryStatus"] !== undefined) {
        contents.DeliveryStatus = de_VerifiedAccessLogDeliveryStatus(output["deliveryStatus"], context);
    }
    if (output["bucketName"] !== undefined) {
        contents.BucketName = __expectString(output["bucketName"]);
    }
    if (output["prefix"] !== undefined) {
        contents.Prefix = __expectString(output["prefix"]);
    }
    if (output["bucketOwner"] !== undefined) {
        contents.BucketOwner = __expectString(output["bucketOwner"]);
    }
    return contents;
};
const de_VerifiedAccessTrustProvider = (output, context) => {
    const contents = {};
    if (output["verifiedAccessTrustProviderId"] !== undefined) {
        contents.VerifiedAccessTrustProviderId = __expectString(output["verifiedAccessTrustProviderId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["trustProviderType"] !== undefined) {
        contents.TrustProviderType = __expectString(output["trustProviderType"]);
    }
    if (output["userTrustProviderType"] !== undefined) {
        contents.UserTrustProviderType = __expectString(output["userTrustProviderType"]);
    }
    if (output["deviceTrustProviderType"] !== undefined) {
        contents.DeviceTrustProviderType = __expectString(output["deviceTrustProviderType"]);
    }
    if (output["oidcOptions"] !== undefined) {
        contents.OidcOptions = de_OidcOptions(output["oidcOptions"], context);
    }
    if (output["deviceOptions"] !== undefined) {
        contents.DeviceOptions = de_DeviceOptions(output["deviceOptions"], context);
    }
    if (output["policyReferenceName"] !== undefined) {
        contents.PolicyReferenceName = __expectString(output["policyReferenceName"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectString(output["creationTime"]);
    }
    if (output["lastUpdatedTime"] !== undefined) {
        contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_VerifiedAccessTrustProviderCondensed = (output, context) => {
    const contents = {};
    if (output["verifiedAccessTrustProviderId"] !== undefined) {
        contents.VerifiedAccessTrustProviderId = __expectString(output["verifiedAccessTrustProviderId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["trustProviderType"] !== undefined) {
        contents.TrustProviderType = __expectString(output["trustProviderType"]);
    }
    if (output["userTrustProviderType"] !== undefined) {
        contents.UserTrustProviderType = __expectString(output["userTrustProviderType"]);
    }
    if (output["deviceTrustProviderType"] !== undefined) {
        contents.DeviceTrustProviderType = __expectString(output["deviceTrustProviderType"]);
    }
    return contents;
};
const de_VerifiedAccessTrustProviderCondensedList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessTrustProviderCondensed(entry, context);
    });
};
const de_VerifiedAccessTrustProviderList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessTrustProvider(entry, context);
    });
};
const de_VgwTelemetry = (output, context) => {
    const contents = {};
    if (output["acceptedRouteCount"] !== undefined) {
        contents.AcceptedRouteCount = __strictParseInt32(output["acceptedRouteCount"]);
    }
    if (output["lastStatusChange"] !== undefined) {
        contents.LastStatusChange = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastStatusChange"]));
    }
    if (output["outsideIpAddress"] !== undefined) {
        contents.OutsideIpAddress = __expectString(output["outsideIpAddress"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["certificateArn"] !== undefined) {
        contents.CertificateArn = __expectString(output["certificateArn"]);
    }
    return contents;
};
const de_VgwTelemetryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VgwTelemetry(entry, context);
    });
};
const de_VirtualizationTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Volume = (output, context) => {
    const contents = {};
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = de_VolumeAttachmentList(__getArrayIfSingleItem(output["attachmentSet"]["item"]), context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = __strictParseInt32(output["size"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["iops"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = __expectString(output["volumeType"]);
    }
    if (output["fastRestored"] !== undefined) {
        contents.FastRestored = __parseBoolean(output["fastRestored"]);
    }
    if (output["multiAttachEnabled"] !== undefined) {
        contents.MultiAttachEnabled = __parseBoolean(output["multiAttachEnabled"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = __strictParseInt32(output["throughput"]);
    }
    return contents;
};
const de_VolumeAttachment = (output, context) => {
    const contents = {};
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
    }
    if (output["device"] !== undefined) {
        contents.Device = __expectString(output["device"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    return contents;
};
const de_VolumeAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeAttachment(entry, context);
    });
};
const de_VolumeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Volume(entry, context);
    });
};
const de_VolumeModification = (output, context) => {
    const contents = {};
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["modificationState"] !== undefined) {
        contents.ModificationState = __expectString(output["modificationState"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["targetSize"] !== undefined) {
        contents.TargetSize = __strictParseInt32(output["targetSize"]);
    }
    if (output["targetIops"] !== undefined) {
        contents.TargetIops = __strictParseInt32(output["targetIops"]);
    }
    if (output["targetVolumeType"] !== undefined) {
        contents.TargetVolumeType = __expectString(output["targetVolumeType"]);
    }
    if (output["targetThroughput"] !== undefined) {
        contents.TargetThroughput = __strictParseInt32(output["targetThroughput"]);
    }
    if (output["targetMultiAttachEnabled"] !== undefined) {
        contents.TargetMultiAttachEnabled = __parseBoolean(output["targetMultiAttachEnabled"]);
    }
    if (output["originalSize"] !== undefined) {
        contents.OriginalSize = __strictParseInt32(output["originalSize"]);
    }
    if (output["originalIops"] !== undefined) {
        contents.OriginalIops = __strictParseInt32(output["originalIops"]);
    }
    if (output["originalVolumeType"] !== undefined) {
        contents.OriginalVolumeType = __expectString(output["originalVolumeType"]);
    }
    if (output["originalThroughput"] !== undefined) {
        contents.OriginalThroughput = __strictParseInt32(output["originalThroughput"]);
    }
    if (output["originalMultiAttachEnabled"] !== undefined) {
        contents.OriginalMultiAttachEnabled = __parseBoolean(output["originalMultiAttachEnabled"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __strictParseLong(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
    }
    if (output["endTime"] !== undefined) {
        contents.EndTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endTime"]));
    }
    return contents;
};
const de_VolumeModificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeModification(entry, context);
    });
};
const de_VolumeStatusAction = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["eventId"] !== undefined) {
        contents.EventId = __expectString(output["eventId"]);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    return contents;
};
const de_VolumeStatusActionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusAction(entry, context);
    });
};
const de_VolumeStatusAttachmentStatus = (output, context) => {
    const contents = {};
    if (output["ioPerformance"] !== undefined) {
        contents.IoPerformance = __expectString(output["ioPerformance"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
const de_VolumeStatusAttachmentStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusAttachmentStatus(entry, context);
    });
};
const de_VolumeStatusDetails = (output, context) => {
    const contents = {};
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_VolumeStatusDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusDetails(entry, context);
    });
};
const de_VolumeStatusEvent = (output, context) => {
    const contents = {};
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["eventId"] !== undefined) {
        contents.EventId = __expectString(output["eventId"]);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    if (output["notAfter"] !== undefined) {
        contents.NotAfter = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notAfter"]));
    }
    if (output["notBefore"] !== undefined) {
        contents.NotBefore = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notBefore"]));
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
const de_VolumeStatusEventsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusEvent(entry, context);
    });
};
const de_VolumeStatusInfo = (output, context) => {
    const contents = {};
    if (output.details === "") {
        contents.Details = [];
    }
    else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
        contents.Details = de_VolumeStatusDetailsList(__getArrayIfSingleItem(output["details"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
const de_VolumeStatusItem = (output, context) => {
    const contents = {};
    if (output.actionsSet === "") {
        contents.Actions = [];
    }
    else if (output["actionsSet"] !== undefined && output["actionsSet"]["item"] !== undefined) {
        contents.Actions = de_VolumeStatusActionsList(__getArrayIfSingleItem(output["actionsSet"]["item"]), context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output.eventsSet === "") {
        contents.Events = [];
    }
    else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
        contents.Events = de_VolumeStatusEventsList(__getArrayIfSingleItem(output["eventsSet"]["item"]), context);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["volumeStatus"] !== undefined) {
        contents.VolumeStatus = de_VolumeStatusInfo(output["volumeStatus"], context);
    }
    if (output.attachmentStatuses === "") {
        contents.AttachmentStatuses = [];
    }
    else if (output["attachmentStatuses"] !== undefined && output["attachmentStatuses"]["item"] !== undefined) {
        contents.AttachmentStatuses = de_VolumeStatusAttachmentStatusList(__getArrayIfSingleItem(output["attachmentStatuses"]["item"]), context);
    }
    return contents;
};
const de_VolumeStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusItem(entry, context);
    });
};
const de_Vpc = (output, context) => {
    const contents = {};
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["dhcpOptionsId"] !== undefined) {
        contents.DhcpOptionsId = __expectString(output["dhcpOptionsId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
    }
    if (output.ipv6CidrBlockAssociationSet === "") {
        contents.Ipv6CidrBlockAssociationSet = [];
    }
    else if (output["ipv6CidrBlockAssociationSet"] !== undefined &&
        output["ipv6CidrBlockAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockAssociationSet = de_VpcIpv6CidrBlockAssociationSet(__getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]), context);
    }
    if (output.cidrBlockAssociationSet === "") {
        contents.CidrBlockAssociationSet = [];
    }
    else if (output["cidrBlockAssociationSet"] !== undefined &&
        output["cidrBlockAssociationSet"]["item"] !== undefined) {
        contents.CidrBlockAssociationSet = de_VpcCidrBlockAssociationSet(__getArrayIfSingleItem(output["cidrBlockAssociationSet"]["item"]), context);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["isDefault"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_VpcAttachment = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_VpcAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcAttachment(entry, context);
    });
};
const de_VpcCidrBlockAssociation = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["cidrBlockState"] !== undefined) {
        contents.CidrBlockState = de_VpcCidrBlockState(output["cidrBlockState"], context);
    }
    return contents;
};
const de_VpcCidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcCidrBlockAssociation(entry, context);
    });
};
const de_VpcCidrBlockState = (output, context) => {
    const contents = {};
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
const de_VpcClassicLink = (output, context) => {
    const contents = {};
    if (output["classicLinkEnabled"] !== undefined) {
        contents.ClassicLinkEnabled = __parseBoolean(output["classicLinkEnabled"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
const de_VpcClassicLinkList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcClassicLink(entry, context);
    });
};
const de_VpcEndpoint = (output, context) => {
    const contents = {};
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
    }
    if (output["vpcEndpointType"] !== undefined) {
        contents.VpcEndpointType = __expectString(output["vpcEndpointType"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["policyDocument"] !== undefined) {
        contents.PolicyDocument = __expectString(output["policyDocument"]);
    }
    if (output.routeTableIdSet === "") {
        contents.RouteTableIds = [];
    }
    else if (output["routeTableIdSet"] !== undefined && output["routeTableIdSet"]["item"] !== undefined) {
        contents.RouteTableIds = de_ValueStringList(__getArrayIfSingleItem(output["routeTableIdSet"]["item"]), context);
    }
    if (output.subnetIdSet === "") {
        contents.SubnetIds = [];
    }
    else if (output["subnetIdSet"] !== undefined && output["subnetIdSet"]["item"] !== undefined) {
        contents.SubnetIds = de_ValueStringList(__getArrayIfSingleItem(output["subnetIdSet"]["item"]), context);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = de_GroupIdentifierSet(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["ipAddressType"] !== undefined) {
        contents.IpAddressType = __expectString(output["ipAddressType"]);
    }
    if (output["dnsOptions"] !== undefined) {
        contents.DnsOptions = de_DnsOptions(output["dnsOptions"], context);
    }
    if (output["privateDnsEnabled"] !== undefined) {
        contents.PrivateDnsEnabled = __parseBoolean(output["privateDnsEnabled"]);
    }
    if (output["requesterManaged"] !== undefined) {
        contents.RequesterManaged = __parseBoolean(output["requesterManaged"]);
    }
    if (output.networkInterfaceIdSet === "") {
        contents.NetworkInterfaceIds = [];
    }
    else if (output["networkInterfaceIdSet"] !== undefined && output["networkInterfaceIdSet"]["item"] !== undefined) {
        contents.NetworkInterfaceIds = de_ValueStringList(__getArrayIfSingleItem(output["networkInterfaceIdSet"]["item"]), context);
    }
    if (output.dnsEntrySet === "") {
        contents.DnsEntries = [];
    }
    else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
        contents.DnsEntries = de_DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
    }
    if (output["creationTimestamp"] !== undefined) {
        contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTimestamp"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["lastError"] !== undefined) {
        contents.LastError = de_LastError(output["lastError"], context);
    }
    return contents;
};
const de_VpcEndpointConnection = (output, context) => {
    const contents = {};
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
    }
    if (output["vpcEndpointOwner"] !== undefined) {
        contents.VpcEndpointOwner = __expectString(output["vpcEndpointOwner"]);
    }
    if (output["vpcEndpointState"] !== undefined) {
        contents.VpcEndpointState = __expectString(output["vpcEndpointState"]);
    }
    if (output["creationTimestamp"] !== undefined) {
        contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTimestamp"]));
    }
    if (output.dnsEntrySet === "") {
        contents.DnsEntries = [];
    }
    else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
        contents.DnsEntries = de_DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
    }
    if (output.networkLoadBalancerArnSet === "") {
        contents.NetworkLoadBalancerArns = [];
    }
    else if (output["networkLoadBalancerArnSet"] !== undefined &&
        output["networkLoadBalancerArnSet"]["item"] !== undefined) {
        contents.NetworkLoadBalancerArns = de_ValueStringList(__getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]), context);
    }
    if (output.gatewayLoadBalancerArnSet === "") {
        contents.GatewayLoadBalancerArns = [];
    }
    else if (output["gatewayLoadBalancerArnSet"] !== undefined &&
        output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
        contents.GatewayLoadBalancerArns = de_ValueStringList(__getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]), context);
    }
    if (output["ipAddressType"] !== undefined) {
        contents.IpAddressType = __expectString(output["ipAddressType"]);
    }
    if (output["vpcEndpointConnectionId"] !== undefined) {
        contents.VpcEndpointConnectionId = __expectString(output["vpcEndpointConnectionId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_VpcEndpointConnectionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcEndpointConnection(entry, context);
    });
};
const de_VpcEndpointSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcEndpoint(entry, context);
    });
};
const de_VpcIpv6CidrBlockAssociation = (output, context) => {
    const contents = {};
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    if (output["ipv6CidrBlockState"] !== undefined) {
        contents.Ipv6CidrBlockState = de_VpcCidrBlockState(output["ipv6CidrBlockState"], context);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["ipv6Pool"] !== undefined) {
        contents.Ipv6Pool = __expectString(output["ipv6Pool"]);
    }
    return contents;
};
const de_VpcIpv6CidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcIpv6CidrBlockAssociation(entry, context);
    });
};
const de_VpcList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Vpc(entry, context);
    });
};
const de_VpcPeeringConnection = (output, context) => {
    const contents = {};
    if (output["accepterVpcInfo"] !== undefined) {
        contents.AccepterVpcInfo = de_VpcPeeringConnectionVpcInfo(output["accepterVpcInfo"], context);
    }
    if (output["expirationTime"] !== undefined) {
        contents.ExpirationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["expirationTime"]));
    }
    if (output["requesterVpcInfo"] !== undefined) {
        contents.RequesterVpcInfo = de_VpcPeeringConnectionVpcInfo(output["requesterVpcInfo"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = de_VpcPeeringConnectionStateReason(output["status"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const de_VpcPeeringConnectionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcPeeringConnection(entry, context);
    });
};
const de_VpcPeeringConnectionOptionsDescription = (output, context) => {
    const contents = {};
    if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
        contents.AllowDnsResolutionFromRemoteVpc = __parseBoolean(output["allowDnsResolutionFromRemoteVpc"]);
    }
    if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
        contents.AllowEgressFromLocalClassicLinkToRemoteVpc = __parseBoolean(output["allowEgressFromLocalClassicLinkToRemoteVpc"]);
    }
    if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
        contents.AllowEgressFromLocalVpcToRemoteClassicLink = __parseBoolean(output["allowEgressFromLocalVpcToRemoteClassicLink"]);
    }
    return contents;
};
const de_VpcPeeringConnectionStateReason = (output, context) => {
    const contents = {};
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
const de_VpcPeeringConnectionVpcInfo = (output, context) => {
    const contents = {};
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output.ipv6CidrBlockSet === "") {
        contents.Ipv6CidrBlockSet = [];
    }
    else if (output["ipv6CidrBlockSet"] !== undefined && output["ipv6CidrBlockSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockSet = de_Ipv6CidrBlockSet(__getArrayIfSingleItem(output["ipv6CidrBlockSet"]["item"]), context);
    }
    if (output.cidrBlockSet === "") {
        contents.CidrBlockSet = [];
    }
    else if (output["cidrBlockSet"] !== undefined && output["cidrBlockSet"]["item"] !== undefined) {
        contents.CidrBlockSet = de_CidrBlockSet(__getArrayIfSingleItem(output["cidrBlockSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["peeringOptions"] !== undefined) {
        contents.PeeringOptions = de_VpcPeeringConnectionOptionsDescription(output["peeringOptions"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["region"] !== undefined) {
        contents.Region = __expectString(output["region"]);
    }
    return contents;
};
const de_VpnConnection = (output, context) => {
    const contents = {};
    if (output["customerGatewayConfiguration"] !== undefined) {
        contents.CustomerGatewayConfiguration = __expectString(output["customerGatewayConfiguration"]);
    }
    if (output["customerGatewayId"] !== undefined) {
        contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
    }
    if (output["category"] !== undefined) {
        contents.Category = __expectString(output["category"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["vpnConnectionId"] !== undefined) {
        contents.VpnConnectionId = __expectString(output["vpnConnectionId"]);
    }
    if (output["vpnGatewayId"] !== undefined) {
        contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["coreNetworkArn"] !== undefined) {
        contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
    }
    if (output["coreNetworkAttachmentArn"] !== undefined) {
        contents.CoreNetworkAttachmentArn = __expectString(output["coreNetworkAttachmentArn"]);
    }
    if (output["gatewayAssociationState"] !== undefined) {
        contents.GatewayAssociationState = __expectString(output["gatewayAssociationState"]);
    }
    if (output["options"] !== undefined) {
        contents.Options = de_VpnConnectionOptions(output["options"], context);
    }
    if (output.routes === "") {
        contents.Routes = [];
    }
    else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
        contents.Routes = de_VpnStaticRouteList(__getArrayIfSingleItem(output["routes"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.vgwTelemetry === "") {
        contents.VgwTelemetry = [];
    }
    else if (output["vgwTelemetry"] !== undefined && output["vgwTelemetry"]["item"] !== undefined) {
        contents.VgwTelemetry = de_VgwTelemetryList(__getArrayIfSingleItem(output["vgwTelemetry"]["item"]), context);
    }
    return contents;
};
const de_VpnConnectionDeviceType = (output, context) => {
    const contents = {};
    if (output["vpnConnectionDeviceTypeId"] !== undefined) {
        contents.VpnConnectionDeviceTypeId = __expectString(output["vpnConnectionDeviceTypeId"]);
    }
    if (output["vendor"] !== undefined) {
        contents.Vendor = __expectString(output["vendor"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["software"] !== undefined) {
        contents.Software = __expectString(output["software"]);
    }
    return contents;
};
const de_VpnConnectionDeviceTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnConnectionDeviceType(entry, context);
    });
};
const de_VpnConnectionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnConnection(entry, context);
    });
};
const de_VpnConnectionOptions = (output, context) => {
    const contents = {};
    if (output["enableAcceleration"] !== undefined) {
        contents.EnableAcceleration = __parseBoolean(output["enableAcceleration"]);
    }
    if (output["staticRoutesOnly"] !== undefined) {
        contents.StaticRoutesOnly = __parseBoolean(output["staticRoutesOnly"]);
    }
    if (output["localIpv4NetworkCidr"] !== undefined) {
        contents.LocalIpv4NetworkCidr = __expectString(output["localIpv4NetworkCidr"]);
    }
    if (output["remoteIpv4NetworkCidr"] !== undefined) {
        contents.RemoteIpv4NetworkCidr = __expectString(output["remoteIpv4NetworkCidr"]);
    }
    if (output["localIpv6NetworkCidr"] !== undefined) {
        contents.LocalIpv6NetworkCidr = __expectString(output["localIpv6NetworkCidr"]);
    }
    if (output["remoteIpv6NetworkCidr"] !== undefined) {
        contents.RemoteIpv6NetworkCidr = __expectString(output["remoteIpv6NetworkCidr"]);
    }
    if (output["outsideIpAddressType"] !== undefined) {
        contents.OutsideIpAddressType = __expectString(output["outsideIpAddressType"]);
    }
    if (output["transportTransitGatewayAttachmentId"] !== undefined) {
        contents.TransportTransitGatewayAttachmentId = __expectString(output["transportTransitGatewayAttachmentId"]);
    }
    if (output["tunnelInsideIpVersion"] !== undefined) {
        contents.TunnelInsideIpVersion = __expectString(output["tunnelInsideIpVersion"]);
    }
    if (output.tunnelOptionSet === "") {
        contents.TunnelOptions = [];
    }
    else if (output["tunnelOptionSet"] !== undefined && output["tunnelOptionSet"]["item"] !== undefined) {
        contents.TunnelOptions = de_TunnelOptionsList(__getArrayIfSingleItem(output["tunnelOptionSet"]["item"]), context);
    }
    return contents;
};
const de_VpnGateway = (output, context) => {
    const contents = {};
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output.attachments === "") {
        contents.VpcAttachments = [];
    }
    else if (output["attachments"] !== undefined && output["attachments"]["item"] !== undefined) {
        contents.VpcAttachments = de_VpcAttachmentList(__getArrayIfSingleItem(output["attachments"]["item"]), context);
    }
    if (output["vpnGatewayId"] !== undefined) {
        contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
    }
    if (output["amazonSideAsn"] !== undefined) {
        contents.AmazonSideAsn = __strictParseLong(output["amazonSideAsn"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
const de_VpnGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnGateway(entry, context);
    });
};
const de_VpnStaticRoute = (output, context) => {
    const contents = {};
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["source"] !== undefined) {
        contents.Source = __expectString(output["source"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
const de_VpnStaticRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnStaticRoute(entry, context);
    });
};
const de_VpnTunnelLogOptions = (output, context) => {
    const contents = {};
    if (output["cloudWatchLogOptions"] !== undefined) {
        contents.CloudWatchLogOptions = de_CloudWatchLogOptions(output["cloudWatchLogOptions"], context);
    }
    return contents;
};
const de_WithdrawByoipCidrResult = (output, context) => {
    const contents = {};
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");
const loadEc2ErrorCode = (output, data) => {
    if (data.Errors.Error?.Code !== undefined) {
        return data.Errors.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
