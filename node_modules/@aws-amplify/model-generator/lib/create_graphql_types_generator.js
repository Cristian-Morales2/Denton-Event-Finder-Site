import { AppSyncClient } from '@aws-sdk/client-appsync';
import { BackendOutputClientFactory, } from '@aws-amplify/deployed-backend-client';
import { graphqlOutputKey } from '@aws-amplify/backend-output-schemas';
import { AppsyncGraphqlGenerationResult } from './appsync_graphql_generation_result.js';
import { AppSyncIntrospectionSchemaFetcher } from './appsync_schema_fetcher.js';
import { AppSyncGraphqlTypesGenerator } from './graphql_types_generator.js';
/**
 * Factory function to compose a model generator
 */
export const createGraphqlTypesGenerator = ({ backendIdentifier, awsClientProvider, }) => {
    if (!backendIdentifier) {
        throw new Error('`backendIdentifier` must be defined');
    }
    if (!awsClientProvider) {
        throw new Error('`awsClientProvider` must be defined');
    }
    const fetchSchema = async () => {
        const backendOutputClient = BackendOutputClientFactory.getInstance(awsClientProvider);
        const output = await backendOutputClient.getOutput(backendIdentifier);
        const apiId = output[graphqlOutputKey]?.payload.awsAppsyncApiId;
        if (!apiId) {
            throw new Error(`Unable to determine AppSync API ID.`);
        }
        return new AppSyncIntrospectionSchemaFetcher(new AppSyncClient()).fetch(apiId);
    };
    return new AppSyncGraphqlTypesGenerator(fetchSchema, (fileMap) => new AppsyncGraphqlGenerationResult(fileMap));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2dyYXBocWxfdHlwZXNfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZV9ncmFwaHFsX3R5cGVzX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUNMLDBCQUEwQixHQUUzQixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBYzVFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxFQUMxQyxpQkFBaUIsRUFDakIsaUJBQWlCLEdBQ2tCLEVBQXlCLEVBQUU7SUFDOUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1FBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUN4RDtJQUNELElBQUksQ0FBQyxpQkFBaUIsRUFBRTtRQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDeEQ7SUFFRCxNQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksRUFBRTtRQUM3QixNQUFNLG1CQUFtQixHQUN2QiwwQkFBMEIsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM1RCxNQUFNLE1BQU0sR0FBRyxNQUFNLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7UUFDaEUsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztTQUN4RDtRQUVELE9BQU8sSUFBSSxpQ0FBaUMsQ0FBQyxJQUFJLGFBQWEsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUNyRSxLQUFLLENBQ04sQ0FBQztJQUNKLENBQUMsQ0FBQztJQUNGLE9BQU8sSUFBSSw0QkFBNEIsQ0FDckMsV0FBVyxFQUNYLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLDhCQUE4QixDQUFDLE9BQU8sQ0FBQyxDQUN6RCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwU3luY0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hcHBzeW5jJztcbmltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LFxuICBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvZGVwbG95ZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgZ3JhcGhxbE91dHB1dEtleSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcbmltcG9ydCB7IEFwcHN5bmNHcmFwaHFsR2VuZXJhdGlvblJlc3VsdCB9IGZyb20gJy4vYXBwc3luY19ncmFwaHFsX2dlbmVyYXRpb25fcmVzdWx0LmpzJztcbmltcG9ydCB7IEFwcFN5bmNJbnRyb3NwZWN0aW9uU2NoZW1hRmV0Y2hlciB9IGZyb20gJy4vYXBwc3luY19zY2hlbWFfZmV0Y2hlci5qcyc7XG5pbXBvcnQgeyBBcHBTeW5jR3JhcGhxbFR5cGVzR2VuZXJhdG9yIH0gZnJvbSAnLi9ncmFwaHFsX3R5cGVzX2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBHcmFwaHFsVHlwZXNHZW5lcmF0b3IgfSBmcm9tICcuL21vZGVsX2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBBV1NDbGllbnRQcm92aWRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcblxuZXhwb3J0IHR5cGUgR3JhcGhxbFR5cGVzR2VuZXJhdG9yRmFjdG9yeVBhcmFtcyA9IHtcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXI7XG4gIGF3c0NsaWVudFByb3ZpZGVyOiBBV1NDbGllbnRQcm92aWRlcjx7XG4gICAgZ2V0QW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudDtcbiAgICBnZXRDbG91ZEZvcm1hdGlvbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQ7XG4gIH0+O1xufTtcblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNvbXBvc2UgYSBtb2RlbCBnZW5lcmF0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUdyYXBocWxUeXBlc0dlbmVyYXRvciA9ICh7XG4gIGJhY2tlbmRJZGVudGlmaWVyLFxuICBhd3NDbGllbnRQcm92aWRlcixcbn06IEdyYXBocWxUeXBlc0dlbmVyYXRvckZhY3RvcnlQYXJhbXMpOiBHcmFwaHFsVHlwZXNHZW5lcmF0b3IgPT4ge1xuICBpZiAoIWJhY2tlbmRJZGVudGlmaWVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgYmFja2VuZElkZW50aWZpZXJgIG11c3QgYmUgZGVmaW5lZCcpO1xuICB9XG4gIGlmICghYXdzQ2xpZW50UHJvdmlkZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bhd3NDbGllbnRQcm92aWRlcmAgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cblxuICBjb25zdCBmZXRjaFNjaGVtYSA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBiYWNrZW5kT3V0cHV0Q2xpZW50ID1cbiAgICAgIEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LmdldEluc3RhbmNlKGF3c0NsaWVudFByb3ZpZGVyKTtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBiYWNrZW5kT3V0cHV0Q2xpZW50LmdldE91dHB1dChiYWNrZW5kSWRlbnRpZmllcik7XG4gICAgY29uc3QgYXBpSWQgPSBvdXRwdXRbZ3JhcGhxbE91dHB1dEtleV0/LnBheWxvYWQuYXdzQXBwc3luY0FwaUlkO1xuICAgIGlmICghYXBpSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGRldGVybWluZSBBcHBTeW5jIEFQSSBJRC5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFwcFN5bmNJbnRyb3NwZWN0aW9uU2NoZW1hRmV0Y2hlcihuZXcgQXBwU3luY0NsaWVudCgpKS5mZXRjaChcbiAgICAgIGFwaUlkXG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIG5ldyBBcHBTeW5jR3JhcGhxbFR5cGVzR2VuZXJhdG9yKFxuICAgIGZldGNoU2NoZW1hLFxuICAgIChmaWxlTWFwKSA9PiBuZXcgQXBwc3luY0dyYXBocWxHZW5lcmF0aW9uUmVzdWx0KGZpbGVNYXApXG4gICk7XG59O1xuIl19