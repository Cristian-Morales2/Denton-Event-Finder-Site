import { generateModels } from '@aws-amplify/graphql-generator';
/**
 * Generates GraphQL types for a given AppSync API
 */
export class StackMetadataGraphqlModelsGenerator {
    fetchSchema;
    resultBuilder;
    /**
     * Configures the AppSyncGraphqlTypesGenerator
     */
    constructor(fetchSchema, resultBuilder) {
        this.fetchSchema = fetchSchema;
        this.resultBuilder = resultBuilder;
    }
    generateModels = async ({ target, generateIndexRules, emitAuthProvider, useExperimentalPipelinedTransformer, transformerVersion, respectPrimaryKeyAttributesOnConnectionField, generateModelsForLazyLoadAndCustomSelectionSet, addTimestampFields, handleListNullabilityTransparently, }) => {
        const schema = await this.fetchSchema();
        if (!schema) {
            throw new Error('Invalid schema');
        }
        const generatedModels = await generateModels({
            schema,
            target,
            generateIndexRules,
            emitAuthProvider,
            useExperimentalPipelinedTransformer,
            transformerVersion,
            respectPrimaryKeyAttributesOnConnectionField,
            generateModelsForLazyLoadAndCustomSelectionSet,
            addTimestampFields,
            handleListNullabilityTransparently,
        });
        return this.resultBuilder(generatedModels);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9tb2RlbHNfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dyYXBocWxfbW9kZWxzX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFPaEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBT3BDO0lBQ0E7SUFMVjs7T0FFRztJQUNILFlBQ1UsV0FBa0MsRUFDbEMsYUFBb0U7UUFEcEUsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUF1RDtJQUMzRSxDQUFDO0lBRUosY0FBYyxHQUFHLEtBQUssRUFBRSxFQUN0QixNQUFNLEVBQ04sa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixtQ0FBbUMsRUFDbkMsa0JBQWtCLEVBQ2xCLDRDQUE0QyxFQUM1Qyw4Q0FBOEMsRUFDOUMsa0JBQWtCLEVBQ2xCLGtDQUFrQyxHQUNQLEVBQUUsRUFBRTtRQUMvQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ25DO1FBRUQsTUFBTSxlQUFlLEdBQUcsTUFBTSxjQUFjLENBQUM7WUFDM0MsTUFBTTtZQUNOLE1BQU07WUFDTixrQkFBa0I7WUFDbEIsZ0JBQWdCO1lBQ2hCLG1DQUFtQztZQUNuQyxrQkFBa0I7WUFDbEIsNENBQTRDO1lBQzVDLDhDQUE4QztZQUM5QyxrQkFBa0I7WUFDbEIsa0NBQWtDO1NBQ25DLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbmVyYXRlTW9kZWxzIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2dyYXBocWwtZ2VuZXJhdG9yJztcbmltcG9ydCB7XG4gIEdlbmVyYXRpb25SZXN1bHQsXG4gIEdyYXBocWxNb2RlbHNHZW5lcmF0b3IsXG4gIE1vZGVsc0dlbmVyYXRpb25QYXJhbWV0ZXJzLFxufSBmcm9tICcuL21vZGVsX2dlbmVyYXRvci5qcyc7XG5cbi8qKlxuICogR2VuZXJhdGVzIEdyYXBoUUwgdHlwZXMgZm9yIGEgZ2l2ZW4gQXBwU3luYyBBUElcbiAqL1xuZXhwb3J0IGNsYXNzIFN0YWNrTWV0YWRhdGFHcmFwaHFsTW9kZWxzR2VuZXJhdG9yXG4gIGltcGxlbWVudHMgR3JhcGhxbE1vZGVsc0dlbmVyYXRvclxue1xuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUgQXBwU3luY0dyYXBocWxUeXBlc0dlbmVyYXRvclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBmZXRjaFNjaGVtYTogKCkgPT4gUHJvbWlzZTxzdHJpbmc+LFxuICAgIHByaXZhdGUgcmVzdWx0QnVpbGRlcjogKGZpbGVNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IEdlbmVyYXRpb25SZXN1bHRcbiAgKSB7fVxuXG4gIGdlbmVyYXRlTW9kZWxzID0gYXN5bmMgKHtcbiAgICB0YXJnZXQsXG4gICAgZ2VuZXJhdGVJbmRleFJ1bGVzLFxuICAgIGVtaXRBdXRoUHJvdmlkZXIsXG4gICAgdXNlRXhwZXJpbWVudGFsUGlwZWxpbmVkVHJhbnNmb3JtZXIsXG4gICAgdHJhbnNmb3JtZXJWZXJzaW9uLFxuICAgIHJlc3BlY3RQcmltYXJ5S2V5QXR0cmlidXRlc09uQ29ubmVjdGlvbkZpZWxkLFxuICAgIGdlbmVyYXRlTW9kZWxzRm9yTGF6eUxvYWRBbmRDdXN0b21TZWxlY3Rpb25TZXQsXG4gICAgYWRkVGltZXN0YW1wRmllbGRzLFxuICAgIGhhbmRsZUxpc3ROdWxsYWJpbGl0eVRyYW5zcGFyZW50bHksXG4gIH06IE1vZGVsc0dlbmVyYXRpb25QYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgdGhpcy5mZXRjaFNjaGVtYSgpO1xuXG4gICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzY2hlbWEnKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZW5lcmF0ZWRNb2RlbHMgPSBhd2FpdCBnZW5lcmF0ZU1vZGVscyh7XG4gICAgICBzY2hlbWEsXG4gICAgICB0YXJnZXQsXG4gICAgICBnZW5lcmF0ZUluZGV4UnVsZXMsXG4gICAgICBlbWl0QXV0aFByb3ZpZGVyLFxuICAgICAgdXNlRXhwZXJpbWVudGFsUGlwZWxpbmVkVHJhbnNmb3JtZXIsXG4gICAgICB0cmFuc2Zvcm1lclZlcnNpb24sXG4gICAgICByZXNwZWN0UHJpbWFyeUtleUF0dHJpYnV0ZXNPbkNvbm5lY3Rpb25GaWVsZCxcbiAgICAgIGdlbmVyYXRlTW9kZWxzRm9yTGF6eUxvYWRBbmRDdXN0b21TZWxlY3Rpb25TZXQsXG4gICAgICBhZGRUaW1lc3RhbXBGaWVsZHMsXG4gICAgICBoYW5kbGVMaXN0TnVsbGFiaWxpdHlUcmFuc3BhcmVudGx5LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMucmVzdWx0QnVpbGRlcihnZW5lcmF0ZWRNb2RlbHMpO1xuICB9O1xufVxuIl19