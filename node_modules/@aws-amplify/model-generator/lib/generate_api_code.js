import { createGraphqlModelsGenerator } from './create_graphql_models_generator.js';
import { createGraphqlTypesGenerator } from './create_graphql_types_generator.js';
import { createGraphqlDocumentGenerator } from './create_graphql_document_generator.js';
import { getOutputFileName } from '@aws-amplify/graphql-types-generator';
import path from 'path';
export var GenerateApiCodeFormat;
(function (GenerateApiCodeFormat) {
    GenerateApiCodeFormat["MODELGEN"] = "modelgen";
    GenerateApiCodeFormat["GRAPHQL_CODEGEN"] = "graphql-codegen";
    GenerateApiCodeFormat["INTROSPECTION"] = "introspection";
})(GenerateApiCodeFormat || (GenerateApiCodeFormat = {}));
export var GenerateApiCodeModelTarget;
(function (GenerateApiCodeModelTarget) {
    GenerateApiCodeModelTarget["JAVA"] = "java";
    GenerateApiCodeModelTarget["SWIFT"] = "swift";
    GenerateApiCodeModelTarget["JAVASCRIPT"] = "javascript";
    GenerateApiCodeModelTarget["TYPESCRIPT"] = "typescript";
    GenerateApiCodeModelTarget["DART"] = "dart";
})(GenerateApiCodeModelTarget || (GenerateApiCodeModelTarget = {}));
export var GenerateApiCodeStatementTarget;
(function (GenerateApiCodeStatementTarget) {
    GenerateApiCodeStatementTarget["JAVASCRIPT"] = "javascript";
    GenerateApiCodeStatementTarget["GRAPHQL"] = "graphql";
    GenerateApiCodeStatementTarget["FLOW"] = "flow";
    GenerateApiCodeStatementTarget["TYPESCRIPT"] = "typescript";
    GenerateApiCodeStatementTarget["ANGULAR"] = "angular";
})(GenerateApiCodeStatementTarget || (GenerateApiCodeStatementTarget = {}));
export var GenerateApiCodeTypeTarget;
(function (GenerateApiCodeTypeTarget) {
    GenerateApiCodeTypeTarget["JSON"] = "json";
    GenerateApiCodeTypeTarget["SWIFT"] = "swift";
    GenerateApiCodeTypeTarget["TYPESCRIPT"] = "typescript";
    GenerateApiCodeTypeTarget["FLOW"] = "flow";
    GenerateApiCodeTypeTarget["SCALA"] = "scala";
    GenerateApiCodeTypeTarget["FLOW_MODERN"] = "flow-modern";
    GenerateApiCodeTypeTarget["ANGULAR"] = "angular";
})(GenerateApiCodeTypeTarget || (GenerateApiCodeTypeTarget = {}));
/**
 * Generate api code using Api Code Generator with default generators.
 */
export const generateApiCode = async (props) => {
    const backendIdentifier = props;
    return new ApiCodeGenerator(createGraphqlDocumentGenerator({
        backendIdentifier,
        awsClientProvider: props.awsClientProvider,
    }), createGraphqlTypesGenerator({
        backendIdentifier,
        awsClientProvider: props.awsClientProvider,
    }), createGraphqlModelsGenerator({
        backendIdentifier,
        awsClientProvider: props.awsClientProvider,
    })).generate(props);
};
/**
 * Generator for Api Code resources.
 */
export class ApiCodeGenerator {
    graphqlDocumentGenerator;
    graphqlTypesGenerator;
    graphqlModelsGenerator;
    /**
     * Construct generator, passing in nested generators.
     * @param graphqlDocumentGenerator the graphql document generator
     * @param graphqlTypesGenerator the type generator
     * @param graphqlModelsGenerator the model object generator
     */
    constructor(graphqlDocumentGenerator, graphqlTypesGenerator, graphqlModelsGenerator) {
        this.graphqlDocumentGenerator = graphqlDocumentGenerator;
        this.graphqlTypesGenerator = graphqlTypesGenerator;
        this.graphqlModelsGenerator = graphqlModelsGenerator;
    }
    /**
     * Execute the generation.
     * @param props the required generate options.
     * @returns a promise with the generation results
     */
    generate(props) {
        switch (props.format) {
            case 'graphql-codegen': {
                return this.generateGraphqlCodegenApiCode(props);
            }
            case 'modelgen': {
                return this.generateModelgenApiCode(props);
            }
            case 'introspection': {
                return this.generateIntrospectionApiCode();
            }
            default:
                throw new Error(`${props.format} is not a supported format.`);
        }
    }
    /**
     * Execute document, and optionally type generation with relevant targets, wiring through types into statements if possible.
     */
    async generateGraphqlCodegenApiCode(props) {
        const generateModelsParams = {
            targetFormat: props.statementTarget,
            maxDepth: props.maxDepth,
            typenameIntrospection: props.typeNameIntrospection,
        };
        if (props.statementTarget === GenerateApiCodeStatementTarget.TYPESCRIPT &&
            props.typeTarget === GenerateApiCodeTypeTarget.TYPESCRIPT) {
            // Cast to unknown to string since the original input to this is typed as a required string, but expects an optional
            // value, and we want to rely on that behavior.
            const typeOutputFilepath = getOutputFileName(null, props.typeTarget);
            const fileName = path.parse(typeOutputFilepath).name;
            // This is an node import path, so we don't want to use path.join, since that'll produce invalid paths on windows platforms
            // Hard-coding since this method explicitly writes to the same directory if types are enabled.
            generateModelsParams.relativeTypesPath = `./${fileName}`;
        }
        const documents = await this.graphqlDocumentGenerator.generateModels(generateModelsParams);
        if (props.typeTarget) {
            const types = await this.graphqlTypesGenerator.generateTypes({
                target: props.typeTarget,
                multipleSwiftFiles: props.multipleSwiftFiles,
                maxDepth: props.maxDepth,
                typenameIntrospection: props.typeNameIntrospection,
            });
            return {
                writeToDirectory: async (directoryPath) => {
                    const filesWritten = [];
                    const { filesWritten: documentsFilesWritten } = await documents.writeToDirectory(directoryPath);
                    const { filesWritten: typesFilesWritten } = await types.writeToDirectory(directoryPath);
                    filesWritten.push(...documentsFilesWritten, ...typesFilesWritten);
                    return {
                        filesWritten,
                    };
                },
                getResults: async () => ({
                    ...(await documents.getResults()),
                    ...(await types.getResults()),
                }),
            };
        }
        return documents;
    }
    /**
     * Execute model generation with model target.
     */
    async generateModelgenApiCode(props) {
        return this.graphqlModelsGenerator.generateModels({
            target: props.modelTarget,
            generateIndexRules: props.generateIndexRules,
            emitAuthProvider: props.emitAuthProvider,
            useExperimentalPipelinedTransformer: props.useExperimentalPipelinedTransformer,
            transformerVersion: props.transformerVersion,
            respectPrimaryKeyAttributesOnConnectionField: props.respectPrimaryKeyAttributesOnConnectionField,
            generateModelsForLazyLoadAndCustomSelectionSet: props.generateModelsForLazyLoadAndCustomSelectionSet,
            addTimestampFields: props.addTimestampFields,
            handleListNullabilityTransparently: props.handleListNullabilityTransparently,
        });
    }
    /**
     * Execute model generation with introspection target.
     */
    async generateIntrospectionApiCode() {
        return this.graphqlModelsGenerator.generateModels({
            target: 'introspection',
        });
    }
}
//# sourceMappingURL=data:application/json;base64,