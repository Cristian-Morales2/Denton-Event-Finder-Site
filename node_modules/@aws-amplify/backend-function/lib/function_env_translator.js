import { Arn, Lazy, Stack } from 'aws-cdk-lib';
import { Effect, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Translates function environment props into appropriate environment records and builds a policy statement
 * in order to resolve secrets in environment props.
 */
export class FunctionEnvironmentTranslator {
    lambda;
    functionEnvironmentProp;
    backendSecretResolver;
    functionEnvironmentTypeGenerator;
    ssmPaths = [];
    ssmEnvVars = {};
    amplifySsmEnvConfigKey = 'AMPLIFY_SSM_ENV_CONFIG';
    ssmValuePlaceholderText = '<value will be resolved during runtime>';
    // List of environment variable names for typed shim generation
    amplifyBackendEnvVarNames = [];
    /**
     * Initialize translated environment variable records
     */
    constructor(lambda, // we need to use a specific type here so that we have all the method goodies
    functionEnvironmentProp, backendSecretResolver, functionEnvironmentTypeGenerator) {
        this.lambda = lambda;
        this.functionEnvironmentProp = functionEnvironmentProp;
        this.backendSecretResolver = backendSecretResolver;
        this.functionEnvironmentTypeGenerator = functionEnvironmentTypeGenerator;
        for (const [key, value] of Object.entries(this.functionEnvironmentProp)) {
            if (key === this.amplifySsmEnvConfigKey) {
                throw new Error(`${this.amplifySsmEnvConfigKey} is a reserved environment variable name`);
            }
            if (typeof value === 'undefined') {
                throw new AmplifyUserError('InvalidFunctionConfiguration', {
                    message: `The value of environment variable ${key} is undefined.`,
                    resolution: `Ensure that all defineFunction environment variables are defined.`,
                });
            }
            else if (typeof value === 'string') {
                this.lambda.addEnvironment(key, value);
            }
            else {
                const { branchSecretPath, sharedSecretPath } = this.backendSecretResolver.resolvePath(value);
                this.lambda.addEnvironment(key, this.ssmValuePlaceholderText);
                this.ssmEnvVars[branchSecretPath] = {
                    name: key,
                    sharedPath: sharedSecretPath,
                };
                this.ssmPaths.push(branchSecretPath, sharedSecretPath);
            }
            this.amplifyBackendEnvVarNames.push(key);
        }
        // add an environment variable for ssm parameter metadata that is resolved after initialization but before synth is finalized
        this.lambda.addEnvironment(this.amplifySsmEnvConfigKey, Lazy.string({
            produce: () => JSON.stringify(this.ssmEnvVars),
        }));
        this.lambda.node.addValidation({
            validate: () => {
                // only add the ssm access policy if there are ssm paths
                if (this.ssmPaths.length > 0) {
                    const ssmAccessPolicy = new PolicyStatement({
                        effect: Effect.ALLOW,
                        actions: ['ssm:GetParameters'],
                        resources: this.ssmPaths
                            .map((path) => (path.startsWith('/') ? path.slice(1) : path)) // the Arn formatter will add a leading slash between the resource and resourceName
                            .map((path) => Arn.format({
                            service: 'ssm',
                            resource: 'parameter',
                            resourceName: path,
                        }, Stack.of(this.lambda))),
                    });
                    this.lambda.grantPrincipal.addToPrincipalPolicy(ssmAccessPolicy);
                }
                return [];
            },
        });
        // Using CDK validation mechanism as a way to generate a typed process.env shim file at the end of synthesis
        this.lambda.node.addValidation({
            validate: () => {
                this.functionEnvironmentTypeGenerator.generateTypedProcessEnvShim(this.amplifyBackendEnvVarNames);
                return [];
            },
        });
    }
    /**
     * Adds an environment variable to the lambda whose value will be fetched from SSM at runtime
     * @param name The environment variable name
     * @param ssmPath The SSM path where the value is stored
     */
    addSsmEnvironmentEntry = (name, ssmPath) => {
        this.lambda.addEnvironment(name, this.ssmValuePlaceholderText);
        this.ssmPaths.push(ssmPath);
        this.ssmEnvVars[ssmPath] = { name };
        this.amplifyBackendEnvVarNames.push(name);
    };
}
//# sourceMappingURL=data:application/json;base64,