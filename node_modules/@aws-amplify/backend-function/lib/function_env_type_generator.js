import fs from 'fs';
import { staticEnvironmentVariables } from './static_env_types.js';
import path from 'path';
import { EOL } from 'os';
/**
 * Generates a typed process.env shim for environment variables
 */
export class FunctionEnvironmentTypeGenerator {
    functionName;
    header = '// This file is auto-generated by Amplify. Edits will be overwritten.';
    // The variable gets updated when the fully typed file is updated.
    envAssignment = 'export const env = process.env';
    typeDefFilePath;
    /**
     * Initialize typed process.env shim file name and location
     */
    constructor(functionName) {
        this.functionName = functionName;
        this.typeDefFilePath = `${process.cwd()}/.amplify/generated/env/${this.functionName}.ts`;
    }
    /**
     * Generate a typed process.env shim
     */
    generateTypedProcessEnvShim(amplifyBackendEnvVars) {
        const lambdaEnvVarTypeName = 'LambdaProvidedEnvVars';
        const amplifyBackendEnvVarTypeName = 'AmplifyBackendEnvVars';
        const declarations = [];
        // Add Lambda runtime environment variables to the typed shim
        declarations.push(`/** Lambda runtime environment variables, see https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime */`);
        declarations.push(`type ${lambdaEnvVarTypeName} = {`);
        for (const key in staticEnvironmentVariables) {
            const comment = `/** ${staticEnvironmentVariables[key]} */`;
            const declaration = `${key}: string;`;
            declarations.push(comment + EOL + declaration + EOL);
        }
        declarations.push(`};${EOL}`);
        /**
         * Add Amplify backend environment variables to the typed shim which can be either of the following:
         * 1. Defined by the customer passing env vars to the environment parameter for defineFunction
         * 2. Defined by resource access mechanisms
         */
        declarations.push(`/** Amplify backend environment variables available at runtime, this includes environment variables defined in \`defineFunction\` and by cross resource mechanisms */`);
        declarations.push(`type ${amplifyBackendEnvVarTypeName} = {`);
        amplifyBackendEnvVars.forEach((envName) => {
            const declaration = `${envName}: string;`;
            declarations.push(declaration);
        });
        declarations.push(`};${EOL}`);
        const content = `${this.header}${EOL}${this.envAssignment} as ${lambdaEnvVarTypeName} & ${amplifyBackendEnvVarTypeName};${EOL}${EOL}${declarations.join(EOL)}`;
        this.writeShimFile(content);
    }
    /**
     * Generate an any-typed process.env shim if doesn't exist
     */
    generateProcessEnvShim = () => {
        // Create an "any" typed variable while creating the initial file to keep TSC happy
        // in case the synth fails and doesn't generate the typed shim.
        // We run TSC regardless after the synth to show more relevant TS errors and this prevents showing env related type errors.
        const content = `${this.header}${EOL}${this.envAssignment} as any;`;
        this.writeShimFile(content);
    };
    writeShimFile = (content) => {
        const typeDefFileDirname = path.dirname(this.typeDefFilePath);
        if (!fs.existsSync(typeDefFileDirname)) {
            fs.mkdirSync(typeDefFileDirname, { recursive: true });
        }
        fs.writeFileSync(this.typeDefFilePath, content);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fZW52X3R5cGVfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Z1bmN0aW9uX2Vudl90eXBlX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFekI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0NBQWdDO0lBWWQ7SUFYWixNQUFNLEdBQ3JCLHVFQUF1RSxDQUFDO0lBRTFFLGtFQUFrRTtJQUNqRCxhQUFhLEdBQUcsZ0NBQWdDLENBQUM7SUFFMUQsZUFBZSxDQUFTO0lBRWhDOztPQUVHO0lBQ0gsWUFBNkIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDL0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsMkJBQ3JDLElBQUksQ0FBQyxZQUNQLEtBQUssQ0FBQztJQUNSLENBQUM7SUFFRDs7T0FFRztJQUNILDJCQUEyQixDQUFDLHFCQUErQjtRQUN6RCxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO1FBQ3JELE1BQU0sNEJBQTRCLEdBQUcsdUJBQXVCLENBQUM7UUFFN0QsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXhCLDZEQUE2RDtRQUM3RCxZQUFZLENBQUMsSUFBSSxDQUNmLHdKQUF3SixDQUN6SixDQUFDO1FBQ0YsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLG9CQUFvQixNQUFNLENBQUMsQ0FBQztRQUN0RCxLQUFLLE1BQU0sR0FBRyxJQUFJLDBCQUEwQixFQUFFO1lBQzVDLE1BQU0sT0FBTyxHQUFHLE9BQU8sMEJBQTBCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUM1RCxNQUFNLFdBQVcsR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDO1lBRXRDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxXQUFXLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDdEQ7UUFDRCxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztRQUU5Qjs7OztXQUlHO1FBQ0gsWUFBWSxDQUFDLElBQUksQ0FDZix1S0FBdUssQ0FDeEssQ0FBQztRQUNGLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSw0QkFBNEIsTUFBTSxDQUFDLENBQUM7UUFDOUQscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxXQUFXLEdBQUcsR0FBRyxPQUFPLFdBQVcsQ0FBQztZQUUxQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFOUIsTUFBTSxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FDbEMsSUFBSSxDQUFDLGFBQ1AsT0FBTyxvQkFBb0IsTUFBTSw0QkFBNEIsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQzVGLEdBQUcsQ0FDSixFQUFFLENBQUM7UUFFSixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNILHNCQUFzQixHQUFHLEdBQUcsRUFBRTtRQUM1QixtRkFBbUY7UUFDbkYsK0RBQStEO1FBQy9ELDJIQUEySDtRQUMzSCxNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLFVBQVUsQ0FBQztRQUNwRSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQztJQUVNLGFBQWEsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO1FBQzFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUN0QyxFQUFFLENBQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDdkQ7UUFFRCxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgc3RhdGljRW52aXJvbm1lbnRWYXJpYWJsZXMgfSBmcm9tICcuL3N0YXRpY19lbnZfdHlwZXMuanMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgdHlwZWQgcHJvY2Vzcy5lbnYgc2hpbSBmb3IgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKi9cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbkVudmlyb25tZW50VHlwZUdlbmVyYXRvciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGVhZGVyID1cbiAgICAnLy8gVGhpcyBmaWxlIGlzIGF1dG8tZ2VuZXJhdGVkIGJ5IEFtcGxpZnkuIEVkaXRzIHdpbGwgYmUgb3ZlcndyaXR0ZW4uJztcblxuICAvLyBUaGUgdmFyaWFibGUgZ2V0cyB1cGRhdGVkIHdoZW4gdGhlIGZ1bGx5IHR5cGVkIGZpbGUgaXMgdXBkYXRlZC5cbiAgcHJpdmF0ZSByZWFkb25seSBlbnZBc3NpZ25tZW50ID0gJ2V4cG9ydCBjb25zdCBlbnYgPSBwcm9jZXNzLmVudic7XG5cbiAgcHJpdmF0ZSB0eXBlRGVmRmlsZVBhdGg6IHN0cmluZztcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0eXBlZCBwcm9jZXNzLmVudiBzaGltIGZpbGUgbmFtZSBhbmQgbG9jYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZnVuY3Rpb25OYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLnR5cGVEZWZGaWxlUGF0aCA9IGAke3Byb2Nlc3MuY3dkKCl9Ly5hbXBsaWZ5L2dlbmVyYXRlZC9lbnYvJHtcbiAgICAgIHRoaXMuZnVuY3Rpb25OYW1lXG4gICAgfS50c2A7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB0eXBlZCBwcm9jZXNzLmVudiBzaGltXG4gICAqL1xuICBnZW5lcmF0ZVR5cGVkUHJvY2Vzc0VudlNoaW0oYW1wbGlmeUJhY2tlbmRFbnZWYXJzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGxhbWJkYUVudlZhclR5cGVOYW1lID0gJ0xhbWJkYVByb3ZpZGVkRW52VmFycyc7XG4gICAgY29uc3QgYW1wbGlmeUJhY2tlbmRFbnZWYXJUeXBlTmFtZSA9ICdBbXBsaWZ5QmFja2VuZEVudlZhcnMnO1xuXG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gW107XG5cbiAgICAvLyBBZGQgTGFtYmRhIHJ1bnRpbWUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSB0eXBlZCBzaGltXG4gICAgZGVjbGFyYXRpb25zLnB1c2goXG4gICAgICBgLyoqIExhbWJkYSBydW50aW1lIGVudmlyb25tZW50IHZhcmlhYmxlcywgc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9sYW1iZGEvbGF0ZXN0L2RnL2NvbmZpZ3VyYXRpb24tZW52dmFycy5odG1sI2NvbmZpZ3VyYXRpb24tZW52dmFycy1ydW50aW1lICovYFxuICAgICk7XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYHR5cGUgJHtsYW1iZGFFbnZWYXJUeXBlTmFtZX0gPSB7YCk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3RhdGljRW52aXJvbm1lbnRWYXJpYWJsZXMpIHtcbiAgICAgIGNvbnN0IGNvbW1lbnQgPSBgLyoqICR7c3RhdGljRW52aXJvbm1lbnRWYXJpYWJsZXNba2V5XX0gKi9gO1xuICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSBgJHtrZXl9OiBzdHJpbmc7YDtcblxuICAgICAgZGVjbGFyYXRpb25zLnB1c2goY29tbWVudCArIEVPTCArIGRlY2xhcmF0aW9uICsgRU9MKTtcbiAgICB9XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYH07JHtFT0x9YCk7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgQW1wbGlmeSBiYWNrZW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byB0aGUgdHlwZWQgc2hpbSB3aGljaCBjYW4gYmUgZWl0aGVyIG9mIHRoZSBmb2xsb3dpbmc6XG4gICAgICogMS4gRGVmaW5lZCBieSB0aGUgY3VzdG9tZXIgcGFzc2luZyBlbnYgdmFycyB0byB0aGUgZW52aXJvbm1lbnQgcGFyYW1ldGVyIGZvciBkZWZpbmVGdW5jdGlvblxuICAgICAqIDIuIERlZmluZWQgYnkgcmVzb3VyY2UgYWNjZXNzIG1lY2hhbmlzbXNcbiAgICAgKi9cbiAgICBkZWNsYXJhdGlvbnMucHVzaChcbiAgICAgIGAvKiogQW1wbGlmeSBiYWNrZW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyBhdmFpbGFibGUgYXQgcnVudGltZSwgdGhpcyBpbmNsdWRlcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZGVmaW5lZCBpbiBcXGBkZWZpbmVGdW5jdGlvblxcYCBhbmQgYnkgY3Jvc3MgcmVzb3VyY2UgbWVjaGFuaXNtcyAqL2BcbiAgICApO1xuICAgIGRlY2xhcmF0aW9ucy5wdXNoKGB0eXBlICR7YW1wbGlmeUJhY2tlbmRFbnZWYXJUeXBlTmFtZX0gPSB7YCk7XG4gICAgYW1wbGlmeUJhY2tlbmRFbnZWYXJzLmZvckVhY2goKGVudk5hbWUpID0+IHtcbiAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gYCR7ZW52TmFtZX06IHN0cmluZztgO1xuXG4gICAgICBkZWNsYXJhdGlvbnMucHVzaChkZWNsYXJhdGlvbik7XG4gICAgfSk7XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYH07JHtFT0x9YCk7XG5cbiAgICBjb25zdCBjb250ZW50ID0gYCR7dGhpcy5oZWFkZXJ9JHtFT0x9JHtcbiAgICAgIHRoaXMuZW52QXNzaWdubWVudFxuICAgIH0gYXMgJHtsYW1iZGFFbnZWYXJUeXBlTmFtZX0gJiAke2FtcGxpZnlCYWNrZW5kRW52VmFyVHlwZU5hbWV9OyR7RU9MfSR7RU9MfSR7ZGVjbGFyYXRpb25zLmpvaW4oXG4gICAgICBFT0xcbiAgICApfWA7XG5cbiAgICB0aGlzLndyaXRlU2hpbUZpbGUoY29udGVudCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYW4gYW55LXR5cGVkIHByb2Nlc3MuZW52IHNoaW0gaWYgZG9lc24ndCBleGlzdFxuICAgKi9cbiAgZ2VuZXJhdGVQcm9jZXNzRW52U2hpbSA9ICgpID0+IHtcbiAgICAvLyBDcmVhdGUgYW4gXCJhbnlcIiB0eXBlZCB2YXJpYWJsZSB3aGlsZSBjcmVhdGluZyB0aGUgaW5pdGlhbCBmaWxlIHRvIGtlZXAgVFNDIGhhcHB5XG4gICAgLy8gaW4gY2FzZSB0aGUgc3ludGggZmFpbHMgYW5kIGRvZXNuJ3QgZ2VuZXJhdGUgdGhlIHR5cGVkIHNoaW0uXG4gICAgLy8gV2UgcnVuIFRTQyByZWdhcmRsZXNzIGFmdGVyIHRoZSBzeW50aCB0byBzaG93IG1vcmUgcmVsZXZhbnQgVFMgZXJyb3JzIGFuZCB0aGlzIHByZXZlbnRzIHNob3dpbmcgZW52IHJlbGF0ZWQgdHlwZSBlcnJvcnMuXG4gICAgY29uc3QgY29udGVudCA9IGAke3RoaXMuaGVhZGVyfSR7RU9MfSR7dGhpcy5lbnZBc3NpZ25tZW50fSBhcyBhbnk7YDtcbiAgICB0aGlzLndyaXRlU2hpbUZpbGUoY29udGVudCk7XG4gIH07XG5cbiAgcHJpdmF0ZSB3cml0ZVNoaW1GaWxlID0gKGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHR5cGVEZWZGaWxlRGlybmFtZSA9IHBhdGguZGlybmFtZSh0aGlzLnR5cGVEZWZGaWxlUGF0aCk7XG5cbiAgICBpZiAoIWZzLmV4aXN0c1N5bmModHlwZURlZkZpbGVEaXJuYW1lKSkge1xuICAgICAgZnMubWtkaXJTeW5jKHR5cGVEZWZGaWxlRGlybmFtZSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgZnMud3JpdGVGaWxlU3luYyh0aGlzLnR5cGVEZWZGaWxlUGF0aCwgY29udGVudCk7XG4gIH07XG59XG4iXX0=