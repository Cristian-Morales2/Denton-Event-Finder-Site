"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackMetadataBackendOutputStorageStrategy = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Implementation of BackendOutputStorageStrategy that stores config data in stack metadata and outputs
 */
class StackMetadataBackendOutputStorageStrategy {
    stack;
    lazyListValueMap = new Map();
    /**
     * Initialize the instance with a stack.
     *
     * If the stack is an AmplifyStack, set a parameter in SSM so the stack can be identified later by the project environment
     */
    constructor(stack) {
        this.stack = stack;
    }
    /**
     * Store construct output as stack output and add metadata to the metadata object.
     */
    addBackendOutputEntry = (keyName, backendOutputEntry) => {
        // add all the data values as stack outputs
        Object.entries(backendOutputEntry.payload).forEach(([key, value]) => {
            new aws_cdk_lib_1.CfnOutput(this.stack, key, { value });
        });
        this.stack.addMetadata(keyName, {
            version: backendOutputEntry.version,
            stackOutputs: Object.keys(backendOutputEntry.payload),
        });
    };
    /**
     * Lazily construct and append to output list as stack output and add metadata to the metadata object.
     */
    appendToBackendOutputList = (keyName, backendOutputEntry) => {
        const version = backendOutputEntry.version;
        let listsMap = this.lazyListValueMap.get(keyName);
        const metadata = this.stack.templateOptions.metadata || {};
        const existingMetadataEntry = metadata[keyName];
        if (existingMetadataEntry) {
            if (existingMetadataEntry.version !== version) {
                throw new Error(`Metadata entry for ${keyName} at version ${existingMetadataEntry.version} already exists. Cannot add another entry for the same key at version ${version}.`);
            }
        }
        else {
            this.stack.addMetadata(keyName, {
                version,
                stackOutputs: aws_cdk_lib_1.Lazy.list({
                    produce: () => Array.from(listsMap ? listsMap.keys() : []),
                }),
            });
        }
        Object.entries(backendOutputEntry.payload).forEach(([listName, value]) => {
            if (!listsMap) {
                listsMap = new Map();
                this.lazyListValueMap.set(keyName, listsMap);
            }
            let outputList = listsMap.get(listName);
            if (outputList) {
                outputList.push(value);
            }
            else {
                outputList = [value];
                listsMap.set(listName, outputList);
                new aws_cdk_lib_1.CfnOutput(this.stack, listName, {
                    value: aws_cdk_lib_1.Lazy.string({ produce: () => JSON.stringify(outputList) }),
                });
            }
        });
    };
}
exports.StackMetadataBackendOutputStorageStrategy = StackMetadataBackendOutputStorageStrategy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2tfbWV0YWRhdGFfb3V0cHV0X3N0b3JhZ2Vfc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhY2tfbWV0YWRhdGFfb3V0cHV0X3N0b3JhZ2Vfc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsNkNBQXFEO0FBTXJEOztHQUVHO0FBQ0gsTUFBYSx5Q0FBeUM7SUFXdkI7SUFSckIsZ0JBQWdCLEdBQ3RCLElBQUksR0FBRyxFQUFFLENBQUM7SUFFWjs7OztPQUlHO0lBQ0gsWUFBNkIsS0FBWTtRQUFaLFVBQUssR0FBTCxLQUFLLENBQU87SUFBRyxDQUFDO0lBRTdDOztPQUVHO0lBQ0gscUJBQXFCLEdBQUcsQ0FDdEIsT0FBZSxFQUNmLGtCQUFzQyxFQUNoQyxFQUFFO1FBQ1IsMkNBQTJDO1FBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNsRSxJQUFJLHVCQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO1lBQzlCLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxPQUFPO1lBQ25DLFlBQVksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztTQUN0RCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILHlCQUF5QixHQUFHLENBQzFCLE9BQWUsRUFDZixrQkFBc0MsRUFDaEMsRUFBRTtRQUNSLE1BQU0sT0FBTyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztRQUMzQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWxELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7UUFDM0QsTUFBTSxxQkFBcUIsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEQsSUFBSSxxQkFBcUIsRUFBRTtZQUN6QixJQUFJLHFCQUFxQixDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7Z0JBQzdDLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0JBQXNCLE9BQU8sZUFBZSxxQkFBcUIsQ0FBQyxPQUFPLHlFQUF5RSxPQUFPLEdBQUcsQ0FDN0osQ0FBQzthQUNIO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRTtnQkFDOUIsT0FBTztnQkFDUCxZQUFZLEVBQUUsa0JBQUksQ0FBQyxJQUFJLENBQUM7b0JBQ3RCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQzNELENBQUM7YUFDSCxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUN2RSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNiLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQzthQUM5QztZQUNELElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFeEMsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4QjtpQkFBTTtnQkFDTCxVQUFVLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDckIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBRW5DLElBQUksdUJBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtvQkFDbEMsS0FBSyxFQUFFLGtCQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztpQkFDbEUsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIO0FBOUVELDhGQThFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRFbnRyeSxcbiAgQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBDZm5PdXRwdXQsIExhenksIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuXG4vLyBBbGlhc2VkIHN0cmluZ3MgZm9yIHJlYWRhYmlsaXR5XG50eXBlIE1ldGFkYXRhS2V5ID0gc3RyaW5nO1xudHlwZSBPdXRwdXRLZXkgPSBzdHJpbmc7XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSB0aGF0IHN0b3JlcyBjb25maWcgZGF0YSBpbiBzdGFjayBtZXRhZGF0YSBhbmQgb3V0cHV0c1xuICovXG5leHBvcnQgY2xhc3MgU3RhY2tNZXRhZGF0YUJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3lcbiAgaW1wbGVtZW50cyBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PEJhY2tlbmRPdXRwdXRFbnRyeT5cbntcbiAgcHJpdmF0ZSBsYXp5TGlzdFZhbHVlTWFwOiBNYXA8TWV0YWRhdGFLZXksIE1hcDxPdXRwdXRLZXksIHN0cmluZ1tdPj4gPVxuICAgIG5ldyBNYXAoKTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgaW5zdGFuY2Ugd2l0aCBhIHN0YWNrLlxuICAgKlxuICAgKiBJZiB0aGUgc3RhY2sgaXMgYW4gQW1wbGlmeVN0YWNrLCBzZXQgYSBwYXJhbWV0ZXIgaW4gU1NNIHNvIHRoZSBzdGFjayBjYW4gYmUgaWRlbnRpZmllZCBsYXRlciBieSB0aGUgcHJvamVjdCBlbnZpcm9ubWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdGFjazogU3RhY2spIHt9XG5cbiAgLyoqXG4gICAqIFN0b3JlIGNvbnN0cnVjdCBvdXRwdXQgYXMgc3RhY2sgb3V0cHV0IGFuZCBhZGQgbWV0YWRhdGEgdG8gdGhlIG1ldGFkYXRhIG9iamVjdC5cbiAgICovXG4gIGFkZEJhY2tlbmRPdXRwdXRFbnRyeSA9IChcbiAgICBrZXlOYW1lOiBzdHJpbmcsXG4gICAgYmFja2VuZE91dHB1dEVudHJ5OiBCYWNrZW5kT3V0cHV0RW50cnlcbiAgKTogdm9pZCA9PiB7XG4gICAgLy8gYWRkIGFsbCB0aGUgZGF0YSB2YWx1ZXMgYXMgc3RhY2sgb3V0cHV0c1xuICAgIE9iamVjdC5lbnRyaWVzKGJhY2tlbmRPdXRwdXRFbnRyeS5wYXlsb2FkKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIG5ldyBDZm5PdXRwdXQodGhpcy5zdGFjaywga2V5LCB7IHZhbHVlIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGFjay5hZGRNZXRhZGF0YShrZXlOYW1lLCB7XG4gICAgICB2ZXJzaW9uOiBiYWNrZW5kT3V0cHV0RW50cnkudmVyc2lvbixcbiAgICAgIHN0YWNrT3V0cHV0czogT2JqZWN0LmtleXMoYmFja2VuZE91dHB1dEVudHJ5LnBheWxvYWQpLFxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBMYXppbHkgY29uc3RydWN0IGFuZCBhcHBlbmQgdG8gb3V0cHV0IGxpc3QgYXMgc3RhY2sgb3V0cHV0IGFuZCBhZGQgbWV0YWRhdGEgdG8gdGhlIG1ldGFkYXRhIG9iamVjdC5cbiAgICovXG4gIGFwcGVuZFRvQmFja2VuZE91dHB1dExpc3QgPSAoXG4gICAga2V5TmFtZTogc3RyaW5nLFxuICAgIGJhY2tlbmRPdXRwdXRFbnRyeTogQmFja2VuZE91dHB1dEVudHJ5XG4gICk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHZlcnNpb24gPSBiYWNrZW5kT3V0cHV0RW50cnkudmVyc2lvbjtcbiAgICBsZXQgbGlzdHNNYXAgPSB0aGlzLmxhenlMaXN0VmFsdWVNYXAuZ2V0KGtleU5hbWUpO1xuXG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLnN0YWNrLnRlbXBsYXRlT3B0aW9ucy5tZXRhZGF0YSB8fCB7fTtcbiAgICBjb25zdCBleGlzdGluZ01ldGFkYXRhRW50cnkgPSBtZXRhZGF0YVtrZXlOYW1lXTtcblxuICAgIGlmIChleGlzdGluZ01ldGFkYXRhRW50cnkpIHtcbiAgICAgIGlmIChleGlzdGluZ01ldGFkYXRhRW50cnkudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYE1ldGFkYXRhIGVudHJ5IGZvciAke2tleU5hbWV9IGF0IHZlcnNpb24gJHtleGlzdGluZ01ldGFkYXRhRW50cnkudmVyc2lvbn0gYWxyZWFkeSBleGlzdHMuIENhbm5vdCBhZGQgYW5vdGhlciBlbnRyeSBmb3IgdGhlIHNhbWUga2V5IGF0IHZlcnNpb24gJHt2ZXJzaW9ufS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhY2suYWRkTWV0YWRhdGEoa2V5TmFtZSwge1xuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICBzdGFja091dHB1dHM6IExhenkubGlzdCh7XG4gICAgICAgICAgcHJvZHVjZTogKCkgPT4gQXJyYXkuZnJvbShsaXN0c01hcCA/IGxpc3RzTWFwLmtleXMoKSA6IFtdKSxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPYmplY3QuZW50cmllcyhiYWNrZW5kT3V0cHV0RW50cnkucGF5bG9hZCkuZm9yRWFjaCgoW2xpc3ROYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICghbGlzdHNNYXApIHtcbiAgICAgICAgbGlzdHNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMubGF6eUxpc3RWYWx1ZU1hcC5zZXQoa2V5TmFtZSwgbGlzdHNNYXApO1xuICAgICAgfVxuICAgICAgbGV0IG91dHB1dExpc3QgPSBsaXN0c01hcC5nZXQobGlzdE5hbWUpO1xuXG4gICAgICBpZiAob3V0cHV0TGlzdCkge1xuICAgICAgICBvdXRwdXRMaXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0TGlzdCA9IFt2YWx1ZV07XG4gICAgICAgIGxpc3RzTWFwLnNldChsaXN0TmFtZSwgb3V0cHV0TGlzdCk7XG5cbiAgICAgICAgbmV3IENmbk91dHB1dCh0aGlzLnN0YWNrLCBsaXN0TmFtZSwge1xuICAgICAgICAgIHZhbHVlOiBMYXp5LnN0cmluZyh7IHByb2R1Y2U6ICgpID0+IEpTT04uc3RyaW5naWZ5KG91dHB1dExpc3QpIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==