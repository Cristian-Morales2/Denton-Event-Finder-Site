import debounce from 'debounce-promise';
import { SecretError } from '@aws-amplify/backend-secret';
import { LogLevel } from '@aws-amplify/cli-core';
import { AmplifyFault, AmplifyUserError } from '@aws-amplify/platform-core';
import { SSMServiceException } from '@aws-sdk/client-ssm';
/**
 * Execute CDK commands.
 */
export class AmplifySandboxExecutor {
    backendDeployer;
    secretClient;
    printer;
    /**
     * Function that invokes the callback with debounce.
     * Debounce is needed in case multiple duplicate events are received.
     */
    invoke = debounce(async (callback) => await callback(), 100);
    /**
     * Creates an AmplifySandboxExecutor instance
     */
    constructor(backendDeployer, secretClient, printer) {
        this.backendDeployer = backendDeployer;
        this.secretClient = secretClient;
        this.printer = printer;
    }
    /**
     * Deploys sandbox
     */
    deploy = async (backendId, validateAppSourcesProvider) => {
        this.printer.log('[Sandbox] Executing command `deploy`', LogLevel.DEBUG);
        const secretLastUpdated = await this.getSecretLastUpdated(backendId);
        return this.invoke(() => {
            // it's important to get information here so that information
            // doesn't get lost while debouncing
            const validateAppSources = validateAppSourcesProvider();
            return this.backendDeployer.deploy(backendId, {
                secretLastUpdated,
                validateAppSources,
            });
        });
    };
    /**
     * Destroy sandbox. Do not swallow errors
     */
    destroy = (backendId) => {
        this.printer.log('[Sandbox] Executing command `destroy`', LogLevel.DEBUG);
        return this.invoke(() => this.backendDeployer.destroy(backendId));
    };
    getSecretLastUpdated = async (backendId) => {
        let secrets = undefined;
        try {
            secrets = await this.secretClient.listSecrets(backendId);
        }
        catch (err) {
            if (err instanceof SecretError &&
                err.cause &&
                err.cause instanceof SSMServiceException) {
                if (err.cause.name === 'ExpiredTokenException') {
                    throw new AmplifyUserError('SecretsExpiredTokenError', {
                        message: 'Fetching the list of secrets failed due to expired tokens',
                        resolution: 'Please refresh your credentials and try again',
                    }, err);
                }
            }
            throw new AmplifyFault('ListSecretsFailedFault', {
                message: 'Fetching the list of secrets failed',
            }, err);
        }
        let latestTimestamp = -1;
        let secretLastUpdate;
        secrets.forEach((secret) => {
            if (!secret.lastUpdated) {
                return;
            }
            const curTimeStamp = secret.lastUpdated.getTime();
            if (curTimeStamp > 0 && curTimeStamp > latestTimestamp) {
                latestTimestamp = curTimeStamp;
                secretLastUpdate = secret.lastUpdated;
            }
        });
        return secretLastUpdate;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGtCQUFrQixDQUFDO0FBT3hDLE9BQU8sRUFBZ0IsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEUsT0FBTyxFQUFFLFFBQVEsRUFBVyxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFnQmQ7SUFDQTtJQUNBO0lBakJuQjs7O09BR0c7SUFDSyxNQUFNLEdBQUcsUUFBUSxDQUN2QixLQUFLLEVBQ0gsUUFBcUQsRUFDZCxFQUFFLENBQUMsTUFBTSxRQUFRLEVBQUUsRUFDNUQsR0FBRyxDQUNKLENBQUM7SUFFRjs7T0FFRztJQUNILFlBQ21CLGVBQWdDLEVBQ2hDLFlBQTBCLEVBQzFCLE9BQWdCO1FBRmhCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixZQUFPLEdBQVAsT0FBTyxDQUFTO0lBQ2hDLENBQUM7SUFFSjs7T0FFRztJQUNILE1BQU0sR0FBRyxLQUFLLEVBQ1osU0FBNEIsRUFDNUIsMEJBQXlDLEVBQ2xCLEVBQUU7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pFLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUN0Qiw2REFBNkQ7WUFDN0Qsb0NBQW9DO1lBQ3BDLE1BQU0sa0JBQWtCLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztZQUN4RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDNUMsaUJBQWlCO2dCQUNqQixrQkFBa0I7YUFDbkIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLFNBQTRCLEVBQTBCLEVBQUU7UUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQztJQUVNLG9CQUFvQixHQUFHLEtBQUssRUFDbEMsU0FBNEIsRUFDRCxFQUFFO1FBQzdCLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN4QixJQUFJO1lBQ0YsT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDMUQ7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQ0UsR0FBRyxZQUFZLFdBQVc7Z0JBQzFCLEdBQUcsQ0FBQyxLQUFLO2dCQUNULEdBQUcsQ0FBQyxLQUFLLFlBQVksbUJBQW1CLEVBQ3hDO2dCQUNBLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssdUJBQXVCLEVBQUU7b0JBQzlDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsMEJBQTBCLEVBQzFCO3dCQUNFLE9BQU8sRUFDTCwyREFBMkQ7d0JBQzdELFVBQVUsRUFBRSwrQ0FBK0M7cUJBQzVELEVBQ0QsR0FBRyxDQUNKLENBQUM7aUJBQ0g7YUFDRjtZQUNELE1BQU0sSUFBSSxZQUFZLENBQ3BCLHdCQUF3QixFQUN4QjtnQkFDRSxPQUFPLEVBQUUscUNBQXFDO2FBQy9DLEVBQ0QsR0FBWSxDQUNiLENBQUM7U0FDSDtRQUNELElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksZ0JBQWtDLENBQUM7UUFFdkMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUN2QixPQUFPO2FBQ1I7WUFDRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2xELElBQUksWUFBWSxHQUFHLENBQUMsSUFBSSxZQUFZLEdBQUcsZUFBZSxFQUFFO2dCQUN0RCxlQUFlLEdBQUcsWUFBWSxDQUFDO2dCQUMvQixnQkFBZ0IsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO2FBQ3ZDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYm91bmNlIGZyb20gJ2RlYm91bmNlLXByb21pc2UnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7XG4gIEJhY2tlbmREZXBsb3llcixcbiAgRGVwbG95UmVzdWx0LFxuICBEZXN0cm95UmVzdWx0LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBTZWNyZXRDbGllbnQsIFNlY3JldEVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IExvZ0xldmVsLCBQcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IEFtcGxpZnlGYXVsdCwgQW1wbGlmeVVzZXJFcnJvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IFNTTVNlcnZpY2VFeGNlcHRpb24gfSBmcm9tICdAYXdzLXNkay9jbGllbnQtc3NtJztcblxuLyoqXG4gKiBFeGVjdXRlIENESyBjb21tYW5kcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlTYW5kYm94RXhlY3V0b3Ige1xuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBjYWxsYmFjayB3aXRoIGRlYm91bmNlLlxuICAgKiBEZWJvdW5jZSBpcyBuZWVkZWQgaW4gY2FzZSBtdWx0aXBsZSBkdXBsaWNhdGUgZXZlbnRzIGFyZSByZWNlaXZlZC5cbiAgICovXG4gIHByaXZhdGUgaW52b2tlID0gZGVib3VuY2UoXG4gICAgYXN5bmMgKFxuICAgICAgY2FsbGJhY2s6ICgpID0+IFByb21pc2U8RGVwbG95UmVzdWx0IHwgRGVzdHJveVJlc3VsdD5cbiAgICApOiBQcm9taXNlPERlcGxveVJlc3VsdCB8IERlc3Ryb3lSZXN1bHQ+ID0+IGF3YWl0IGNhbGxiYWNrKCksXG4gICAgMTAwXG4gICk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gQW1wbGlmeVNhbmRib3hFeGVjdXRvciBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kRGVwbG95ZXI6IEJhY2tlbmREZXBsb3llcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldENsaWVudDogU2VjcmV0Q2xpZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlclxuICApIHt9XG5cbiAgLyoqXG4gICAqIERlcGxveXMgc2FuZGJveFxuICAgKi9cbiAgZGVwbG95ID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIsXG4gICAgdmFsaWRhdGVBcHBTb3VyY2VzUHJvdmlkZXI6ICgpID0+IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxEZXBsb3lSZXN1bHQ+ID0+IHtcbiAgICB0aGlzLnByaW50ZXIubG9nKCdbU2FuZGJveF0gRXhlY3V0aW5nIGNvbW1hbmQgYGRlcGxveWAnLCBMb2dMZXZlbC5ERUJVRyk7XG4gICAgY29uc3Qgc2VjcmV0TGFzdFVwZGF0ZWQgPSBhd2FpdCB0aGlzLmdldFNlY3JldExhc3RVcGRhdGVkKGJhY2tlbmRJZCk7XG5cbiAgICByZXR1cm4gdGhpcy5pbnZva2UoKCkgPT4ge1xuICAgICAgLy8gaXQncyBpbXBvcnRhbnQgdG8gZ2V0IGluZm9ybWF0aW9uIGhlcmUgc28gdGhhdCBpbmZvcm1hdGlvblxuICAgICAgLy8gZG9lc24ndCBnZXQgbG9zdCB3aGlsZSBkZWJvdW5jaW5nXG4gICAgICBjb25zdCB2YWxpZGF0ZUFwcFNvdXJjZXMgPSB2YWxpZGF0ZUFwcFNvdXJjZXNQcm92aWRlcigpO1xuICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZERlcGxveWVyLmRlcGxveShiYWNrZW5kSWQsIHtcbiAgICAgICAgc2VjcmV0TGFzdFVwZGF0ZWQsXG4gICAgICAgIHZhbGlkYXRlQXBwU291cmNlcyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXN0cm95IHNhbmRib3guIERvIG5vdCBzd2FsbG93IGVycm9yc1xuICAgKi9cbiAgZGVzdHJveSA9IChiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyKTogUHJvbWlzZTxEZXN0cm95UmVzdWx0PiA9PiB7XG4gICAgdGhpcy5wcmludGVyLmxvZygnW1NhbmRib3hdIEV4ZWN1dGluZyBjb21tYW5kIGBkZXN0cm95YCcsIExvZ0xldmVsLkRFQlVHKTtcbiAgICByZXR1cm4gdGhpcy5pbnZva2UoKCkgPT4gdGhpcy5iYWNrZW5kRGVwbG95ZXIuZGVzdHJveShiYWNrZW5kSWQpKTtcbiAgfTtcblxuICBwcml2YXRlIGdldFNlY3JldExhc3RVcGRhdGVkID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXJcbiAgKTogUHJvbWlzZTxEYXRlIHwgdW5kZWZpbmVkPiA9PiB7XG4gICAgbGV0IHNlY3JldHMgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHNlY3JldHMgPSBhd2FpdCB0aGlzLnNlY3JldENsaWVudC5saXN0U2VjcmV0cyhiYWNrZW5kSWQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKFxuICAgICAgICBlcnIgaW5zdGFuY2VvZiBTZWNyZXRFcnJvciAmJlxuICAgICAgICBlcnIuY2F1c2UgJiZcbiAgICAgICAgZXJyLmNhdXNlIGluc3RhbmNlb2YgU1NNU2VydmljZUV4Y2VwdGlvblxuICAgICAgKSB7XG4gICAgICAgIGlmIChlcnIuY2F1c2UubmFtZSA9PT0gJ0V4cGlyZWRUb2tlbkV4Y2VwdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICdTZWNyZXRzRXhwaXJlZFRva2VuRXJyb3InLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICdGZXRjaGluZyB0aGUgbGlzdCBvZiBzZWNyZXRzIGZhaWxlZCBkdWUgdG8gZXhwaXJlZCB0b2tlbnMnLFxuICAgICAgICAgICAgICByZXNvbHV0aW9uOiAnUGxlYXNlIHJlZnJlc2ggeW91ciBjcmVkZW50aWFscyBhbmQgdHJ5IGFnYWluJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KFxuICAgICAgICAnTGlzdFNlY3JldHNGYWlsZWRGYXVsdCcsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnRmV0Y2hpbmcgdGhlIGxpc3Qgb2Ygc2VjcmV0cyBmYWlsZWQnLFxuICAgICAgICB9LFxuICAgICAgICBlcnIgYXMgRXJyb3JcbiAgICAgICk7XG4gICAgfVxuICAgIGxldCBsYXRlc3RUaW1lc3RhbXAgPSAtMTtcbiAgICBsZXQgc2VjcmV0TGFzdFVwZGF0ZTogRGF0ZSB8IHVuZGVmaW5lZDtcblxuICAgIHNlY3JldHMuZm9yRWFjaCgoc2VjcmV0KSA9PiB7XG4gICAgICBpZiAoIXNlY3JldC5sYXN0VXBkYXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBjdXJUaW1lU3RhbXAgPSBzZWNyZXQubGFzdFVwZGF0ZWQuZ2V0VGltZSgpO1xuICAgICAgaWYgKGN1clRpbWVTdGFtcCA+IDAgJiYgY3VyVGltZVN0YW1wID4gbGF0ZXN0VGltZXN0YW1wKSB7XG4gICAgICAgIGxhdGVzdFRpbWVzdGFtcCA9IGN1clRpbWVTdGFtcDtcbiAgICAgICAgc2VjcmV0TGFzdFVwZGF0ZSA9IHNlY3JldC5sYXN0VXBkYXRlZDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzZWNyZXRMYXN0VXBkYXRlO1xuICB9O1xufVxuIl19