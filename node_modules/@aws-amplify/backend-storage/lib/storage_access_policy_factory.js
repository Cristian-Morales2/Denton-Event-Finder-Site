import { Effect, Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { Stack } from 'aws-cdk-lib';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Generates IAM policies scoped to a single bucket
 */
export class StorageAccessPolicyFactory {
    bucket;
    namePrefix = 'storageAccess';
    stack;
    policyCount = 1;
    /**
     * Instantiate with the bucket to generate policies for
     */
    constructor(bucket) {
        this.bucket = bucket;
        this.stack = Stack.of(bucket);
    }
    createPolicy = (permissions) => {
        if (permissions.size === 0) {
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        const statements = [];
        permissions.forEach(({ allow: allowPrefixes, deny: denyPrefixes }, action) => {
            if (allowPrefixes.size > 0) {
                statements.push(this.getStatement(allowPrefixes, action, Effect.ALLOW));
            }
            if (denyPrefixes.size > 0) {
                statements.push(this.getStatement(denyPrefixes, action, Effect.DENY));
            }
        });
        if (statements.length === 0) {
            // this could happen if the Map contained entries but all of the path sets were empty
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        return new Policy(this.stack, `${this.namePrefix}${this.policyCount++}`, {
            statements,
        });
    };
    getStatement = (s3Prefixes, action, effect) => {
        switch (action) {
            case 'delete':
            case 'get':
            case 'write':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: Array.from(s3Prefixes).map((s3Prefix) => `${this.bucket.bucketArn}/${s3Prefix}`),
                });
            case 'list':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: [this.bucket.bucketArn],
                    conditions: {
                        StringLike: {
                            's3:prefix': Array.from(s3Prefixes).flatMap(toConditionPrefix),
                        },
                    },
                });
        }
    };
}
const actionMap = {
    get: ['s3:GetObject'],
    list: ['s3:ListBucket'],
    write: ['s3:PutObject'],
    delete: ['s3:DeleteObject'],
};
/**
 * Converts a prefix like foo/bar/* into [foo/bar/, foo/bar/*]
 * This is necessary to grant the ability to list all objects directly in "foo/bar" and all objects under "foo/bar"
 */
const toConditionPrefix = (prefix) => {
    const noTrailingWildcard = prefix.slice(0, -1);
    return [prefix, noTrailingWildcard];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFZMUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBU1I7SUFSWixVQUFVLEdBQUcsZUFBZSxDQUFDO0lBQzdCLEtBQUssQ0FBUTtJQUV0QixXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBRXhCOztPQUVHO0lBQ0gsWUFBNkIsTUFBZTtRQUFmLFdBQU0sR0FBTixNQUFNLENBQVM7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxZQUFZLEdBQUcsQ0FDYixXQUdDLEVBQ0QsRUFBRTtRQUNGLElBQUksV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLFlBQVksQ0FBQyxrQkFBa0IsRUFBRTtnQkFDekMsT0FBTyxFQUFFLDJDQUEyQzthQUNyRCxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sVUFBVSxHQUFzQixFQUFFLENBQUM7UUFFekMsV0FBVyxDQUFDLE9BQU8sQ0FDakIsQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3ZELElBQUksYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7Z0JBQzFCLFVBQVUsQ0FBQyxJQUFJLENBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDdkQsQ0FBQzthQUNIO1lBQ0QsSUFBSSxZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtnQkFDekIsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDdkU7UUFDSCxDQUFDLENBQ0YsQ0FBQztRQUVGLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDM0IscUZBQXFGO1lBQ3JGLE1BQU0sSUFBSSxZQUFZLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3pDLE9BQU8sRUFBRSwyQ0FBMkM7YUFDckQsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO1lBQ3ZFLFVBQVU7U0FDWCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFTSxZQUFZLEdBQUcsQ0FDckIsVUFBc0MsRUFDdEMsTUFBNkIsRUFDN0IsTUFBYyxFQUNkLEVBQUU7UUFDRixRQUFRLE1BQU0sRUFBRTtZQUNkLEtBQUssUUFBUSxDQUFDO1lBQ2QsS0FBSyxLQUFLLENBQUM7WUFDWCxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxJQUFJLGVBQWUsQ0FBQztvQkFDekIsTUFBTTtvQkFDTixPQUFPLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQztvQkFDMUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUNuQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxRQUFRLEVBQUUsQ0FDckQ7aUJBQ0YsQ0FBQyxDQUFDO1lBQ0wsS0FBSyxNQUFNO2dCQUNULE9BQU8sSUFBSSxlQUFlLENBQUM7b0JBQ3pCLE1BQU07b0JBQ04sT0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUM7b0JBQzFCLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO29CQUNsQyxVQUFVLEVBQUU7d0JBQ1YsVUFBVSxFQUFFOzRCQUNWLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzt5QkFDL0Q7cUJBQ0Y7aUJBQ0YsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0sU0FBUyxHQUE0QztJQUN6RCxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDckIsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDO0lBQ3ZCLEtBQUssRUFBRSxDQUFDLGNBQWMsQ0FBQztJQUN2QixNQUFNLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztDQUM1QixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQW1CLEVBQUUsRUFBRTtJQUNoRCxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElCdWNrZXQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0IHsgRWZmZWN0LCBQb2xpY3ksIFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBBbXBsaWZ5RmF1bHQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTdG9yYWdlQWN0aW9uLCBTdG9yYWdlUGF0aCB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgSW50ZXJuYWxTdG9yYWdlQWN0aW9uIH0gZnJvbSAnLi9wcml2YXRlX3R5cGVzLmpzJztcblxuZXhwb3J0IHR5cGUgUGVybWlzc2lvbiA9IHtcbiAgYWN0aW9uczogU3RvcmFnZUFjdGlvbltdO1xuICAvKipcbiAgICogQW4gczMgcHJlZml4IHRoYXQgZGVmaW5lcyB0aGUgc2NvcGUgb2YgdGhlIGFjdGlvbnNcbiAgICovXG4gIHJlc291cmNlczogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBJQU0gcG9saWNpZXMgc2NvcGVkIHRvIGEgc2luZ2xlIGJ1Y2tldFxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZUFjY2Vzc1BvbGljeUZhY3Rvcnkge1xuICBwcml2YXRlIHJlYWRvbmx5IG5hbWVQcmVmaXggPSAnc3RvcmFnZUFjY2Vzcyc7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhY2s6IFN0YWNrO1xuXG4gIHByaXZhdGUgcG9saWN5Q291bnQgPSAxO1xuXG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZSB3aXRoIHRoZSBidWNrZXQgdG8gZ2VuZXJhdGUgcG9saWNpZXMgZm9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGJ1Y2tldDogSUJ1Y2tldCkge1xuICAgIHRoaXMuc3RhY2sgPSBTdGFjay5vZihidWNrZXQpO1xuICB9XG5cbiAgY3JlYXRlUG9saWN5ID0gKFxuICAgIHBlcm1pc3Npb25zOiBNYXA8XG4gICAgICBJbnRlcm5hbFN0b3JhZ2VBY3Rpb24sXG4gICAgICB7IGFsbG93OiBTZXQ8U3RvcmFnZVBhdGg+OyBkZW55OiBTZXQ8U3RvcmFnZVBhdGg+IH1cbiAgICA+XG4gICkgPT4ge1xuICAgIGlmIChwZXJtaXNzaW9ucy5zaXplID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KCdFbXB0eVBvbGljeUZhdWx0Jywge1xuICAgICAgICBtZXNzYWdlOiAnQXQgbGVhc3Qgb25lIHBlcm1pc3Npb24gbXVzdCBiZSBzcGVjaWZpZWQnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGVtZW50czogUG9saWN5U3RhdGVtZW50W10gPSBbXTtcblxuICAgIHBlcm1pc3Npb25zLmZvckVhY2goXG4gICAgICAoeyBhbGxvdzogYWxsb3dQcmVmaXhlcywgZGVueTogZGVueVByZWZpeGVzIH0sIGFjdGlvbikgPT4ge1xuICAgICAgICBpZiAoYWxsb3dQcmVmaXhlcy5zaXplID4gMCkge1xuICAgICAgICAgIHN0YXRlbWVudHMucHVzaChcbiAgICAgICAgICAgIHRoaXMuZ2V0U3RhdGVtZW50KGFsbG93UHJlZml4ZXMsIGFjdGlvbiwgRWZmZWN0LkFMTE9XKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbnlQcmVmaXhlcy5zaXplID4gMCkge1xuICAgICAgICAgIHN0YXRlbWVudHMucHVzaCh0aGlzLmdldFN0YXRlbWVudChkZW55UHJlZml4ZXMsIGFjdGlvbiwgRWZmZWN0LkRFTlkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoc3RhdGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIHRoaXMgY291bGQgaGFwcGVuIGlmIHRoZSBNYXAgY29udGFpbmVkIGVudHJpZXMgYnV0IGFsbCBvZiB0aGUgcGF0aCBzZXRzIHdlcmUgZW1wdHlcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0VtcHR5UG9saWN5RmF1bHQnLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdBdCBsZWFzdCBvbmUgcGVybWlzc2lvbiBtdXN0IGJlIHNwZWNpZmllZCcsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFBvbGljeSh0aGlzLnN0YWNrLCBgJHt0aGlzLm5hbWVQcmVmaXh9JHt0aGlzLnBvbGljeUNvdW50Kyt9YCwge1xuICAgICAgc3RhdGVtZW50cyxcbiAgICB9KTtcbiAgfTtcblxuICBwcml2YXRlIGdldFN0YXRlbWVudCA9IChcbiAgICBzM1ByZWZpeGVzOiBSZWFkb25seTxTZXQ8U3RvcmFnZVBhdGg+PixcbiAgICBhY3Rpb246IEludGVybmFsU3RvcmFnZUFjdGlvbixcbiAgICBlZmZlY3Q6IEVmZmVjdFxuICApID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgIGNhc2UgJ2dldCc6XG4gICAgICBjYXNlICd3cml0ZSc6XG4gICAgICAgIHJldHVybiBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgYWN0aW9uczogYWN0aW9uTWFwW2FjdGlvbl0sXG4gICAgICAgICAgcmVzb3VyY2VzOiBBcnJheS5mcm9tKHMzUHJlZml4ZXMpLm1hcChcbiAgICAgICAgICAgIChzM1ByZWZpeCkgPT4gYCR7dGhpcy5idWNrZXQuYnVja2V0QXJufS8ke3MzUHJlZml4fWBcbiAgICAgICAgICApLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2xpc3QnOlxuICAgICAgICByZXR1cm4gbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgZWZmZWN0LFxuICAgICAgICAgIGFjdGlvbnM6IGFjdGlvbk1hcFthY3Rpb25dLFxuICAgICAgICAgIHJlc291cmNlczogW3RoaXMuYnVja2V0LmJ1Y2tldEFybl0sXG4gICAgICAgICAgY29uZGl0aW9uczoge1xuICAgICAgICAgICAgU3RyaW5nTGlrZToge1xuICAgICAgICAgICAgICAnczM6cHJlZml4JzogQXJyYXkuZnJvbShzM1ByZWZpeGVzKS5mbGF0TWFwKHRvQ29uZGl0aW9uUHJlZml4KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBhY3Rpb25NYXA6IFJlY29yZDxJbnRlcm5hbFN0b3JhZ2VBY3Rpb24sIHN0cmluZ1tdPiA9IHtcbiAgZ2V0OiBbJ3MzOkdldE9iamVjdCddLFxuICBsaXN0OiBbJ3MzOkxpc3RCdWNrZXQnXSxcbiAgd3JpdGU6IFsnczM6UHV0T2JqZWN0J10sXG4gIGRlbGV0ZTogWydzMzpEZWxldGVPYmplY3QnXSxcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBwcmVmaXggbGlrZSBmb28vYmFyLyogaW50byBbZm9vL2Jhci8sIGZvby9iYXIvKl1cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGdyYW50IHRoZSBhYmlsaXR5IHRvIGxpc3QgYWxsIG9iamVjdHMgZGlyZWN0bHkgaW4gXCJmb28vYmFyXCIgYW5kIGFsbCBvYmplY3RzIHVuZGVyIFwiZm9vL2JhclwiXG4gKi9cbmNvbnN0IHRvQ29uZGl0aW9uUHJlZml4ID0gKHByZWZpeDogU3RvcmFnZVBhdGgpID0+IHtcbiAgY29uc3Qgbm9UcmFpbGluZ1dpbGRjYXJkID0gcHJlZml4LnNsaWNlKDAsIC0xKTtcbiAgcmV0dXJuIFtwcmVmaXgsIG5vVHJhaWxpbmdXaWxkY2FyZF07XG59O1xuIl19