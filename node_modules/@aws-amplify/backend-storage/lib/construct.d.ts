import { Construct } from 'constructs';
import { CfnBucket, EventType, IBucket } from 'aws-cdk-lib/aws-s3';
import { BackendOutputStorageStrategy, ConstructFactory, FunctionResources, ResourceProvider } from '@aws-amplify/plugin-types';
import { StorageOutput } from '@aws-amplify/backend-output-schemas';
import { IFunction } from 'aws-cdk-lib/aws-lambda';
export type AmplifyStorageTriggerEvent = 'onDelete' | 'onUpload';
export type AmplifyStorageProps = {
    /**
     * Friendly name that will be used to derive the S3 Bucket name
     */
    name: string;
    /**
     * Whether to enable S3 object versioning on the bucket.
     * @see https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html
     * @default false
     */
    versioned?: boolean;
    outputStorageStrategy?: BackendOutputStorageStrategy<StorageOutput>;
    /**
     * S3 event trigger configuration
     * @see https://docs.amplify.aws/gen2/build-a-backend/storage/#configure-storage-triggers
     * @example
     * import { triggerHandler } from '../functions/trigger-handler/resource.ts'
     *
     * export const storage = defineStorage({
     *   triggers: {
     *     onUpload: triggerHandler
     *   }
     * })
     */
    triggers?: Partial<Record<AmplifyStorageTriggerEvent, ConstructFactory<ResourceProvider<FunctionResources>>>>;
};
export type StorageResources = {
    bucket: IBucket;
    cfnResources: {
        cfnBucket: CfnBucket;
    };
};
/**
 * Amplify Storage CDK Construct
 *
 * Currently just a thin wrapper around an S3 bucket
 */
export declare class AmplifyStorage extends Construct implements ResourceProvider<StorageResources> {
    readonly resources: StorageResources;
    /**
     * Create a new AmplifyStorage instance
     */
    constructor(scope: Construct, id: string, props: AmplifyStorageProps);
    /**
     * Attach a Lambda function trigger handler to the S3 events
     * @param events - list of S3 events that will trigger the handler
     * @param handler - The function that will handle the event
     */
    addTrigger: (events: EventType[], handler: IFunction) => void;
    /**
     * Store storage outputs using provided strategy
     */
    private storeOutput;
}
//# sourceMappingURL=construct.d.ts.map