import { Construct } from 'constructs';
import { Bucket, HttpMethods, } from 'aws-cdk-lib/aws-s3';
import { storageOutputKey, } from '@aws-amplify/backend-output-schemas';
import { RemovalPolicy, Stack } from 'aws-cdk-lib';
import { AttributionMetadataStorage, StackMetadataBackendOutputStorageStrategy, } from '@aws-amplify/backend-output-storage';
import { fileURLToPath } from 'node:url';
import { S3EventSourceV2 } from 'aws-cdk-lib/aws-lambda-event-sources';
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Storage in BI metrics
const storageStackType = 'storage-S3';
/**
 * Amplify Storage CDK Construct
 *
 * Currently just a thin wrapper around an S3 bucket
 */
export class AmplifyStorage extends Construct {
    resources;
    /**
     * Create a new AmplifyStorage instance
     */
    constructor(scope, id, props) {
        super(scope, id);
        const bucketProps = {
            versioned: props.versioned || false,
            cors: [
                {
                    maxAge: 3000,
                    exposedHeaders: [
                        'x-amz-server-side-encryption',
                        'x-amz-request-id',
                        'x-amz-id-2',
                        'ETag',
                    ],
                    allowedHeaders: ['*'],
                    allowedOrigins: ['*'],
                    allowedMethods: [
                        HttpMethods.GET,
                        HttpMethods.HEAD,
                        HttpMethods.PUT,
                        HttpMethods.POST,
                        HttpMethods.DELETE,
                    ],
                },
            ],
            autoDeleteObjects: true,
            removalPolicy: RemovalPolicy.DESTROY,
            enforceSSL: true,
        };
        const bucket = new Bucket(this, 'Bucket', bucketProps);
        this.resources = {
            bucket,
            cfnResources: {
                cfnBucket: bucket.node.findChild('Resource'),
            },
        };
        this.storeOutput(props.outputStorageStrategy);
        new AttributionMetadataStorage().storeAttributionMetadata(Stack.of(this), storageStackType, fileURLToPath(new URL('../package.json', import.meta.url)));
    }
    /**
     * Attach a Lambda function trigger handler to the S3 events
     * @param events - list of S3 events that will trigger the handler
     * @param handler - The function that will handle the event
     */
    addTrigger = (events, handler) => {
        handler.addEventSource(new S3EventSourceV2(this.resources.bucket, { events }));
    };
    /**
     * Store storage outputs using provided strategy
     */
    storeOutput = (outputStorageStrategy = new StackMetadataBackendOutputStorageStrategy(Stack.of(this))) => {
        outputStorageStrategy.addBackendOutputEntry(storageOutputKey, {
            version: '1',
            payload: {
                storageRegion: Stack.of(this).region,
                bucketName: this.resources.bucket.bucketName,
            },
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sRUFDTCxNQUFNLEVBSU4sV0FBVyxHQUVaLE1BQU0sb0JBQW9CLENBQUM7QUFPNUIsT0FBTyxFQUVMLGdCQUFnQixHQUNqQixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIseUNBQXlDLEdBQzFDLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdkUseUhBQXlIO0FBQ3pILE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO0FBMkN0Qzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGNBQ1gsU0FBUSxTQUFTO0lBR1IsU0FBUyxDQUFtQjtJQUNyQzs7T0FFRztJQUNILFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBMEI7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFdBQVcsR0FBZ0I7WUFDL0IsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLElBQUksS0FBSztZQUNuQyxJQUFJLEVBQUU7Z0JBQ0o7b0JBQ0UsTUFBTSxFQUFFLElBQUk7b0JBQ1osY0FBYyxFQUFFO3dCQUNkLDhCQUE4Qjt3QkFDOUIsa0JBQWtCO3dCQUNsQixZQUFZO3dCQUNaLE1BQU07cUJBQ1A7b0JBQ0QsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDO29CQUNyQixjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUM7b0JBQ3JCLGNBQWMsRUFBRTt3QkFDZCxXQUFXLENBQUMsR0FBRzt3QkFDZixXQUFXLENBQUMsSUFBSTt3QkFDaEIsV0FBVyxDQUFDLEdBQUc7d0JBQ2YsV0FBVyxDQUFDLElBQUk7d0JBQ2hCLFdBQVcsQ0FBQyxNQUFNO3FCQUNuQjtpQkFDRjthQUNGO1lBQ0QsaUJBQWlCLEVBQUUsSUFBSTtZQUN2QixhQUFhLEVBQUUsYUFBYSxDQUFDLE9BQU87WUFDcEMsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFdkQsSUFBSSxDQUFDLFNBQVMsR0FBRztZQUNmLE1BQU07WUFDTixZQUFZLEVBQUU7Z0JBQ1osU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBYzthQUMxRDtTQUNGLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRTlDLElBQUksMEJBQTBCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FDdkQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDZCxnQkFBZ0IsRUFDaEIsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0QsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsVUFBVSxHQUFHLENBQUMsTUFBbUIsRUFBRSxPQUFrQixFQUFRLEVBQUU7UUFDN0QsT0FBTyxDQUFDLGNBQWMsQ0FDcEIsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUN2RCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSyxXQUFXLEdBQUcsQ0FDcEIsd0JBQXFFLElBQUkseUNBQXlDLENBQ2hILEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQ2YsRUFDSyxFQUFFO1FBQ1IscUJBQXFCLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLEVBQUU7WUFDNUQsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUU7Z0JBQ1AsYUFBYSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTtnQkFDcEMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7YUFDN0M7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtcbiAgQnVja2V0LFxuICBCdWNrZXRQcm9wcyxcbiAgQ2ZuQnVja2V0LFxuICBFdmVudFR5cGUsXG4gIEh0dHBNZXRob2RzLFxuICBJQnVja2V0LFxufSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgQ29uc3RydWN0RmFjdG9yeSxcbiAgRnVuY3Rpb25SZXNvdXJjZXMsXG4gIFJlc291cmNlUHJvdmlkZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHtcbiAgU3RvcmFnZU91dHB1dCxcbiAgc3RvcmFnZU91dHB1dEtleSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXNjaGVtYXMnO1xuaW1wb3J0IHsgUmVtb3ZhbFBvbGljeSwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQge1xuICBBdHRyaWJ1dGlvbk1ldGFkYXRhU3RvcmFnZSxcbiAgU3RhY2tNZXRhZGF0YUJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zdG9yYWdlJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5pbXBvcnQgeyBJRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IFMzRXZlbnRTb3VyY2VWMiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEtZXZlbnQtc291cmNlcyc7XG5cbi8vIEJlIHZlcnkgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgdmFsdWUuIEl0IGlzIHRoZSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGF0dHJpYnV0ZSBzdGFja3MgdG8gQW1wbGlmeSBTdG9yYWdlIGluIEJJIG1ldHJpY3NcbmNvbnN0IHN0b3JhZ2VTdGFja1R5cGUgPSAnc3RvcmFnZS1TMyc7XG5cbmV4cG9ydCB0eXBlIEFtcGxpZnlTdG9yYWdlVHJpZ2dlckV2ZW50ID0gJ29uRGVsZXRlJyB8ICdvblVwbG9hZCc7XG5cbmV4cG9ydCB0eXBlIEFtcGxpZnlTdG9yYWdlUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBGcmllbmRseSBuYW1lIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRlcml2ZSB0aGUgUzMgQnVja2V0IG5hbWVcbiAgICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIFMzIG9iamVjdCB2ZXJzaW9uaW5nIG9uIHRoZSBidWNrZXQuXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvblMzL2xhdGVzdC91c2VyZ3VpZGUvVmVyc2lvbmluZy5odG1sXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB2ZXJzaW9uZWQ/OiBib29sZWFuO1xuICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k/OiBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PFN0b3JhZ2VPdXRwdXQ+O1xuICAvKipcbiAgICogUzMgZXZlbnQgdHJpZ2dlciBjb25maWd1cmF0aW9uXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmFtcGxpZnkuYXdzL2dlbjIvYnVpbGQtYS1iYWNrZW5kL3N0b3JhZ2UvI2NvbmZpZ3VyZS1zdG9yYWdlLXRyaWdnZXJzXG4gICAqIEBleGFtcGxlXG4gICAqIGltcG9ydCB7IHRyaWdnZXJIYW5kbGVyIH0gZnJvbSAnLi4vZnVuY3Rpb25zL3RyaWdnZXItaGFuZGxlci9yZXNvdXJjZS50cydcbiAgICpcbiAgICogZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBkZWZpbmVTdG9yYWdlKHtcbiAgICogICB0cmlnZ2Vyczoge1xuICAgKiAgICAgb25VcGxvYWQ6IHRyaWdnZXJIYW5kbGVyXG4gICAqICAgfVxuICAgKiB9KVxuICAgKi9cbiAgdHJpZ2dlcnM/OiBQYXJ0aWFsPFxuICAgIFJlY29yZDxcbiAgICAgIEFtcGxpZnlTdG9yYWdlVHJpZ2dlckV2ZW50LFxuICAgICAgQ29uc3RydWN0RmFjdG9yeTxSZXNvdXJjZVByb3ZpZGVyPEZ1bmN0aW9uUmVzb3VyY2VzPj5cbiAgICA+XG4gID47XG59O1xuXG5leHBvcnQgdHlwZSBTdG9yYWdlUmVzb3VyY2VzID0ge1xuICBidWNrZXQ6IElCdWNrZXQ7XG4gIGNmblJlc291cmNlczoge1xuICAgIGNmbkJ1Y2tldDogQ2ZuQnVja2V0O1xuICB9O1xufTtcblxuLyoqXG4gKiBBbXBsaWZ5IFN0b3JhZ2UgQ0RLIENvbnN0cnVjdFxuICpcbiAqIEN1cnJlbnRseSBqdXN0IGEgdGhpbiB3cmFwcGVyIGFyb3VuZCBhbiBTMyBidWNrZXRcbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlTdG9yYWdlXG4gIGV4dGVuZHMgQ29uc3RydWN0XG4gIGltcGxlbWVudHMgUmVzb3VyY2VQcm92aWRlcjxTdG9yYWdlUmVzb3VyY2VzPlxue1xuICByZWFkb25seSByZXNvdXJjZXM6IFN0b3JhZ2VSZXNvdXJjZXM7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgQW1wbGlmeVN0b3JhZ2UgaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBbXBsaWZ5U3RvcmFnZVByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGJ1Y2tldFByb3BzOiBCdWNrZXRQcm9wcyA9IHtcbiAgICAgIHZlcnNpb25lZDogcHJvcHMudmVyc2lvbmVkIHx8IGZhbHNlLFxuICAgICAgY29yczogW1xuICAgICAgICB7XG4gICAgICAgICAgbWF4QWdlOiAzMDAwLFxuICAgICAgICAgIGV4cG9zZWRIZWFkZXJzOiBbXG4gICAgICAgICAgICAneC1hbXotc2VydmVyLXNpZGUtZW5jcnlwdGlvbicsXG4gICAgICAgICAgICAneC1hbXotcmVxdWVzdC1pZCcsXG4gICAgICAgICAgICAneC1hbXotaWQtMicsXG4gICAgICAgICAgICAnRVRhZycsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBhbGxvd2VkSGVhZGVyczogWycqJ10sXG4gICAgICAgICAgYWxsb3dlZE9yaWdpbnM6IFsnKiddLFxuICAgICAgICAgIGFsbG93ZWRNZXRob2RzOiBbXG4gICAgICAgICAgICBIdHRwTWV0aG9kcy5HRVQsXG4gICAgICAgICAgICBIdHRwTWV0aG9kcy5IRUFELFxuICAgICAgICAgICAgSHR0cE1ldGhvZHMuUFVULFxuICAgICAgICAgICAgSHR0cE1ldGhvZHMuUE9TVCxcbiAgICAgICAgICAgIEh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLFxuICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgZW5mb3JjZVNTTDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgY29uc3QgYnVja2V0ID0gbmV3IEJ1Y2tldCh0aGlzLCAnQnVja2V0JywgYnVja2V0UHJvcHMpO1xuXG4gICAgdGhpcy5yZXNvdXJjZXMgPSB7XG4gICAgICBidWNrZXQsXG4gICAgICBjZm5SZXNvdXJjZXM6IHtcbiAgICAgICAgY2ZuQnVja2V0OiBidWNrZXQubm9kZS5maW5kQ2hpbGQoJ1Jlc291cmNlJykgYXMgQ2ZuQnVja2V0LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdGhpcy5zdG9yZU91dHB1dChwcm9wcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3kpO1xuXG4gICAgbmV3IEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlKCkuc3RvcmVBdHRyaWJ1dGlvbk1ldGFkYXRhKFxuICAgICAgU3RhY2sub2YodGhpcyksXG4gICAgICBzdG9yYWdlU3RhY2tUeXBlLFxuICAgICAgZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuLi9wYWNrYWdlLmpzb24nLCBpbXBvcnQubWV0YS51cmwpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoIGEgTGFtYmRhIGZ1bmN0aW9uIHRyaWdnZXIgaGFuZGxlciB0byB0aGUgUzMgZXZlbnRzXG4gICAqIEBwYXJhbSBldmVudHMgLSBsaXN0IG9mIFMzIGV2ZW50cyB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgaGFuZGxlclxuICAgKiBAcGFyYW0gaGFuZGxlciAtIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgaGFuZGxlIHRoZSBldmVudFxuICAgKi9cbiAgYWRkVHJpZ2dlciA9IChldmVudHM6IEV2ZW50VHlwZVtdLCBoYW5kbGVyOiBJRnVuY3Rpb24pOiB2b2lkID0+IHtcbiAgICBoYW5kbGVyLmFkZEV2ZW50U291cmNlKFxuICAgICAgbmV3IFMzRXZlbnRTb3VyY2VWMih0aGlzLnJlc291cmNlcy5idWNrZXQsIHsgZXZlbnRzIH0pXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogU3RvcmUgc3RvcmFnZSBvdXRwdXRzIHVzaW5nIHByb3ZpZGVkIHN0cmF0ZWd5XG4gICAqL1xuICBwcml2YXRlIHN0b3JlT3V0cHV0ID0gKFxuICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneTogQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneTxTdG9yYWdlT3V0cHV0PiA9IG5ldyBTdGFja01ldGFkYXRhQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneShcbiAgICAgIFN0YWNrLm9mKHRoaXMpXG4gICAgKVxuICApOiB2b2lkID0+IHtcbiAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3kuYWRkQmFja2VuZE91dHB1dEVudHJ5KHN0b3JhZ2VPdXRwdXRLZXksIHtcbiAgICAgIHZlcnNpb246ICcxJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgc3RvcmFnZVJlZ2lvbjogU3RhY2sub2YodGhpcykucmVnaW9uLFxuICAgICAgICBidWNrZXROYW1lOiB0aGlzLnJlc291cmNlcy5idWNrZXQuYnVja2V0TmFtZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH07XG59XG4iXX0=