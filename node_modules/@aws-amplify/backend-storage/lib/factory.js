import * as path from 'path';
import { StorageContainerEntryGenerator } from './storage_container_entry_generator.js';
/**
 * Singleton factory for a Storage bucket that can be used in `resource.ts` files
 */
class AmplifyStorageFactory {
    props;
    importStack;
    generator;
    /**
     * Set the properties that will be used to initialize the bucket
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Get a singleton instance of the Bucket
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier, resourceNameValidator } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'storage', 'resource'), 'Amplify Storage must be defined in amplify/storage/resource.ts');
        resourceNameValidator?.validate(this.props.name);
        if (!this.generator) {
            this.generator = new StorageContainerEntryGenerator(this.props, getInstanceProps);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
/**
 * Include storage in your Amplify backend.
 * @see https://docs.amplify.aws/gen2/build-a-backend/storage/
 */
export const defineStorage = (props) => new AmplifyStorageFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRzdCLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXhGOztHQUVHO0FBQ0gsTUFBTSxxQkFBcUI7SUFTTjtJQUNBO0lBUFgsU0FBUyxDQUFtQztJQUVwRDs7T0FFRztJQUNILFlBQ21CLEtBQWlDLEVBQ2pDLGNBQWMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLO1FBRC9CLFVBQUssR0FBTCxLQUFLLENBQTRCO1FBQ2pDLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtJQUMvQyxDQUFDO0lBRUo7O09BRUc7SUFDSCxXQUFXLEdBQUcsQ0FDWixnQkFBa0QsRUFDbEMsRUFBRTtRQUNsQixNQUFNLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUscUJBQXFCLEVBQUUsR0FDckUsZ0JBQWdCLENBQUM7UUFDbkIsa0JBQWtCLEVBQUUsTUFBTSxDQUN4QixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLEVBQzNDLGdFQUFnRSxDQUNqRSxDQUFDO1FBQ0YscUJBQXFCLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLDhCQUE4QixDQUNqRCxJQUFJLENBQUMsS0FBSyxFQUNWLGdCQUFnQixDQUNqQixDQUFDO1NBQ0g7UUFDRCxPQUFPLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFtQixDQUFDO0lBQzNFLENBQUMsQ0FBQztDQUNIO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzNCLEtBQWlDLEVBQ3FCLEVBQUUsQ0FDeEQsSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yLFxuICBDb25zdHJ1Y3RGYWN0b3J5LFxuICBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbiAgUmVzb3VyY2VQcm92aWRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQW1wbGlmeVN0b3JhZ2UsIFN0b3JhZ2VSZXNvdXJjZXMgfSBmcm9tICcuL2NvbnN0cnVjdC5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgU3RvcmFnZUNvbnRhaW5lckVudHJ5R2VuZXJhdG9yIH0gZnJvbSAnLi9zdG9yYWdlX2NvbnRhaW5lcl9lbnRyeV9nZW5lcmF0b3IuanMnO1xuXG4vKipcbiAqIFNpbmdsZXRvbiBmYWN0b3J5IGZvciBhIFN0b3JhZ2UgYnVja2V0IHRoYXQgY2FuIGJlIHVzZWQgaW4gYHJlc291cmNlLnRzYCBmaWxlc1xuICovXG5jbGFzcyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlcbiAgaW1wbGVtZW50cyBDb25zdHJ1Y3RGYWN0b3J5PFJlc291cmNlUHJvdmlkZXI8U3RvcmFnZVJlc291cmNlcz4+XG57XG4gIHByaXZhdGUgZ2VuZXJhdG9yOiBDb25zdHJ1Y3RDb250YWluZXJFbnRyeUdlbmVyYXRvcjtcblxuICAvKipcbiAgICogU2V0IHRoZSBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemUgdGhlIGJ1Y2tldFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogQW1wbGlmeVN0b3JhZ2VGYWN0b3J5UHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbXBvcnRTdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrXG4gICkge31cblxuICAvKipcbiAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBCdWNrZXRcbiAgICovXG4gIGdldEluc3RhbmNlID0gKFxuICAgIGdldEluc3RhbmNlUHJvcHM6IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzXG4gICk6IEFtcGxpZnlTdG9yYWdlID0+IHtcbiAgICBjb25zdCB7IGNvbnN0cnVjdENvbnRhaW5lciwgaW1wb3J0UGF0aFZlcmlmaWVyLCByZXNvdXJjZU5hbWVWYWxpZGF0b3IgfSA9XG4gICAgICBnZXRJbnN0YW5jZVByb3BzO1xuICAgIGltcG9ydFBhdGhWZXJpZmllcj8udmVyaWZ5KFxuICAgICAgdGhpcy5pbXBvcnRTdGFjayxcbiAgICAgIHBhdGguam9pbignYW1wbGlmeScsICdzdG9yYWdlJywgJ3Jlc291cmNlJyksXG4gICAgICAnQW1wbGlmeSBTdG9yYWdlIG11c3QgYmUgZGVmaW5lZCBpbiBhbXBsaWZ5L3N0b3JhZ2UvcmVzb3VyY2UudHMnXG4gICAgKTtcbiAgICByZXNvdXJjZU5hbWVWYWxpZGF0b3I/LnZhbGlkYXRlKHRoaXMucHJvcHMubmFtZSk7XG5cbiAgICBpZiAoIXRoaXMuZ2VuZXJhdG9yKSB7XG4gICAgICB0aGlzLmdlbmVyYXRvciA9IG5ldyBTdG9yYWdlQ29udGFpbmVyRW50cnlHZW5lcmF0b3IoXG4gICAgICAgIHRoaXMucHJvcHMsXG4gICAgICAgIGdldEluc3RhbmNlUHJvcHNcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb25zdHJ1Y3RDb250YWluZXIuZ2V0T3JDb21wdXRlKHRoaXMuZ2VuZXJhdG9yKSBhcyBBbXBsaWZ5U3RvcmFnZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBJbmNsdWRlIHN0b3JhZ2UgaW4geW91ciBBbXBsaWZ5IGJhY2tlbmQuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hbXBsaWZ5LmF3cy9nZW4yL2J1aWxkLWEtYmFja2VuZC9zdG9yYWdlL1xuICovXG5leHBvcnQgY29uc3QgZGVmaW5lU3RvcmFnZSA9IChcbiAgcHJvcHM6IEFtcGxpZnlTdG9yYWdlRmFjdG9yeVByb3BzXG4pOiBDb25zdHJ1Y3RGYWN0b3J5PFJlc291cmNlUHJvdmlkZXI8U3RvcmFnZVJlc291cmNlcz4+ID0+XG4gIG5ldyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnkocHJvcHMsIG5ldyBFcnJvcigpLnN0YWNrKTtcbiJdfQ==