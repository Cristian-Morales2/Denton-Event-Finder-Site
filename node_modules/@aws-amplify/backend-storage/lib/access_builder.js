export const roleAccessBuilder = {
    authenticated: {
        to: (actions) => ({
            getResourceAccessAcceptors: [getAuthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `authenticated`,
                    validationErrorOptions: {
                        message: `Entity access definition for authenticated users specified multiple times.`,
                        resolution: `Combine all access definitions for authenticated users on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: '*',
        }),
    },
    guest: {
        to: (actions) => ({
            getResourceAccessAcceptors: [getUnauthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `guest`,
                    validationErrorOptions: {
                        message: `Entity access definition for guest users specified multiple times.`,
                        resolution: `Combine all access definitions for guest users on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: '*',
        }),
    },
    groups: (groupNames) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: groupNames.map((groupName) => (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, groupName)),
            uniqueDefinitionIdValidations: groupNames.map((groupName) => ({
                uniqueDefinitionId: `groups${groupName}`,
                validationErrorOptions: {
                    message: `Group access definition for ${groupName} specified multiple times.`,
                    resolution: `Combine all access definitions for ${groupName} on a single path into one access rule.`,
                },
            })),
            actions,
            idSubstitution: '*',
        }),
    }),
    entity: (entityId) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: [getAuthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `entity${entityId}`,
                    validationErrorOptions: {
                        message: `Entity access definition for ${entityId} specified multiple times.`,
                        resolution: `Combine all access definitions for ${entityId} on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: '${cognito-identity.amazonaws.com:sub}',
        }),
    }),
    resource: (other) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: [
                (getInstanceProps) => other.getInstance(getInstanceProps).getResourceAccessAcceptor(),
            ],
            uniqueDefinitionIdValidations: [],
            actions,
            idSubstitution: '*',
        }),
    }),
};
const getAuthRoleResourceAccessAcceptor = (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, 'authenticatedUserIamRole');
const getUnauthRoleResourceAccessAcceptor = (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, 'unauthenticatedUserIamRole');
const getUserRoleResourceAccessAcceptor = (getInstanceProps, roleName) => {
    const resourceAccessAcceptor = getInstanceProps.constructContainer
        .getConstructFactory('AuthResources')
        ?.getInstance(getInstanceProps)
        .getResourceAccessAcceptor(roleName);
    if (!resourceAccessAcceptor) {
        throw new Error(`Cannot specify auth access for ${roleName} users without defining auth. See https://docs.amplify.aws/gen2/build-a-backend/auth/set-up-auth/ for more information.`);
    }
    return resourceAccessAcceptor;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzX2J1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYWNjZXNzX2J1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXlCO0lBQ3JELGFBQWEsRUFBRTtRQUNiLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoQiwwQkFBMEIsRUFBRSxDQUFDLGlDQUFpQyxDQUFDO1lBQy9ELDZCQUE2QixFQUFFO2dCQUM3QjtvQkFDRSxrQkFBa0IsRUFBRSxlQUFlO29CQUNuQyxzQkFBc0IsRUFBRTt3QkFDdEIsT0FBTyxFQUFFLDRFQUE0RTt3QkFDckYsVUFBVSxFQUFFLCtGQUErRjtxQkFDNUc7aUJBQ0Y7YUFDRjtZQUNELE9BQU87WUFDUCxjQUFjLEVBQUUsR0FBRztTQUNwQixDQUFDO0tBQ0g7SUFDRCxLQUFLLEVBQUU7UUFDTCxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDaEIsMEJBQTBCLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQztZQUNqRSw2QkFBNkIsRUFBRTtnQkFDN0I7b0JBQ0Usa0JBQWtCLEVBQUUsT0FBTztvQkFDM0Isc0JBQXNCLEVBQUU7d0JBQ3RCLE9BQU8sRUFBRSxvRUFBb0U7d0JBQzdFLFVBQVUsRUFBRSx1RkFBdUY7cUJBQ3BHO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPO1lBQ1AsY0FBYyxFQUFFLEdBQUc7U0FDcEIsQ0FBQztLQUNIO0lBQ0QsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoQiwwQkFBMEIsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUN4QyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQ2xDLGlDQUFpQyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUNqRTtZQUNELDZCQUE2QixFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzVELGtCQUFrQixFQUFFLFNBQVMsU0FBUyxFQUFFO2dCQUN4QyxzQkFBc0IsRUFBRTtvQkFDdEIsT0FBTyxFQUFFLCtCQUErQixTQUFTLDRCQUE0QjtvQkFDN0UsVUFBVSxFQUFFLHNDQUFzQyxTQUFTLHlDQUF5QztpQkFDckc7YUFDRixDQUFDLENBQUM7WUFDSCxPQUFPO1lBQ1AsY0FBYyxFQUFFLEdBQUc7U0FDcEIsQ0FBQztLQUNILENBQUM7SUFDRixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckIsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLDBCQUEwQixFQUFFLENBQUMsaUNBQWlDLENBQUM7WUFDL0QsNkJBQTZCLEVBQUU7Z0JBQzdCO29CQUNFLGtCQUFrQixFQUFFLFNBQVMsUUFBUSxFQUFFO29CQUN2QyxzQkFBc0IsRUFBRTt3QkFDdEIsT0FBTyxFQUFFLGdDQUFnQyxRQUFRLDRCQUE0Qjt3QkFDN0UsVUFBVSxFQUFFLHNDQUFzQyxRQUFRLHlDQUF5QztxQkFDcEc7aUJBQ0Y7YUFDRjtZQUNELE9BQU87WUFDUCxjQUFjLEVBQUUsdUNBQXVDO1NBQ3hELENBQUM7S0FDSCxDQUFDO0lBQ0YsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoQiwwQkFBMEIsRUFBRTtnQkFDMUIsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQ25CLEtBQUssQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyx5QkFBeUIsRUFBRTthQUNsRTtZQUNELDZCQUE2QixFQUFFLEVBQUU7WUFDakMsT0FBTztZQUNQLGNBQWMsRUFBRSxHQUFHO1NBQ3BCLENBQUM7S0FDSCxDQUFDO0NBQ0gsQ0FBQztBQUVGLE1BQU0saUNBQWlDLEdBQUcsQ0FDeEMsZ0JBQWtELEVBQ2xELEVBQUUsQ0FDRixpQ0FBaUMsQ0FDL0IsZ0JBQWdCLEVBQ2hCLDBCQUEwQixDQUMzQixDQUFDO0FBRUosTUFBTSxtQ0FBbUMsR0FBRyxDQUMxQyxnQkFBa0QsRUFDbEQsRUFBRSxDQUNGLGlDQUFpQyxDQUMvQixnQkFBZ0IsRUFDaEIsNEJBQTRCLENBQzdCLENBQUM7QUFFSixNQUFNLGlDQUFpQyxHQUFHLENBQ3hDLGdCQUFrRCxFQUNsRCxRQUErQixFQUMvQixFQUFFO0lBQ0YsTUFBTSxzQkFBc0IsR0FBRyxnQkFBZ0IsQ0FBQyxrQkFBa0I7U0FDL0QsbUJBQW1CLENBRWxCLGVBQWUsQ0FBQztRQUNsQixFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztTQUM5Qix5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7UUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FDYixrQ0FDRSxRQUNGLHlIQUF5SCxDQUMxSCxDQUFDO0tBQ0g7SUFDRCxPQUFPLHNCQUFzQixDQUFDO0FBQ2hDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEF1dGhSb2xlTmFtZSxcbiAgQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gIFJlc291cmNlQWNjZXNzQWNjZXB0b3JGYWN0b3J5LFxuICBSZXNvdXJjZVByb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFN0b3JhZ2VBY2Nlc3NCdWlsZGVyIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbmV4cG9ydCBjb25zdCByb2xlQWNjZXNzQnVpbGRlcjogU3RvcmFnZUFjY2Vzc0J1aWxkZXIgPSB7XG4gIGF1dGhlbnRpY2F0ZWQ6IHtcbiAgICB0bzogKGFjdGlvbnMpID0+ICh7XG4gICAgICBnZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yczogW2dldEF1dGhSb2xlUmVzb3VyY2VBY2Nlc3NBY2NlcHRvcl0sXG4gICAgICB1bmlxdWVEZWZpbml0aW9uSWRWYWxpZGF0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdW5pcXVlRGVmaW5pdGlvbklkOiBgYXV0aGVudGljYXRlZGAsXG4gICAgICAgICAgdmFsaWRhdGlvbkVycm9yT3B0aW9uczoge1xuICAgICAgICAgICAgbWVzc2FnZTogYEVudGl0eSBhY2Nlc3MgZGVmaW5pdGlvbiBmb3IgYXV0aGVudGljYXRlZCB1c2VycyBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMuYCxcbiAgICAgICAgICAgIHJlc29sdXRpb246IGBDb21iaW5lIGFsbCBhY2Nlc3MgZGVmaW5pdGlvbnMgZm9yIGF1dGhlbnRpY2F0ZWQgdXNlcnMgb24gYSBzaW5nbGUgcGF0aCBpbnRvIG9uZSBhY2Nlc3MgcnVsZS5gLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgYWN0aW9ucyxcbiAgICAgIGlkU3Vic3RpdHV0aW9uOiAnKicsXG4gICAgfSksXG4gIH0sXG4gIGd1ZXN0OiB7XG4gICAgdG86IChhY3Rpb25zKSA9PiAoe1xuICAgICAgZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcnM6IFtnZXRVbmF1dGhSb2xlUmVzb3VyY2VBY2Nlc3NBY2NlcHRvcl0sXG4gICAgICB1bmlxdWVEZWZpbml0aW9uSWRWYWxpZGF0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdW5pcXVlRGVmaW5pdGlvbklkOiBgZ3Vlc3RgLFxuICAgICAgICAgIHZhbGlkYXRpb25FcnJvck9wdGlvbnM6IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBFbnRpdHkgYWNjZXNzIGRlZmluaXRpb24gZm9yIGd1ZXN0IHVzZXJzIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcy5gLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogYENvbWJpbmUgYWxsIGFjY2VzcyBkZWZpbml0aW9ucyBmb3IgZ3Vlc3QgdXNlcnMgb24gYSBzaW5nbGUgcGF0aCBpbnRvIG9uZSBhY2Nlc3MgcnVsZS5gLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgYWN0aW9ucyxcbiAgICAgIGlkU3Vic3RpdHV0aW9uOiAnKicsXG4gICAgfSksXG4gIH0sXG4gIGdyb3VwczogKGdyb3VwTmFtZXMpID0+ICh7XG4gICAgdG86IChhY3Rpb25zKSA9PiAoe1xuICAgICAgZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcnM6IGdyb3VwTmFtZXMubWFwKFxuICAgICAgICAoZ3JvdXBOYW1lKSA9PiAoZ2V0SW5zdGFuY2VQcm9wcykgPT5cbiAgICAgICAgICBnZXRVc2VyUm9sZVJlc291cmNlQWNjZXNzQWNjZXB0b3IoZ2V0SW5zdGFuY2VQcm9wcywgZ3JvdXBOYW1lKVxuICAgICAgKSxcbiAgICAgIHVuaXF1ZURlZmluaXRpb25JZFZhbGlkYXRpb25zOiBncm91cE5hbWVzLm1hcCgoZ3JvdXBOYW1lKSA9PiAoe1xuICAgICAgICB1bmlxdWVEZWZpbml0aW9uSWQ6IGBncm91cHMke2dyb3VwTmFtZX1gLFxuICAgICAgICB2YWxpZGF0aW9uRXJyb3JPcHRpb25zOiB7XG4gICAgICAgICAgbWVzc2FnZTogYEdyb3VwIGFjY2VzcyBkZWZpbml0aW9uIGZvciAke2dyb3VwTmFtZX0gc3BlY2lmaWVkIG11bHRpcGxlIHRpbWVzLmAsXG4gICAgICAgICAgcmVzb2x1dGlvbjogYENvbWJpbmUgYWxsIGFjY2VzcyBkZWZpbml0aW9ucyBmb3IgJHtncm91cE5hbWV9IG9uIGEgc2luZ2xlIHBhdGggaW50byBvbmUgYWNjZXNzIHJ1bGUuYCxcbiAgICAgICAgfSxcbiAgICAgIH0pKSxcbiAgICAgIGFjdGlvbnMsXG4gICAgICBpZFN1YnN0aXR1dGlvbjogJyonLFxuICAgIH0pLFxuICB9KSxcbiAgZW50aXR5OiAoZW50aXR5SWQpID0+ICh7XG4gICAgdG86IChhY3Rpb25zKSA9PiAoe1xuICAgICAgZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcnM6IFtnZXRBdXRoUm9sZVJlc291cmNlQWNjZXNzQWNjZXB0b3JdLFxuICAgICAgdW5pcXVlRGVmaW5pdGlvbklkVmFsaWRhdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHVuaXF1ZURlZmluaXRpb25JZDogYGVudGl0eSR7ZW50aXR5SWR9YCxcbiAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JPcHRpb25zOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgRW50aXR5IGFjY2VzcyBkZWZpbml0aW9uIGZvciAke2VudGl0eUlkfSBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMuYCxcbiAgICAgICAgICAgIHJlc29sdXRpb246IGBDb21iaW5lIGFsbCBhY2Nlc3MgZGVmaW5pdGlvbnMgZm9yICR7ZW50aXR5SWR9IG9uIGEgc2luZ2xlIHBhdGggaW50byBvbmUgYWNjZXNzIHJ1bGUuYCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGFjdGlvbnMsXG4gICAgICBpZFN1YnN0aXR1dGlvbjogJyR7Y29nbml0by1pZGVudGl0eS5hbWF6b25hd3MuY29tOnN1Yn0nLFxuICAgIH0pLFxuICB9KSxcbiAgcmVzb3VyY2U6IChvdGhlcikgPT4gKHtcbiAgICB0bzogKGFjdGlvbnMpID0+ICh7XG4gICAgICBnZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yczogW1xuICAgICAgICAoZ2V0SW5zdGFuY2VQcm9wcykgPT5cbiAgICAgICAgICBvdGhlci5nZXRJbnN0YW5jZShnZXRJbnN0YW5jZVByb3BzKS5nZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKCksXG4gICAgICBdLFxuICAgICAgdW5pcXVlRGVmaW5pdGlvbklkVmFsaWRhdGlvbnM6IFtdLFxuICAgICAgYWN0aW9ucyxcbiAgICAgIGlkU3Vic3RpdHV0aW9uOiAnKicsXG4gICAgfSksXG4gIH0pLFxufTtcblxuY29uc3QgZ2V0QXV0aFJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yID0gKFxuICBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wc1xuKSA9PlxuICBnZXRVc2VyUm9sZVJlc291cmNlQWNjZXNzQWNjZXB0b3IoXG4gICAgZ2V0SW5zdGFuY2VQcm9wcyxcbiAgICAnYXV0aGVudGljYXRlZFVzZXJJYW1Sb2xlJ1xuICApO1xuXG5jb25zdCBnZXRVbmF1dGhSb2xlUmVzb3VyY2VBY2Nlc3NBY2NlcHRvciA9IChcbiAgZ2V0SW5zdGFuY2VQcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHNcbikgPT5cbiAgZ2V0VXNlclJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKFxuICAgIGdldEluc3RhbmNlUHJvcHMsXG4gICAgJ3VuYXV0aGVudGljYXRlZFVzZXJJYW1Sb2xlJ1xuICApO1xuXG5jb25zdCBnZXRVc2VyUm9sZVJlc291cmNlQWNjZXNzQWNjZXB0b3IgPSAoXG4gIGdldEluc3RhbmNlUHJvcHM6IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICByb2xlTmFtZTogQXV0aFJvbGVOYW1lIHwgc3RyaW5nXG4pID0+IHtcbiAgY29uc3QgcmVzb3VyY2VBY2Nlc3NBY2NlcHRvciA9IGdldEluc3RhbmNlUHJvcHMuY29uc3RydWN0Q29udGFpbmVyXG4gICAgLmdldENvbnN0cnVjdEZhY3Rvcnk8XG4gICAgICBSZXNvdXJjZVByb3ZpZGVyICYgUmVzb3VyY2VBY2Nlc3NBY2NlcHRvckZhY3Rvcnk8QXV0aFJvbGVOYW1lIHwgc3RyaW5nPlxuICAgID4oJ0F1dGhSZXNvdXJjZXMnKVxuICAgID8uZ2V0SW5zdGFuY2UoZ2V0SW5zdGFuY2VQcm9wcylcbiAgICAuZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcihyb2xlTmFtZSk7XG4gIGlmICghcmVzb3VyY2VBY2Nlc3NBY2NlcHRvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDYW5ub3Qgc3BlY2lmeSBhdXRoIGFjY2VzcyBmb3IgJHtcbiAgICAgICAgcm9sZU5hbWUgYXMgc3RyaW5nXG4gICAgICB9IHVzZXJzIHdpdGhvdXQgZGVmaW5pbmcgYXV0aC4gU2VlIGh0dHBzOi8vZG9jcy5hbXBsaWZ5LmF3cy9nZW4yL2J1aWxkLWEtYmFja2VuZC9hdXRoL3NldC11cC1hdXRoLyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzb3VyY2VBY2Nlc3NBY2NlcHRvcjtcbn07XG4iXX0=