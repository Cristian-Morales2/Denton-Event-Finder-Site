import { BackendIdentifierConversions } from '@aws-amplify/platform-core';
import { BackendOutputClientErrorType, } from './backend_output_client_factory.js';
import { DeleteStackCommand, DescribeStacksCommand, ListStackResourcesCommand, ListStacksCommand, StackStatus, } from '@aws-sdk/client-cloudformation';
import { GetObjectCommand } from '@aws-sdk/client-s3';
import { authOutputKey, functionOutputKey, graphqlOutputKey, platformOutputKey, storageOutputKey, } from '@aws-amplify/backend-output-schemas';
/**
 * Deployment Client
 */
export class DefaultDeployedBackendClient {
    cfnClient;
    s3Client;
    backendOutputClient;
    deployedResourcesEnumerator;
    stackStatusMapper;
    arnParser;
    /**
     * Constructor for deployment client
     */
    constructor(cfnClient, s3Client, backendOutputClient, deployedResourcesEnumerator, stackStatusMapper, arnParser) {
        this.cfnClient = cfnClient;
        this.s3Client = s3Client;
        this.backendOutputClient = backendOutputClient;
        this.deployedResourcesEnumerator = deployedResourcesEnumerator;
        this.stackStatusMapper = stackStatusMapper;
        this.arnParser = arnParser;
    }
    /**
     * Deletes a sandbox with the specified id
     */
    deleteSandbox = async (sandboxBackendIdentifier) => {
        const stackName = BackendIdentifierConversions.toStackName({
            ...sandboxBackendIdentifier,
            type: 'sandbox',
        });
        await this.cfnClient.send(new DeleteStackCommand({ StackName: stackName }));
    };
    /**
     * Fetches all backend metadata for a specified backend
     */
    getBackendMetadata = async (backendId) => {
        const stackName = BackendIdentifierConversions.toStackName(backendId);
        return this.buildBackendMetadata(stackName);
    };
    listBackends = (listBackendsRequest) => {
        const backends = this.listBackendsInternal(listBackendsRequest);
        return {
            getBackendSummaryByPage: () => backends,
        };
    };
    /**
     * Returns a list of stacks for specific deployment type and status
     * @yields
     */
    async *listBackendsInternal(listBackendsRequest) {
        const stackMetadata = [];
        let nextToken;
        const deploymentType = listBackendsRequest?.deploymentType;
        const statusFilter = listBackendsRequest?.backendStatusFilters
            ? listBackendsRequest?.backendStatusFilters
            : [];
        do {
            const listStacksResponse = await this.listStacks(nextToken, statusFilter);
            const stackMetadataPromises = listStacksResponse.stackSummaries
                .filter((stackSummary) => {
                return (this.getBackendStackType(stackSummary.StackName) === deploymentType);
            })
                .map(async (stackSummary) => {
                const deploymentType = await this.tryGetDeploymentType(stackSummary);
                return {
                    name: stackSummary.StackName,
                    backendId: BackendIdentifierConversions.fromStackName(stackSummary.StackName),
                    lastUpdated: stackSummary.LastUpdatedTime ?? stackSummary.CreationTime,
                    status: this.stackStatusMapper.translateStackStatus(stackSummary.StackStatus),
                    deploymentType,
                };
            });
            const stackMetadataResolvedPromises = await Promise.all(stackMetadataPromises);
            const filteredMetadata = stackMetadataResolvedPromises.filter((stackMetadata) => stackMetadata.deploymentType === deploymentType);
            stackMetadata.push(...filteredMetadata);
            nextToken = listStacksResponse.nextToken;
            if (stackMetadata.length !== 0) {
                yield stackMetadata;
            }
        } while (stackMetadata.length === 0 && nextToken);
    }
    getBackendStackType = (stackName) => {
        const backendIdentifier = BackendIdentifierConversions.fromStackName(stackName);
        return backendIdentifier?.type;
    };
    tryGetDeploymentType = async (stackSummary) => {
        const backendIdentifier = {
            stackName: stackSummary.StackName,
        };
        try {
            const backendOutput = await this.backendOutputClient.getOutput(backendIdentifier);
            return backendOutput[platformOutputKey].payload
                .deploymentType;
        }
        catch (error) {
            if (error.code ===
                BackendOutputClientErrorType.METADATA_RETRIEVAL_ERROR) {
                // Ignore stacks where metadata cannot be retrieved. These are not Amplify stacks, or not compatible with this library.
                return;
            }
            throw error;
        }
    };
    listStacks = async (nextToken, stackStatusFilter) => {
        const stacks = await this.cfnClient.send(new ListStacksCommand({
            NextToken: nextToken,
            StackStatusFilter: stackStatusFilter.length > 0
                ? stackStatusFilter
                : Object.values(StackStatus).filter((status) => status !== StackStatus.DELETE_COMPLETE),
        }));
        nextToken = stacks.NextToken;
        return { stackSummaries: stacks.StackSummaries ?? [], nextToken };
    };
    buildBackendMetadata = async (stackName) => {
        const stackBackendIdentifier = {
            stackName,
        };
        const backendOutput = await this.backendOutputClient.getOutput(stackBackendIdentifier);
        const stackDescription = await this.cfnClient.send(new DescribeStacksCommand({ StackName: stackName }));
        const stack = stackDescription?.Stacks?.[0];
        const status = this.stackStatusMapper.translateStackStatus(stack?.StackStatus);
        const lastUpdated = stack?.LastUpdatedTime ?? stack?.CreationTime;
        const stackResources = await this.cfnClient.send(new ListStackResourcesCommand({
            StackName: stackName,
        }));
        const childStackPromises = stackResources.StackResourceSummaries?.filter((stackResourceSummary) => {
            return (stackResourceSummary.ResourceType === 'AWS::CloudFormation::Stack');
        }).map(async (stackResourceSummary) => {
            // arn:aws:{service}:{region}:{account}:stack/{stackName}/{additionalFields}
            const arnParts = stackResourceSummary.PhysicalResourceId?.split('/');
            const childStackName = arnParts?.[1];
            if (!childStackName) {
                return;
            }
            const stackDescription = await this.cfnClient.send(new DescribeStacksCommand({ StackName: childStackName }));
            const stack = stackDescription?.Stacks?.[0];
            return stack;
        }) ?? [];
        const childStacks = await Promise.all(childStackPromises);
        const authStack = childStacks.find((nestedStack) => nestedStack?.StackName?.includes('auth'));
        const storageStack = childStacks.find((nestedStack) => nestedStack?.StackName?.includes('storage'));
        const apiStack = childStacks.find((nestedStack) => nestedStack?.StackName?.includes('data'));
        const functionStack = childStacks.find((nestedStack) => nestedStack?.StackName?.includes('function'));
        // stack?.StackId is the ARN of the stack
        const { accountId, region } = this.arnParser.tryParseArn(stack?.StackId);
        const resources = await this.deployedResourcesEnumerator.listDeployedResources(this.cfnClient, stackName, accountId, region);
        const backendMetadataObject = {
            deploymentType: backendOutput[platformOutputKey].payload
                .deploymentType,
            lastUpdated,
            status,
            name: stackName,
            resources,
        };
        if (authStack) {
            backendMetadataObject.authConfiguration = {
                status: this.stackStatusMapper.translateStackStatus(authStack.StackStatus),
                lastUpdated: authStack.LastUpdatedTime ?? authStack.CreationTime,
                userPoolId: backendOutput[authOutputKey]?.payload.userPoolId,
            };
        }
        if (storageStack) {
            backendMetadataObject.storageConfiguration = {
                status: this.stackStatusMapper.translateStackStatus(storageStack.StackStatus),
                lastUpdated: storageStack.LastUpdatedTime ?? storageStack.CreationTime,
                s3BucketName: backendOutput[storageOutputKey]?.payload
                    .bucketName,
            };
        }
        if (apiStack) {
            const additionalAuthTypesString = backendOutput[graphqlOutputKey]?.payload
                .awsAppsyncAdditionalAuthenticationTypes;
            const additionalAuthTypes = additionalAuthTypesString
                ? additionalAuthTypesString.split(',')
                : [];
            backendMetadataObject.apiConfiguration = {
                status: this.stackStatusMapper.translateStackStatus(apiStack.StackStatus),
                lastUpdated: apiStack.LastUpdatedTime ?? apiStack.CreationTime,
                graphqlEndpoint: backendOutput[graphqlOutputKey]?.payload
                    .awsAppsyncApiEndpoint,
                defaultAuthType: backendOutput[graphqlOutputKey]?.payload
                    .awsAppsyncAuthenticationType,
                additionalAuthTypes,
                conflictResolutionMode: backendOutput[graphqlOutputKey]?.payload
                    .awsAppsyncConflictResolutionMode,
                apiId: backendOutput[graphqlOutputKey]?.payload
                    .awsAppsyncApiId,
                modelSchemaS3Uri: backendOutput[graphqlOutputKey]?.payload
                    .amplifyApiModelSchemaS3Uri,
            };
        }
        if (functionStack) {
            const functionResources = resources.filter((resource) => resource.resourceType === 'AWS::Lambda::Function');
            const functionConfigurations = [];
            const definedFunctionsString = backendOutput[functionOutputKey]?.payload.definedFunctions;
            const customerFunctionNames = definedFunctionsString
                ? JSON.parse(definedFunctionsString)
                : [];
            customerFunctionNames.forEach((functionName) => {
                const resource = functionResources.find((func) => func.physicalResourceId === functionName);
                if (resource) {
                    functionConfigurations.push({
                        status: this.stackStatusMapper.translateStackStatus(resource.resourceStatus),
                        lastUpdated: resource.lastUpdated ??
                            functionStack.LastUpdatedTime ??
                            functionStack.CreationTime,
                        functionName,
                    });
                }
            });
            backendMetadataObject.functionConfigurations = functionConfigurations;
        }
        return backendMetadataObject;
    };
    fetchSchema = async (schemaS3Uri) => {
        if (!schemaS3Uri) {
            throw new Error('schemaS3Uri output is not available');
        }
        // s3://{bucketName}/{fileName}
        const uriParts = schemaS3Uri.split('/');
        const bucketName = uriParts[2];
        const objectPath = uriParts.slice(3, uriParts.length).join('/');
        if (!bucketName || !objectPath) {
            throw new Error('schemaS3Uri is not valid');
        }
        const s3Response = await this.s3Client.send(new GetObjectCommand({ Bucket: bucketName, Key: objectPath }));
        if (!s3Response.Body) {
            throw new Error(`s3Response from ${schemaS3Uri} does not contain a Body`);
        }
        return await s3Response.Body?.transformToString();
    };
}
//# sourceMappingURL=data:application/json;base64,