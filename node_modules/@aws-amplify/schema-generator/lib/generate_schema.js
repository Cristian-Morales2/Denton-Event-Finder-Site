import { TypescriptDataSchemaGenerator } from '@aws-amplify/graphql-schema-generator';
import fs from 'fs/promises';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Schema generator class.
 */
export class SchemaGenerator {
    generate = async (props) => {
        const dbConfig = parseDatabaseUrl(props.connectionUri.value);
        try {
            const schema = await TypescriptDataSchemaGenerator.generate({
                ...dbConfig,
                connectionUriSecretName: props.connectionUri.secretName,
            });
            await fs.writeFile(props.out, schema);
        }
        catch (err) {
            const databaseError = err;
            if (databaseError.code === 'ETIMEDOUT') {
                throw new AmplifyUserError('DatabaseConnectionError', {
                    message: `Unable to connect to the database at ${dbConfig.host}:${dbConfig.port}. `,
                    resolution: 'Check if the credentials are correct. Also, check if the database is running and accessible from the network.',
                }, databaseError);
            }
            throw err;
        }
    };
}
const DEFAULT_ENGINE = 'mysql';
/**
 * Error for database connection failures.
 * This class is intended to be used for casting database connection errors.
 * Do not create instances of this class directly.
 */
class DatabaseConnectError extends Error {
    code;
    /**
     * Creates database connection error.
     */
    constructor(code) {
        super(`Database connection error: ${code}`);
        this.code = code;
    }
}
/**
 * Parses database URL into a configuration object.
 */
export const parseDatabaseUrl = (databaseUrl) => {
    try {
        const parsedDatabaseUrl = new URL(databaseUrl);
        const { username: encodedUsername, password: encodedPassword, hostname: encodedHost, } = parsedDatabaseUrl;
        const username = decodeURIComponent(encodedUsername);
        const password = decodeURIComponent(encodedPassword);
        const host = decodeURIComponent(encodedHost);
        const database = decodeURIComponent(parsedDatabaseUrl?.pathname?.slice(1));
        // Default engine is MySQL
        const engine = constructDBEngine(parsedDatabaseUrl?.protocol?.slice(0, -1) ?? DEFAULT_ENGINE);
        const port = parsedDatabaseUrl?.port
            ? parseInt(parsedDatabaseUrl?.port, 10)
            : getDefaultPort(engine);
        const config = {
            engine,
            username,
            password,
            database,
            host,
            port,
        };
        const missingParts = Object.keys(config).filter((part) => !config[part]);
        if (missingParts.length > 0) {
            throw new AmplifyUserError('DatabaseUrlParseError', {
                message: `One or more parts of the database URL is missing. Missing [${missingParts.join(', ')}].`,
                resolution: 'Ensure the database URL follows the pattern "[mysql|postgresql]://username:password@hostname:port/database".',
            });
        }
        return config;
    }
    catch (err) {
        const error = err;
        throw new AmplifyUserError('DatabaseUrlParseError', {
            message: `Unable to parse the database URL. ${error.message}`,
            resolution: 'Check if the database URL is correct and accessible.',
        });
    }
};
const constructDBEngine = (engine) => {
    switch (engine) {
        case 'mysql':
            return 'mysql';
        case 'postgresql':
        case 'postgres':
            return 'postgresql';
        default:
            throw new Error(`Unsupported database engine: ${engine}`);
    }
};
const getDefaultPort = (engine) => {
    switch (engine) {
        case 'mysql':
            return 3306;
        case 'postgresql':
            return 5432;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfc2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dlbmVyYXRlX3NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN0RixPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFjOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUMxQixRQUFRLEdBQUcsS0FBSyxFQUFFLEtBQTRCLEVBQUUsRUFBRTtRQUNoRCxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdELElBQUk7WUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLDZCQUE2QixDQUFDLFFBQVEsQ0FBQztnQkFDMUQsR0FBRyxRQUFRO2dCQUNYLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsVUFBVTthQUN4RCxDQUFDLENBQUM7WUFDSCxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN2QztRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxhQUFhLEdBQUcsR0FBMkIsQ0FBQztZQUNsRCxJQUFJLGFBQWEsQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO2dCQUN0QyxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLHlCQUF5QixFQUN6QjtvQkFDRSxPQUFPLEVBQUUsd0NBQXdDLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksSUFBSTtvQkFDbkYsVUFBVSxFQUNSLCtHQUErRztpQkFDbEgsRUFDRCxhQUFhLENBQ2QsQ0FBQzthQUNIO1lBQ0QsTUFBTSxHQUFHLENBQUM7U0FDWDtJQUNILENBQUMsQ0FBQztDQUNIO0FBR0QsTUFBTSxjQUFj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TUFBTSxFQUFFO1FBQ2QsS0FBSyxPQUFPO1lBQ1YsT0FBTyxJQUFJLENBQUM7UUFDZCxLQUFLLFlBQVk7WUFDZixPQUFPLElBQUksQ0FBQztLQUNmO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZXNjcmlwdERhdGFTY2hlbWFHZW5lcmF0b3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvZ3JhcGhxbC1zY2hlbWEtZ2VuZXJhdG9yJztcbmltcG9ydCBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG5leHBvcnQgdHlwZSBTY2hlbWFHZW5lcmF0b3JDb25maWcgPSB7XG4gIGNvbm5lY3Rpb25Vcmk6IHtcbiAgICBzZWNyZXROYW1lOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgfTtcbiAgb3V0OiBzdHJpbmc7XG59O1xuXG50eXBlIEFtcGxpZnlHZW5lcmF0ZVNjaGVtYUVycm9yID1cbiAgfCAnRGF0YWJhc2VDb25uZWN0aW9uRXJyb3InXG4gIHwgJ0RhdGFiYXNlVXJsUGFyc2VFcnJvcic7XG5cbi8qKlxuICogU2NoZW1hIGdlbmVyYXRvciBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNjaGVtYUdlbmVyYXRvciB7XG4gIGdlbmVyYXRlID0gYXN5bmMgKHByb3BzOiBTY2hlbWFHZW5lcmF0b3JDb25maWcpID0+IHtcbiAgICBjb25zdCBkYkNvbmZpZyA9IHBhcnNlRGF0YWJhc2VVcmwocHJvcHMuY29ubmVjdGlvblVyaS52YWx1ZSk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgVHlwZXNjcmlwdERhdGFTY2hlbWFHZW5lcmF0b3IuZ2VuZXJhdGUoe1xuICAgICAgICAuLi5kYkNvbmZpZyxcbiAgICAgICAgY29ubmVjdGlvblVyaVNlY3JldE5hbWU6IHByb3BzLmNvbm5lY3Rpb25Vcmkuc2VjcmV0TmFtZSxcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHByb3BzLm91dCwgc2NoZW1hKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IGRhdGFiYXNlRXJyb3IgPSBlcnIgYXMgRGF0YWJhc2VDb25uZWN0RXJyb3I7XG4gICAgICBpZiAoZGF0YWJhc2VFcnJvci5jb2RlID09PSAnRVRJTUVET1VUJykge1xuICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcjxBbXBsaWZ5R2VuZXJhdGVTY2hlbWFFcnJvcj4oXG4gICAgICAgICAgJ0RhdGFiYXNlQ29ubmVjdGlvbkVycm9yJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIGF0ICR7ZGJDb25maWcuaG9zdH06JHtkYkNvbmZpZy5wb3J0fS4gYCxcbiAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICdDaGVjayBpZiB0aGUgY3JlZGVudGlhbHMgYXJlIGNvcnJlY3QuIEFsc28sIGNoZWNrIGlmIHRoZSBkYXRhYmFzZSBpcyBydW5uaW5nIGFuZCBhY2Nlc3NpYmxlIGZyb20gdGhlIG5ldHdvcmsuJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGFiYXNlRXJyb3JcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFNRTEVuZ2luZSA9ICdteXNxbCcgfCAncG9zdGdyZXNxbCc7XG5jb25zdCBERUZBVUxUX0VOR0lORSA9ICdteXNxbCc7XG5cbmV4cG9ydCB0eXBlIFNRTERhdGFTb3VyY2VDb25maWcgPSB7XG4gIGVuZ2luZTogU1FMRW5naW5lO1xuICB1c2VybmFtZTogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nO1xuICBob3N0OiBzdHJpbmc7XG4gIGRhdGFiYXNlOiBzdHJpbmc7XG4gIHBvcnQ6IG51bWJlcjtcbn07XG5cbi8qKlxuICogRXJyb3IgZm9yIGRhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbHVyZXMuXG4gKiBUaGlzIGNsYXNzIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgZm9yIGNhc3RpbmcgZGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvcnMuXG4gKiBEbyBub3QgY3JlYXRlIGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGRpcmVjdGx5LlxuICovXG5hYnN0cmFjdCBjbGFzcyBEYXRhYmFzZUNvbm5lY3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgZGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGNvZGU/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihgRGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvcjogJHtjb2RlfWApO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2VzIGRhdGFiYXNlIFVSTCBpbnRvIGEgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZURhdGFiYXNlVXJsID0gKGRhdGFiYXNlVXJsOiBzdHJpbmcpOiBTUUxEYXRhU291cmNlQ29uZmlnID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWREYXRhYmFzZVVybCA9IG5ldyBVUkwoZGF0YWJhc2VVcmwpO1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJuYW1lOiBlbmNvZGVkVXNlcm5hbWUsXG4gICAgICBwYXNzd29yZDogZW5jb2RlZFBhc3N3b3JkLFxuICAgICAgaG9zdG5hbWU6IGVuY29kZWRIb3N0LFxuICAgIH0gPSBwYXJzZWREYXRhYmFzZVVybDtcbiAgICBjb25zdCB1c2VybmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVXNlcm5hbWUpO1xuICAgIGNvbnN0IHBhc3N3b3JkID0gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRQYXNzd29yZCk7XG4gICAgY29uc3QgaG9zdCA9IGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkSG9zdCk7XG4gICAgY29uc3QgZGF0YWJhc2UgPSBkZWNvZGVVUklDb21wb25lbnQocGFyc2VkRGF0YWJhc2VVcmw/LnBhdGhuYW1lPy5zbGljZSgxKSk7XG4gICAgLy8gRGVmYXVsdCBlbmdpbmUgaXMgTXlTUUxcbiAgICBjb25zdCBlbmdpbmUgPSBjb25zdHJ1Y3REQkVuZ2luZShcbiAgICAgIHBhcnNlZERhdGFiYXNlVXJsPy5wcm90b2NvbD8uc2xpY2UoMCwgLTEpID8/IERFRkFVTFRfRU5HSU5FXG4gICAgKTtcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VkRGF0YWJhc2VVcmw/LnBvcnRcbiAgICAgID8gcGFyc2VJbnQocGFyc2VkRGF0YWJhc2VVcmw/LnBvcnQsIDEwKVxuICAgICAgOiBnZXREZWZhdWx0UG9ydChlbmdpbmUpO1xuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgZW5naW5lLFxuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIGRhdGFiYXNlLFxuICAgICAgaG9zdCxcbiAgICAgIHBvcnQsXG4gICAgfSBhcyBTUUxEYXRhU291cmNlQ29uZmlnO1xuXG4gICAgY29uc3QgbWlzc2luZ1BhcnRzID0gKFxuICAgICAgT2JqZWN0LmtleXMoY29uZmlnKSBhcyBBcnJheTxrZXlvZiBTUUxEYXRhU291cmNlQ29uZmlnPlxuICAgICkuZmlsdGVyKChwYXJ0KSA9PiAhY29uZmlnW3BhcnRdKTtcblxuICAgIGlmIChtaXNzaW5nUGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3I8QW1wbGlmeUdlbmVyYXRlU2NoZW1hRXJyb3I+KFxuICAgICAgICAnRGF0YWJhc2VVcmxQYXJzZUVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6IGBPbmUgb3IgbW9yZSBwYXJ0cyBvZiB0aGUgZGF0YWJhc2UgVVJMIGlzIG1pc3NpbmcuIE1pc3NpbmcgWyR7bWlzc2luZ1BhcnRzLmpvaW4oXG4gICAgICAgICAgICAnLCAnXG4gICAgICAgICAgKX1dLmAsXG4gICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICdFbnN1cmUgdGhlIGRhdGFiYXNlIFVSTCBmb2xsb3dzIHRoZSBwYXR0ZXJuIFwiW215c3FsfHBvc3RncmVzcWxdOi8vdXNlcm5hbWU6cGFzc3dvcmRAaG9zdG5hbWU6cG9ydC9kYXRhYmFzZVwiLicsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc3QgZXJyb3IgPSBlcnIgYXMgRXJyb3I7XG4gICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3I8QW1wbGlmeUdlbmVyYXRlU2NoZW1hRXJyb3I+KFxuICAgICAgJ0RhdGFiYXNlVXJsUGFyc2VFcnJvcicsXG4gICAgICB7XG4gICAgICAgIG1lc3NhZ2U6IGBVbmFibGUgdG8gcGFyc2UgdGhlIGRhdGFiYXNlIFVSTC4gJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIHJlc29sdXRpb246ICdDaGVjayBpZiB0aGUgZGF0YWJhc2UgVVJMIGlzIGNvcnJlY3QgYW5kIGFjY2Vzc2libGUuJyxcbiAgICAgIH1cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBjb25zdHJ1Y3REQkVuZ2luZSA9IChlbmdpbmU6IHN0cmluZyk6IFNRTEVuZ2luZSA9PiB7XG4gIHN3aXRjaCAoZW5naW5lKSB7XG4gICAgY2FzZSAnbXlzcWwnOlxuICAgICAgcmV0dXJuICdteXNxbCc7XG4gICAgY2FzZSAncG9zdGdyZXNxbCc6XG4gICAgY2FzZSAncG9zdGdyZXMnOlxuICAgICAgcmV0dXJuICdwb3N0Z3Jlc3FsJztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkYXRhYmFzZSBlbmdpbmU6ICR7ZW5naW5lfWApO1xuICB9XG59O1xuXG5jb25zdCBnZXREZWZhdWx0UG9ydCA9IChlbmdpbmU6IFNRTEVuZ2luZSk6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAoZW5naW5lKSB7XG4gICAgY2FzZSAnbXlzcWwnOlxuICAgICAgcmV0dXJuIDMzMDY7XG4gICAgY2FzZSAncG9zdGdyZXNxbCc6XG4gICAgICByZXR1cm4gNTQzMjtcbiAgfVxufTtcbiJdfQ==