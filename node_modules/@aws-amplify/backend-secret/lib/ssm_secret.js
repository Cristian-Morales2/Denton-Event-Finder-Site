import { SecretError } from './secret_error.js';
import { ParameterPathConversions } from '@aws-amplify/platform-core';
/**
 * This class implements Amplify Secret using SSM parameter store.
 */
export class SSMSecretClient {
    ssmClient;
    /**
     * Creates a new instance of SSMSecret.
     */
    constructor(ssmClient) {
        this.ssmClient = ssmClient;
    }
    /**
     * Get a secret from SSM parameter store.
     */
    getSecret = async (backendIdentifier, secretIdentifier) => {
        let secret;
        const name = ParameterPathConversions.toParameterFullPath(backendIdentifier, secretIdentifier.name);
        try {
            const resp = await this.ssmClient.getParameter({
                Name: secretIdentifier.version
                    ? `${name}:${secretIdentifier.version}`
                    : name,
                WithDecryption: true,
            });
            if (resp.Parameter?.Value) {
                secret = {
                    name: secretIdentifier.name,
                    version: resp.Parameter.Version,
                    value: resp.Parameter.Value,
                    lastUpdated: resp.Parameter.LastModifiedDate,
                };
            }
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
        if (!secret) {
            throw new SecretError(`The value of secret '${secretIdentifier.name}' is undefined`);
        }
        return secret;
    };
    /**
     * List secrets from SSM parameter store.
     */
    listSecrets = async (backendIdentifier) => {
        const path = ParameterPathConversions.toParameterPrefix(backendIdentifier);
        const result = [];
        try {
            const resp = await this.ssmClient.getParametersByPath({
                Path: path,
                WithDecryption: true,
            });
            resp.Parameters?.forEach((param) => {
                if (!param.Name || !param.Value) {
                    return;
                }
                const secretName = param.Name.split('/').pop();
                if (secretName) {
                    result.push({
                        name: secretName,
                        version: param.Version,
                        lastUpdated: param.LastModifiedDate,
                    });
                }
            });
            return result;
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
    };
    /**
     * Set a secret in SSM parameter store.
     */
    setSecret = async (backendIdentifier, secretName, secretValue) => {
        const name = ParameterPathConversions.toParameterFullPath(backendIdentifier, secretName);
        try {
            const resp = await this.ssmClient.putParameter({
                Name: name,
                Type: 'SecureString',
                Value: secretValue,
                Description: `Amplify Secret`,
                Overwrite: true,
            });
            return {
                name: secretName,
                version: resp.Version,
            };
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
    };
    /**
     * Remove a secret from SSM parameter store.
     */
    removeSecret = async (backendIdentifier, secretName) => {
        const name = ParameterPathConversions.toParameterFullPath(backendIdentifier, secretName);
        try {
            await this.ssmClient.deleteParameter({
                Name: name,
            });
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,