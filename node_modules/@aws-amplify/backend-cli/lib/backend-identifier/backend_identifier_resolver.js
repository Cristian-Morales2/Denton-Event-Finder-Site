/**
 * Translates args to BackendIdentifier.
 * Throws if translation can't be made (this should never happen if command validation works correctly).
 */
export class AppBackendIdentifierResolver {
    namespaceResolver;
    /**
     * Instantiates BackendIdentifierResolver
     */
    constructor(namespaceResolver) {
        this.namespaceResolver = namespaceResolver;
    }
    resolve = async (args) => {
        if (args.stack) {
            return { stackName: args.stack };
        }
        else if (args.appId && args.branch) {
            return {
                namespace: args.appId,
                name: args.branch,
                type: 'branch',
            };
        }
        else if (args.branch) {
            return {
                appName: await this.namespaceResolver.resolve(),
                branchName: args.branch,
            };
        }
        return undefined;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9pZGVudGlmaWVyX3Jlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZUE7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUlWO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7SUFBRyxDQUFDO0lBQ3JFLE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBaUMsRUFDZSxFQUFFO1FBQ2xELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDcEMsT0FBTztnQkFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDakIsSUFBSSxFQUFFLFFBQVE7YUFDZixDQUFDO1NBQ0g7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdEIsT0FBTztnQkFDTCxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFO2dCQUMvQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU07YUFDeEIsQ0FBQztTQUNIO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IE5hbWVzcGFjZVJlc29sdmVyIH0gZnJvbSAnLi9sb2NhbF9uYW1lc3BhY2VfcmVzb2x2ZXIuanMnO1xuXG5leHBvcnQgdHlwZSBCYWNrZW5kSWRlbnRpZmllclBhcmFtZXRlcnMgPSB7XG4gIHN0YWNrPzogc3RyaW5nO1xuICBhcHBJZD86IHN0cmluZztcbiAgYnJhbmNoPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciA9IHtcbiAgcmVzb2x2ZTogKFxuICAgIGFyZ3M6IEJhY2tlbmRJZGVudGlmaWVyUGFyYW1ldGVyc1xuICApID0+IFByb21pc2U8RGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB8IHVuZGVmaW5lZD47XG59O1xuXG4vKipcbiAqIFRyYW5zbGF0ZXMgYXJncyB0byBCYWNrZW5kSWRlbnRpZmllci5cbiAqIFRocm93cyBpZiB0cmFuc2xhdGlvbiBjYW4ndCBiZSBtYWRlICh0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4gaWYgY29tbWFuZCB2YWxpZGF0aW9uIHdvcmtzIGNvcnJlY3RseSkuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyIGltcGxlbWVudHMgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciB7XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBuYW1lc3BhY2VSZXNvbHZlcjogTmFtZXNwYWNlUmVzb2x2ZXIpIHt9XG4gIHJlc29sdmUgPSBhc3luYyAoXG4gICAgYXJnczogQmFja2VuZElkZW50aWZpZXJQYXJhbWV0ZXJzXG4gICk6IFByb21pc2U8RGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB8IHVuZGVmaW5lZD4gPT4ge1xuICAgIGlmIChhcmdzLnN0YWNrKSB7XG4gICAgICByZXR1cm4geyBzdGFja05hbWU6IGFyZ3Muc3RhY2sgfTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MuYXBwSWQgJiYgYXJncy5icmFuY2gpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWVzcGFjZTogYXJncy5hcHBJZCxcbiAgICAgICAgbmFtZTogYXJncy5icmFuY2gsXG4gICAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MuYnJhbmNoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhcHBOYW1lOiBhd2FpdCB0aGlzLm5hbWVzcGFjZVJlc29sdmVyLnJlc29sdmUoKSxcbiAgICAgICAgYnJhbmNoTmFtZTogYXJncy5icmFuY2gsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuIl19