import * as os from 'node:os';
import envinfo from 'envinfo';
import { format } from '@aws-amplify/cli-core';
/**
 * Provides environment information.
 */
export class EnvironmentInfoProvider {
    /**
     * Get environment information
     */
    async getEnvInfo() {
        const info = await envinfo.run({
            System: ['OS', 'CPU', 'Memory', 'Shell'],
            Binaries: ['Node', 'Yarn', 'npm', 'pnpm'],
            npmPackages: [
                '@aws-amplify/backend',
                '@aws-amplify/backend-cli',
                'typescript',
                'aws-cdk',
                'aws-cdk-lib',
                'aws-amplify',
            ],
        }, { json: true, showNotFound: true });
        return this.formatEnvInfo(JSON.parse(info));
    }
    /**
     * Format environment information.
     * @param info - The environment information.
     * @returns The formatted environment information.
     */
    formatEnvInfo(info) {
        const system = [
            'System:',
            ...Object.entries(info.System).map(([part, details]) => {
                if (typeof details !== 'string') {
                    return format.indent(`${part}: ${details.path}`);
                }
                return format.indent(`${part}: ${details}`);
            }),
        ];
        const binaries = [
            'Binaries:',
            ...Object.entries(info.Binaries).map(([name, binary]) => {
                return format.indent(`${name}: ${binary.version} - ${binary.path}`);
            }),
        ];
        const npmPackages = [
            'NPM Packages:',
            ...Object.entries(info.npmPackages).map(([name, details]) => {
                if (typeof details !== 'string') {
                    return format.indent(`${name}: ${details.installed}`);
                }
                return format.indent(`${name}: ${details}`);
            }),
        ];
        const output = [system, binaries, npmPackages].flat().join(os.EOL);
        return output;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52X2luZm9fcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5mby9lbnZfaW5mb19wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLE9BQU8sTUFBTSxTQUFTLENBQUM7QUFDOUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRy9DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQzs7T0FFRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ2QsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUM1QjtZQUNFLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztZQUN4QyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7WUFDekMsV0FBVyxFQUFFO2dCQUNYLHNCQUFzQjtnQkFDdEIsMEJBQTBCO2dCQUMxQixZQUFZO2dCQUNaLFNBQVM7Z0JBQ1QsYUFBYTtnQkFDYixhQUFhO2FBQ2Q7U0FDRixFQUNELEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQ25DLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssYUFBYSxDQUFDLElBQWE7UUFDakMsTUFBTSxNQUFNLEdBQUc7WUFDYixTQUFTO1lBQ1QsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO2dCQUNyRCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtvQkFDL0IsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUNsRDtnQkFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEtBQUssT0FBTyxFQUFFLENBQUMsQ0FBQztZQUM5QyxDQUFDLENBQUM7U0FDSCxDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUc7WUFDZixXQUFXO1lBQ1gsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO2dCQUN0RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN0RSxDQUFDLENBQUM7U0FDSCxDQUFDO1FBQ0YsTUFBTSxXQUFXLEdBQUc7WUFDbEIsZUFBZTtZQUNmLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRTtnQkFDMUQsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7b0JBQy9CLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksS0FBSyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztpQkFDdkQ7Z0JBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxLQUFLLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDOUMsQ0FBQyxDQUFDO1NBQ0gsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9zIGZyb20gJ25vZGU6b3MnO1xuaW1wb3J0IGVudmluZm8gZnJvbSAnZW52aW5mbyc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgRW52SW5mbyB9IGZyb20gJy4vZW52X2luZm9fcHJvdmlkZXJfdHlwZXMuanMnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGVudmlyb25tZW50IGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgRW52aXJvbm1lbnRJbmZvUHJvdmlkZXIge1xuICAvKipcbiAgICogR2V0IGVudmlyb25tZW50IGluZm9ybWF0aW9uXG4gICAqL1xuICBhc3luYyBnZXRFbnZJbmZvKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgaW5mbyA9IGF3YWl0IGVudmluZm8ucnVuKFxuICAgICAge1xuICAgICAgICBTeXN0ZW06IFsnT1MnLCAnQ1BVJywgJ01lbW9yeScsICdTaGVsbCddLFxuICAgICAgICBCaW5hcmllczogWydOb2RlJywgJ1lhcm4nLCAnbnBtJywgJ3BucG0nXSxcbiAgICAgICAgbnBtUGFja2FnZXM6IFtcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQnLFxuICAgICAgICAgICdAYXdzLWFtcGxpZnkvYmFja2VuZC1jbGknLFxuICAgICAgICAgICd0eXBlc2NyaXB0JyxcbiAgICAgICAgICAnYXdzLWNkaycsXG4gICAgICAgICAgJ2F3cy1jZGstbGliJyxcbiAgICAgICAgICAnYXdzLWFtcGxpZnknLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHsganNvbjogdHJ1ZSwgc2hvd05vdEZvdW5kOiB0cnVlIH1cbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZvcm1hdEVudkluZm8oSlNPTi5wYXJzZShpbmZvKSk7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IGVudmlyb25tZW50IGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0gaW5mbyAtIFRoZSBlbnZpcm9ubWVudCBpbmZvcm1hdGlvbi5cbiAgICogQHJldHVybnMgVGhlIGZvcm1hdHRlZCBlbnZpcm9ubWVudCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHByaXZhdGUgZm9ybWF0RW52SW5mbyhpbmZvOiBFbnZJbmZvKTogc3RyaW5nIHtcbiAgICBjb25zdCBzeXN0ZW0gPSBbXG4gICAgICAnU3lzdGVtOicsXG4gICAgICAuLi5PYmplY3QuZW50cmllcyhpbmZvLlN5c3RlbSkubWFwKChbcGFydCwgZGV0YWlsc10pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBkZXRhaWxzICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiBmb3JtYXQuaW5kZW50KGAke3BhcnR9OiAke2RldGFpbHMucGF0aH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0LmluZGVudChgJHtwYXJ0fTogJHtkZXRhaWxzfWApO1xuICAgICAgfSksXG4gICAgXTtcbiAgICBjb25zdCBiaW5hcmllcyA9IFtcbiAgICAgICdCaW5hcmllczonLFxuICAgICAgLi4uT2JqZWN0LmVudHJpZXMoaW5mby5CaW5hcmllcykubWFwKChbbmFtZSwgYmluYXJ5XSkgPT4ge1xuICAgICAgICByZXR1cm4gZm9ybWF0LmluZGVudChgJHtuYW1lfTogJHtiaW5hcnkudmVyc2lvbn0gLSAke2JpbmFyeS5wYXRofWApO1xuICAgICAgfSksXG4gICAgXTtcbiAgICBjb25zdCBucG1QYWNrYWdlcyA9IFtcbiAgICAgICdOUE0gUGFja2FnZXM6JyxcbiAgICAgIC4uLk9iamVjdC5lbnRyaWVzKGluZm8ubnBtUGFja2FnZXMpLm1hcCgoW25hbWUsIGRldGFpbHNdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZGV0YWlscyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0LmluZGVudChgJHtuYW1lfTogJHtkZXRhaWxzLmluc3RhbGxlZH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0LmluZGVudChgJHtuYW1lfTogJHtkZXRhaWxzfWApO1xuICAgICAgfSksXG4gICAgXTtcblxuICAgIGNvbnN0IG91dHB1dCA9IFtzeXN0ZW0sIGJpbmFyaWVzLCBucG1QYWNrYWdlc10uZmxhdCgpLmpvaW4ob3MuRU9MKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG59XG4iXX0=