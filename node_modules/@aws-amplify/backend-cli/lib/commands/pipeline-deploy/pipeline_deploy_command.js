import _isCI from 'is-ci';
import { ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
/**
 * An entry point for deploy command.
 */
export class PipelineDeployCommand {
    clientConfigGenerator;
    backendDeployer;
    isCiEnvironment;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for deploy command.
     */
    constructor(clientConfigGenerator, backendDeployer, isCiEnvironment = _isCI) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendDeployer = backendDeployer;
        this.isCiEnvironment = isCiEnvironment;
        this.command = 'pipeline-deploy';
        this.describe =
            'Command to deploy backends in a custom CI/CD pipeline. This command is not intended to be used locally.';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        if (!this.isCiEnvironment) {
            throw new Error('It looks like this command is being run outside of a CI/CD workflow. To deploy locally use `amplify sandbox` instead.');
        }
        const backendId = {
            namespace: args.appId,
            name: args.branch,
            type: 'branch',
        };
        await this.backendDeployer.deploy(backendId, {
            validateAppSources: true,
        });
        await this.clientConfigGenerator.generateClientConfigToFile(backendId, args.outputsVersion, args.outputsOutDir);
    };
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('branch', {
            describe: 'Name of the git branch being deployed',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('app-id', {
            describe: 'The app id of the target Amplify app',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('outputs-out-dir', {
            describe: 'A path to directory where amplify_outputs is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('outputs-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQU0xQixPQUFPLEVBRUwseUJBQXlCLEVBQ3pCLDZCQUE2QixHQUM5QixNQUFNLDRCQUE0QixDQUFDO0FBWXBDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQWlCYjtJQUNBO0lBQ0E7SUFoQm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIscUJBQW1ELEVBQ25ELGVBQWdDLEVBQ2hDLGtCQUFnQyxLQUFLO1FBRnJDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBOEI7UUFDbkQsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLG9CQUFlLEdBQWYsZUFBZSxDQUFzQjtRQUV0RCxJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRO1lBQ1gseUdBQXlHLENBQUM7SUFDOUcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUFzRCxFQUN2QyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsdUhBQXVILENBQ3hILENBQUM7U0FDSDtRQUVELE1BQU0sU0FBUyxHQUFzQjtZQUNuQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2pCLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQzNDLGtCQUFrQixFQUFFLElBQUk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsMEJBQTBCLENBQ3pELFNBQVMsRUFDVCxJQUFJLENBQUMsY0FBcUMsRUFDMUMsSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBc0MsRUFBRTtRQUM1RCxPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ2QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsdUNBQXVDO1lBQ2pELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsc0NBQXNDO1lBQ2hELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLGlCQUFpQixFQUFFO1lBQ3pCLFFBQVEsRUFDTixzSEFBc0g7WUFDeEgsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxNQUFNLENBQUMsaUJBQWlCLEVBQUU7WUFDekIsUUFBUSxFQUNOLDZKQUE2SjtZQUMvSixJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUM7WUFDakQsT0FBTyxFQUFFLDZCQUE2QjtTQUN2QyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfaXNDSSBmcm9tICdpcy1jaSc7XG5pbXBvcnQgeyBBcmd1bWVudHNDYW1lbENhc2UsIEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24sXG4gIERFRkFVTFRfQ0xJRU5UX0NPTkZJR19WRVJTSU9OLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpZW50LWNvbmZpZyc7XG5cbmV4cG9ydCB0eXBlIFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8UGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZT47XG5cbnR5cGUgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgYnJhbmNoOiBzdHJpbmc7XG4gIGFwcElkOiBzdHJpbmc7XG4gIG91dHB1dHNWZXJzaW9uOiBzdHJpbmc7XG4gIG91dHB1dHNPdXREaXI/OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEFuIGVudHJ5IHBvaW50IGZvciBkZXBsb3kgY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFBpcGVsaW5lRGVwbG95Q29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdG9wIGxldmVsIGVudHJ5IHBvaW50IGZvciBkZXBsb3kgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50Q29uZmlnR2VuZXJhdG9yOiBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFja2VuZERlcGxveWVyOiBCYWNrZW5kRGVwbG95ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0NpRW52aXJvbm1lbnQ6IHR5cGVvZiBfaXNDSSA9IF9pc0NJXG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdwaXBlbGluZS1kZXBsb3knO1xuICAgIHRoaXMuZGVzY3JpYmUgPVxuICAgICAgJ0NvbW1hbmQgdG8gZGVwbG95IGJhY2tlbmRzIGluIGEgY3VzdG9tIENJL0NEIHBpcGVsaW5lLiBUaGlzIGNvbW1hbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgbG9jYWxseS4nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKFxuICAgIGFyZ3M6IEFyZ3VtZW50c0NhbWVsQ2FzZTxQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zPlxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBpZiAoIXRoaXMuaXNDaUVudmlyb25tZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJdCBsb29rcyBsaWtlIHRoaXMgY29tbWFuZCBpcyBiZWluZyBydW4gb3V0c2lkZSBvZiBhIENJL0NEIHdvcmtmbG93LiBUbyBkZXBsb3kgbG9jYWxseSB1c2UgYGFtcGxpZnkgc2FuZGJveGAgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIgPSB7XG4gICAgICBuYW1lc3BhY2U6IGFyZ3MuYXBwSWQsXG4gICAgICBuYW1lOiBhcmdzLmJyYW5jaCxcbiAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgIH07XG4gICAgYXdhaXQgdGhpcy5iYWNrZW5kRGVwbG95ZXIuZGVwbG95KGJhY2tlbmRJZCwge1xuICAgICAgdmFsaWRhdGVBcHBTb3VyY2VzOiB0cnVlLFxuICAgIH0pO1xuICAgIGF3YWl0IHRoaXMuY2xpZW50Q29uZmlnR2VuZXJhdG9yLmdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlKFxuICAgICAgYmFja2VuZElkLFxuICAgICAgYXJncy5vdXRwdXRzVmVyc2lvbiBhcyBDbGllbnRDb25maWdWZXJzaW9uLFxuICAgICAgYXJncy5vdXRwdXRzT3V0RGlyXG4gICAgKTtcbiAgfTtcblxuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAudmVyc2lvbihmYWxzZSlcbiAgICAgIC5vcHRpb24oJ2JyYW5jaCcsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdOYW1lIG9mIHRoZSBnaXQgYnJhbmNoIGJlaW5nIGRlcGxveWVkJyxcbiAgICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2FwcC1pZCcsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdUaGUgYXBwIGlkIG9mIHRoZSB0YXJnZXQgQW1wbGlmeSBhcHAnLFxuICAgICAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignb3V0cHV0cy1vdXQtZGlyJywge1xuICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAnQSBwYXRoIHRvIGRpcmVjdG9yeSB3aGVyZSBhbXBsaWZ5X291dHB1dHMgaXMgd3JpdHRlbi4gSWYgbm90IHByb3ZpZGVkIGRlZmF1bHRzIHRvIGN1cnJlbnQgcHJvY2VzcyB3b3JraW5nIGRpcmVjdG9yeS4nLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ291dHB1dHMtdmVyc2lvbicsIHtcbiAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgJ1ZlcnNpb24gb2YgdGhlIGNvbmZpZ3VyYXRpb24uIFZlcnNpb24gMCByZXByZXNlbnRzIGNsYXNzaWMgYW1wbGlmeS1jbGkgY29uZmlnIGZpbGUgYW1wbGlmeS1jb25maWd1cmF0aW9uIGFuZCAxIHJlcHJlc2VudHMgbmV3ZXIgY29uZmlnIGZpbGUgYW1wbGlmeV9vdXRwdXRzJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgY2hvaWNlczogT2JqZWN0LnZhbHVlcyhDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uKSxcbiAgICAgICAgZGVmYXVsdDogREVGQVVMVF9DTElFTlRfQ09ORklHX1ZFUlNJT04sXG4gICAgICB9KTtcbiAgfTtcbn1cbiJdfQ==