import { GenerateCommand } from './generate_command.js';
import { GenerateOutputsCommand } from './outputs/generate_outputs_command.js';
import { GenerateFormsCommand } from './forms/generate_forms_command.js';
import { PackageJsonReader } from '@aws-amplify/platform-core';
import { GenerateGraphqlClientCodeCommand } from './graphql-client-code/generate_graphql_client_code_command.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { GenerateApiCodeAdapter } from './graphql-client-code/generate_api_code_adapter.js';
import { FormGenerationHandler } from '../../form-generation/form_generation_handler.js';
import { BackendOutputClientFactory } from '@aws-amplify/deployed-backend-client';
import { SandboxBackendIdResolver } from '../sandbox/sandbox_id_resolver.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { BackendIdentifierResolverWithFallback } from '../../backend-identifier/backend_identifier_with_sandbox_fallback.js';
import { AppBackendIdentifierResolver } from '../../backend-identifier/backend_identifier_resolver.js';
import { GenerateSchemaCommand } from './schema-from-database/generate_schema_command.js';
import { getSecretClient } from '@aws-amplify/backend-secret';
import { SchemaGenerator } from '@aws-amplify/schema-generator';
import { printer } from '@aws-amplify/cli-core';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { S3Client } from '@aws-sdk/client-s3';
/**
 * Creates wired generate command.
 */
export const createGenerateCommand = () => {
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const secretClient = getSecretClient();
    const clientConfigGenerator = new ClientConfigGeneratorAdapter(awsClientProvider);
    const namespaceResolver = new LocalNamespaceResolver(new PackageJsonReader());
    const backendIdentifierResolver = new BackendIdentifierResolverWithFallback(new AppBackendIdentifierResolver(namespaceResolver), new SandboxBackendIdResolver(namespaceResolver));
    const generateOutputsCommand = new GenerateOutputsCommand(clientConfigGenerator, backendIdentifierResolver);
    const generateFormsCommand = new GenerateFormsCommand(backendIdentifierResolver, () => BackendOutputClientFactory.getInstance(awsClientProvider), new FormGenerationHandler({ awsClientProvider }));
    const generateApiCodeAdapter = new GenerateApiCodeAdapter(awsClientProvider);
    const generateGraphqlClientCodeCommand = new GenerateGraphqlClientCodeCommand(generateApiCodeAdapter, backendIdentifierResolver);
    const generateSchemaCommand = new GenerateSchemaCommand(backendIdentifierResolver, secretClient, new SchemaGenerator());
    const commandMiddleware = new CommandMiddleware(printer);
    return new GenerateCommand(generateOutputsCommand, generateFormsCommand, generateGraphqlClientCodeCommand, generateSchemaCommand, commandMiddleware);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZF9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2dlbmVyYXRlL2dlbmVyYXRlX2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDekUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDakgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDOUYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDdEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDNUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDekYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDN0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sc0VBQXNFLENBQUM7QUFDN0gsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDdkcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDMUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5Qzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEdBQWtCLEVBQUU7SUFDdkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUNoQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQzFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO0lBRXhELE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVE7UUFDM0IsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYTtRQUNyQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxvQkFBb0I7S0FDcEQsQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0lBRXZDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSw0QkFBNEIsQ0FDNUQsaUJBQWlCLENBQ2xCLENBQUM7SUFFRixNQUFNLGlCQUFpQixHQUFHLElBQUksc0JBQXNCLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFFOUUsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLHFDQUFxQyxDQUN6RSxJQUFJLDRCQUE0QixDQUFDLGlCQUFpQixDQUFDLEVBQ25ELElBQUksd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsQ0FDaEQsQ0FBQztJQUVGLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDdkQscUJBQXFCLEVBQ3JCLHlCQUF5QixDQUMxQixDQUFDO0lBRUYsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixDQUNuRCx5QkFBeUIsRUFDekIsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEVBQy9ELElBQUkscUJBQXFCLENBQUMsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQ2pELENBQUM7SUFFRixNQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUU3RSxNQUFNLGdDQUFnQyxHQUFHLElBQUksZ0NBQWdDLENBQzNFLHNCQUFzQixFQUN0Qix5QkFBeUIsQ0FDMUIsQ0FBQztJQUVGLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQkFBcUIsQ0FDckQseUJBQXlCLEVBQ3pCLFlBQVksRUFDWixJQUFJLGVBQWUsRUFBRSxDQUN0QixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXpELE9BQU8sSUFBSSxlQUFlLENBQ3hCLHNCQUFzQixFQUN0QixvQkFBb0IsRUFDcEIsZ0NBQWdDLEVBQ2hDLHFCQUFxQixFQUNyQixpQkFBaUIsQ0FDbEIsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUNvbW1hbmQgfSBmcm9tICcuL2dlbmVyYXRlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVPdXRwdXRzQ29tbWFuZCB9IGZyb20gJy4vb3V0cHV0cy9nZW5lcmF0ZV9vdXRwdXRzX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVGb3Jtc0NvbW1hbmQgfSBmcm9tICcuL2Zvcm1zL2dlbmVyYXRlX2Zvcm1zX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgUGFja2FnZUpzb25SZWFkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBHZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCB9IGZyb20gJy4vZ3JhcGhxbC1jbGllbnQtY29kZS9nZW5lcmF0ZV9ncmFwaHFsX2NsaWVudF9jb2RlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgTG9jYWxOYW1lc3BhY2VSZXNvbHZlciB9IGZyb20gJy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9sb2NhbF9uYW1lc3BhY2VfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB9IGZyb20gJy4uLy4uL2NsaWVudC1jb25maWcvY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUFwaUNvZGVBZGFwdGVyIH0gZnJvbSAnLi9ncmFwaHFsLWNsaWVudC1jb2RlL2dlbmVyYXRlX2FwaV9jb2RlX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgRm9ybUdlbmVyYXRpb25IYW5kbGVyIH0gZnJvbSAnLi4vLi4vZm9ybS1nZW5lcmF0aW9uL2Zvcm1fZ2VuZXJhdGlvbl9oYW5kbGVyLmpzJztcbmltcG9ydCB7IEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4uL3NhbmRib3gvc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBDb21tYW5kTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRfbWlkZGxld2FyZS5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyV2l0aEZhbGxiYWNrIH0gZnJvbSAnLi4vLi4vYmFja2VuZC1pZGVudGlmaWVyL2JhY2tlbmRfaWRlbnRpZmllcl93aXRoX3NhbmRib3hfZmFsbGJhY2suanMnO1xuaW1wb3J0IHsgQXBwQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciB9IGZyb20gJy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVTY2hlbWFDb21tYW5kIH0gZnJvbSAnLi9zY2hlbWEtZnJvbS1kYXRhYmFzZS9nZW5lcmF0ZV9zY2hlbWFfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBnZXRTZWNyZXRDbGllbnQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgU2NoZW1hR2VuZXJhdG9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3NjaGVtYS1nZW5lcmF0b3InO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBBbXBsaWZ5Q2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWFtcGxpZnknO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuXG4vKipcbiAqIENyZWF0ZXMgd2lyZWQgZ2VuZXJhdGUgY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUdlbmVyYXRlQ29tbWFuZCA9ICgpOiBDb21tYW5kTW9kdWxlID0+IHtcbiAgY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoKTtcbiAgY29uc3QgYW1wbGlmeUNsaWVudCA9IG5ldyBBbXBsaWZ5Q2xpZW50KCk7XG4gIGNvbnN0IGNsb3VkRm9ybWF0aW9uQ2xpZW50ID0gbmV3IENsb3VkRm9ybWF0aW9uQ2xpZW50KCk7XG5cbiAgY29uc3QgYXdzQ2xpZW50UHJvdmlkZXIgPSB7XG4gICAgZ2V0UzNDbGllbnQ6ICgpID0+IHMzQ2xpZW50LFxuICAgIGdldEFtcGxpZnlDbGllbnQ6ICgpID0+IGFtcGxpZnlDbGllbnQsXG4gICAgZ2V0Q2xvdWRGb3JtYXRpb25DbGllbnQ6ICgpID0+IGNsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICB9O1xuICBjb25zdCBzZWNyZXRDbGllbnQgPSBnZXRTZWNyZXRDbGllbnQoKTtcblxuICBjb25zdCBjbGllbnRDb25maWdHZW5lcmF0b3IgPSBuZXcgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcihcbiAgICBhd3NDbGllbnRQcm92aWRlclxuICApO1xuXG4gIGNvbnN0IG5hbWVzcGFjZVJlc29sdmVyID0gbmV3IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIobmV3IFBhY2thZ2VKc29uUmVhZGVyKCkpO1xuXG4gIGNvbnN0IGJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIgPSBuZXcgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlcldpdGhGYWxsYmFjayhcbiAgICBuZXcgQXBwQmFja2VuZElkZW50aWZpZXJSZXNvbHZlcihuYW1lc3BhY2VSZXNvbHZlciksXG4gICAgbmV3IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcihuYW1lc3BhY2VSZXNvbHZlcilcbiAgKTtcblxuICBjb25zdCBnZW5lcmF0ZU91dHB1dHNDb21tYW5kID0gbmV3IEdlbmVyYXRlT3V0cHV0c0NvbW1hbmQoXG4gICAgY2xpZW50Q29uZmlnR2VuZXJhdG9yLFxuICAgIGJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXJcbiAgKTtcblxuICBjb25zdCBnZW5lcmF0ZUZvcm1zQ29tbWFuZCA9IG5ldyBHZW5lcmF0ZUZvcm1zQ29tbWFuZChcbiAgICBiYWNrZW5kSWRlbnRpZmllclJlc29sdmVyLFxuICAgICgpID0+IEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LmdldEluc3RhbmNlKGF3c0NsaWVudFByb3ZpZGVyKSxcbiAgICBuZXcgRm9ybUdlbmVyYXRpb25IYW5kbGVyKHsgYXdzQ2xpZW50UHJvdmlkZXIgfSlcbiAgKTtcblxuICBjb25zdCBnZW5lcmF0ZUFwaUNvZGVBZGFwdGVyID0gbmV3IEdlbmVyYXRlQXBpQ29kZUFkYXB0ZXIoYXdzQ2xpZW50UHJvdmlkZXIpO1xuXG4gIGNvbnN0IGdlbmVyYXRlR3JhcGhxbENsaWVudENvZGVDb21tYW5kID0gbmV3IEdlbmVyYXRlR3JhcGhxbENsaWVudENvZGVDb21tYW5kKFxuICAgIGdlbmVyYXRlQXBpQ29kZUFkYXB0ZXIsXG4gICAgYmFja2VuZElkZW50aWZpZXJSZXNvbHZlclxuICApO1xuXG4gIGNvbnN0IGdlbmVyYXRlU2NoZW1hQ29tbWFuZCA9IG5ldyBHZW5lcmF0ZVNjaGVtYUNvbW1hbmQoXG4gICAgYmFja2VuZElkZW50aWZpZXJSZXNvbHZlcixcbiAgICBzZWNyZXRDbGllbnQsXG4gICAgbmV3IFNjaGVtYUdlbmVyYXRvcigpXG4gICk7XG5cbiAgY29uc3QgY29tbWFuZE1pZGRsZXdhcmUgPSBuZXcgQ29tbWFuZE1pZGRsZXdhcmUocHJpbnRlcik7XG5cbiAgcmV0dXJuIG5ldyBHZW5lcmF0ZUNvbW1hbmQoXG4gICAgZ2VuZXJhdGVPdXRwdXRzQ29tbWFuZCxcbiAgICBnZW5lcmF0ZUZvcm1zQ29tbWFuZCxcbiAgICBnZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCxcbiAgICBnZW5lcmF0ZVNjaGVtYUNvbW1hbmQsXG4gICAgY29tbWFuZE1pZGRsZXdhcmVcbiAgKTtcbn07XG4iXX0=