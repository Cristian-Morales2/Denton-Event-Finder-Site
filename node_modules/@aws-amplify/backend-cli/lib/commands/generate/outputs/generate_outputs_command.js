import { ClientConfigFormat, ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
/**
 * Command that generates client config aka amplify_outputs.
 */
export class GenerateOutputsCommand {
    clientConfigGenerator;
    backendIdentifierResolver;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates client config (amplify-outputs.json) generation command.
     */
    constructor(clientConfigGenerator, backendIdentifierResolver) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendIdentifierResolver = backendIdentifierResolver;
        this.command = 'outputs';
        this.describe = 'Generates Amplify backend outputs';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const backendIdentifier = await this.backendIdentifierResolver.resolve(args);
        if (!backendIdentifier) {
            throw new Error('Could not resolve the backend identifier');
        }
        await this.clientConfigGenerator.generateClientConfigToFile(backendIdentifier, args.outputsVersion, args.outDir, args.format);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('stack', {
            conflicts: ['app-id', 'branch'],
            describe: 'A stack name that contains an Amplify backend',
            type: 'string',
            array: false,
            group: 'Stack identifier',
        })
            .option('app-id', {
            conflicts: ['stack'],
            describe: 'The Amplify App ID of the project',
            type: 'string',
            array: false,
            implies: 'branch',
            group: 'Project identifier',
        })
            .option('branch', {
            conflicts: ['stack'],
            describe: 'A git branch of the Amplify project',
            type: 'string',
            array: false,
            group: 'Project identifier',
        })
            .option('format', {
            describe: 'The format which the configuration should be exported into.',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
        })
            .option('out-dir', {
            describe: 'A path to directory where config is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('outputs-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfb3V0cHV0c19jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2dlbmVyYXRlL291dHB1dHMvZ2VuZXJhdGVfb3V0cHV0c19jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxrQkFBa0IsRUFFbEIseUJBQXlCLEVBQ3pCLDZCQUE2QixHQUM5QixNQUFNLDRCQUE0QixDQUFDO0FBaUJwQzs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFpQmQ7SUFDQTtJQWZuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQ21CLHFCQUFtRCxFQUNuRCx5QkFBb0Q7UUFEcEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE4QjtRQUNuRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBRXJFLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsbUNBQW1DLENBQUM7SUFDdEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUF1RCxFQUN4QyxFQUFFO1FBQ2pCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUNwRSxJQUFJLENBQ0wsQ0FBQztRQUVGLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDN0Q7UUFFRCxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQywwQkFBMEIsQ0FDekQsaUJBQWlCLEVBQ2pCLElBQUksQ0FBQyxjQUFxQyxFQUMxQyxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUF1QyxFQUFFO1FBQzdELE9BQU8sS0FBSzthQUNULE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDZixTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1lBQy9CLFFBQVEsRUFBRSwrQ0FBK0M7WUFDekQsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxtQ0FBbUM7WUFDN0MsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLEtBQUssRUFBRSxvQkFBb0I7U0FDNUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxxQ0FBcUM7WUFDL0MsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxvQkFBb0I7U0FDNUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsUUFBUSxFQUFFLDZEQUE2RDtZQUN2RSxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7U0FDM0MsQ0FBQzthQUNELE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDakIsUUFBUSxFQUNOLDZHQUE2RztZQUMvRyxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtZQUN6QixRQUFRLEVBQ04sNkpBQTZKO1lBQy9KLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7WUFDWixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQztZQUNqRCxPQUFPLEVBQUUsNkJBQTZCO1NBQ3ZDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnRm9ybWF0LFxuICBDbGllbnRDb25maWdWZXJzaW9uLFxuICBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLFxuICBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaWVudC1jb25maWcnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uL2NsaWVudC1jb25maWcvY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi8uLi9rZWJhYl9jYXNlLmpzJztcblxuZXhwb3J0IHR5cGUgR2VuZXJhdGVPdXRwdXRzQ29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8R2VuZXJhdGVPdXRwdXRzQ29tbWFuZE9wdGlvbnNDYW1lbENhc2U+O1xuXG50eXBlIEdlbmVyYXRlT3V0cHV0c0NvbW1hbmRPcHRpb25zQ2FtZWxDYXNlID0ge1xuICBzdGFjazogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBhcHBJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBicmFuY2g6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZm9ybWF0OiBDbGllbnRDb25maWdGb3JtYXQgfCB1bmRlZmluZWQ7XG4gIG91dERpcjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBvdXRwdXRzVmVyc2lvbjogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBDb21tYW5kIHRoYXQgZ2VuZXJhdGVzIGNsaWVudCBjb25maWcgYWthIGFtcGxpZnlfb3V0cHV0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEdlbmVyYXRlT3V0cHV0c0NvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgR2VuZXJhdGVPdXRwdXRzQ29tbWFuZE9wdGlvbnM+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyBjbGllbnQgY29uZmlnIChhbXBsaWZ5LW91dHB1dHMuanNvbikgZ2VuZXJhdGlvbiBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjbGllbnRDb25maWdHZW5lcmF0b3I6IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kSWRlbnRpZmllclJlc29sdmVyOiBCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyXG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdvdXRwdXRzJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0dlbmVyYXRlcyBBbXBsaWZ5IGJhY2tlbmQgb3V0cHV0cyc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPEdlbmVyYXRlT3V0cHV0c0NvbW1hbmRPcHRpb25zPlxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBiYWNrZW5kSWRlbnRpZmllciA9IGF3YWl0IHRoaXMuYmFja2VuZElkZW50aWZpZXJSZXNvbHZlci5yZXNvbHZlKFxuICAgICAgYXJnc1xuICAgICk7XG5cbiAgICBpZiAoIWJhY2tlbmRJZGVudGlmaWVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXNvbHZlIHRoZSBiYWNrZW5kIGlkZW50aWZpZXInKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmNsaWVudENvbmZpZ0dlbmVyYXRvci5nZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZShcbiAgICAgIGJhY2tlbmRJZGVudGlmaWVyLFxuICAgICAgYXJncy5vdXRwdXRzVmVyc2lvbiBhcyBDbGllbnRDb25maWdWZXJzaW9uLFxuICAgICAgYXJncy5vdXREaXIsXG4gICAgICBhcmdzLmZvcm1hdFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxHZW5lcmF0ZU91dHB1dHNDb21tYW5kT3B0aW9ucz4gPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLm9wdGlvbignc3RhY2snLCB7XG4gICAgICAgIGNvbmZsaWN0czogWydhcHAtaWQnLCAnYnJhbmNoJ10sXG4gICAgICAgIGRlc2NyaWJlOiAnQSBzdGFjayBuYW1lIHRoYXQgY29udGFpbnMgYW4gQW1wbGlmeSBiYWNrZW5kJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgZ3JvdXA6ICdTdGFjayBpZGVudGlmaWVyJyxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdhcHAtaWQnLCB7XG4gICAgICAgIGNvbmZsaWN0czogWydzdGFjayddLFxuICAgICAgICBkZXNjcmliZTogJ1RoZSBBbXBsaWZ5IEFwcCBJRCBvZiB0aGUgcHJvamVjdCcsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGltcGxpZXM6ICdicmFuY2gnLFxuICAgICAgICBncm91cDogJ1Byb2plY3QgaWRlbnRpZmllcicsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignYnJhbmNoJywge1xuICAgICAgICBjb25mbGljdHM6IFsnc3RhY2snXSxcbiAgICAgICAgZGVzY3JpYmU6ICdBIGdpdCBicmFuY2ggb2YgdGhlIEFtcGxpZnkgcHJvamVjdCcsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGdyb3VwOiAnUHJvamVjdCBpZGVudGlmaWVyJyxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdmb3JtYXQnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAnVGhlIGZvcm1hdCB3aGljaCB0aGUgY29uZmlndXJhdGlvbiBzaG91bGQgYmUgZXhwb3J0ZWQgaW50by4nLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBjaG9pY2VzOiBPYmplY3QudmFsdWVzKENsaWVudENvbmZpZ0Zvcm1hdCksXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignb3V0LWRpcicsIHtcbiAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgJ0EgcGF0aCB0byBkaXJlY3Rvcnkgd2hlcmUgY29uZmlnIGlzIHdyaXR0ZW4uIElmIG5vdCBwcm92aWRlZCBkZWZhdWx0cyB0byBjdXJyZW50IHByb2Nlc3Mgd29ya2luZyBkaXJlY3RvcnkuJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdvdXRwdXRzLXZlcnNpb24nLCB7XG4gICAgICAgIGRlc2NyaWJlOlxuICAgICAgICAgICdWZXJzaW9uIG9mIHRoZSBjb25maWd1cmF0aW9uLiBWZXJzaW9uIDAgcmVwcmVzZW50cyBjbGFzc2ljIGFtcGxpZnktY2xpIGNvbmZpZyBmaWxlIGFtcGxpZnktY29uZmlndXJhdGlvbiBhbmQgMSByZXByZXNlbnRzIG5ld2VyIGNvbmZpZyBmaWxlIGFtcGxpZnlfb3V0cHV0cycsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGNob2ljZXM6IE9iamVjdC52YWx1ZXMoQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbiksXG4gICAgICAgIGRlZmF1bHQ6IERFRkFVTFRfQ0xJRU5UX0NPTkZJR19WRVJTSU9OLFxuICAgICAgfSk7XG4gIH07XG59XG4iXX0=