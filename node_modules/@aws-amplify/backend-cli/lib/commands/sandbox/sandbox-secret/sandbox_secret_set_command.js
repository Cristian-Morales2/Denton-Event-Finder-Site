import { AmplifyPrompter } from '@aws-amplify/cli-core';
/**
 * Command to set sandbox secret.
 */
export class SandboxSecretSetCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Set sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'set <secret-name>';
        this.describe = 'Set a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const secretVal = await AmplifyPrompter.secretValue();
        await this.secretClient.setSecret(await this.sandboxIdResolver.resolve(args.identifier), args.secretName, secretVal);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.positional('secret-name', {
            describe: 'Name of the secret to set',
            type: 'string',
            demandOption: true,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfc2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9zZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFLeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBaUJmO0lBQ0E7SUFmbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEI7UUFEMUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUUzQyxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUEwRCxFQUMzQyxFQUFFO1FBQ2pCLE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQy9CLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQ3JELElBQUksQ0FBQyxVQUFVLEVBQ2YsU0FBUyxDQUNWLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBMEMsRUFBRTtRQUNoRSxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsSUFBSSxFQUFFLFFBQVE7WUFDZCxZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSwgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IEFtcGxpZnlQcm9tcHRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zIH0gZnJvbSAnLi4vb3B0aW9uX3R5cGVzLmpzJztcblxuLyoqXG4gKiBDb21tYW5kIHRvIHNldCBzYW5kYm94IHNlY3JldC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTZWNyZXRTZXRDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNldCBzYW5kYm94IHNlY3JldCBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3NldCA8c2VjcmV0LW5hbWU+JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ1NldCBhIHNhbmRib3ggc2VjcmV0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8U2VjcmV0U2V0Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHNlY3JldFZhbCA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci5zZWNyZXRWYWx1ZSgpO1xuICAgIGF3YWl0IHRoaXMuc2VjcmV0Q2xpZW50LnNldFNlY3JldChcbiAgICAgIGF3YWl0IHRoaXMuc2FuZGJveElkUmVzb2x2ZXIucmVzb2x2ZShhcmdzLmlkZW50aWZpZXIpLFxuICAgICAgYXJncy5zZWNyZXROYW1lLFxuICAgICAgc2VjcmV0VmFsXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzLnBvc2l0aW9uYWwoJ3NlY3JldC1uYW1lJywge1xuICAgICAgZGVzY3JpYmU6ICdOYW1lIG9mIHRoZSBzZWNyZXQgdG8gc2V0JyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgIH0pO1xuICB9O1xufVxuXG50eXBlIFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlID0gQXJndW1lbnRzS2ViYWJDYXNlPFxuICB7XG4gICAgc2VjcmV0TmFtZTogc3RyaW5nO1xuICB9ICYgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zXG4+O1xuIl19