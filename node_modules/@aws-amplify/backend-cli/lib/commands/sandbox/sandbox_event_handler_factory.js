import { AmplifyError } from '@aws-amplify/platform-core';
import { format, printer } from '@aws-amplify/cli-core';
/**
 * Coordinates creation of sandbox event handlers
 */
export class SandboxEventHandlerFactory {
    getBackendIdentifier;
    getUsageDataEmitter;
    /**
     * Creates a SandboxEventHandlerFactory
     */
    constructor(getBackendIdentifier, getUsageDataEmitter) {
        this.getBackendIdentifier = getBackendIdentifier;
        this.getUsageDataEmitter = getUsageDataEmitter;
    }
    getSandboxEventHandlers = ({ sandboxIdentifier: sandboxIdentifier, clientConfigLifecycleHandler, }) => {
        return {
            successfulDeployment: [
                async (...args) => {
                    const backendIdentifier = await this.getBackendIdentifier(sandboxIdentifier);
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    try {
                        await clientConfigLifecycleHandler.generateClientConfigFile(backendIdentifier);
                        if (args && args[0]) {
                            const deployResult = args[0];
                            if (deployResult && deployResult.deploymentTimes) {
                                await usageDataEmitter.emitSuccess(deployResult.deploymentTimes, { command: 'Sandbox' });
                            }
                        }
                    }
                    catch (error) {
                        // Don't crash sandbox if config cannot be generated, but print the error message
                        printer.print(format.error('Amplify configuration could not be generated.'));
                        printer.print(format.error(error));
                    }
                },
            ],
            successfulDeletion: [
                async () => {
                    await clientConfigLifecycleHandler.deleteClientConfigFile();
                },
            ],
            failedDeployment: [
                async (...args) => {
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    if (args.length == 0 || !args[0]) {
                        return;
                    }
                    const deployError = args[0];
                    if (deployError && deployError instanceof AmplifyError) {
                        await usageDataEmitter.emitFailure(deployError, {
                            command: 'Sandbox',
                        });
                    }
                    else {
                        await usageDataEmitter.emitFailure(AmplifyError.fromError(deployError), {
                            command: 'Sandbox',
                        });
                    }
                },
            ],
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2V2ZW50X2hhbmRsZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFvQixNQUFNLDRCQUE0QixDQUFDO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBS2xCO0lBR0E7SUFQbkI7O09BRUc7SUFDSCxZQUNtQixvQkFFYyxFQUNkLG1CQUFvRDtRQUhwRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBRU47UUFDZCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQWlDO0lBQ3BFLENBQUM7SUFFSix1QkFBdUIsR0FBK0IsQ0FBQyxFQUNyRCxpQkFBaUIsRUFBRSxpQkFBaUIsRUFDcEMsNEJBQTRCLEdBQzdCLEVBQUUsRUFBRTtRQUNILE9BQU87WUFDTCxvQkFBb0IsRUFBRTtnQkFDcEIsS0FBSyxFQUFFLEdBQUcsSUFBZSxFQUFFLEVBQUU7b0JBQzNCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQ3ZELGlCQUFpQixDQUNsQixDQUFDO29CQUNGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztvQkFDMUQsSUFBSTt3QkFDRixNQUFNLDRCQUE0QixDQUFDLHdCQUF3QixDQUN6RCxpQkFBaUIsQ0FDbEIsQ0FBQzt3QkFDRixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7NEJBQ25CLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQWlCLENBQUM7NEJBQzdDLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxlQUFlLEVBQUU7Z0NBQ2hELE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUNoQyxZQUFZLENBQUMsZUFBZSxFQUM1QixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FDdkIsQ0FBQzs2QkFDSDt5QkFDRjtxQkFDRjtvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDZCxpRkFBaUY7d0JBQ2pGLE9BQU8sQ0FBQyxLQUFLLENBQ1gsTUFBTSxDQUFDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUM5RCxDQUFDO3dCQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO3FCQUNwQztnQkFDSCxDQUFDO2FBQ0Y7WUFDRCxrQkFBa0IsRUFBRTtnQkFDbEIsS0FBSyxJQUFJLEVBQUU7b0JBQ1QsTUFBTSw0QkFBNEIsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2dCQUM5RCxDQUFDO2FBQ0Y7WUFDRCxnQkFBZ0IsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLEdBQUcsSUFBZSxFQUFFLEVBQUU7b0JBQzNCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztvQkFDMUQsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDaEMsT0FBTztxQkFDUjtvQkFDRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLElBQUksV0FBVyxJQUFJLFdBQVcsWUFBWSxZQUFZLEVBQUU7d0JBQ3RELE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRTs0QkFDOUMsT0FBTyxFQUFFLFNBQVM7eUJBQ25CLENBQUMsQ0FBQztxQkFDSjt5QkFBTTt3QkFDTCxNQUFNLGdCQUFnQixDQUFDLFdBQVcsQ0FDaEMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFDbkM7NEJBQ0UsT0FBTyxFQUFFLFNBQVM7eUJBQ25CLENBQ0YsQ0FBQztxQkFDSDtnQkFDSCxDQUFDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTYW5kYm94RXZlbnRIYW5kbGVyQ3JlYXRvciB9IGZyb20gJy4vc2FuZGJveF9jb21tYW5kLmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBBbXBsaWZ5RXJyb3IsIFVzYWdlRGF0YUVtaXR0ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBEZXBsb3lSZXN1bHQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBmb3JtYXQsIHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuXG4vKipcbiAqIENvb3JkaW5hdGVzIGNyZWF0aW9uIG9mIHNhbmRib3ggZXZlbnQgaGFuZGxlcnNcbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hFdmVudEhhbmRsZXJGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZXRCYWNrZW5kSWRlbnRpZmllcjogKFxuICAgICAgc2FuZGJveElkZW50aWZpZXI/OiBzdHJpbmdcbiAgICApID0+IFByb21pc2U8QmFja2VuZElkZW50aWZpZXI+LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0VXNhZ2VEYXRhRW1pdHRlcjogKCkgPT4gUHJvbWlzZTxVc2FnZURhdGFFbWl0dGVyPlxuICApIHt9XG5cbiAgZ2V0U2FuZGJveEV2ZW50SGFuZGxlcnM6IFNhbmRib3hFdmVudEhhbmRsZXJDcmVhdG9yID0gKHtcbiAgICBzYW5kYm94SWRlbnRpZmllcjogc2FuZGJveElkZW50aWZpZXIsXG4gICAgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlcixcbiAgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzZnVsRGVwbG95bWVudDogW1xuICAgICAgICBhc3luYyAoLi4uYXJnczogdW5rbm93bltdKSA9PiB7XG4gICAgICAgICAgY29uc3QgYmFja2VuZElkZW50aWZpZXIgPSBhd2FpdCB0aGlzLmdldEJhY2tlbmRJZGVudGlmaWVyKFxuICAgICAgICAgICAgc2FuZGJveElkZW50aWZpZXJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHVzYWdlRGF0YUVtaXR0ZXIgPSBhd2FpdCB0aGlzLmdldFVzYWdlRGF0YUVtaXR0ZXIoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlci5nZW5lcmF0ZUNsaWVudENvbmZpZ0ZpbGUoXG4gICAgICAgICAgICAgIGJhY2tlbmRJZGVudGlmaWVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGFyZ3MgJiYgYXJnc1swXSkge1xuICAgICAgICAgICAgICBjb25zdCBkZXBsb3lSZXN1bHQgPSBhcmdzWzBdIGFzIERlcGxveVJlc3VsdDtcbiAgICAgICAgICAgICAgaWYgKGRlcGxveVJlc3VsdCAmJiBkZXBsb3lSZXN1bHQuZGVwbG95bWVudFRpbWVzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdXNhZ2VEYXRhRW1pdHRlci5lbWl0U3VjY2VzcyhcbiAgICAgICAgICAgICAgICAgIGRlcGxveVJlc3VsdC5kZXBsb3ltZW50VGltZXMsXG4gICAgICAgICAgICAgICAgICB7IGNvbW1hbmQ6ICdTYW5kYm94JyB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBjcmFzaCBzYW5kYm94IGlmIGNvbmZpZyBjYW5ub3QgYmUgZ2VuZXJhdGVkLCBidXQgcHJpbnQgdGhlIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgIHByaW50ZXIucHJpbnQoXG4gICAgICAgICAgICAgIGZvcm1hdC5lcnJvcignQW1wbGlmeSBjb25maWd1cmF0aW9uIGNvdWxkIG5vdCBiZSBnZW5lcmF0ZWQuJylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwcmludGVyLnByaW50KGZvcm1hdC5lcnJvcihlcnJvcikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBzdWNjZXNzZnVsRGVsZXRpb246IFtcbiAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IGNsaWVudENvbmZpZ0xpZmVjeWNsZUhhbmRsZXIuZGVsZXRlQ2xpZW50Q29uZmlnRmlsZSgpO1xuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGZhaWxlZERlcGxveW1lbnQ6IFtcbiAgICAgICAgYXN5bmMgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVzYWdlRGF0YUVtaXR0ZXIgPSBhd2FpdCB0aGlzLmdldFVzYWdlRGF0YUVtaXR0ZXIoKTtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT0gMCB8fCAhYXJnc1swXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBkZXBsb3lFcnJvciA9IGFyZ3NbMF07XG4gICAgICAgICAgaWYgKGRlcGxveUVycm9yICYmIGRlcGxveUVycm9yIGluc3RhbmNlb2YgQW1wbGlmeUVycm9yKSB7XG4gICAgICAgICAgICBhd2FpdCB1c2FnZURhdGFFbWl0dGVyLmVtaXRGYWlsdXJlKGRlcGxveUVycm9yLCB7XG4gICAgICAgICAgICAgIGNvbW1hbmQ6ICdTYW5kYm94JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB1c2FnZURhdGFFbWl0dGVyLmVtaXRGYWlsdXJlKFxuICAgICAgICAgICAgICBBbXBsaWZ5RXJyb3IuZnJvbUVycm9yKGRlcGxveUVycm9yKSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICdTYW5kYm94JyxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH07XG59XG4iXX0=