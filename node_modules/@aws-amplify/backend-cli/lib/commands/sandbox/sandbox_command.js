import fs from 'fs';
import fsp from 'fs/promises';
import { AmplifyPrompter } from '@aws-amplify/cli-core';
import { ClientConfigFormat, ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, generateEmptyClientConfigToFile, getClientConfigFileName, getClientConfigPath, } from '@aws-amplify/client-config';
import { ClientConfigLifecycleHandler } from '../../client-config/client_config_lifecycle_handler.js';
/**
 * Command that starts sandbox.
 */
export class SandboxCommand {
    sandboxFactory;
    sandboxSubCommands;
    clientConfigGeneratorAdapter;
    commandMiddleware;
    sandboxEventHandlerCreator;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    sandboxIdentifier;
    /**
     * Creates sandbox command.
     */
    constructor(sandboxFactory, sandboxSubCommands, clientConfigGeneratorAdapter, commandMiddleware, sandboxEventHandlerCreator) {
        this.sandboxFactory = sandboxFactory;
        this.sandboxSubCommands = sandboxSubCommands;
        this.clientConfigGeneratorAdapter = clientConfigGeneratorAdapter;
        this.commandMiddleware = commandMiddleware;
        this.sandboxEventHandlerCreator = sandboxEventHandlerCreator;
        this.command = 'sandbox';
        this.describe =
            'Starts sandbox, watch mode for Amplify backend deployments';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandbox = await this.sandboxFactory.getInstance();
        this.sandboxIdentifier = args.identifier;
        // attaching event handlers
        const clientConfigLifecycleHandler = new ClientConfigLifecycleHandler(this.clientConfigGeneratorAdapter, args.outputsVersion, args.outputsOutDir, args.outputsFormat);
        const eventHandlers = this.sandboxEventHandlerCreator?.({
            sandboxIdentifier: this.sandboxIdentifier,
            clientConfigLifecycleHandler,
        });
        if (eventHandlers) {
            Object.entries(eventHandlers).forEach(([event, handlers]) => {
                handlers.forEach((handler) => sandbox.on(event, handler));
            });
        }
        const watchExclusions = args.exclude ?? [];
        const fileName = getClientConfigFileName(args.outputsVersion);
        const clientConfigWritePath = await getClientConfigPath(fileName, args.outputsOutDir, args.outputsFormat);
        if (!fs.existsSync(clientConfigWritePath)) {
            await generateEmptyClientConfigToFile(args.outputsVersion, args.outputsOutDir, args.outputsFormat);
        }
        watchExclusions.push(clientConfigWritePath);
        await sandbox.start({
            dir: args.dirToWatch,
            exclude: watchExclusions,
            identifier: args.identifier,
            profile: args.profile,
            watchForChanges: !args.once,
        });
        process.once('SIGINT', () => void this.sigIntHandler());
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return (yargs
            // Cast to erase options types used in internal sub command implementation. Otherwise, compiler fails here.
            .command(this.sandboxSubCommands)
            .version(false)
            .option('dir-to-watch', {
            describe: 'Directory to watch for file changes. All subdirectories and files will be included. Defaults to the amplify directory.',
            type: 'string',
            array: false,
            global: false,
        })
            .option('exclude', {
            describe: 'An array of paths or glob patterns to ignore. Paths can be relative or absolute and can either be files or directories',
            type: 'string',
            array: true,
            global: false,
        })
            .option('identifier', {
            describe: 'An optional identifier to distinguish between different sandboxes. Default is the name of the system user executing the process',
            type: 'string',
            array: false,
        })
            .option('outputs-format', {
            describe: 'amplify_outputs file format',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
            global: false,
        })
            .option('outputs-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            global: false,
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        })
            .option('outputs-out-dir', {
            describe: 'A path to directory where amplify_outputs is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
            global: false,
        })
            .option('profile', {
            describe: 'An AWS profile name.',
            type: 'string',
            array: false,
        })
            .option('once', {
            describe: 'Execute a single sandbox deployment without watching for future file changes',
            boolean: true,
            global: false,
        })
            .check(async (argv) => {
            if (argv['dir-to-watch']) {
                await this.validateDirectory('dir-to-watch', argv['dir-to-watch']);
            }
            if (argv.identifier) {
                const identifierRegex = /^[a-zA-Z0-9-]{1,15}$/;
                if (!argv.identifier.match(identifierRegex)) {
                    throw new Error(`--identifier should match [a-zA-Z0-9-] and be less than 15 characters.`);
                }
            }
            return true;
        })
            .conflicts('once', ['exclude', 'dir-to-watch'])
            .middleware([this.commandMiddleware.ensureAwsCredentialAndRegion]));
    };
    sigIntHandler = async () => {
        const answer = await AmplifyPrompter.yesOrNo({
            message: 'Would you like to delete all the resources in your sandbox environment (This cannot be undone)?',
            defaultValue: false,
        });
        if (answer)
            await (await this.sandboxFactory.getInstance()).delete({ identifier: this.sandboxIdentifier });
    };
    validateDirectory = async (option, dir) => {
        let stats;
        try {
            stats = await fsp.stat(dir, {});
        }
        catch (e) {
            throw new Error(`--${option} ${dir} does not exist`);
        }
        if (!stats.isDirectory()) {
            throw new Error(`--${option} ${dir} is not a valid directory`);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL3NhbmRib3gvc2FuZGJveF9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUM7QUFDOUIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXhELE9BQU8sRUFDTCxrQkFBa0IsRUFFbEIseUJBQXlCLEVBQ3pCLDZCQUE2QixFQUM3QiwrQkFBK0IsRUFDL0IsdUJBQXVCLEVBQ3ZCLG1CQUFtQixHQUNwQixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBa0N0Rzs7R0FFRztBQUNILE1BQU0sT0FBTyxjQUFjO0lBbUJOO0lBQ0E7SUFDVDtJQUNBO0lBQ1M7SUFwQm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRWxCLGlCQUFpQixDQUFVO0lBRW5DOztPQUVHO0lBQ0gsWUFDbUIsY0FBdUMsRUFDdkMsa0JBQW1DLEVBQzVDLDRCQUEwRCxFQUMxRCxpQkFBb0MsRUFDM0IsMEJBQXVEO1FBSnZELG1CQUFjLEdBQWQsY0FBYyxDQUF5QjtRQUN2Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWlCO1FBQzVDLGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUFDMUQsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUMzQiwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTZCO1FBRXhFLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRO1lBQ1gsNERBQTRELENBQUM7SUFDakUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUF3RCxF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MkJBQTJCLENBQUMsQ0FBQztTQUNoRTtJQUNILENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgQW1wbGlmeVByb21wdGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3NhbmRib3gnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnRm9ybWF0LFxuICBDbGllbnRDb25maWdWZXJzaW9uLFxuICBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLFxuICBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbiAgZ2VuZXJhdGVFbXB0eUNsaWVudENvbmZpZ1RvRmlsZSxcbiAgZ2V0Q2xpZW50Q29uZmlnRmlsZU5hbWUsXG4gIGdldENsaWVudENvbmZpZ1BhdGgsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGllbnQtY29uZmlnJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0xpZmVjeWNsZUhhbmRsZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfbGlmZWN5Y2xlX2hhbmRsZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB9IGZyb20gJy4uLy4uL2NsaWVudC1jb25maWcvY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBDb21tYW5kTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRfbWlkZGxld2FyZS5qcyc7XG5pbXBvcnQgeyBTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbl90eXBlcy5qcyc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi9rZWJhYl9jYXNlLmpzJztcblxuZXhwb3J0IHR5cGUgU2FuZGJveENvbW1hbmRPcHRpb25zS2ViYWJDYXNlID0gQXJndW1lbnRzS2ViYWJDYXNlPFxuICB7XG4gICAgZGlyVG9XYXRjaDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGV4Y2x1ZGU6IHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xuICAgIG91dHB1dHNGb3JtYXQ6IENsaWVudENvbmZpZ0Zvcm1hdCB8IHVuZGVmaW5lZDtcbiAgICBvdXRwdXRzT3V0RGlyOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgb3V0cHV0c1ZlcnNpb246IHN0cmluZztcbiAgICBvbmNlOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICB9ICYgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zXG4+O1xuXG5leHBvcnQgdHlwZSBFdmVudEhhbmRsZXIgPSAoLi4uYXJnczogdW5rbm93bltdKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBTYW5kYm94RXZlbnRIYW5kbGVycyA9IHtcbiAgc3VjY2Vzc2Z1bERlcGxveW1lbnQ6IEV2ZW50SGFuZGxlcltdO1xuICBzdWNjZXNzZnVsRGVsZXRpb246IEV2ZW50SGFuZGxlcltdO1xuICBmYWlsZWREZXBsb3ltZW50OiBFdmVudEhhbmRsZXJbXTtcbn07XG5cbmV4cG9ydCB0eXBlIFNhbmRib3hFdmVudEhhbmRsZXJQYXJhbXMgPSB7XG4gIHNhbmRib3hJZGVudGlmaWVyPzogc3RyaW5nO1xuICBjbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyOiBDbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyO1xufTtcblxuZXhwb3J0IHR5cGUgU2FuZGJveEV2ZW50SGFuZGxlckNyZWF0b3IgPSAoXG4gIHBhcmFtczogU2FuZGJveEV2ZW50SGFuZGxlclBhcmFtc1xuKSA9PiBTYW5kYm94RXZlbnRIYW5kbGVycztcblxuLyoqXG4gKiBDb21tYW5kIHRoYXQgc3RhcnRzIHNhbmRib3guXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94Q29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBTYW5kYm94Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICBwcml2YXRlIHNhbmRib3hJZGVudGlmaWVyPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHNhbmRib3ggY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveEZhY3Rvcnk6IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveFN1YkNvbW1hbmRzOiBDb21tYW5kTW9kdWxlW10sXG4gICAgcHJpdmF0ZSBjbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyOiBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyLFxuICAgIHByaXZhdGUgY29tbWFuZE1pZGRsZXdhcmU6IENvbW1hbmRNaWRkbGV3YXJlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveEV2ZW50SGFuZGxlckNyZWF0b3I/OiBTYW5kYm94RXZlbnRIYW5kbGVyQ3JlYXRvclxuICApIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAnc2FuZGJveCc7XG4gICAgdGhpcy5kZXNjcmliZSA9XG4gICAgICAnU3RhcnRzIHNhbmRib3gsIHdhdGNoIG1vZGUgZm9yIEFtcGxpZnkgYmFja2VuZCBkZXBsb3ltZW50cyc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPFNhbmRib3hDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZT5cbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3Qgc2FuZGJveCA9IGF3YWl0IHRoaXMuc2FuZGJveEZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcbiAgICB0aGlzLnNhbmRib3hJZGVudGlmaWVyID0gYXJncy5pZGVudGlmaWVyO1xuXG4gICAgLy8gYXR0YWNoaW5nIGV2ZW50IGhhbmRsZXJzXG4gICAgY29uc3QgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlciA9IG5ldyBDbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyKFxuICAgICAgdGhpcy5jbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyLFxuICAgICAgYXJncy5vdXRwdXRzVmVyc2lvbiBhcyBDbGllbnRDb25maWdWZXJzaW9uLFxuICAgICAgYXJncy5vdXRwdXRzT3V0RGlyLFxuICAgICAgYXJncy5vdXRwdXRzRm9ybWF0XG4gICAgKTtcbiAgICBjb25zdCBldmVudEhhbmRsZXJzID0gdGhpcy5zYW5kYm94RXZlbnRIYW5kbGVyQ3JlYXRvcj8uKHtcbiAgICAgIHNhbmRib3hJZGVudGlmaWVyOiB0aGlzLnNhbmRib3hJZGVudGlmaWVyLFxuICAgICAgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlcixcbiAgICB9KTtcbiAgICBpZiAoZXZlbnRIYW5kbGVycykge1xuICAgICAgT2JqZWN0LmVudHJpZXMoZXZlbnRIYW5kbGVycykuZm9yRWFjaCgoW2V2ZW50LCBoYW5kbGVyc10pID0+IHtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaCgoaGFuZGxlcikgPT4gc2FuZGJveC5vbihldmVudCwgaGFuZGxlcikpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHdhdGNoRXhjbHVzaW9ucyA9IGFyZ3MuZXhjbHVkZSA/PyBbXTtcbiAgICBjb25zdCBmaWxlTmFtZSA9IGdldENsaWVudENvbmZpZ0ZpbGVOYW1lKFxuICAgICAgYXJncy5vdXRwdXRzVmVyc2lvbiBhcyBDbGllbnRDb25maWdWZXJzaW9uXG4gICAgKTtcbiAgICBjb25zdCBjbGllbnRDb25maWdXcml0ZVBhdGggPSBhd2FpdCBnZXRDbGllbnRDb25maWdQYXRoKFxuICAgICAgZmlsZU5hbWUsXG4gICAgICBhcmdzLm91dHB1dHNPdXREaXIsXG4gICAgICBhcmdzLm91dHB1dHNGb3JtYXRcbiAgICApO1xuXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGNsaWVudENvbmZpZ1dyaXRlUGF0aCkpIHtcbiAgICAgIGF3YWl0IGdlbmVyYXRlRW1wdHlDbGllbnRDb25maWdUb0ZpbGUoXG4gICAgICAgIGFyZ3Mub3V0cHV0c1ZlcnNpb24gYXMgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgICAgICAgYXJncy5vdXRwdXRzT3V0RGlyLFxuICAgICAgICBhcmdzLm91dHB1dHNGb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgd2F0Y2hFeGNsdXNpb25zLnB1c2goY2xpZW50Q29uZmlnV3JpdGVQYXRoKTtcbiAgICBhd2FpdCBzYW5kYm94LnN0YXJ0KHtcbiAgICAgIGRpcjogYXJncy5kaXJUb1dhdGNoLFxuICAgICAgZXhjbHVkZTogd2F0Y2hFeGNsdXNpb25zLFxuICAgICAgaWRlbnRpZmllcjogYXJncy5pZGVudGlmaWVyLFxuICAgICAgcHJvZmlsZTogYXJncy5wcm9maWxlLFxuICAgICAgd2F0Y2hGb3JDaGFuZ2VzOiAhYXJncy5vbmNlLFxuICAgIH0pO1xuICAgIHByb2Nlc3Mub25jZSgnU0lHSU5UJywgKCkgPT4gdm9pZCB0aGlzLnNpZ0ludEhhbmRsZXIoKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxTYW5kYm94Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+ID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgeWFyZ3NcbiAgICAgICAgLy8gQ2FzdCB0byBlcmFzZSBvcHRpb25zIHR5cGVzIHVzZWQgaW4gaW50ZXJuYWwgc3ViIGNvbW1hbmQgaW1wbGVtZW50YXRpb24uIE90aGVyd2lzZSwgY29tcGlsZXIgZmFpbHMgaGVyZS5cbiAgICAgICAgLmNvbW1hbmQodGhpcy5zYW5kYm94U3ViQ29tbWFuZHMpXG4gICAgICAgIC52ZXJzaW9uKGZhbHNlKVxuICAgICAgICAub3B0aW9uKCdkaXItdG8td2F0Y2gnLCB7XG4gICAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgICAnRGlyZWN0b3J5IHRvIHdhdGNoIGZvciBmaWxlIGNoYW5nZXMuIEFsbCBzdWJkaXJlY3RvcmllcyBhbmQgZmlsZXMgd2lsbCBiZSBpbmNsdWRlZC4gRGVmYXVsdHMgdG8gdGhlIGFtcGxpZnkgZGlyZWN0b3J5LicsXG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICAgIGdsb2JhbDogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5vcHRpb24oJ2V4Y2x1ZGUnLCB7XG4gICAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgICAnQW4gYXJyYXkgb2YgcGF0aHMgb3IgZ2xvYiBwYXR0ZXJucyB0byBpZ25vcmUuIFBhdGhzIGNhbiBiZSByZWxhdGl2ZSBvciBhYnNvbHV0ZSBhbmQgY2FuIGVpdGhlciBiZSBmaWxlcyBvciBkaXJlY3RvcmllcycsXG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgYXJyYXk6IHRydWUsXG4gICAgICAgICAgZ2xvYmFsOiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgICAgLm9wdGlvbignaWRlbnRpZmllcicsIHtcbiAgICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAgICdBbiBvcHRpb25hbCBpZGVudGlmaWVyIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gZGlmZmVyZW50IHNhbmRib3hlcy4gRGVmYXVsdCBpcyB0aGUgbmFtZSBvZiB0aGUgc3lzdGVtIHVzZXIgZXhlY3V0aW5nIHRoZSBwcm9jZXNzJyxcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5vcHRpb24oJ291dHB1dHMtZm9ybWF0Jywge1xuICAgICAgICAgIGRlc2NyaWJlOiAnYW1wbGlmeV9vdXRwdXRzIGZpbGUgZm9ybWF0JyxcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgICAgY2hvaWNlczogT2JqZWN0LnZhbHVlcyhDbGllbnRDb25maWdGb3JtYXQpLFxuICAgICAgICAgIGdsb2JhbDogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5vcHRpb24oJ291dHB1dHMtdmVyc2lvbicsIHtcbiAgICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAgICdWZXJzaW9uIG9mIHRoZSBjb25maWd1cmF0aW9uLiBWZXJzaW9uIDAgcmVwcmVzZW50cyBjbGFzc2ljIGFtcGxpZnktY2xpIGNvbmZpZyBmaWxlIGFtcGxpZnktY29uZmlndXJhdGlvbiBhbmQgMSByZXByZXNlbnRzIG5ld2VyIGNvbmZpZyBmaWxlIGFtcGxpZnlfb3V0cHV0cycsXG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICAgIGNob2ljZXM6IE9iamVjdC52YWx1ZXMoQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbiksXG4gICAgICAgICAgZ2xvYmFsOiBmYWxzZSxcbiAgICAgICAgICBkZWZhdWx0OiBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbiAgICAgICAgfSlcbiAgICAgICAgLm9wdGlvbignb3V0cHV0cy1vdXQtZGlyJywge1xuICAgICAgICAgIGRlc2NyaWJlOlxuICAgICAgICAgICAgJ0EgcGF0aCB0byBkaXJlY3Rvcnkgd2hlcmUgYW1wbGlmeV9vdXRwdXRzIGlzIHdyaXR0ZW4uIElmIG5vdCBwcm92aWRlZCBkZWZhdWx0cyB0byBjdXJyZW50IHByb2Nlc3Mgd29ya2luZyBkaXJlY3RvcnkuJyxcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgICAgZ2xvYmFsOiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgICAgLm9wdGlvbigncHJvZmlsZScsIHtcbiAgICAgICAgICBkZXNjcmliZTogJ0FuIEFXUyBwcm9maWxlIG5hbWUuJyxcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5vcHRpb24oJ29uY2UnLCB7XG4gICAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgICAnRXhlY3V0ZSBhIHNpbmdsZSBzYW5kYm94IGRlcGxveW1lbnQgd2l0aG91dCB3YXRjaGluZyBmb3IgZnV0dXJlIGZpbGUgY2hhbmdlcycsXG4gICAgICAgICAgYm9vbGVhbjogdHJ1ZSxcbiAgICAgICAgICBnbG9iYWw6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgICAuY2hlY2soYXN5bmMgKGFyZ3YpID0+IHtcbiAgICAgICAgICBpZiAoYXJndlsnZGlyLXRvLXdhdGNoJ10pIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudmFsaWRhdGVEaXJlY3RvcnkoJ2Rpci10by13YXRjaCcsIGFyZ3ZbJ2Rpci10by13YXRjaCddKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFyZ3YuaWRlbnRpZmllcikge1xuICAgICAgICAgICAgY29uc3QgaWRlbnRpZmllclJlZ2V4ID0gL15bYS16QS1aMC05LV17MSwxNX0kLztcbiAgICAgICAgICAgIGlmICghYXJndi5pZGVudGlmaWVyLm1hdGNoKGlkZW50aWZpZXJSZWdleCkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGAtLWlkZW50aWZpZXIgc2hvdWxkIG1hdGNoIFthLXpBLVowLTktXSBhbmQgYmUgbGVzcyB0aGFuIDE1IGNoYXJhY3RlcnMuYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNvbmZsaWN0cygnb25jZScsIFsnZXhjbHVkZScsICdkaXItdG8td2F0Y2gnXSlcbiAgICAgICAgLm1pZGRsZXdhcmUoW3RoaXMuY29tbWFuZE1pZGRsZXdhcmUuZW5zdXJlQXdzQ3JlZGVudGlhbEFuZFJlZ2lvbl0pXG4gICAgKTtcbiAgfTtcblxuICBzaWdJbnRIYW5kbGVyID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci55ZXNPck5vKHtcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdXb3VsZCB5b3UgbGlrZSB0byBkZWxldGUgYWxsIHRoZSByZXNvdXJjZXMgaW4geW91ciBzYW5kYm94IGVudmlyb25tZW50IChUaGlzIGNhbm5vdCBiZSB1bmRvbmUpPycsXG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgIH0pO1xuICAgIGlmIChhbnN3ZXIpXG4gICAgICBhd2FpdCAoXG4gICAgICAgIGF3YWl0IHRoaXMuc2FuZGJveEZhY3RvcnkuZ2V0SW5zdGFuY2UoKVxuICAgICAgKS5kZWxldGUoeyBpZGVudGlmaWVyOiB0aGlzLnNhbmRib3hJZGVudGlmaWVyIH0pO1xuICB9O1xuXG4gIHByaXZhdGUgdmFsaWRhdGVEaXJlY3RvcnkgPSBhc3luYyAob3B0aW9uOiBzdHJpbmcsIGRpcjogc3RyaW5nKSA9PiB7XG4gICAgbGV0IHN0YXRzO1xuICAgIHRyeSB7XG4gICAgICBzdGF0cyA9IGF3YWl0IGZzcC5zdGF0KGRpciwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgLS0ke29wdGlvbn0gJHtkaXJ9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgfVxuICAgIGlmICghc3RhdHMuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAtLSR7b3B0aW9ufSAke2Rpcn0gaXMgbm90IGEgdmFsaWQgZGlyZWN0b3J5YCk7XG4gICAgfVxuICB9O1xufVxuIl19