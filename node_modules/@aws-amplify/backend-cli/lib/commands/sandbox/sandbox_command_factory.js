import { fileURLToPath } from 'node:url';
import { SandboxCommand, } from './sandbox_command.js';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { SandboxDeleteCommand } from './sandbox-delete/sandbox_delete_command.js';
import { SandboxBackendIdResolver } from './sandbox_id_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { createSandboxSecretCommand } from './sandbox-secret/sandbox_secret_command_factory.js';
import { PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { SandboxEventHandlerFactory } from './sandbox_event_handler_factory.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { format, printer } from '@aws-amplify/cli-core';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
/**
 * Creates wired sandbox command.
 */
export const createSandboxCommand = () => {
    const sandboxBackendIdPartsResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    const sandboxFactory = new SandboxSingletonFactory(sandboxBackendIdPartsResolver.resolve, printer, format);
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const clientConfigGeneratorAdapter = new ClientConfigGeneratorAdapter(awsClientProvider);
    const libraryVersion = new PackageJsonReader().read(fileURLToPath(new URL('../../../package.json', import.meta.url))).version ?? '';
    const eventHandlerFactory = new SandboxEventHandlerFactory(sandboxBackendIdPartsResolver.resolve, async () => await new UsageDataEmitterFactory().getInstance(libraryVersion));
    const commandMiddleWare = new CommandMiddleware(printer);
    return new SandboxCommand(sandboxFactory, [new SandboxDeleteCommand(sandboxFactory), createSandboxSecretCommand()], clientConfigGeneratorAdapter, commandMiddleWare, eventHandlerFactory.getSandboxEventHandlers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxjQUFjLEdBRWYsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUNoRyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV0RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBR2xDLEVBQUU7SUFDRixNQUFNLDZCQUE2QixHQUFHLElBQUksd0JBQXdCLENBQ2hFLElBQUksc0JBQXNCLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQ3BELENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxJQUFJLHVCQUF1QixDQUNoRCw2QkFBNkIsQ0FBQyxPQUFPLEVBQ3JDLE9BQU8sRUFDUCxNQUFNLENBQ1AsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFDaEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztJQUMxQyxNQUFNLG9CQUFvQixHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztJQUV4RCxNQUFNLGlCQUFpQixHQUFHO1FBQ3hCLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRO1FBQzNCLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWE7UUFDckMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFLENBQUMsb0JBQW9CO0tBQ3BELENBQUM7SUFDRixNQUFNLDRCQUE0QixHQUFHLElBQUksNEJBQTRCLENBQ25FLGlCQUFpQixDQUNsQixDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQ2xCLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQzFCLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2pFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUVsQixNQUFNLG1CQUFtQixHQUFHLElBQUksMEJBQTBCLENBQ3hELDZCQUE2QixDQUFDLE9BQU8sRUFDckMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQzVFLENBQUM7SUFFRixNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekQsT0FBTyxJQUFJLGNBQWMsQ0FDdkIsY0FBYyxFQUNkLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsRUFBRSwwQkFBMEIsRUFBRSxDQUFDLEVBQ3hFLDRCQUE0QixFQUM1QixpQkFBaUIsRUFDakIsbUJBQW1CLENBQUMsdUJBQXVCLENBQzVDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCB7XG4gIFNhbmRib3hDb21tYW5kLFxuICBTYW5kYm94Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2UsXG59IGZyb20gJy4vc2FuZGJveF9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3NhbmRib3gnO1xuaW1wb3J0IHsgU2FuZGJveERlbGV0ZUNvbW1hbmQgfSBmcm9tICcuL3NhbmRib3gtZGVsZXRlL3NhbmRib3hfZGVsZXRlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyIH0gZnJvbSAnLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgTG9jYWxOYW1lc3BhY2VSZXNvbHZlciB9IGZyb20gJy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9sb2NhbF9uYW1lc3BhY2VfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlU2FuZGJveFNlY3JldENvbW1hbmQgfSBmcm9tICcuL3NhbmRib3gtc2VjcmV0L3NhbmRib3hfc2VjcmV0X2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQge1xuICBQYWNrYWdlSnNvblJlYWRlcixcbiAgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnksXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IFNhbmRib3hFdmVudEhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9zYW5kYm94X2V2ZW50X2hhbmRsZXJfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBDb21tYW5kTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRfbWlkZGxld2FyZS5qcyc7XG5pbXBvcnQgeyBmb3JtYXQsIHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIHdpcmVkIHNhbmRib3ggY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNhbmRib3hDb21tYW5kID0gKCk6IENvbW1hbmRNb2R1bGU8XG4gIG9iamVjdCxcbiAgU2FuZGJveENvbW1hbmRPcHRpb25zS2ViYWJDYXNlXG4+ID0+IHtcbiAgY29uc3Qgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIgPSBuZXcgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyKFxuICAgIG5ldyBMb2NhbE5hbWVzcGFjZVJlc29sdmVyKG5ldyBQYWNrYWdlSnNvblJlYWRlcigpKVxuICApO1xuXG4gIGNvbnN0IHNhbmRib3hGYWN0b3J5ID0gbmV3IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5KFxuICAgIHNhbmRib3hCYWNrZW5kSWRQYXJ0c1Jlc29sdmVyLnJlc29sdmUsXG4gICAgcHJpbnRlcixcbiAgICBmb3JtYXRcbiAgKTtcbiAgY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoKTtcbiAgY29uc3QgYW1wbGlmeUNsaWVudCA9IG5ldyBBbXBsaWZ5Q2xpZW50KCk7XG4gIGNvbnN0IGNsb3VkRm9ybWF0aW9uQ2xpZW50ID0gbmV3IENsb3VkRm9ybWF0aW9uQ2xpZW50KCk7XG5cbiAgY29uc3QgYXdzQ2xpZW50UHJvdmlkZXIgPSB7XG4gICAgZ2V0UzNDbGllbnQ6ICgpID0+IHMzQ2xpZW50LFxuICAgIGdldEFtcGxpZnlDbGllbnQ6ICgpID0+IGFtcGxpZnlDbGllbnQsXG4gICAgZ2V0Q2xvdWRGb3JtYXRpb25DbGllbnQ6ICgpID0+IGNsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICB9O1xuICBjb25zdCBjbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyID0gbmV3IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIoXG4gICAgYXdzQ2xpZW50UHJvdmlkZXJcbiAgKTtcblxuICBjb25zdCBsaWJyYXJ5VmVyc2lvbiA9XG4gICAgbmV3IFBhY2thZ2VKc29uUmVhZGVyKCkucmVhZChcbiAgICAgIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vLi4vLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSlcbiAgICApLnZlcnNpb24gPz8gJyc7XG5cbiAgY29uc3QgZXZlbnRIYW5kbGVyRmFjdG9yeSA9IG5ldyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeShcbiAgICBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlLFxuICAgIGFzeW5jICgpID0+IGF3YWl0IG5ldyBVc2FnZURhdGFFbWl0dGVyRmFjdG9yeSgpLmdldEluc3RhbmNlKGxpYnJhcnlWZXJzaW9uKVxuICApO1xuXG4gIGNvbnN0IGNvbW1hbmRNaWRkbGVXYXJlID0gbmV3IENvbW1hbmRNaWRkbGV3YXJlKHByaW50ZXIpO1xuICByZXR1cm4gbmV3IFNhbmRib3hDb21tYW5kKFxuICAgIHNhbmRib3hGYWN0b3J5LFxuICAgIFtuZXcgU2FuZGJveERlbGV0ZUNvbW1hbmQoc2FuZGJveEZhY3RvcnkpLCBjcmVhdGVTYW5kYm94U2VjcmV0Q29tbWFuZCgpXSxcbiAgICBjbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyLFxuICAgIGNvbW1hbmRNaWRkbGVXYXJlLFxuICAgIGV2ZW50SGFuZGxlckZhY3RvcnkuZ2V0U2FuZGJveEV2ZW50SGFuZGxlcnNcbiAgKTtcbn07XG4iXX0=