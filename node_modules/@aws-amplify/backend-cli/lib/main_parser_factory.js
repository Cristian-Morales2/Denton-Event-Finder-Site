import yargs from 'yargs';
import { createGenerateCommand } from './commands/generate/generate_command_factory.js';
import { createSandboxCommand } from './commands/sandbox/sandbox_command_factory.js';
import { createPipelineDeployCommand } from './commands/pipeline-deploy/pipeline_deploy_command_factory.js';
import { createConfigureCommand } from './commands/configure/configure_command_factory.js';
import { generateCommandFailureHandler } from './error_handler.js';
import { createInfoCommand } from './commands/info/info_command_factory.js';
import * as path from 'path';
/**
 * Creates main parser.
 */
export const createMainParser = (libraryVersion, usageDataEmitter) => {
    const parser = yargs()
        .version(libraryVersion)
        // This option is being used indirectly to configure the log level of the Printer instance.
        // refer: https://github.com/aws-amplify/amplify-backend/blob/main/packages/cli/src/printer.ts
        .options('debug', {
        type: 'boolean',
        default: false,
        description: 'Print debug logs to the console',
    })
        .strict()
        // pnpm places the command bin file in `ampx.js` instead of `ampx` which causes yargs to think the command name is `ampx.js`.
        // This tells yargs that the command name is `ampx`.
        .scriptName(path.parse(process.argv[1]).name)
        .command(createGenerateCommand())
        .command(createSandboxCommand())
        .command(createPipelineDeployCommand())
        .command(createConfigureCommand())
        .command(createInfoCommand())
        .help()
        .demandCommand()
        .strictCommands()
        .recommendCommands();
    parser.fail(generateCommandFailureHandler(parser, usageDataEmitter));
    return parser;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbl9wYXJzZXJfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluX3BhcnNlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBZSxNQUFNLE9BQU8sQ0FBQztBQUVwQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUM1RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM1RSxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUU3Qjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQzlCLGNBQXNCLEVBQ3RCLGdCQUFtQyxFQUM3QixFQUFFO0lBQ1IsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFO1NBQ25CLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFDeEIsMkZBQTJGO1FBQzNGLDhGQUE4RjtTQUM3RixPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ2hCLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLEtBQUs7UUFDZCxXQUFXLEVBQUUsaUNBQWlDO0tBQy9DLENBQUM7U0FDRCxNQUFNLEVBQUU7UUFDVCw2SEFBNkg7UUFDN0gsb0RBQW9EO1NBQ25ELFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDNUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7U0FDaEMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLENBQUM7U0FDL0IsT0FBTyxDQUFDLDJCQUEyQixFQUFFLENBQUM7U0FDdEMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDakMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDNUIsSUFBSSxFQUFFO1NBQ04sYUFBYSxFQUFFO1NBQ2YsY0FBYyxFQUFFO1NBQ2hCLGlCQUFpQixFQUFFLENBQUM7SUFFdkIsTUFBTSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBRXJFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YXJncywgeyBBcmd2IH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgVXNhZ2VEYXRhRW1pdHRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUdlbmVyYXRlQ29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvZ2VuZXJhdGUvZ2VuZXJhdGVfY29tbWFuZF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGNyZWF0ZVNhbmRib3hDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kcy9zYW5kYm94L3NhbmRib3hfY29tbWFuZF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGNyZWF0ZVBpcGVsaW5lRGVwbG95Q29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgY3JlYXRlQ29uZmlndXJlQ29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvY29uZmlndXJlL2NvbmZpZ3VyZV9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVDb21tYW5kRmFpbHVyZUhhbmRsZXIgfSBmcm9tICcuL2Vycm9yX2hhbmRsZXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlSW5mb0NvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmRzL2luZm8vaW5mb19jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuLyoqXG4gKiBDcmVhdGVzIG1haW4gcGFyc2VyLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTWFpblBhcnNlciA9IChcbiAgbGlicmFyeVZlcnNpb246IHN0cmluZyxcbiAgdXNhZ2VEYXRhRW1pdHRlcj86IFVzYWdlRGF0YUVtaXR0ZXJcbik6IEFyZ3YgPT4ge1xuICBjb25zdCBwYXJzZXIgPSB5YXJncygpXG4gICAgLnZlcnNpb24obGlicmFyeVZlcnNpb24pXG4gICAgLy8gVGhpcyBvcHRpb24gaXMgYmVpbmcgdXNlZCBpbmRpcmVjdGx5IHRvIGNvbmZpZ3VyZSB0aGUgbG9nIGxldmVsIG9mIHRoZSBQcmludGVyIGluc3RhbmNlLlxuICAgIC8vIHJlZmVyOiBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2Jsb2IvbWFpbi9wYWNrYWdlcy9jbGkvc3JjL3ByaW50ZXIudHNcbiAgICAub3B0aW9ucygnZGVidWcnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUHJpbnQgZGVidWcgbG9ncyB0byB0aGUgY29uc29sZScsXG4gICAgfSlcbiAgICAuc3RyaWN0KClcbiAgICAvLyBwbnBtIHBsYWNlcyB0aGUgY29tbWFuZCBiaW4gZmlsZSBpbiBgYW1weC5qc2AgaW5zdGVhZCBvZiBgYW1weGAgd2hpY2ggY2F1c2VzIHlhcmdzIHRvIHRoaW5rIHRoZSBjb21tYW5kIG5hbWUgaXMgYGFtcHguanNgLlxuICAgIC8vIFRoaXMgdGVsbHMgeWFyZ3MgdGhhdCB0aGUgY29tbWFuZCBuYW1lIGlzIGBhbXB4YC5cbiAgICAuc2NyaXB0TmFtZShwYXRoLnBhcnNlKHByb2Nlc3MuYXJndlsxXSkubmFtZSlcbiAgICAuY29tbWFuZChjcmVhdGVHZW5lcmF0ZUNvbW1hbmQoKSlcbiAgICAuY29tbWFuZChjcmVhdGVTYW5kYm94Q29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZVBpcGVsaW5lRGVwbG95Q29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZUNvbmZpZ3VyZUNvbW1hbmQoKSlcbiAgICAuY29tbWFuZChjcmVhdGVJbmZvQ29tbWFuZCgpKVxuICAgIC5oZWxwKClcbiAgICAuZGVtYW5kQ29tbWFuZCgpXG4gICAgLnN0cmljdENvbW1hbmRzKClcbiAgICAucmVjb21tZW5kQ29tbWFuZHMoKTtcblxuICBwYXJzZXIuZmFpbChnZW5lcmF0ZUNvbW1hbmRGYWlsdXJlSGFuZGxlcihwYXJzZXIsIHVzYWdlRGF0YUVtaXR0ZXIpKTtcblxuICByZXR1cm4gcGFyc2VyO1xufTtcbiJdfQ==