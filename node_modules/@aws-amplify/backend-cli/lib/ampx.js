#!/usr/bin/env node
import { hideBin } from 'yargs/helpers';
import { createMainParser } from './main_parser_factory.js';
import { attachUnhandledExceptionListeners } from './error_handler.js';
import { extractSubCommands } from './extract_sub_commands.js';
import { AmplifyFault, PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { fileURLToPath } from 'node:url';
import { LogLevel, format, printer } from '@aws-amplify/cli-core';
import { verifyCommandName } from './verify_command_name.js';
const packageJson = new PackageJsonReader().read(fileURLToPath(new URL('../package.json', import.meta.url)));
const libraryVersion = packageJson.version;
if (libraryVersion == undefined) {
    throw new AmplifyFault('UnknownVersionFault', {
        message: 'Library version cannot be determined. Check the library installation',
    });
}
const usageDataEmitter = await new UsageDataEmitterFactory().getInstance(libraryVersion);
attachUnhandledExceptionListeners(usageDataEmitter);
verifyCommandName();
const parser = createMainParser(libraryVersion, usageDataEmitter);
await parser.parseAsync(hideBin(process.argv));
try {
    const metricDimension = {};
    const subCommands = extractSubCommands(parser);
    if (subCommands) {
        metricDimension.command = subCommands;
    }
    await usageDataEmitter.emitSuccess({}, metricDimension);
}
catch (e) {
    if (e instanceof Error) {
        printer.log(format.error('Failed to emit usage metrics'), LogLevel.DEBUG);
        printer.log(format.error(e), LogLevel.DEBUG);
        if (e.stack) {
            printer.log(e.stack, LogLevel.DEBUG);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1weC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hbXB4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8sRUFDTCxZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFN0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FDOUMsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0QsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7QUFFM0MsSUFBSSxjQUFjLElBQUksU0FBUyxFQUFFO0lBQy9CLE1BQU0sSUFBSSxZQUFZLENBQUMscUJBQXFCLEVBQUU7UUFDNUMsT0FBTyxFQUNMLHNFQUFzRTtLQUN6RSxDQUFDLENBQUM7Q0FDSjtBQUVELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUMsV0FBVyxDQUN0RSxjQUFjLENBQ2YsQ0FBQztBQUVGLGlDQUFpQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFFcEQsaUJBQWlCLEVBQUUsQ0FBQztBQUVwQixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUNsRSxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBRS9DLElBQUk7SUFDRixNQUFNLGVBQWUsR0FBMkIsRUFBRSxDQUFDO0lBQ25ELE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9DLElBQUksV0FBVyxFQUFFO1FBQ2YsZUFBZSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUM7S0FDdkM7SUFFRCxNQUFNLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7Q0FDekQ7QUFBQyxPQUFPLENBQUMsRUFBRTtJQUNWLElBQUksQ0FBQyxZQUFZLEtBQUssRUFBRTtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RDO0tBQ0Y7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuaW1wb3J0IHsgaGlkZUJpbiB9IGZyb20gJ3lhcmdzL2hlbHBlcnMnO1xuaW1wb3J0IHsgY3JlYXRlTWFpblBhcnNlciB9IGZyb20gJy4vbWFpbl9wYXJzZXJfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBhdHRhY2hVbmhhbmRsZWRFeGNlcHRpb25MaXN0ZW5lcnMgfSBmcm9tICcuL2Vycm9yX2hhbmRsZXIuanMnO1xuaW1wb3J0IHsgZXh0cmFjdFN1YkNvbW1hbmRzIH0gZnJvbSAnLi9leHRyYWN0X3N1Yl9jb21tYW5kcy5qcyc7XG5pbXBvcnQge1xuICBBbXBsaWZ5RmF1bHQsXG4gIFBhY2thZ2VKc29uUmVhZGVyLFxuICBVc2FnZURhdGFFbWl0dGVyRmFjdG9yeSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCB7IExvZ0xldmVsLCBmb3JtYXQsIHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgdmVyaWZ5Q29tbWFuZE5hbWUgfSBmcm9tICcuL3ZlcmlmeV9jb21tYW5kX25hbWUuanMnO1xuXG5jb25zdCBwYWNrYWdlSnNvbiA9IG5ldyBQYWNrYWdlSnNvblJlYWRlcigpLnJlYWQoXG4gIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSlcbik7XG5jb25zdCBsaWJyYXJ5VmVyc2lvbiA9IHBhY2thZ2VKc29uLnZlcnNpb247XG5cbmlmIChsaWJyYXJ5VmVyc2lvbiA9PSB1bmRlZmluZWQpIHtcbiAgdGhyb3cgbmV3IEFtcGxpZnlGYXVsdCgnVW5rbm93blZlcnNpb25GYXVsdCcsIHtcbiAgICBtZXNzYWdlOlxuICAgICAgJ0xpYnJhcnkgdmVyc2lvbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZC4gQ2hlY2sgdGhlIGxpYnJhcnkgaW5zdGFsbGF0aW9uJyxcbiAgfSk7XG59XG5cbmNvbnN0IHVzYWdlRGF0YUVtaXR0ZXIgPSBhd2FpdCBuZXcgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnkoKS5nZXRJbnN0YW5jZShcbiAgbGlicmFyeVZlcnNpb25cbik7XG5cbmF0dGFjaFVuaGFuZGxlZEV4Y2VwdGlvbkxpc3RlbmVycyh1c2FnZURhdGFFbWl0dGVyKTtcblxudmVyaWZ5Q29tbWFuZE5hbWUoKTtcblxuY29uc3QgcGFyc2VyID0gY3JlYXRlTWFpblBhcnNlcihsaWJyYXJ5VmVyc2lvbiwgdXNhZ2VEYXRhRW1pdHRlcik7XG5hd2FpdCBwYXJzZXIucGFyc2VBc3luYyhoaWRlQmluKHByb2Nlc3MuYXJndikpO1xuXG50cnkge1xuICBjb25zdCBtZXRyaWNEaW1lbnNpb246IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgY29uc3Qgc3ViQ29tbWFuZHMgPSBleHRyYWN0U3ViQ29tbWFuZHMocGFyc2VyKTtcblxuICBpZiAoc3ViQ29tbWFuZHMpIHtcbiAgICBtZXRyaWNEaW1lbnNpb24uY29tbWFuZCA9IHN1YkNvbW1hbmRzO1xuICB9XG5cbiAgYXdhaXQgdXNhZ2VEYXRhRW1pdHRlci5lbWl0U3VjY2Vzcyh7fSwgbWV0cmljRGltZW5zaW9uKTtcbn0gY2F0Y2ggKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHByaW50ZXIubG9nKGZvcm1hdC5lcnJvcignRmFpbGVkIHRvIGVtaXQgdXNhZ2UgbWV0cmljcycpLCBMb2dMZXZlbC5ERUJVRyk7XG4gICAgcHJpbnRlci5sb2coZm9ybWF0LmVycm9yKGUpLCBMb2dMZXZlbC5ERUJVRyk7XG4gICAgaWYgKGUuc3RhY2spIHtcbiAgICAgIHByaW50ZXIubG9nKGUuc3RhY2ssIExvZ0xldmVsLkRFQlVHKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==