"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_directives_1 = require("@aws-amplify/graphql-directives");
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const cdk = __importStar(require("aws-cdk-lib"));
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const FUNCTION_DIRECTIVE_STACK = 'FunctionDirectiveStack';
class FunctionTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor(functionNameMap) {
        super('amplify-function-transformer', graphql_directives_1.FunctionDirective.definition);
        this.functionNameMap = functionNameMap;
        this.resolverGroups = new Map();
        this.field = (parent, definition, directive, acc) => {
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const args = directiveWrapped.getArguments({
                resolverTypeName: parent.name.value,
                resolverFieldName: definition.name.value,
            }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(acc.transformParameters));
            let resolver = this.resolverGroups.get(definition);
            if (resolver === undefined) {
                resolver = [];
                this.resolverGroups.set(definition, resolver);
            }
            resolver.push(args);
        };
        this.generateResolvers = (context) => {
            if (this.resolverGroups.size === 0) {
                return;
            }
            const stack = context.stackManager.createStack(FUNCTION_DIRECTIVE_STACK);
            const createdResources = new Map();
            const env = context.synthParameters.amplifyEnvironmentName;
            stack.templateOptions.templateFormatVersion = '2010-09-09';
            stack.templateOptions.description = 'An auto-generated nested stack for the @function directive.';
            new cdk.CfnCondition(stack, graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, {
                expression: cdk.Fn.conditionNot(cdk.Fn.conditionEquals(env, graphql_transformer_common_1.ResourceConstants.NONE)),
            });
            this.resolverGroups.forEach((resolverFns) => {
                resolverFns.forEach((config) => {
                    var _a;
                    const dataSourceId = graphql_transformer_common_1.FunctionResourceIDs.FunctionDataSourceID(config.name, config.region, config.accountId);
                    if (!createdResources.has(dataSourceId)) {
                        const referencedFunction = this.functionNameMap && config.name in this.functionNameMap
                            ? this.functionNameMap[config.name]
                            : lambda.Function.fromFunctionAttributes(stack, `${dataSourceId}Function`, {
                                functionArn: lambdaArnResource(env, config.name, config.region, config.accountId),
                            });
                        const dataSourceScope = context.stackManager.getScopeFor(dataSourceId, FUNCTION_DIRECTIVE_STACK);
                        const dataSource = context.api.host.addLambdaDataSource(dataSourceId, referencedFunction, {}, dataSourceScope);
                        createdResources.set(dataSourceId, dataSource);
                    }
                    const functionId = graphql_transformer_common_1.FunctionResourceIDs.FunctionAppSyncFunctionConfigurationID(config.name, config.region, config.accountId);
                    let func = createdResources.get(functionId);
                    if (func === undefined) {
                        const funcScope = context.stackManager.getScopeFor(functionId, FUNCTION_DIRECTIVE_STACK);
                        func = context.api.host.addAppSyncFunction(functionId, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.printBlock)(`Invoke AWS Lambda data source: ${dataSourceId}`)((0, graphql_mapping_template_1.obj)({
                            version: (0, graphql_mapping_template_1.str)('2018-05-29'),
                            operation: (0, graphql_mapping_template_1.str)('Invoke'),
                            payload: (0, graphql_mapping_template_1.obj)({
                                typeName: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.stash.get("typeName"))'),
                                fieldName: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.stash.get("fieldName"))'),
                                arguments: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.arguments)'),
                                identity: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.identity)'),
                                source: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.source)'),
                                request: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.request)'),
                                prev: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.prev)'),
                            }),
                        })), `${functionId}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.printBlock)('Handle error or return result')((0, graphql_mapping_template_1.compoundExpression)([
                            (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)('ctx.error'), (0, graphql_mapping_template_1.raw)('$util.error($ctx.error.message, $ctx.error.type)')),
                            (0, graphql_mapping_template_1.raw)('$util.toJson($ctx.result)'),
                        ])), `${functionId}.res.vtl`), dataSourceId, funcScope);
                        createdResources.set(functionId, func);
                    }
                    const resolverId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID(config.resolverTypeName, config.resolverFieldName);
                    let resolver = createdResources.get(resolverId);
                    const requestTemplate = [
                        (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("typeName", "${config.resolverTypeName}")`),
                        (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("fieldName", "${config.resolverFieldName}")`),
                    ];
                    const authModes = [context.authConfig.defaultAuthentication, ...(context.authConfig.additionalAuthenticationProviders || [])].map((mode) => mode === null || mode === void 0 ? void 0 : mode.authenticationType);
                    if (authModes.includes(aws_appsync_1.AuthorizationType.IAM)) {
                        const authRole = context.synthParameters.authenticatedUserRoleName;
                        const unauthRole = context.synthParameters.unauthenticatedUserRoleName;
                        const account = cdk.Stack.of(context.stackManager.scope).account;
                        requestTemplate.push((0, graphql_mapping_template_1.qref)(`$ctx.stash.put("authRole", "arn:aws:sts::${account}:assumed-role/${authRole}/CognitoIdentityCredentials")`), (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("unauthRole", "arn:aws:sts::${account}:assumed-role/${unauthRole}/CognitoIdentityCredentials")`));
                        const identityPoolId = context.synthParameters.identityPoolId;
                        if (identityPoolId) {
                            requestTemplate.push((0, graphql_mapping_template_1.qref)(`$ctx.stash.put("identityPoolId", "${identityPoolId}")`));
                        }
                        const adminRoles = (_a = context.synthParameters.adminRoles) !== null && _a !== void 0 ? _a : [];
                        requestTemplate.push((0, graphql_mapping_template_1.qref)(`$ctx.stash.put("adminRoles", ${JSON.stringify(adminRoles)})`));
                    }
                    requestTemplate.push((0, graphql_mapping_template_1.obj)({}));
                    if (resolver === undefined) {
                        const resolverScope = context.stackManager.getScopeFor(resolverId, FUNCTION_DIRECTIVE_STACK);
                        resolver = context.api.host.addResolver(config.resolverTypeName, config.resolverFieldName, graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, graphql_mapping_template_1.printBlock)('Stash resolver specific context.')((0, graphql_mapping_template_1.compoundExpression)(requestTemplate))), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString('$util.toJson($ctx.prev.result)', `${config.resolverTypeName}.${config.resolverFieldName}.res.vtl`), resolverId, undefined, [], resolverScope);
                        createdResources.set(resolverId, resolver);
                    }
                    resolver.pipelineConfig.functions.push(func.functionId);
                });
            });
        };
    }
}
exports.FunctionTransformer = FunctionTransformer;
const lambdaArnResource = (env, name, region, accountId) => {
    const substitutions = {};
    if (name.includes('${env}')) {
        substitutions.env = env;
    }
    return cdk.Fn.conditionIf(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cdk.Fn.sub(lambdaArnKey(name, region, accountId), substitutions), cdk.Fn.sub(lambdaArnKey(name.replace(/(-\${env})/, ''), region, accountId))).toString();
};
const lambdaArnKey = (name, region, accountId) => {
    return `arn:aws:lambda:${region ? region : '${AWS::Region}'}:${accountId ? accountId : '${AWS::AccountId}'}:function:${name}`;
};
//# sourceMappingURL=graphql-function-transformer.js.map