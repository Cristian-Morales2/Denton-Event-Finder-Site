"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributionMetadataStorage = void 0;
const _os = __importStar(require("os"));
const platform_core_1 = require("@aws-amplify/platform-core");
const _fs = __importStar(require("fs"));
/**
 * Stores BI metrics information in stack descriptions
 */
class AttributionMetadataStorage {
    fs;
    os;
    /**
     * Constructor with props for injecting test mocks
     */
    constructor(fs = _fs, os = _os) {
        this.fs = fs;
        this.os = os;
    }
    /**
     * Stores an attribution metadata string in the stack description of the provided stack
     * Does nothing if the stack already has a non-empty description
     */
    storeAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata = {}) => {
        if (typeof stack.templateOptions.description === 'string' &&
            stack.templateOptions.description.length > 0) {
            // don't overwrite an existing description
            return;
        }
        stack.templateOptions.description = JSON.stringify(this.getAttributionMetadata(stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata));
    };
    getAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata) => ({
        createdOn: this.getPlatform(),
        createdBy: this.getDeploymentEngineType(stack),
        createdWith: this.getLibraryVersion(libraryPackageJsonAbsolutePath),
        stackType: stackType,
        metadata: additionalMetadata,
    });
    getLibraryVersion = (absolutePackageJsonPath) => {
        if (!this.fs.existsSync(absolutePackageJsonPath)) {
            throw new Error(`Could not find ${absolutePackageJsonPath} to load library version from`);
        }
        const packageJsonContents = JSON.parse(
        // we have to use sync fs methods here because this is part of cdk synth
        this.fs.readFileSync(absolutePackageJsonPath, 'utf-8'));
        const libraryVersion = packageJsonContents.version;
        if (typeof libraryVersion !== 'string') {
            throw new Error(`Could not parse library version from ${absolutePackageJsonPath}`);
        }
        return libraryVersion;
    };
    getDeploymentEngineType = (stack) => {
        const deploymentType = stack.node.tryGetContext(platform_core_1.CDKContextKey.DEPLOYMENT_TYPE);
        if (deploymentType === undefined) {
            // if no deployment type context value is set, assume the construct is being used in a native CDK project
            return 'AmplifyCDK';
        }
        switch (deploymentType) {
            case 'branch':
                return 'AmplifyPipelineDeploy';
            case 'sandbox':
                return 'AmplifySandbox';
            default:
                throw new Error(`Unknown ${platform_core_1.CDKContextKey.DEPLOYMENT_TYPE} CDK context value "${deploymentType}"`);
        }
    };
    getPlatform = () => {
        switch (this.os.platform()) {
            case 'darwin':
                return 'Mac';
            case 'win32':
                return 'Windows';
            case 'linux':
                return 'Linux';
            default:
                return 'Other';
        }
    };
}
exports.AttributionMetadataStorage = AttributionMetadataStorage;
//# sourceMappingURL=data:application/json;base64,