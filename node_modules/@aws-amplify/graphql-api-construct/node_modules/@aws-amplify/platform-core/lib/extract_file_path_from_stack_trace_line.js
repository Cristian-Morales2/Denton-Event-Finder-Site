"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePathExtractor = void 0;
const url_1 = require("url");
/**
 * Regex that pulls out the path from a stack trace line. Works for both unix and windows paths and cjs and esm loaders
 *
 * For ESM loaders in TS files or CJS loaders
 * The line is something like "at SymbolName (/some/path/to/project/root/backend/auth.ts:3:21)"
 * or on Windows "at SymbolName (C:\some\path\to\project\root\backend\auth.ts:3:21)"
 *
 * For ESM loaders in JS files
 * The line is something like "at file:///some/path/to/project/root/backend/auth.ts:14:28"
 * or on Windows " at file:///C:\some\path\to\project\root\backend\auth.ts:3:21"
 *
 * This regex pulls out the file path into the "filepath" named matching group
 * In the above examples that would be "/some/path/to/project/root/backend/auth.ts" or "C:\some\path\to\project\root\backend\auth.ts"
 *
 * Instead of combining both matches with single regex, we create two to keep it simple and manageable.
 *
 */
const extractFilePathFromStackTraceLineRegexes = [
    /\((?<filepath>(\w:)?[^:]*)[:\d]*\)/,
    /at (?<filepath>.*\.\w[^:\d]*)[:\d]*/,
];
/**
 * Extracts a file path from a given stack trace line
 */
class FilePathExtractor {
    stackTraceLine;
    /**
     * Constructor for FilePathExtractor
     */
    constructor(stackTraceLine) {
        this.stackTraceLine = stackTraceLine;
    }
    extract = () => {
        for (const regex of extractFilePathFromStackTraceLineRegexes) {
            const match = this.stackTraceLine.match(regex);
            if (match?.groups?.filepath) {
                return this.standardizePath(match?.groups?.filepath);
            }
        }
        return undefined;
    };
    // The input can be either a file path or a file URL. If it's a file URL, convert it to the path.
    standardizePath = (maybeUrl) => {
        try {
            const url = new URL(maybeUrl);
            if (url.protocol === 'file:') {
                return (0, url_1.fileURLToPath)(url);
            }
            return maybeUrl;
        }
        catch {
            return maybeUrl;
        }
    };
}
exports.FilePathExtractor = FilePathExtractor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdF9maWxlX3BhdGhfZnJvbV9zdGFja190cmFjZV9saW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4dHJhY3RfZmlsZV9wYXRoX2Zyb21fc3RhY2tfdHJhY2VfbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBb0M7QUFFcEM7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxNQUFNLHdDQUF3QyxHQUFHO0lBQy9DLG9DQUFvQztJQUNwQyxxQ0FBcUM7Q0FDdEMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxpQkFBaUI7SUFJQztJQUg3Qjs7T0FFRztJQUNILFlBQTZCLGNBQXNCO1FBQXRCLG1CQUFjLEdBQWQsY0FBYyxDQUFRO0lBQUcsQ0FBQztJQUV2RCxPQUFPLEdBQUcsR0FBRyxFQUFFO1FBQ2IsS0FBSyxNQUFNLEtBQUssSUFBSSx3Q0FBd0MsRUFBRTtZQUM1RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxJQUFJLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO2dCQUMzQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQzthQUN0RDtTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0lBRUYsaUdBQWlHO0lBQ3pGLGVBQWUsR0FBRyxDQUFDLFFBQWdCLEVBQVUsRUFBRTtRQUNyRCxJQUFJO1lBQ0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUIsSUFBSSxHQUFHLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtnQkFDNUIsT0FBTyxJQUFBLG1CQUFhLEVBQUMsR0FBRyxDQUFDLENBQUM7YUFDM0I7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUFDLE1BQU07WUFDTixPQUFPLFFBQVEsQ0FBQztTQUNqQjtJQUNILENBQUMsQ0FBQztDQUNIO0FBNUJELDhDQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuXG4vKipcbiAqIFJlZ2V4IHRoYXQgcHVsbHMgb3V0IHRoZSBwYXRoIGZyb20gYSBzdGFjayB0cmFjZSBsaW5lLiBXb3JrcyBmb3IgYm90aCB1bml4IGFuZCB3aW5kb3dzIHBhdGhzIGFuZCBjanMgYW5kIGVzbSBsb2FkZXJzXG4gKlxuICogRm9yIEVTTSBsb2FkZXJzIGluIFRTIGZpbGVzIG9yIENKUyBsb2FkZXJzXG4gKiBUaGUgbGluZSBpcyBzb21ldGhpbmcgbGlrZSBcImF0IFN5bWJvbE5hbWUgKC9zb21lL3BhdGgvdG8vcHJvamVjdC9yb290L2JhY2tlbmQvYXV0aC50czozOjIxKVwiXG4gKiBvciBvbiBXaW5kb3dzIFwiYXQgU3ltYm9sTmFtZSAoQzpcXHNvbWVcXHBhdGhcXHRvXFxwcm9qZWN0XFxyb290XFxiYWNrZW5kXFxhdXRoLnRzOjM6MjEpXCJcbiAqXG4gKiBGb3IgRVNNIGxvYWRlcnMgaW4gSlMgZmlsZXNcbiAqIFRoZSBsaW5lIGlzIHNvbWV0aGluZyBsaWtlIFwiYXQgZmlsZTovLy9zb21lL3BhdGgvdG8vcHJvamVjdC9yb290L2JhY2tlbmQvYXV0aC50czoxNDoyOFwiXG4gKiBvciBvbiBXaW5kb3dzIFwiIGF0IGZpbGU6Ly8vQzpcXHNvbWVcXHBhdGhcXHRvXFxwcm9qZWN0XFxyb290XFxiYWNrZW5kXFxhdXRoLnRzOjM6MjFcIlxuICpcbiAqIFRoaXMgcmVnZXggcHVsbHMgb3V0IHRoZSBmaWxlIHBhdGggaW50byB0aGUgXCJmaWxlcGF0aFwiIG5hbWVkIG1hdGNoaW5nIGdyb3VwXG4gKiBJbiB0aGUgYWJvdmUgZXhhbXBsZXMgdGhhdCB3b3VsZCBiZSBcIi9zb21lL3BhdGgvdG8vcHJvamVjdC9yb290L2JhY2tlbmQvYXV0aC50c1wiIG9yIFwiQzpcXHNvbWVcXHBhdGhcXHRvXFxwcm9qZWN0XFxyb290XFxiYWNrZW5kXFxhdXRoLnRzXCJcbiAqXG4gKiBJbnN0ZWFkIG9mIGNvbWJpbmluZyBib3RoIG1hdGNoZXMgd2l0aCBzaW5nbGUgcmVnZXgsIHdlIGNyZWF0ZSB0d28gdG8ga2VlcCBpdCBzaW1wbGUgYW5kIG1hbmFnZWFibGUuXG4gKlxuICovXG5jb25zdCBleHRyYWN0RmlsZVBhdGhGcm9tU3RhY2tUcmFjZUxpbmVSZWdleGVzID0gW1xuICAvXFwoKD88ZmlsZXBhdGg+KFxcdzopP1teOl0qKVs6XFxkXSpcXCkvLFxuICAvYXQgKD88ZmlsZXBhdGg+LipcXC5cXHdbXjpcXGRdKilbOlxcZF0qLyxcbl07XG5cbi8qKlxuICogRXh0cmFjdHMgYSBmaWxlIHBhdGggZnJvbSBhIGdpdmVuIHN0YWNrIHRyYWNlIGxpbmVcbiAqL1xuZXhwb3J0IGNsYXNzIEZpbGVQYXRoRXh0cmFjdG9yIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZvciBGaWxlUGF0aEV4dHJhY3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdGFja1RyYWNlTGluZTogc3RyaW5nKSB7fVxuXG4gIGV4dHJhY3QgPSAoKSA9PiB7XG4gICAgZm9yIChjb25zdCByZWdleCBvZiBleHRyYWN0RmlsZVBhdGhGcm9tU3RhY2tUcmFjZUxpbmVSZWdleGVzKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IHRoaXMuc3RhY2tUcmFjZUxpbmUubWF0Y2gocmVnZXgpO1xuICAgICAgaWYgKG1hdGNoPy5ncm91cHM/LmZpbGVwYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YW5kYXJkaXplUGF0aChtYXRjaD8uZ3JvdXBzPy5maWxlcGF0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLy8gVGhlIGlucHV0IGNhbiBiZSBlaXRoZXIgYSBmaWxlIHBhdGggb3IgYSBmaWxlIFVSTC4gSWYgaXQncyBhIGZpbGUgVVJMLCBjb252ZXJ0IGl0IHRvIHRoZSBwYXRoLlxuICBwcml2YXRlIHN0YW5kYXJkaXplUGF0aCA9IChtYXliZVVybDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChtYXliZVVybCk7XG4gICAgICBpZiAodXJsLnByb3RvY29sID09PSAnZmlsZTonKSB7XG4gICAgICAgIHJldHVybiBmaWxlVVJMVG9QYXRoKHVybCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF5YmVVcmw7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbWF5YmVVcmw7XG4gICAgfVxuICB9O1xufVxuIl19