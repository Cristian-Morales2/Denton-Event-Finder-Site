import { z } from 'zod';
export declare const authOutputSchema: z.ZodObject<{
    version: z.ZodLiteral<"1">;
    payload: z.ZodObject<{
        authRegion: z.ZodString;
        userPoolId: z.ZodString;
        webClientId: z.ZodString;
        identityPoolId: z.ZodString;
        amazonClientId: z.ZodOptional<z.ZodString>;
        appleClientId: z.ZodOptional<z.ZodString>;
        facebookClientId: z.ZodOptional<z.ZodString>;
        googleClientId: z.ZodOptional<z.ZodString>;
        usernameAttributes: z.ZodOptional<z.ZodString>;
        signupAttributes: z.ZodOptional<z.ZodString>;
        passwordPolicyMinLength: z.ZodOptional<z.ZodString>;
        passwordPolicyRequirements: z.ZodOptional<z.ZodString>;
        mfaConfiguration: z.ZodOptional<z.ZodString>;
        mfaTypes: z.ZodOptional<z.ZodString>;
        verificationMechanisms: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        authRegion: string;
        userPoolId: string;
        webClientId: string;
        identityPoolId: string;
        amazonClientId?: string | undefined;
        appleClientId?: string | undefined;
        facebookClientId?: string | undefined;
        googleClientId?: string | undefined;
        usernameAttributes?: string | undefined;
        signupAttributes?: string | undefined;
        passwordPolicyMinLength?: string | undefined;
        passwordPolicyRequirements?: string | undefined;
        mfaConfiguration?: string | undefined;
        mfaTypes?: string | undefined;
        verificationMechanisms?: string | undefined;
    }, {
        authRegion: string;
        userPoolId: string;
        webClientId: string;
        identityPoolId: string;
        amazonClientId?: string | undefined;
        appleClientId?: string | undefined;
        facebookClientId?: string | undefined;
        googleClientId?: string | undefined;
        usernameAttributes?: string | undefined;
        signupAttributes?: string | undefined;
        passwordPolicyMinLength?: string | undefined;
        passwordPolicyRequirements?: string | undefined;
        mfaConfiguration?: string | undefined;
        mfaTypes?: string | undefined;
        verificationMechanisms?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    version: "1";
    payload: {
        authRegion: string;
        userPoolId: string;
        webClientId: string;
        identityPoolId: string;
        amazonClientId?: string | undefined;
        appleClientId?: string | undefined;
        facebookClientId?: string | undefined;
        googleClientId?: string | undefined;
        usernameAttributes?: string | undefined;
        signupAttributes?: string | undefined;
        passwordPolicyMinLength?: string | undefined;
        passwordPolicyRequirements?: string | undefined;
        mfaConfiguration?: string | undefined;
        mfaTypes?: string | undefined;
        verificationMechanisms?: string | undefined;
    };
}, {
    version: "1";
    payload: {
        authRegion: string;
        userPoolId: string;
        webClientId: string;
        identityPoolId: string;
        amazonClientId?: string | undefined;
        appleClientId?: string | undefined;
        facebookClientId?: string | undefined;
        googleClientId?: string | undefined;
        usernameAttributes?: string | undefined;
        signupAttributes?: string | undefined;
        passwordPolicyMinLength?: string | undefined;
        passwordPolicyRequirements?: string | undefined;
        mfaConfiguration?: string | undefined;
        mfaTypes?: string | undefined;
        verificationMechanisms?: string | undefined;
    };
}>;
//# sourceMappingURL=v1.d.ts.map