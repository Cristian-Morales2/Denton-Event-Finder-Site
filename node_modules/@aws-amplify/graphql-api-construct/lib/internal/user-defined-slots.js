"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUserDefinedSlots = exports.getSlotName = exports.separateSlots = exports.validateFunctionSlots = void 0;
/**
 * Validate that only supported props are being passed into the funciton slots.
 * @param functionSlots the slot inputs to validate.
 */
const validateFunctionSlots = (functionSlots) => {
    functionSlots.forEach(({ function: { responseMappingTemplate, requestMappingTemplate } }) => {
        if (!requestMappingTemplate && !responseMappingTemplate) {
            throw new Error('Expected at least one of either requestMappingTemplate or responseMappingTemplate');
        }
    });
};
exports.validateFunctionSlots = validateFunctionSlots;
/**
 * We'll partition any slots have both a request and response mapping template into two to make the existing system work.
 * @param functionSlots the possibly consolidated slots.
 * @returns no longer consolidated slots.
 */
const separateSlots = (functionSlots) => functionSlots.flatMap((slot) => {
    if (slot.function.requestMappingTemplate && slot.function.responseMappingTemplate) {
        return [
            {
                ...slot,
                function: {
                    requestMappingTemplate: slot.function.requestMappingTemplate,
                },
            },
            {
                ...slot,
                function: {
                    responseMappingTemplate: slot.function.responseMappingTemplate,
                },
            },
        ];
    }
    return [slot];
});
exports.separateSlots = separateSlots;
/**
 * Given a set of strongly typed input params, generate a valid transformer slot name.
 * @param params the slot configuration
 * @returns the slot id
 */
const getSlotName = (params) => [
    params.typeName,
    params.fieldName,
    params.slotName,
    params.slotIndex,
    params.function.requestMappingTemplate ? 'req' : 'res',
    'vtl',
].join('.');
exports.getSlotName = getSlotName;
/**
 * Utility to avoid using lodash.
 * @param obj the object to deeply set values in.
 * @param path the access path.
 * @param val the value to set.
 */
const setIn = (obj, path, val) => {
    if (path.length === 1) {
        // eslint-disable-next-line no-param-reassign
        obj[path[0]] = val;
        return;
    }
    if (!obj[path[0]]) {
        // eslint-disable-next-line no-param-reassign
        obj[path[0]] = {};
    }
    setIn(obj[path[0]], path.slice(1), val);
};
const parseUserDefinedSlots = (userDefinedTemplates) => {
    const groupedResolversMap = {};
    userDefinedTemplates
        .map((slot) => [
        (0, exports.getSlotName)(slot),
        slot.function.requestMappingTemplate
            ? slot.function.requestMappingTemplate.renderTemplate()
            : slot.function.responseMappingTemplate?.renderTemplate() ?? '',
    ])
        .forEach(([fileName, template]) => {
        const slicedSlotName = fileName.split('.');
        const resolverType = slicedSlotName[slicedSlotName.length - 2] === 'res' ? 'responseResolver' : 'requestResolver';
        const resolverName = [slicedSlotName[0], slicedSlotName[1]].join('.');
        const slotName = slicedSlotName[2];
        const resolverOrder = `order${Number(slicedSlotName[3]) || 0}`;
        const resolver = {
            fileName,
            template,
        };
        const slotHash = `${resolverName}#${slotName}`;
        // because a slot can have a request and response resolver, we need to group corresponding request and response resolvers
        if (slotHash in groupedResolversMap && resolverOrder in groupedResolversMap[slotHash]) {
            setIn(groupedResolversMap, [slotHash, resolverOrder, resolverType], resolver);
        }
        else {
            const slot = {
                resolverTypeName: slicedSlotName[0],
                resolverFieldName: slicedSlotName[1],
                slotName,
                [resolverType]: resolver,
            };
            setIn(groupedResolversMap, [slotHash, resolverOrder], slot);
        }
    });
    return Object.entries(groupedResolversMap)
        .map(([resolverNameKey, numberedSlots]) => ({
        orderedSlots: Object.entries(numberedSlots)
            .sort(([i], [j]) => i.localeCompare(j))
            .map(([_, slot]) => slot),
        resolverName: resolverNameKey.split('#')[0],
    }))
        .reduce((acc, { orderedSlots, resolverName }) => {
        if (acc[resolverName]) {
            acc[resolverName].push(...orderedSlots);
        }
        else {
            acc[resolverName] = orderedSlots;
        }
        return acc;
    }, {});
};
exports.parseUserDefinedSlots = parseUserDefinedSlots;
//# sourceMappingURL=data:application/json;base64,