"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetProvider = void 0;
const fs = require("fs");
const path = require("path");
const cdk = require("aws-cdk-lib");
const aws_s3_assets_1 = require("aws-cdk-lib/aws-s3-assets");
const TEMP_PREFIX = 'transformer-assets';
const FUNCTION_PREFIX = 'functions';
const RESOLVER_PREFIX = 'resolvers';
/**
 * The asset provider bridges the gap between creation of file assets in the transformer (which provide a name+contents tuple)
 * with the path method which is used in CDK.
 * The CDK S3 asset require the contents to be written to the file system first.
 * The asset provider writes to a temporary directory before creating the CDK S3 asset.
 *
 */
class AssetProvider {
    constructor(scope) {
        this.resolverAssets = {};
        this.tempAssetDir = cdk.FileSystem.mkdtemp(`${TEMP_PREFIX}-${scope.node.addr}`);
    }
    /**
     * Creates a new CDK S3 asset. The file contents in assetProps is first stored in a temporary file that is referenced by the CDK S3 asset.
     * @param assetScope the parent of the asset
     * @param assetId unique ID for CDK S3 asset
     * @param assetProps name and contents of file to be added to CDK S3 asset
     * @returns the CDK S3 asset
     */
    provide(assetScope, assetId, assetProps) {
        return new aws_s3_assets_1.Asset(assetScope, assetId, { path: this.addAsset(assetProps.fileName, assetProps.fileContent) });
    }
    addAsset(fileName, contents) {
        this.trackResolverAsset(fileName, contents);
        const writableContents = this.isContentsAReference(fileName) ? this.dereferenceContents(contents) : contents;
        const filePath = path.join(this.tempAssetDir, fileName);
        const fileDirName = path.dirname(filePath);
        if (!fs.existsSync(fileDirName)) {
            fs.mkdirSync(fileDirName, { recursive: true });
        }
        fs.writeFileSync(filePath, writableContents);
        return filePath;
    }
    isContentsAReference(fileName) {
        return fileName.startsWith(FUNCTION_PREFIX);
    }
    dereferenceContents(contents) {
        return fs.readFileSync(contents);
    }
    trackResolverAsset(fileName, contents) {
        if (fileName.startsWith(RESOLVER_PREFIX)) {
            const resolverFileName = fileName.split('/')[1];
            this.resolverAssets[resolverFileName] = contents;
        }
    }
}
exports.AssetProvider = AssetProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJuYWwvYXNzZXQtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUU3QixtQ0FBbUM7QUFDbkMsNkRBQWtEO0FBR2xELE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDO0FBQ3pDLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQztBQUNwQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUM7QUFFcEM7Ozs7OztHQU1HO0FBQ0gsTUFBYSxhQUFhO0lBSXhCLFlBQVksS0FBZ0I7UUFGWixtQkFBYyxHQUEyQixFQUFFLENBQUM7UUFHMUQsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFdBQVcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE9BQU8sQ0FBQyxVQUFxQixFQUFFLE9BQWUsRUFBRSxVQUFzQjtRQUMzRSxPQUFPLElBQUkscUJBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFFTyxRQUFRLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjtRQUNqRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUM3RyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUMvQixFQUFFLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUM3QyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRU8sb0JBQW9CLENBQUMsUUFBZ0I7UUFDM0MsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxRQUFnQjtRQUMxQyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVPLGtCQUFrQixDQUFDLFFBQWdCLEVBQUUsUUFBZ0I7UUFDM0QsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsUUFBUSxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztDQUNGO0FBN0NELHNDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBBc3NldCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMy1hc3NldHMnO1xuaW1wb3J0IHsgQXNzZXRQcm9wcywgUzNBc3NldCwgQXNzZXRQcm92aWRlciBhcyBBc3NldFByb3ZpZGVySW50ZXJmYWNlIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2dyYXBocWwtdHJhbnNmb3JtZXItaW50ZXJmYWNlcyc7XG5cbmNvbnN0IFRFTVBfUFJFRklYID0gJ3RyYW5zZm9ybWVyLWFzc2V0cyc7XG5jb25zdCBGVU5DVElPTl9QUkVGSVggPSAnZnVuY3Rpb25zJztcbmNvbnN0IFJFU09MVkVSX1BSRUZJWCA9ICdyZXNvbHZlcnMnO1xuXG4vKipcbiAqIFRoZSBhc3NldCBwcm92aWRlciBicmlkZ2VzIHRoZSBnYXAgYmV0d2VlbiBjcmVhdGlvbiBvZiBmaWxlIGFzc2V0cyBpbiB0aGUgdHJhbnNmb3JtZXIgKHdoaWNoIHByb3ZpZGUgYSBuYW1lK2NvbnRlbnRzIHR1cGxlKVxuICogd2l0aCB0aGUgcGF0aCBtZXRob2Qgd2hpY2ggaXMgdXNlZCBpbiBDREsuXG4gKiBUaGUgQ0RLIFMzIGFzc2V0IHJlcXVpcmUgdGhlIGNvbnRlbnRzIHRvIGJlIHdyaXR0ZW4gdG8gdGhlIGZpbGUgc3lzdGVtIGZpcnN0LlxuICogVGhlIGFzc2V0IHByb3ZpZGVyIHdyaXRlcyB0byBhIHRlbXBvcmFyeSBkaXJlY3RvcnkgYmVmb3JlIGNyZWF0aW5nIHRoZSBDREsgUzMgYXNzZXQuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQXNzZXRQcm92aWRlciBpbXBsZW1lbnRzIEFzc2V0UHJvdmlkZXJJbnRlcmZhY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHRlbXBBc3NldERpcjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcmVzb2x2ZXJBc3NldHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0KSB7XG4gICAgdGhpcy50ZW1wQXNzZXREaXIgPSBjZGsuRmlsZVN5c3RlbS5ta2R0ZW1wKGAke1RFTVBfUFJFRklYfS0ke3Njb3BlLm5vZGUuYWRkcn1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IENESyBTMyBhc3NldC4gVGhlIGZpbGUgY29udGVudHMgaW4gYXNzZXRQcm9wcyBpcyBmaXJzdCBzdG9yZWQgaW4gYSB0ZW1wb3JhcnkgZmlsZSB0aGF0IGlzIHJlZmVyZW5jZWQgYnkgdGhlIENESyBTMyBhc3NldC5cbiAgICogQHBhcmFtIGFzc2V0U2NvcGUgdGhlIHBhcmVudCBvZiB0aGUgYXNzZXRcbiAgICogQHBhcmFtIGFzc2V0SWQgdW5pcXVlIElEIGZvciBDREsgUzMgYXNzZXRcbiAgICogQHBhcmFtIGFzc2V0UHJvcHMgbmFtZSBhbmQgY29udGVudHMgb2YgZmlsZSB0byBiZSBhZGRlZCB0byBDREsgUzMgYXNzZXRcbiAgICogQHJldHVybnMgdGhlIENESyBTMyBhc3NldFxuICAgKi9cbiAgcHVibGljIHByb3ZpZGUoYXNzZXRTY29wZTogQ29uc3RydWN0LCBhc3NldElkOiBzdHJpbmcsIGFzc2V0UHJvcHM6IEFzc2V0UHJvcHMpOiBTM0Fzc2V0IHtcbiAgICByZXR1cm4gbmV3IEFzc2V0KGFzc2V0U2NvcGUsIGFzc2V0SWQsIHsgcGF0aDogdGhpcy5hZGRBc3NldChhc3NldFByb3BzLmZpbGVOYW1lLCBhc3NldFByb3BzLmZpbGVDb250ZW50KSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQXNzZXQoZmlsZU5hbWU6IHN0cmluZywgY29udGVudHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgdGhpcy50cmFja1Jlc29sdmVyQXNzZXQoZmlsZU5hbWUsIGNvbnRlbnRzKTtcbiAgICBjb25zdCB3cml0YWJsZUNvbnRlbnRzID0gdGhpcy5pc0NvbnRlbnRzQVJlZmVyZW5jZShmaWxlTmFtZSkgPyB0aGlzLmRlcmVmZXJlbmNlQ29udGVudHMoY29udGVudHMpIDogY29udGVudHM7XG4gICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4odGhpcy50ZW1wQXNzZXREaXIsIGZpbGVOYW1lKTtcbiAgICBjb25zdCBmaWxlRGlyTmFtZSA9IHBhdGguZGlybmFtZShmaWxlUGF0aCk7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGZpbGVEaXJOYW1lKSkge1xuICAgICAgZnMubWtkaXJTeW5jKGZpbGVEaXJOYW1lLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgd3JpdGFibGVDb250ZW50cyk7XG4gICAgcmV0dXJuIGZpbGVQYXRoO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0NvbnRlbnRzQVJlZmVyZW5jZShmaWxlTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpbGVOYW1lLnN0YXJ0c1dpdGgoRlVOQ1RJT05fUFJFRklYKTtcbiAgfVxuXG4gIHByaXZhdGUgZGVyZWZlcmVuY2VDb250ZW50cyhjb250ZW50czogc3RyaW5nKTogQnVmZmVyIHtcbiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGNvbnRlbnRzKTtcbiAgfVxuXG4gIHByaXZhdGUgdHJhY2tSZXNvbHZlckFzc2V0KGZpbGVOYW1lOiBzdHJpbmcsIGNvbnRlbnRzOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoZmlsZU5hbWUuc3RhcnRzV2l0aChSRVNPTFZFUl9QUkVGSVgpKSB7XG4gICAgICBjb25zdCByZXNvbHZlckZpbGVOYW1lID0gZmlsZU5hbWUuc3BsaXQoJy8nKVsxXTtcbiAgICAgIHRoaXMucmVzb2x2ZXJBc3NldHNbcmVzb2x2ZXJGaWxlTmFtZV0gPSBjb250ZW50cztcbiAgICB9XG4gIH1cbn1cbiJdfQ==