import { unifiedBackendOutputSchema } from '@aws-amplify/backend-output-schemas';
import { AmplifyUserError, ObjectAccumulator, ObjectAccumulatorPropertyAlreadyExistsError, ObjectAccumulatorVersionMismatchError, } from '@aws-amplify/platform-core';
/**
 * Right now this is mostly a stub. This will become a translation layer between backend output and frontend config
 *
 * There may be multiple implementations of this for different frontends
 */
export class UnifiedClientConfigGenerator {
    fetchOutput;
    clientConfigContributors;
    /**
     * Provide a reference to how this config generator should retrieve backend output
     */
    constructor(fetchOutput, clientConfigContributors) {
        this.fetchOutput = fetchOutput;
        this.clientConfigContributors = clientConfigContributors;
    }
    /**
     * Fetch all backend output, invoke each ClientConfigContributor on the result and merge into a single config object
     */
    generateClientConfig = async () => {
        const backendOutput = unifiedBackendOutputSchema.parse(await this.fetchOutput());
        const accumulator = new ObjectAccumulator({});
        for (const contributor of this.clientConfigContributors) {
            const clientConfigContribution = await contributor.contribute(backendOutput);
            try {
                // Partial to DeepPartialAmplifyGeneratedConfigs is always a safe case since it's up-casting
                accumulator.accumulate(clientConfigContribution);
            }
            catch (error) {
                if (error instanceof ObjectAccumulatorPropertyAlreadyExistsError) {
                    throw new AmplifyUserError('OutputEntryAlreadyExistsError', {
                        message: `Duplicated entry with key ${error.key} detected in deployment outputs`,
                        resolution: "Check if 'backend.addOutput' is called multiple times with overlapping inputs or" +
                            " if 'backend.addOutput' is called with values overlapping Amplify managed keys",
                    }, error);
                }
                if (error instanceof ObjectAccumulatorVersionMismatchError) {
                    throw new AmplifyUserError('VersionMismatchError', {
                        message: `Conflicting versions of client configuration found. `,
                        resolution: "Ensure that the version specified in 'backend.addOutput' is consistent" +
                            ' and is same as the one used for generating the client config',
                    }, error);
                }
                throw error;
            }
        }
        return accumulator.getAccumulatedObject();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZmllZF9jbGllbnRfY29uZmlnX2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91bmlmaWVkX2NsaWVudF9jb25maWdfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBSWpGLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLDJDQUEyQyxFQUMzQyxxQ0FBcUMsR0FDdEMsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUtwQjtJQUNBO0lBTG5COztPQUVHO0lBQ0gsWUFDbUIsV0FBeUMsRUFDekMsd0JBQW1EO1FBRG5ELGdCQUFXLEdBQVgsV0FBVyxDQUE4QjtRQUN6Qyw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTJCO0lBQ25FLENBQUM7SUFFSjs7T0FFRztJQUNILG9CQUFvQixHQUFHLEtBQUssSUFBMkIsRUFBRTtRQUN2RCxNQUFNLGFBQWEsR0FBRywwQkFBMEIsQ0FBQyxLQUFLLENBQ3BELE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUN6QixDQUFDO1FBRUYsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBaUIsQ0FBZSxFQUFFLENBQUMsQ0FBQztRQUU1RCxLQUFLLE1BQU0sV0FBVyxJQUFJLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtZQUN2RCxNQUFNLHdCQUF3QixHQUFHLE1BQU0sV0FBVyxDQUFDLFVBQVUsQ0FDM0QsYUFBYSxDQUNkLENBQUM7WUFDRixJQUFJO2dCQUNGLDRGQUE0RjtnQkFDNUYsV0FBVyxDQUFDLFVBQVUsQ0FDcEIsd0JBQTRFLENBQzdFLENBQUM7YUFDSDtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLElBQUksS0FBSyxZQUFZLDJDQUEyQyxFQUFFO29CQUNoRSxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLCtCQUErQixFQUMvQjt3QkFDRSxPQUFPLEVBQUUsNkJBQTZCLEtBQUssQ0FBQyxHQUFHLGlDQUFpQzt3QkFDaEYsVUFBVSxFQUNSLGtGQUFrRjs0QkFDbEYsZ0ZBQWdGO3FCQUNuRixFQUNELEtBQUssQ0FDTixDQUFDO2lCQUNIO2dCQUNELElBQUksS0FBSyxZQUFZLHFDQUFxQyxFQUFFO29CQUMxRCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLHNCQUFzQixFQUN0Qjt3QkFDRSxPQUFPLEVBQUUsc0RBQXNEO3dCQUMvRCxVQUFVLEVBQ1Isd0VBQXdFOzRCQUN4RSwrREFBK0Q7cUJBQ2xFLEVBQ0QsS0FBSyxDQUNOLENBQUM7aUJBQ0g7Z0JBQ0QsTUFBTSxLQUFLLENBQUM7YUFDYjtTQUNGO1FBQ0QsT0FBcUIsV0FBVyxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDMUQsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYWNrZW5kT3V0cHV0LFxuICBEZWVwUGFydGlhbEFtcGxpZnlHZW5lcmF0ZWRDb25maWdzLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IHVuaWZpZWRCYWNrZW5kT3V0cHV0U2NoZW1hIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXNjaGVtYXMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgfSBmcm9tICcuL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZ19jb250cmlidXRvci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3IgfSBmcm9tICcuL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yLmpzJztcbmltcG9ydCB7XG4gIEFtcGxpZnlVc2VyRXJyb3IsXG4gIE9iamVjdEFjY3VtdWxhdG9yLFxuICBPYmplY3RBY2N1bXVsYXRvclByb3BlcnR5QWxyZWFkeUV4aXN0c0Vycm9yLFxuICBPYmplY3RBY2N1bXVsYXRvclZlcnNpb25NaXNtYXRjaEVycm9yLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogUmlnaHQgbm93IHRoaXMgaXMgbW9zdGx5IGEgc3R1Yi4gVGhpcyB3aWxsIGJlY29tZSBhIHRyYW5zbGF0aW9uIGxheWVyIGJldHdlZW4gYmFja2VuZCBvdXRwdXQgYW5kIGZyb250ZW5kIGNvbmZpZ1xuICpcbiAqIFRoZXJlIG1heSBiZSBtdWx0aXBsZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhpcyBmb3IgZGlmZmVyZW50IGZyb250ZW5kc1xuICovXG5leHBvcnQgY2xhc3MgVW5pZmllZENsaWVudENvbmZpZ0dlbmVyYXRvciBpbXBsZW1lbnRzIENsaWVudENvbmZpZ0dlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBQcm92aWRlIGEgcmVmZXJlbmNlIHRvIGhvdyB0aGlzIGNvbmZpZyBnZW5lcmF0b3Igc2hvdWxkIHJldHJpZXZlIGJhY2tlbmQgb3V0cHV0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZldGNoT3V0cHV0OiAoKSA9PiBQcm9taXNlPEJhY2tlbmRPdXRwdXQ+LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50Q29uZmlnQ29udHJpYnV0b3JzOiBDbGllbnRDb25maWdDb250cmlidXRvcltdXG4gICkge31cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIGJhY2tlbmQgb3V0cHV0LCBpbnZva2UgZWFjaCBDbGllbnRDb25maWdDb250cmlidXRvciBvbiB0aGUgcmVzdWx0IGFuZCBtZXJnZSBpbnRvIGEgc2luZ2xlIGNvbmZpZyBvYmplY3RcbiAgICovXG4gIGdlbmVyYXRlQ2xpZW50Q29uZmlnID0gYXN5bmMgKCk6IFByb21pc2U8Q2xpZW50Q29uZmlnPiA9PiB7XG4gICAgY29uc3QgYmFja2VuZE91dHB1dCA9IHVuaWZpZWRCYWNrZW5kT3V0cHV0U2NoZW1hLnBhcnNlKFxuICAgICAgYXdhaXQgdGhpcy5mZXRjaE91dHB1dCgpXG4gICAgKTtcblxuICAgIGNvbnN0IGFjY3VtdWxhdG9yID0gbmV3IE9iamVjdEFjY3VtdWxhdG9yPENsaWVudENvbmZpZz4oe30pO1xuXG4gICAgZm9yIChjb25zdCBjb250cmlidXRvciBvZiB0aGlzLmNsaWVudENvbmZpZ0NvbnRyaWJ1dG9ycykge1xuICAgICAgY29uc3QgY2xpZW50Q29uZmlnQ29udHJpYnV0aW9uID0gYXdhaXQgY29udHJpYnV0b3IuY29udHJpYnV0ZShcbiAgICAgICAgYmFja2VuZE91dHB1dFxuICAgICAgKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFBhcnRpYWwgdG8gRGVlcFBhcnRpYWxBbXBsaWZ5R2VuZXJhdGVkQ29uZmlncyBpcyBhbHdheXMgYSBzYWZlIGNhc2Ugc2luY2UgaXQncyB1cC1jYXN0aW5nXG4gICAgICAgIGFjY3VtdWxhdG9yLmFjY3VtdWxhdGUoXG4gICAgICAgICAgY2xpZW50Q29uZmlnQ29udHJpYnV0aW9uIGFzIERlZXBQYXJ0aWFsQW1wbGlmeUdlbmVyYXRlZENvbmZpZ3M8Q2xpZW50Q29uZmlnPlxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgT2JqZWN0QWNjdW11bGF0b3JQcm9wZXJ0eUFscmVhZHlFeGlzdHNFcnJvcikge1xuICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgJ091dHB1dEVudHJ5QWxyZWFkeUV4aXN0c0Vycm9yJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogYER1cGxpY2F0ZWQgZW50cnkgd2l0aCBrZXkgJHtlcnJvci5rZXl9IGRldGVjdGVkIGluIGRlcGxveW1lbnQgb3V0cHV0c2AsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgXCJDaGVjayBpZiAnYmFja2VuZC5hZGRPdXRwdXQnIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIG92ZXJsYXBwaW5nIGlucHV0cyBvclwiICtcbiAgICAgICAgICAgICAgICBcIiBpZiAnYmFja2VuZC5hZGRPdXRwdXQnIGlzIGNhbGxlZCB3aXRoIHZhbHVlcyBvdmVybGFwcGluZyBBbXBsaWZ5IG1hbmFnZWQga2V5c1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPYmplY3RBY2N1bXVsYXRvclZlcnNpb25NaXNtYXRjaEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAnVmVyc2lvbk1pc21hdGNoRXJyb3InLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOiBgQ29uZmxpY3RpbmcgdmVyc2lvbnMgb2YgY2xpZW50IGNvbmZpZ3VyYXRpb24gZm91bmQuIGAsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgXCJFbnN1cmUgdGhhdCB0aGUgdmVyc2lvbiBzcGVjaWZpZWQgaW4gJ2JhY2tlbmQuYWRkT3V0cHV0JyBpcyBjb25zaXN0ZW50XCIgK1xuICAgICAgICAgICAgICAgICcgYW5kIGlzIHNhbWUgYXMgdGhlIG9uZSB1c2VkIGZvciBnZW5lcmF0aW5nIHRoZSBjbGllbnQgY29uZmlnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiA8Q2xpZW50Q29uZmlnPmFjY3VtdWxhdG9yLmdldEFjY3VtdWxhdGVkT2JqZWN0KCk7XG4gIH07XG59XG4iXX0=