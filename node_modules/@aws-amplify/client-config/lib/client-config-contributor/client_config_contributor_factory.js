// Versions of config schemas supported by this package version
import { AuthClientConfigContributor as Auth1, CustomClientConfigContributor as Custom1, DataClientConfigContributor as Data1, StorageClientConfigContributor as Storage1, VersionContributor as VersionContributor1, } from './client_config_contributor_v1.js';
import { ClientConfigVersionOption, } from '../client-config-types/client_config.js';
/**
 * Factory to generate client config contributors for client config schema given a version
 */
export class ClientConfigContributorFactory {
    modelIntrospectionSchemaAdapter;
    versionedClientConfigContributors;
    /**
     * Creates a list of all contributors available and caches it.
     */
    constructor(modelIntrospectionSchemaAdapter) {
        this.modelIntrospectionSchemaAdapter = modelIntrospectionSchemaAdapter;
        this.versionedClientConfigContributors = {
            [ClientConfigVersionOption.V1]: [
                new Auth1(),
                new Data1(this.modelIntrospectionSchemaAdapter),
                new Storage1(),
                new VersionContributor1(),
                new Custom1(),
            ],
            // Legacy config is derived from V1 of unified default config
            [ClientConfigVersionOption.V0]: [
                new Auth1(),
                new Data1(this.modelIntrospectionSchemaAdapter),
                new Storage1(),
                new VersionContributor1(),
                new Custom1(),
            ],
        };
    }
    /**
     * Return all the contributors for the given version
     */
    getContributors(version) {
        return this.versionedClientConfigContributors[version];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtEQUErRDtBQUMvRCxPQUFPLEVBQ0wsMkJBQTJCLElBQUksS0FBSyxFQUNwQyw2QkFBNkIsSUFBSSxPQUFPLEVBQ3hDLDJCQUEyQixJQUFJLEtBQUssRUFDcEMsOEJBQThCLElBQUksUUFBUSxFQUMxQyxrQkFBa0IsSUFBSSxtQkFBbUIsR0FDMUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUkzQyxPQUFPLEVBRUwseUJBQXlCLEdBQzFCLE1BQU0seUNBQXlDLENBQUM7QUFDakQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sOEJBQThCO0lBVXRCO0lBVG5CLGlDQUFpQyxDQUcvQjtJQUVGOztPQUVHO0lBQ0gsWUFDbUIsK0JBQWdFO1FBQWhFLG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBaUM7UUFFakYsSUFBSSxDQUFDLGlDQUFpQyxHQUFHO1lBQ3ZDLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQzlCLElBQUksS0FBSyxFQUFFO2dCQUNYLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztnQkFDL0MsSUFBSSxRQUFRLEVBQUU7Z0JBQ2QsSUFBSSxtQkFBbUIsRUFBRTtnQkFDekIsSUFBSSxPQUFPLEVBQUU7YUFDZDtZQUVELDZEQUE2RDtZQUM3RCxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUM5QixJQUFJLEtBQUssRUFBRTtnQkFDWCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUM7Z0JBQy9DLElBQUksUUFBUSxFQUFFO2dCQUNkLElBQUksbUJBQW1CLEVBQUU7Z0JBQ3pCLElBQUksT0FBTyxFQUFFO2FBQ2Q7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZSxDQUFDLE9BQTRCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLGlDQUFpQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZlcnNpb25zIG9mIGNvbmZpZyBzY2hlbWFzIHN1cHBvcnRlZCBieSB0aGlzIHBhY2thZ2UgdmVyc2lvblxuaW1wb3J0IHtcbiAgQXV0aENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIEF1dGgxLFxuICBDdXN0b21DbGllbnRDb25maWdDb250cmlidXRvciBhcyBDdXN0b20xLFxuICBEYXRhQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgYXMgRGF0YTEsXG4gIFN0b3JhZ2VDbGllbnRDb25maWdDb250cmlidXRvciBhcyBTdG9yYWdlMSxcbiAgVmVyc2lvbkNvbnRyaWJ1dG9yIGFzIFZlcnNpb25Db250cmlidXRvcjEsXG59IGZyb20gJy4vY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl92MS5qcyc7XG5cbmltcG9ydCB7IENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7IE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIgfSBmcm9tICcuLi9tb2RlbF9pbnRyb3NwZWN0aW9uX3NjaGVtYV9hZGFwdGVyLmpzJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24sXG59IGZyb20gJy4uL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG4vKipcbiAqIEZhY3RvcnkgdG8gZ2VuZXJhdGUgY2xpZW50IGNvbmZpZyBjb250cmlidXRvcnMgZm9yIGNsaWVudCBjb25maWcgc2NoZW1hIGdpdmVuIGEgdmVyc2lvblxuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JGYWN0b3J5IHtcbiAgdmVyc2lvbmVkQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JzOiBSZWNvcmQ8XG4gICAgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgICBDbGllbnRDb25maWdDb250cmlidXRvcltdXG4gID47XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBsaXN0IG9mIGFsbCBjb250cmlidXRvcnMgYXZhaWxhYmxlIGFuZCBjYWNoZXMgaXQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXI6IE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXJcbiAgKSB7XG4gICAgdGhpcy52ZXJzaW9uZWRDbGllbnRDb25maWdDb250cmlidXRvcnMgPSB7XG4gICAgICBbQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMV06IFtcbiAgICAgICAgbmV3IEF1dGgxKCksXG4gICAgICAgIG5ldyBEYXRhMSh0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIpLFxuICAgICAgICBuZXcgU3RvcmFnZTEoKSxcbiAgICAgICAgbmV3IFZlcnNpb25Db250cmlidXRvcjEoKSxcbiAgICAgICAgbmV3IEN1c3RvbTEoKSxcbiAgICAgIF0sXG5cbiAgICAgIC8vIExlZ2FjeSBjb25maWcgaXMgZGVyaXZlZCBmcm9tIFYxIG9mIHVuaWZpZWQgZGVmYXVsdCBjb25maWdcbiAgICAgIFtDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYwXTogW1xuICAgICAgICBuZXcgQXV0aDEoKSxcbiAgICAgICAgbmV3IERhdGExKHRoaXMubW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciksXG4gICAgICAgIG5ldyBTdG9yYWdlMSgpLFxuICAgICAgICBuZXcgVmVyc2lvbkNvbnRyaWJ1dG9yMSgpLFxuICAgICAgICBuZXcgQ3VzdG9tMSgpLFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbGwgdGhlIGNvbnRyaWJ1dG9ycyBmb3IgdGhlIGdpdmVuIHZlcnNpb25cbiAgICovXG4gIGdldENvbnRyaWJ1dG9ycyh2ZXJzaW9uOiBDbGllbnRDb25maWdWZXJzaW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudmVyc2lvbmVkQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JzW3ZlcnNpb25dO1xuICB9XG59XG4iXX0=