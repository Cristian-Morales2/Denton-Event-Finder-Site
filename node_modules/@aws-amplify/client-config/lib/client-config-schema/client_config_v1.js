/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ192MS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtY29uZmlnLXNjaGVtYS9jbGllbnRfY29uZmlnX3YxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQjs7OztHQUlHIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogVGhpcyBmaWxlIHdhcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBqc29uLXNjaGVtYS10by10eXBlc2NyaXB0LlxuICogRE8gTk9UIE1PRElGWSBJVCBCWSBIQU5ELiBJbnN0ZWFkLCBtb2RpZnkgdGhlIHNvdXJjZSBKU09OU2NoZW1hIGZpbGUsXG4gKiBhbmQgcnVuIGpzb24tc2NoZW1hLXRvLXR5cGVzY3JpcHQgdG8gcmVnZW5lcmF0ZSB0aGlzIGZpbGUuXG4gKi9cblxuLyoqXG4gKiBBbWF6b24gQ29nbml0byBzdGFuZGFyZCBhdHRyaWJ1dGVzIGZvciB1c2VycyAtLSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29nbml0by9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvdXNlci1wb29sLXNldHRpbmdzLWF0dHJpYnV0ZXMuaHRtbFxuICovXG5leHBvcnQgdHlwZSBBbWF6b25Db2duaXRvU3RhbmRhcmRBdHRyaWJ1dGVzID1cbiAgfCAnYWRkcmVzcydcbiAgfCAnYmlydGhkYXRlJ1xuICB8ICdlbWFpbCdcbiAgfCAnZmFtaWx5X25hbWUnXG4gIHwgJ2dlbmRlcidcbiAgfCAnZ2l2ZW5fbmFtZSdcbiAgfCAnbG9jYWxlJ1xuICB8ICdtaWRkbGVfbmFtZSdcbiAgfCAnbmFtZSdcbiAgfCAnbmlja25hbWUnXG4gIHwgJ3Bob25lX251bWJlcidcbiAgfCAncGljdHVyZSdcbiAgfCAncHJlZmVycmVkX3VzZXJuYW1lJ1xuICB8ICdwcm9maWxlJ1xuICB8ICdzdWInXG4gIHwgJ3VwZGF0ZWRfYXQnXG4gIHwgJ3dlYnNpdGUnXG4gIHwgJ3pvbmVpbmZvJztcbmV4cG9ydCB0eXBlIEF3c1JlZ2lvbiA9IHN0cmluZztcbi8qKlxuICogTGlzdCBvZiBzdXBwb3J0ZWQgYXV0aCB0eXBlcyBmb3IgQVdTIEFwcFN5bmNcbiAqL1xuZXhwb3J0IHR5cGUgQXdzQXBwc3luY0F1dGhvcml6YXRpb25UeXBlID1cbiAgfCAnQU1BWk9OX0NPR05JVE9fVVNFUl9QT09MUydcbiAgfCAnQVBJX0tFWSdcbiAgfCAnQVdTX0lBTSdcbiAgfCAnQVdTX0xBTUJEQSdcbiAgfCAnT1BFTklEX0NPTk5FQ1QnO1xuLyoqXG4gKiBzdXBwb3J0ZWQgY2hhbm5lbHMgZm9yIEFtYXpvbiBQaW5wb2ludFxuICovXG5leHBvcnQgdHlwZSBBbWF6b25QaW5wb2ludENoYW5uZWxzID1cbiAgfCAnSU5fQVBQX01FU1NBR0lORydcbiAgfCAnRkNNJ1xuICB8ICdBUE5TJ1xuICB8ICdFTUFJTCdcbiAgfCAnU01TJztcblxuLyoqXG4gKiBDb25maWcgZm9ybWF0IGZvciBBbXBsaWZ5IEdlbiAyIGNsaWVudCBsaWJyYXJpZXMgdG8gY29tbXVuaWNhdGUgd2l0aCBiYWNrZW5kIHNlcnZpY2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0cyB7XG4gIC8qKlxuICAgKiBWZXJzaW9uIG9mIHRoaXMgc2NoZW1hXG4gICAqL1xuICB2ZXJzaW9uOiAnMSc7XG4gIC8qKlxuICAgKiBPdXRwdXRzIG1hbnVhbGx5IHNwZWNpZmllZCBieSBkZXZlbG9wZXJzIGZvciB1c2Ugd2l0aCBmcm9udGVuZCBsaWJyYXJ5XG4gICAqL1xuICBhbmFseXRpY3M/OiB7XG4gICAgYW1hem9uX3BpbnBvaW50Pzoge1xuICAgICAgLyoqXG4gICAgICAgKiBBV1MgUmVnaW9uIG9mIEFtYXpvbiBQaW5wb2ludCByZXNvdXJjZXNcbiAgICAgICAqL1xuICAgICAgYXdzX3JlZ2lvbjogQXdzUmVnaW9uO1xuICAgICAgYXBwX2lkOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgLyoqXG4gICAqIE91dHB1dHMgZ2VuZXJhdGVkIGZyb20gZGVmaW5lQXV0aFxuICAgKi9cbiAgYXV0aD86IHtcbiAgICAvKipcbiAgICAgKiBBV1MgUmVnaW9uIG9mIEFtYXpvbiBDb2duaXRvIHJlc291cmNlc1xuICAgICAqL1xuICAgIGF3c19yZWdpb246IEF3c1JlZ2lvbjtcbiAgICAvKipcbiAgICAgKiBDb2duaXRvIFVzZXIgUG9vbCBJRFxuICAgICAqL1xuICAgIHVzZXJfcG9vbF9pZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENvZ25pdG8gVXNlciBQb29sIENsaWVudCBJRFxuICAgICAqL1xuICAgIHVzZXJfcG9vbF9jbGllbnRfaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDb2duaXRvIElkZW50aXR5IFBvb2wgSURcbiAgICAgKi9cbiAgICBpZGVudGl0eV9wb29sX2lkPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENvZ25pdG8gVXNlciBQb29sIHBhc3N3b3JkIHBvbGljeVxuICAgICAqL1xuICAgIHBhc3N3b3JkX3BvbGljeT86IHtcbiAgICAgIG1pbl9sZW5ndGg/OiBudW1iZXI7XG4gICAgICByZXF1aXJlX251bWJlcnM/OiBib29sZWFuO1xuICAgICAgcmVxdWlyZV9sb3dlcmNhc2U/OiBib29sZWFuO1xuICAgICAgcmVxdWlyZV91cHBlcmNhc2U/OiBib29sZWFuO1xuICAgICAgcmVxdWlyZV9zeW1ib2xzPzogYm9vbGVhbjtcbiAgICB9O1xuICAgIG9hdXRoPzoge1xuICAgICAgLyoqXG4gICAgICAgKiBJZGVudGl0eSBwcm92aWRlcnMgc2V0IG9uIENvZ25pdG8gVXNlciBQb29sXG4gICAgICAgKlxuICAgICAgICogQG1pbkl0ZW1zIDBcbiAgICAgICAqL1xuICAgICAgaWRlbnRpdHlfcHJvdmlkZXJzOiAoXG4gICAgICAgIHwgJ0dPT0dMRSdcbiAgICAgICAgfCAnRkFDRUJPT0snXG4gICAgICAgIHwgJ0xPR0lOX1dJVEhfQU1BWk9OJ1xuICAgICAgICB8ICdTSUdOX0lOX1dJVEhfQVBQTEUnXG4gICAgICApW107XG4gICAgICAvKipcbiAgICAgICAqIERvbWFpbiB1c2VkIGZvciBpZGVudGl0eSBwcm92aWRlcnNcbiAgICAgICAqL1xuICAgICAgZG9tYWluOiBzdHJpbmc7XG4gICAgICAvKipcbiAgICAgICAqIEBtaW5JdGVtcyAwXG4gICAgICAgKi9cbiAgICAgIHNjb3Blczogc3RyaW5nW107XG4gICAgICAvKipcbiAgICAgICAqIFVSSXMgdXNlZCB0byByZWRpcmVjdCBhZnRlciBzaWduaW5nIGluIHVzaW5nIGFuIGlkZW50aXR5IHByb3ZpZGVyXG4gICAgICAgKlxuICAgICAgICogQG1pbkl0ZW1zIDFcbiAgICAgICAqL1xuICAgICAgcmVkaXJlY3Rfc2lnbl9pbl91cmk6IHN0cmluZ1tdO1xuICAgICAgLyoqXG4gICAgICAgKiBVUklzIHVzZWQgdG8gcmVkaXJlY3QgYWZ0ZXIgc2lnbmluZyBvdXRcbiAgICAgICAqXG4gICAgICAgKiBAbWluSXRlbXMgMVxuICAgICAgICovXG4gICAgICByZWRpcmVjdF9zaWduX291dF91cmk6IHN0cmluZ1tdO1xuICAgICAgcmVzcG9uc2VfdHlwZTogJ2NvZGUnIHwgJ3Rva2VuJztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvZ25pdG8gVXNlciBQb29sIHN0YW5kYXJkIGF0dHJpYnV0ZXMgcmVxdWlyZWQgZm9yIHNpZ251cFxuICAgICAqXG4gICAgICogQG1pbkl0ZW1zIDBcbiAgICAgKi9cbiAgICBzdGFuZGFyZF9yZXF1aXJlZF9hdHRyaWJ1dGVzPzogQW1hem9uQ29nbml0b1N0YW5kYXJkQXR0cmlidXRlc1tdO1xuICAgIC8qKlxuICAgICAqIENvZ25pdG8gVXNlciBQb29sIHVzZXJuYW1lIGF0dHJpYnV0ZXNcbiAgICAgKlxuICAgICAqIEBtaW5JdGVtcyAxXG4gICAgICovXG4gICAgdXNlcm5hbWVfYXR0cmlidXRlcz86ICgnZW1haWwnIHwgJ3Bob25lX251bWJlcicgfCAndXNlcm5hbWUnKVtdO1xuICAgIHVzZXJfdmVyaWZpY2F0aW9uX3R5cGVzPzogKCdlbWFpbCcgfCAncGhvbmVfbnVtYmVyJylbXTtcbiAgICB1bmF1dGhlbnRpY2F0ZWRfaWRlbnRpdGllc19lbmFibGVkPzogYm9vbGVhbjtcbiAgICBtZmFfY29uZmlndXJhdGlvbj86ICdOT05FJyB8ICdPUFRJT05BTCcgfCAnUkVRVUlSRUQnO1xuICAgIG1mYV9tZXRob2RzPzogKCdTTVMnIHwgJ1RPVFAnKVtdO1xuICB9O1xuICAvKipcbiAgICogT3V0cHV0cyBnZW5lcmF0ZWQgZnJvbSBkZWZpbmVEYXRhXG4gICAqL1xuICBkYXRhPzoge1xuICAgIGF3c19yZWdpb246IEF3c1JlZ2lvbjtcbiAgICAvKipcbiAgICAgKiBBcHBTeW5jIGVuZHBvaW50IFVSTFxuICAgICAqL1xuICAgIHVybDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIGdlbmVyYXRlZCBtb2RlbCBpbnRyb3NwZWN0aW9uIHNjaGVtYSBmb3IgdXNlIHdpdGggZ2VuZXJhdGVDbGllbnRcbiAgICAgKi9cbiAgICBtb2RlbF9pbnRyb3NwZWN0aW9uPzoge1xuICAgICAgW2s6IHN0cmluZ106IHVua25vd247XG4gICAgfTtcbiAgICBhcGlfa2V5Pzogc3RyaW5nO1xuICAgIGRlZmF1bHRfYXV0aG9yaXphdGlvbl90eXBlOiBBd3NBcHBzeW5jQXV0aG9yaXphdGlvblR5cGU7XG4gICAgYXV0aG9yaXphdGlvbl90eXBlczogQXdzQXBwc3luY0F1dGhvcml6YXRpb25UeXBlW107XG4gIH07XG4gIC8qKlxuICAgKiBPdXRwdXRzIG1hbnVhbGx5IHNwZWNpZmllZCBieSBkZXZlbG9wZXJzIGZvciB1c2Ugd2l0aCBmcm9udGVuZCBsaWJyYXJ5XG4gICAqL1xuICBnZW8/OiB7XG4gICAgLyoqXG4gICAgICogQVdTIFJlZ2lvbiBvZiBBbWF6b24gTG9jYXRpb24gU2VydmljZSByZXNvdXJjZXNcbiAgICAgKi9cbiAgICBhd3NfcmVnaW9uOiBBd3NSZWdpb247XG4gICAgLyoqXG4gICAgICogTWFwcyBmcm9tIEFtYXpvbiBMb2NhdGlvbiBTZXJ2aWNlXG4gICAgICovXG4gICAgbWFwcz86IHtcbiAgICAgIGl0ZW1zOiB7XG4gICAgICAgIFtrOiBzdHJpbmddOiBBbWF6b25Mb2NhdGlvblNlcnZpY2VDb25maWc7XG4gICAgICB9O1xuICAgICAgZGVmYXVsdDogc3RyaW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTG9jYXRpb24gc2VhcmNoIChzZWFyY2ggYnkgcGxhY2VzLCBhZGRyZXNzZXMsIGNvb3JkaW5hdGVzKVxuICAgICAqL1xuICAgIHNlYXJjaF9pbmRpY2VzPzoge1xuICAgICAgaXRlbXM6IHN0cmluZ1tdO1xuICAgICAgZGVmYXVsdDogc3RyaW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2VvZmVuY2luZyAodmlzdWFsaXplIHZpcnR1YWwgcGVyaW1ldGVycylcbiAgICAgKi9cbiAgICBnZW9mZW5jZV9jb2xsZWN0aW9ucz86IHtcbiAgICAgIGl0ZW1zOiBzdHJpbmdbXTtcbiAgICAgIGRlZmF1bHQ6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICAvKipcbiAgICogT3V0cHV0cyBtYW51YWxseSBzcGVjaWZpZWQgYnkgZGV2ZWxvcGVycyBmb3IgdXNlIHdpdGggZnJvbnRlbmQgbGlicmFyeVxuICAgKi9cbiAgbm90aWZpY2F0aW9ucz86IHtcbiAgICBhd3NfcmVnaW9uOiBBd3NSZWdpb247XG4gICAgYW1hem9uX3BpbnBvaW50X2FwcF9pZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBtaW5JdGVtcyAxXG4gICAgICovXG4gICAgY2hhbm5lbHM6IEFtYXpvblBpbnBvaW50Q2hhbm5lbHNbXTtcbiAgfTtcbiAgLyoqXG4gICAqIE91dHB1dHMgZ2VuZXJhdGVkIGZyb20gZGVmaW5lU3RvcmFnZVxuICAgKi9cbiAgc3RvcmFnZT86IHtcbiAgICBhd3NfcmVnaW9uOiBBd3NSZWdpb247XG4gICAgYnVja2V0X25hbWU6IHN0cmluZztcbiAgfTtcbiAgLyoqXG4gICAqIE91dHB1dHMgZ2VuZXJhdGVkIGZyb20gYmFja2VuZC5hZGRPdXRwdXQoeyBjdXN0b206IDxjb25maWc+IH0pXG4gICAqL1xuICBjdXN0b20/OiB7XG4gICAgW2s6IHN0cmluZ106IHVua25vd247XG4gIH07XG59XG4vKipcbiAqIFRoaXMgaW50ZXJmYWNlIHdhcyByZWZlcmVuY2VkIGJ5IGB1bmRlZmluZWRgJ3MgSlNPTi1TY2hlbWEgZGVmaW5pdGlvblxuICogdmlhIHRoZSBgcGF0dGVyblByb3BlcnR5YCBcIi4qXCIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQW1hem9uTG9jYXRpb25TZXJ2aWNlQ29uZmlnIHtcbiAgLyoqXG4gICAqIE1hcCByZXNvdXJjZSBuYW1lXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogTWFwIHN0eWxlXG4gICAqL1xuICBzdHlsZT86IHN0cmluZztcbn1cbiJdfQ==