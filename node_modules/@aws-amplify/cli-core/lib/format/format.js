import * as os from 'node:os';
import { blue, bold, cyan, dim, green, grey, red, underline, } from 'kleur/colors';
import { AmplifyFault } from '@aws-amplify/platform-core';
import { getPackageManagerRunnerName } from '../package-manager-controller/get_package_manager_name.js';
/**
 * Formats various inputs into single string.
 */
export class Format {
    packageManagerRunnerName;
    /**
     * Initialize with a package manager runner name. Defaults to attempting to load a value derived from environment variables.
     */
    constructor(packageManagerRunnerName = getPackageManagerRunnerName()) {
        this.packageManagerRunnerName = packageManagerRunnerName;
    }
    normalizeAmpxCommand = (command) => {
        if (command.length === 0) {
            throw new AmplifyFault('InvalidFormatFault', {
                message: 'The command must be non-empty',
            });
        }
        return cyan(`${this.packageManagerRunnerName} ampx ${command}`);
    };
    error = (error) => {
        if (error instanceof Error) {
            const message = red(`${error.name}: ${error.message}`);
            if (error.cause) {
                return message + os.EOL + this.error(error.cause);
            }
            return message;
        }
        else if (typeof error === 'string') {
            return red(error);
        }
        try {
            return red(JSON.stringify(error, null, 2));
        }
        catch (e) {
            return red('Unknown error') + os.EOL + this.error(e);
        }
    };
    note = (message) => grey(message);
    command = (command) => cyan(command);
    highlight = (command) => cyan(command);
    success = (message) => green(message);
    sectionHeader = (header) => bold(blue(header));
    bold = (message) => bold(message);
    dim = (message) => dim(message);
    link = (link) => underline(blue(link));
    list = (lines) => lines.map((line) => ` - ${line}`).join(os.EOL);
    indent = (message) => {
        if (message === '') {
            throw new Error('Message cannot be empty');
        }
        const spaces = '  '; // Two spaces for indentation
        return message
            .split(os.EOL)
            .map((line) => `${spaces}${line}`)
            .join(os.EOL);
    };
    record = (record) => Object.entries(record)
        .map(([key, value]) => `${key}: ${String(value)}`)
        .join(os.EOL);
}
export const format = new Format();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zvcm1hdC9mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDOUIsT0FBTyxFQUNMLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLEdBQUcsRUFDSCxLQUFLLEVBQ0wsSUFBSSxFQUNKLEdBQUcsRUFDSCxTQUFTLEdBQ1YsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBRXhHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLE1BQU07SUFLRTtJQUpuQjs7T0FFRztJQUNILFlBQ21CLDJCQUEyQiwyQkFBMkIsRUFBRTtRQUF4RCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQWdDO0lBQ3hFLENBQUM7SUFDSixvQkFBb0IsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO1FBQ3pDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLFlBQVksQ0FBQyxvQkFBb0IsRUFBRTtnQkFDM0MsT0FBTyxFQUFFLCtCQUErQjthQUN6QyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixTQUFTLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDO0lBQ0YsS0FBSyxHQUFHLENBQUMsS0FBK0IsRUFBVSxFQUFFO1FBQ2xELElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtZQUMxQixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBRXZELElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtnQkFDZixPQUFPLE9BQU8sR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25EO1lBQ0QsT0FBTyxPQUFPLENBQUM7U0FDaEI7YUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUNwQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQjtRQUNELElBQUk7WUFDRixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1QztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsT0FBTyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0MsU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsT0FBTyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsYUFBYSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDdkQsSUFBSSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsR0FBRyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEMsSUFBSSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0MsSUFBSSxHQUFHLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FDekIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekQsTUFBTSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7UUFDM0IsSUFBSSxPQUFPLEtBQUssRUFBRSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM1QztRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLDZCQUE2QjtRQUNsRCxPQUFPLE9BQU87YUFDWCxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUNiLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUM7YUFDakMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUM7SUFDRixNQUFNLEdBQUcsQ0FBQyxNQUE4QyxFQUFFLEVBQUUsQ0FDMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7U0FDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1NBQ2pELElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbkI7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9zIGZyb20gJ25vZGU6b3MnO1xuaW1wb3J0IHtcbiAgYmx1ZSxcbiAgYm9sZCxcbiAgY3lhbixcbiAgZGltLFxuICBncmVlbixcbiAgZ3JleSxcbiAgcmVkLFxuICB1bmRlcmxpbmUsXG59IGZyb20gJ2tsZXVyL2NvbG9ycyc7XG5pbXBvcnQgeyBBbXBsaWZ5RmF1bHQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBnZXRQYWNrYWdlTWFuYWdlclJ1bm5lck5hbWUgfSBmcm9tICcuLi9wYWNrYWdlLW1hbmFnZXItY29udHJvbGxlci9nZXRfcGFja2FnZV9tYW5hZ2VyX25hbWUuanMnO1xuXG4vKipcbiAqIEZvcm1hdHMgdmFyaW91cyBpbnB1dHMgaW50byBzaW5nbGUgc3RyaW5nLlxuICovXG5leHBvcnQgY2xhc3MgRm9ybWF0IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCBhIHBhY2thZ2UgbWFuYWdlciBydW5uZXIgbmFtZS4gRGVmYXVsdHMgdG8gYXR0ZW1wdGluZyB0byBsb2FkIGEgdmFsdWUgZGVyaXZlZCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFja2FnZU1hbmFnZXJSdW5uZXJOYW1lID0gZ2V0UGFja2FnZU1hbmFnZXJSdW5uZXJOYW1lKClcbiAgKSB7fVxuICBub3JtYWxpemVBbXB4Q29tbWFuZCA9IChjb21tYW5kOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoY29tbWFuZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0ludmFsaWRGb3JtYXRGYXVsdCcsIHtcbiAgICAgICAgbWVzc2FnZTogJ1RoZSBjb21tYW5kIG11c3QgYmUgbm9uLWVtcHR5JyxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY3lhbihgJHt0aGlzLnBhY2thZ2VNYW5hZ2VyUnVubmVyTmFtZX0gYW1weCAke2NvbW1hbmR9YCk7XG4gIH07XG4gIGVycm9yID0gKGVycm9yOiBzdHJpbmcgfCBFcnJvciB8IHVua25vd24pOiBzdHJpbmcgPT4ge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gcmVkKGAke2Vycm9yLm5hbWV9OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgIGlmIChlcnJvci5jYXVzZSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZSArIG9zLkVPTCArIHRoaXMuZXJyb3IoZXJyb3IuY2F1c2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcmVkKGVycm9yKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiByZWQoSlNPTi5zdHJpbmdpZnkoZXJyb3IsIG51bGwsIDIpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gcmVkKCdVbmtub3duIGVycm9yJykgKyBvcy5FT0wgKyB0aGlzLmVycm9yKGUpO1xuICAgIH1cbiAgfTtcbiAgbm90ZSA9IChtZXNzYWdlOiBzdHJpbmcpID0+IGdyZXkobWVzc2FnZSk7XG4gIGNvbW1hbmQgPSAoY29tbWFuZDogc3RyaW5nKSA9PiBjeWFuKGNvbW1hbmQpO1xuICBoaWdobGlnaHQgPSAoY29tbWFuZDogc3RyaW5nKSA9PiBjeWFuKGNvbW1hbmQpO1xuICBzdWNjZXNzID0gKG1lc3NhZ2U6IHN0cmluZykgPT4gZ3JlZW4obWVzc2FnZSk7XG4gIHNlY3Rpb25IZWFkZXIgPSAoaGVhZGVyOiBzdHJpbmcpID0+IGJvbGQoYmx1ZShoZWFkZXIpKTtcbiAgYm9sZCA9IChtZXNzYWdlOiBzdHJpbmcpID0+IGJvbGQobWVzc2FnZSk7XG4gIGRpbSA9IChtZXNzYWdlOiBzdHJpbmcpID0+IGRpbShtZXNzYWdlKTtcbiAgbGluayA9IChsaW5rOiBzdHJpbmcpID0+IHVuZGVybGluZShibHVlKGxpbmspKTtcbiAgbGlzdCA9IChsaW5lczogc3RyaW5nW10pID0+XG4gICAgbGluZXMubWFwKChsaW5lOiBzdHJpbmcpID0+IGAgLSAke2xpbmV9YCkuam9pbihvcy5FT0wpO1xuICBpbmRlbnQgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKG1lc3NhZ2UgPT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lc3NhZ2UgY2Fubm90IGJlIGVtcHR5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHNwYWNlcyA9ICcgICc7IC8vIFR3byBzcGFjZXMgZm9yIGluZGVudGF0aW9uXG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgICAgIC5zcGxpdChvcy5FT0wpXG4gICAgICAubWFwKChsaW5lKSA9PiBgJHtzcGFjZXN9JHtsaW5lfWApXG4gICAgICAuam9pbihvcy5FT0wpO1xuICB9O1xuICByZWNvcmQgPSAocmVjb3JkOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBEYXRlPikgPT5cbiAgICBPYmplY3QuZW50cmllcyhyZWNvcmQpXG4gICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IGAke2tleX06ICR7U3RyaW5nKHZhbHVlKX1gKVxuICAgICAgLmpvaW4ob3MuRU9MKTtcbn1cblxuZXhwb3J0IGNvbnN0IGZvcm1hdCA9IG5ldyBGb3JtYXQoKTtcbiJdfQ==