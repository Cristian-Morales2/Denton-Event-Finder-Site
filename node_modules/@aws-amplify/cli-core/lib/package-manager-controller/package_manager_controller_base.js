import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { LogLevel } from '../printer/printer.js';
import { printer } from '../printer.js';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { getPackageManagerRunnerName } from './get_package_manager_name.js';
/**
 * PackageManagerController is an abstraction around package manager commands that are needed to initialize a project and install dependencies
 */
export class PackageManagerControllerBase {
    cwd;
    executable;
    initDefault;
    installCommand;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    binaryRunner;
    /**
     * constructor - sets the project root
     */
    constructor(cwd, executable, initDefault, installCommand, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        this.cwd = cwd;
        this.executable = executable;
        this.initDefault = initDefault;
        this.installCommand = installCommand;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
        this.binaryRunner = getPackageManagerRunnerName();
    }
    /**
     * installDependencies - installs dependencies in the project root
     */
    async installDependencies(packageNames, type) {
        const args = [`${this.installCommand}`].concat(...packageNames);
        if (type === 'dev') {
            args.push('-D');
        }
        await this.executeWithDebugLogger(this.cwd, this.executable, args, this.execa);
    }
    /**
     * initializeProject - initializes a project in the project root by checking the package.json file
     */
    initializeProject = async () => {
        if (this.packageJsonExists(this.cwd)) {
            // if package.json already exists, no need to do anything
            return;
        }
        printer.log(`No package.json file found in the current directory. Running \`${this.executable} init\`...`, LogLevel.DEBUG);
        try {
            await this.executeWithDebugLogger(this.cwd, this.executable, this.initDefault, this.execa);
        }
        catch {
            throw new Error(`\`${this.executable} init\` did not exit successfully. Initialize a valid JavaScript package before continuing.`);
        }
        if (!this.packageJsonExists(this.cwd)) {
            // this should only happen if the customer exits out of npm init before finishing
            throw new Error(`package.json does not exist after running \`${this.executable} init\`. Initialize a valid JavaScript package before continuing.'`);
        }
    };
    /**
     * initializeTsConfig - initializes a tsconfig.json file in the project root
     *
     * When changing this method, double check if a corresponding change is needed in the integration test setup in `setup_dir_as_esm_module.ts`.
     */
    async initializeTsConfig(targetDir) {
        const tsConfigTemplate = {
            compilerOptions: {
                target: 'es2022',
                module: 'es2022',
                moduleResolution: 'bundler',
                resolveJsonModule: true,
                esModuleInterop: true,
                forceConsistentCasingInFileNames: true,
                strict: true,
                skipLibCheck: true,
                // The path here is coupled with backend-function's generated typedef file path
                paths: { '$amplify/*': ['../.amplify/generated/*'] },
            },
        };
        const tsConfigPath = this.path.resolve(targetDir, 'tsconfig.json');
        await this.fsp.writeFile(tsConfigPath, JSON.stringify(tsConfigTemplate, null, 2), 'utf-8');
    }
    /**
     * runWithPackageManager - Factory function that runs a command with the specified package manager's binary runner
     */
    runWithPackageManager(args = [], dir, options) {
        return this.executeWithDebugLogger(dir, this.binaryRunner, args, this.execa, options);
    }
    getCommand = (args) => `${this.binaryRunner} ${args.join(' ')}`;
    /**
     * Check if a package.json file exists in projectRoot
     */
    packageJsonExists = (projectRoot) => {
        return this.existsSync(this.path.resolve(projectRoot, 'package.json'));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXJfYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWNrYWdlLW1hbmFnZXItY29udHJvbGxlci9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlcl9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLElBQUksV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQy9DLE9BQU8sSUFBSSxNQUFNLGFBQWEsQ0FBQztBQUMvQixPQUFPLEVBQXdDLEtBQUssSUFBSSxNQUFNLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDOUUsT0FBTyxLQUFLLEtBQUssTUFBTSxNQUFNLENBQUM7QUFFOUIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFFLHNCQUFzQixJQUFJLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdEcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFNUU7O0dBRUc7QUFDSCxNQUFNLE9BQWdCLDRCQUE0QjtJQVEzQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFiRixZQUFZLENBQVM7SUFDeEM7O09BRUc7SUFDSCxZQUNxQixHQUFXLEVBQ1gsVUFBa0IsRUFDbEIsV0FBcUIsRUFDckIsY0FBc0IsRUFDdEIsTUFBTSxJQUFJLEVBQ1YsT0FBTyxLQUFLLEVBQ1osUUFBUSxNQUFNLEVBQ2QseUJBQXlCLHVCQUF1QixFQUNoRCxhQUFhLFdBQVc7UUFSeEIsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsZ0JBQVcsR0FBWCxXQUFXLENBQVU7UUFDckIsbUJBQWMsR0FBZCxjQUFjLENBQVE7UUFDdEIsUUFBRyxHQUFILEdBQUcsQ0FBTztRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBQ2QsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEwQjtRQUNoRCxlQUFVLEdBQVYsVUFBVSxDQUFjO1FBRTNDLElBQUksQ0FBQyxZQUFZLEdBQUcsMkJBQTJCLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsbUJBQW1CLENBQ3ZCLFlBQXNCLEVBQ3RCLElBQW9CO1FBRXBCLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztRQUNoRSxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQjtRQUVELE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUMvQixJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxFQUNKLElBQUksQ0FBQyxLQUFLLENBQ1gsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixHQUFHLEtBQUssSUFBSSxFQUFFO1FBQzdCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyx5REFBeUQ7WUFDekQsT0FBTztTQUNSO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FDVCxrRUFBa0UsSUFBSSxDQUFDLFVBQVUsWUFBWSxFQUM3RixRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7UUFFRixJQUFJO1lBQ0YsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQy9CLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsS0FBSyxDQUNYLENBQUM7U0FDSDtRQUFDLE1BQU07WUFDTixNQUFNLElBQUksS0FBSyxDQUNiLEtBQUssSUFBSSxDQUFDLFVBQVUsNkZBQTZGLENBQ2xILENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLGlGQUFpRjtZQUNqRixNQUFNLElBQUksS0FBSyxDQUNiLCtDQUErQyxJQUFJLENBQUMsVUFBVSxvRUFBb0UsQ0FDbkksQ0FBQztTQUNIO0lBQ0gsQ0FBQyxDQUFDO0lBRUY7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxTQUFpQjtRQUN4QyxNQUFNLGdCQUFnQixHQUFHO1lBQ3ZCLGVBQWUsRUFBRTtnQkFDZixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLGdCQUFnQixFQUFFLFNBQVM7Z0JBQzNCLGlCQUFpQixFQUFFLElBQUk7Z0JBQ3ZCLGVBQWUsRUFBRSxJQUFJO2dCQUNyQixnQ0FBZ0MsRUFBRSxJQUFJO2dCQUN0QyxNQUFNLEVBQUUsSUFBSTtnQkFDWixZQUFZLEVBQUUsSUFBSTtnQkFDbEIsK0VBQStFO2dCQUMvRSxLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFO2FBQ3JEO1NBQ0YsQ0FBQztRQUNGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNuRSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUN0QixZQUFZLEVBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQ3pDLE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gscUJBQXFCLENBQ25CLE9BQWlCLEVBQUUsRUFDbkIsR0FBVyxFQUNYLE9BQXlCO1FBRXpCLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUNoQyxHQUFHLEVBQ0gsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxFQUNKLElBQUksQ0FBQyxLQUFLLEVBQ1YsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVSxHQUFHLENBQUMsSUFBYyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBRTFFOztPQUVHO0lBQ0ssaUJBQWlCLEdBQUcsQ0FBQyxXQUFtQixFQUFXLEVBQUU7UUFDM0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzU3luYyBhcyBfZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCBfZnNwIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IHR5cGUgRXhlY2FDaGlsZFByb2Nlc3MsIHR5cGUgT3B0aW9ucywgZXhlY2EgYXMgX2V4ZWNhIH0gZnJvbSAnZXhlY2EnO1xuaW1wb3J0ICogYXMgX3BhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyB0eXBlIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcuLi9wcmludGVyL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJy4uL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciBhcyBfZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciB9IGZyb20gJy4vZXhlY3V0ZV93aXRoX2RlYnVnZ2VyX2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBnZXRQYWNrYWdlTWFuYWdlclJ1bm5lck5hbWUgfSBmcm9tICcuL2dldF9wYWNrYWdlX21hbmFnZXJfbmFtZS5qcyc7XG5cbi8qKlxuICogUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIGlzIGFuIGFic3RyYWN0aW9uIGFyb3VuZCBwYWNrYWdlIG1hbmFnZXIgY29tbWFuZHMgdGhhdCBhcmUgbmVlZGVkIHRvIGluaXRpYWxpemUgYSBwcm9qZWN0IGFuZCBpbnN0YWxsIGRlcGVuZGVuY2llc1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyQmFzZVxuICBpbXBsZW1lbnRzIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlclxue1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYmluYXJ5UnVubmVyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBjb25zdHJ1Y3RvciAtIHNldHMgdGhlIHByb2plY3Qgcm9vdFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGN3ZDogc3RyaW5nLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGVjdXRhYmxlOiBzdHJpbmcsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGluaXREZWZhdWx0OiBzdHJpbmdbXSxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaW5zdGFsbENvbW1hbmQ6IHN0cmluZyxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZnNwID0gX2ZzcCxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGF0aCA9IF9wYXRoLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGVjYSA9IF9leGVjYSxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciA9IF9leGVjdXRlV2l0aERlYnVnTG9nZ2VyLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGlzdHNTeW5jID0gX2V4aXN0c1N5bmNcbiAgKSB7XG4gICAgdGhpcy5iaW5hcnlSdW5uZXIgPSBnZXRQYWNrYWdlTWFuYWdlclJ1bm5lck5hbWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBpbnN0YWxsRGVwZW5kZW5jaWVzIC0gaW5zdGFsbHMgZGVwZW5kZW5jaWVzIGluIHRoZSBwcm9qZWN0IHJvb3RcbiAgICovXG4gIGFzeW5jIGluc3RhbGxEZXBlbmRlbmNpZXMoXG4gICAgcGFja2FnZU5hbWVzOiBzdHJpbmdbXSxcbiAgICB0eXBlOiAnZGV2JyB8ICdwcm9kJ1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBhcmdzID0gW2Ake3RoaXMuaW5zdGFsbENvbW1hbmR9YF0uY29uY2F0KC4uLnBhY2thZ2VOYW1lcyk7XG4gICAgaWYgKHR5cGUgPT09ICdkZXYnKSB7XG4gICAgICBhcmdzLnB1c2goJy1EJyk7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aERlYnVnTG9nZ2VyKFxuICAgICAgdGhpcy5jd2QsXG4gICAgICB0aGlzLmV4ZWN1dGFibGUsXG4gICAgICBhcmdzLFxuICAgICAgdGhpcy5leGVjYVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogaW5pdGlhbGl6ZVByb2plY3QgLSBpbml0aWFsaXplcyBhIHByb2plY3QgaW4gdGhlIHByb2plY3Qgcm9vdCBieSBjaGVja2luZyB0aGUgcGFja2FnZS5qc29uIGZpbGVcbiAgICovXG4gIGluaXRpYWxpemVQcm9qZWN0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICh0aGlzLnBhY2thZ2VKc29uRXhpc3RzKHRoaXMuY3dkKSkge1xuICAgICAgLy8gaWYgcGFja2FnZS5qc29uIGFscmVhZHkgZXhpc3RzLCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJpbnRlci5sb2coXG4gICAgICBgTm8gcGFja2FnZS5qc29uIGZpbGUgZm91bmQgaW4gdGhlIGN1cnJlbnQgZGlyZWN0b3J5LiBSdW5uaW5nIFxcYCR7dGhpcy5leGVjdXRhYmxlfSBpbml0XFxgLi4uYCxcbiAgICAgIExvZ0xldmVsLkRFQlVHXG4gICAgKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRoRGVidWdMb2dnZXIoXG4gICAgICAgIHRoaXMuY3dkLFxuICAgICAgICB0aGlzLmV4ZWN1dGFibGUsXG4gICAgICAgIHRoaXMuaW5pdERlZmF1bHQsXG4gICAgICAgIHRoaXMuZXhlY2FcbiAgICAgICk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBcXGAke3RoaXMuZXhlY3V0YWJsZX0gaW5pdFxcYCBkaWQgbm90IGV4aXQgc3VjY2Vzc2Z1bGx5LiBJbml0aWFsaXplIGEgdmFsaWQgSmF2YVNjcmlwdCBwYWNrYWdlIGJlZm9yZSBjb250aW51aW5nLmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnBhY2thZ2VKc29uRXhpc3RzKHRoaXMuY3dkKSkge1xuICAgICAgLy8gdGhpcyBzaG91bGQgb25seSBoYXBwZW4gaWYgdGhlIGN1c3RvbWVyIGV4aXRzIG91dCBvZiBucG0gaW5pdCBiZWZvcmUgZmluaXNoaW5nXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBwYWNrYWdlLmpzb24gZG9lcyBub3QgZXhpc3QgYWZ0ZXIgcnVubmluZyBcXGAke3RoaXMuZXhlY3V0YWJsZX0gaW5pdFxcYC4gSW5pdGlhbGl6ZSBhIHZhbGlkIEphdmFTY3JpcHQgcGFja2FnZSBiZWZvcmUgY29udGludWluZy4nYFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIGluaXRpYWxpemVUc0NvbmZpZyAtIGluaXRpYWxpemVzIGEgdHNjb25maWcuanNvbiBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3RcbiAgICpcbiAgICogV2hlbiBjaGFuZ2luZyB0aGlzIG1ldGhvZCwgZG91YmxlIGNoZWNrIGlmIGEgY29ycmVzcG9uZGluZyBjaGFuZ2UgaXMgbmVlZGVkIGluIHRoZSBpbnRlZ3JhdGlvbiB0ZXN0IHNldHVwIGluIGBzZXR1cF9kaXJfYXNfZXNtX21vZHVsZS50c2AuXG4gICAqL1xuICBhc3luYyBpbml0aWFsaXplVHNDb25maWcodGFyZ2V0RGlyOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0c0NvbmZpZ1RlbXBsYXRlID0ge1xuICAgICAgY29tcGlsZXJPcHRpb25zOiB7XG4gICAgICAgIHRhcmdldDogJ2VzMjAyMicsXG4gICAgICAgIG1vZHVsZTogJ2VzMjAyMicsXG4gICAgICAgIG1vZHVsZVJlc29sdXRpb246ICdidW5kbGVyJyxcbiAgICAgICAgcmVzb2x2ZUpzb25Nb2R1bGU6IHRydWUsXG4gICAgICAgIGVzTW9kdWxlSW50ZXJvcDogdHJ1ZSxcbiAgICAgICAgZm9yY2VDb25zaXN0ZW50Q2FzaW5nSW5GaWxlTmFtZXM6IHRydWUsXG4gICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgc2tpcExpYkNoZWNrOiB0cnVlLFxuICAgICAgICAvLyBUaGUgcGF0aCBoZXJlIGlzIGNvdXBsZWQgd2l0aCBiYWNrZW5kLWZ1bmN0aW9uJ3MgZ2VuZXJhdGVkIHR5cGVkZWYgZmlsZSBwYXRoXG4gICAgICAgIHBhdGhzOiB7ICckYW1wbGlmeS8qJzogWycuLi8uYW1wbGlmeS9nZW5lcmF0ZWQvKiddIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgdHNDb25maWdQYXRoID0gdGhpcy5wYXRoLnJlc29sdmUodGFyZ2V0RGlyLCAndHNjb25maWcuanNvbicpO1xuICAgIGF3YWl0IHRoaXMuZnNwLndyaXRlRmlsZShcbiAgICAgIHRzQ29uZmlnUGF0aCxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHRzQ29uZmlnVGVtcGxhdGUsIG51bGwsIDIpLFxuICAgICAgJ3V0Zi04J1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogcnVuV2l0aFBhY2thZ2VNYW5hZ2VyIC0gRmFjdG9yeSBmdW5jdGlvbiB0aGF0IHJ1bnMgYSBjb21tYW5kIHdpdGggdGhlIHNwZWNpZmllZCBwYWNrYWdlIG1hbmFnZXIncyBiaW5hcnkgcnVubmVyXG4gICAqL1xuICBydW5XaXRoUGFja2FnZU1hbmFnZXIoXG4gICAgYXJnczogc3RyaW5nW10gPSBbXSxcbiAgICBkaXI6IHN0cmluZyxcbiAgICBvcHRpb25zPzogT3B0aW9uczwndXRmOCc+XG4gICk6IEV4ZWNhQ2hpbGRQcm9jZXNzIHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlV2l0aERlYnVnTG9nZ2VyKFxuICAgICAgZGlyLFxuICAgICAgdGhpcy5iaW5hcnlSdW5uZXIsXG4gICAgICBhcmdzLFxuICAgICAgdGhpcy5leGVjYSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG5cbiAgZ2V0Q29tbWFuZCA9IChhcmdzOiBzdHJpbmdbXSkgPT4gYCR7dGhpcy5iaW5hcnlSdW5uZXJ9ICR7YXJncy5qb2luKCcgJyl9YDtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBwYWNrYWdlLmpzb24gZmlsZSBleGlzdHMgaW4gcHJvamVjdFJvb3RcbiAgICovXG4gIHByaXZhdGUgcGFja2FnZUpzb25FeGlzdHMgPSAocHJvamVjdFJvb3Q6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiB0aGlzLmV4aXN0c1N5bmModGhpcy5wYXRoLnJlc29sdmUocHJvamVjdFJvb3QsICdwYWNrYWdlLmpzb24nKSk7XG4gIH07XG59XG4iXX0=